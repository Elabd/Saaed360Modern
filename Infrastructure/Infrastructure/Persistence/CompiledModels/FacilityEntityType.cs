// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class FacilityEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Facility",
                typeof(Facility),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 4,
                foreignKeyCount: 4,
                unnamedIndexCount: 3,
                keyCount: 1);

            var organizationId = runtimeEntityType.AddProperty(
                "OrganizationId",
                typeof(long),
                propertyInfo: typeof(Facility).GetProperty("OrganizationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("<OrganizationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            organizationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityCapacity = runtimeEntityType.AddProperty(
                "FacilityCapacity",
                typeof(int),
                propertyInfo: typeof(Facility).GetProperty("FacilityCapacity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("<FacilityCapacity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            facilityCapacity.AddAnnotation("Relational:DefaultValue", 1);
            facilityCapacity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityCategoryId = runtimeEntityType.AddProperty(
                "FacilityCategoryId",
                typeof(int),
                propertyInfo: typeof(Facility).GetProperty("FacilityCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("<FacilityCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            facilityCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityCommercialIndicator = runtimeEntityType.AddProperty(
                "FacilityCommercialIndicator",
                typeof(bool),
                propertyInfo: typeof(Facility).GetProperty("FacilityCommercialIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("<FacilityCommercialIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            facilityCommercialIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityJuvenileIndicator = runtimeEntityType.AddProperty(
                "FacilityJuvenileIndicator",
                typeof(bool),
                propertyInfo: typeof(Facility).GetProperty("FacilityJuvenileIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("<FacilityJuvenileIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            facilityJuvenileIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilityMemberCategoryId = runtimeEntityType.AddProperty(
                "FacilityMemberCategoryId",
                typeof(int),
                propertyInfo: typeof(Facility).GetProperty("FacilityMemberCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("<FacilityMemberCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            facilityMemberCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var facilitySecurityLevelId = runtimeEntityType.AddProperty(
                "FacilitySecurityLevelId",
                typeof(int),
                propertyInfo: typeof(Facility).GetProperty("FacilitySecurityLevelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("<FacilitySecurityLevelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            facilitySecurityLevelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { organizationId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { facilityCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { facilityMemberCategoryId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { facilitySecurityLevelId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FacilityCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityCategoryId") }),
                principalEntityType,
                required: true);

            var facilityCategory = declaringEntityType.AddNavigation("FacilityCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityCategoryDim),
                propertyInfo: typeof(Facility).GetProperty("FacilityCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("<FacilityCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var facilities = principalEntityType.AddNavigation("Facilities",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Facility>),
                propertyInfo: typeof(FacilityCategoryDim).GetProperty("Facilities", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityCategoryDim).GetField("<Facilities>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Facility_FacilityCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FacilityMemberCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilityMemberCategoryId") }),
                principalEntityType,
                required: true);

            var facilityMemberCategory = declaringEntityType.AddNavigation("FacilityMemberCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilityMemberCategoryDim),
                propertyInfo: typeof(Facility).GetProperty("FacilityMemberCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("<FacilityMemberCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var facilities = principalEntityType.AddNavigation("Facilities",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Facility>),
                propertyInfo: typeof(FacilityMemberCategoryDim).GetProperty("Facilities", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilityMemberCategoryDim).GetField("<Facilities>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Facility_FacilityMemberCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FacilitySecurityLevelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FacilitySecurityLevelId") }),
                principalEntityType,
                required: true);

            var facilitySecurityLevel = declaringEntityType.AddNavigation("FacilitySecurityLevel",
                runtimeForeignKey,
                onDependent: true,
                typeof(FacilitySecurityLevelDim),
                propertyInfo: typeof(Facility).GetProperty("FacilitySecurityLevel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("<FacilitySecurityLevel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var facilities = principalEntityType.AddNavigation("Facilities",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Facility>),
                propertyInfo: typeof(FacilitySecurityLevelDim).GetProperty("Facilities", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FacilitySecurityLevelDim).GetField("<Facilities>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Facility_FacilitySecurityLevelDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OrganizationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OrganizationId") }),
                principalEntityType,
                unique: true,
                required: true);

            var organization = declaringEntityType.AddNavigation("Organization",
                runtimeForeignKey,
                onDependent: true,
                typeof(Organization),
                propertyInfo: typeof(Facility).GetProperty("Organization", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Facility).GetField("<Organization>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var facility = principalEntityType.AddNavigation("Facility",
                runtimeForeignKey,
                onDependent: false,
                typeof(Facility),
                propertyInfo: typeof(Organization).GetProperty("Facility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Organization).GetField("<Facility>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Facility_Organization");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Facility");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
