// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class SaeedOlapreportsTableEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.SaeedOlapreportsTable",
                typeof(SaeedOlapreportsTable),
                baseEntityType,
                propertyCount: 14,
                navigationCount: 1,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var pkid = runtimeEntityType.AddProperty(
                "Pkid",
                typeof(int),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("Pkid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<Pkid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            pkid.AddAnnotation("Relational:ColumnName", "PKID");
            pkid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var filterRelations = runtimeEntityType.AddProperty(
                "FilterRelations",
                typeof(string),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("FilterRelations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<FilterRelations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            filterRelations.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fkReportTypeId = runtimeEntityType.AddProperty(
                "FkReportTypeId",
                typeof(int),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("FkReportTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<FkReportTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            fkReportTypeId.AddAnnotation("Relational:ColumnName", "Fk_ReportTypeId");
            fkReportTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var hasCrfilter = runtimeEntityType.AddProperty(
                "HasCrfilter",
                typeof(bool),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("HasCrfilter", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<HasCrfilter>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            hasCrfilter.AddAnnotation("Relational:ColumnName", "HasCRFilter");
            hasCrfilter.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var hasDateRangeFilter = runtimeEntityType.AddProperty(
                "HasDateRangeFilter",
                typeof(bool),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("HasDateRangeFilter", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<HasDateRangeFilter>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            hasDateRangeFilter.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var hasEmirateFilter = runtimeEntityType.AddProperty(
                "HasEmirateFilter",
                typeof(bool),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("HasEmirateFilter", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<HasEmirateFilter>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            hasEmirateFilter.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var hasSelectedDayFilter = runtimeEntityType.AddProperty(
                "HasSelectedDayFilter",
                typeof(bool),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("HasSelectedDayFilter", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<HasSelectedDayFilter>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            hasSelectedDayFilter.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var hasSelectedMonthFilter = runtimeEntityType.AddProperty(
                "HasSelectedMonthFilter",
                typeof(bool),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("HasSelectedMonthFilter", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<HasSelectedMonthFilter>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            hasSelectedMonthFilter.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var hasSelectedWeekFilter = runtimeEntityType.AddProperty(
                "HasSelectedWeekFilter",
                typeof(bool),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("HasSelectedWeekFilter", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<HasSelectedWeekFilter>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            hasSelectedWeekFilter.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var hasYearFilter = runtimeEntityType.AddProperty(
                "HasYearFilter",
                typeof(bool),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("HasYearFilter", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<HasYearFilter>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            hasYearFilter.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paramsNumber = runtimeEntityType.AddProperty(
                "ParamsNumber",
                typeof(int?),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("ParamsNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<ParamsNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paramsNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportDescription = runtimeEntityType.AddProperty(
                "ReportDescription",
                typeof(string),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("ReportDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<ReportDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 500);
            reportDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportName = runtimeEntityType.AddProperty(
                "ReportName",
                typeof(string),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("ReportName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<ReportName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 200);
            reportName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportPath = runtimeEntityType.AddProperty(
                "ReportPath",
                typeof(string),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("ReportPath", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<ReportPath>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 500);
            reportPath.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { pkid });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { fkReportTypeId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FkReportTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Pkid") }),
                principalEntityType,
                required: true);

            var fkReportType = declaringEntityType.AddNavigation("FkReportType",
                runtimeForeignKey,
                onDependent: true,
                typeof(SaeedOlapreportsType),
                propertyInfo: typeof(SaeedOlapreportsTable).GetProperty("FkReportType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsTable).GetField("<FkReportType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var saeedOlapreportsTables = principalEntityType.AddNavigation("SaeedOlapreportsTables",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SaeedOlapreportsTable>),
                propertyInfo: typeof(SaeedOlapreportsType).GetProperty("SaeedOlapreportsTables", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaeedOlapreportsType).GetField("<SaeedOlapreportsTables>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SaeedOLAPReportsTable_SaeedOLAPReportsTypes");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "SaeedOLAPReportsTable");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
