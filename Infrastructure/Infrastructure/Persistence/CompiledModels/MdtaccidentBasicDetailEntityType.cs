// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class MdtaccidentBasicDetailEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.MdtaccidentBasicDetail",
                typeof(MdtaccidentBasicDetail),
                baseEntityType,
                propertyCount: 29,
                navigationCount: 16,
                foreignKeyCount: 15,
                unnamedIndexCount: 15,
                keyCount: 1);

            var mdtaccidentBasicDetailsId = runtimeEntityType.AddProperty(
                "MdtaccidentBasicDetailsId",
                typeof(int),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("MdtaccidentBasicDetailsId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<MdtaccidentBasicDetailsId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            mdtaccidentBasicDetailsId.AddAnnotation("Relational:ColumnName", "MDTAccidentBasicDetailsId");
            mdtaccidentBasicDetailsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var accidentLocationDescriptionId = runtimeEntityType.AddProperty(
                "AccidentLocationDescriptionId",
                typeof(long?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("AccidentLocationDescriptionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<AccidentLocationDescriptionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentLocationDescriptionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accidentReasonComment = runtimeEntityType.AddProperty(
                "AccidentReasonComment",
                typeof(string),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("AccidentReasonComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<AccidentReasonComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentReasonComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accidentTypeComment = runtimeEntityType.AddProperty(
                "AccidentTypeComment",
                typeof(string),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("AccidentTypeComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<AccidentTypeComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentTypeComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accidentTypeId = runtimeEntityType.AddProperty(
                "AccidentTypeId",
                typeof(int?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("AccidentTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<AccidentTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cityId = runtimeEntityType.AddProperty(
                "CityId",
                typeof(long?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("CityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<CityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var collisionTypeId = runtimeEntityType.AddProperty(
                "CollisionTypeId",
                typeof(long?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("CollisionTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<CollisionTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            collisionTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<Comment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdDate = runtimeEntityType.AddProperty(
                "CreatedDate",
                typeof(DateTime?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("CreatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<CreatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            createdDate.AddAnnotation("Relational:ColumnType", "datetime");
            createdDate.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createdDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var crossingStreetId = runtimeEntityType.AddProperty(
                "CrossingStreetId",
                typeof(long?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("CrossingStreetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<CrossingStreetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            crossingStreetId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var easternCoOrdinate = runtimeEntityType.AddProperty(
                "EasternCoOrdinate",
                typeof(string),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("EasternCoOrdinate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<EasternCoOrdinate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            easternCoOrdinate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emiratesId = runtimeEntityType.AddProperty(
                "EmiratesId",
                typeof(long?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("EmiratesId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<EmiratesId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            emiratesId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intersectionComment = runtimeEntityType.AddProperty(
                "IntersectionComment",
                typeof(string),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("IntersectionComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<IntersectionComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intersectionComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intersectionId = runtimeEntityType.AddProperty(
                "IntersectionId",
                typeof(int?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("IntersectionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<IntersectionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intersectionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isDeleted.AddAnnotation("Relational:DefaultValue", false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isMonitoringWithCamera = runtimeEntityType.AddProperty(
                "IsMonitoringWithCamera",
                typeof(bool?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("IsMonitoringWithCamera", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<IsMonitoringWithCamera>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isMonitoringWithCamera.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var locationDescription = runtimeEntityType.AddProperty(
                "LocationDescription",
                typeof(string),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("LocationDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<LocationDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            locationDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDate = runtimeEntityType.AddProperty(
                "ModifiedDate",
                typeof(DateTime?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("ModifiedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<ModifiedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            modifiedDate.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDate.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            modifiedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var northernCoOrdinate = runtimeEntityType.AddProperty(
                "NorthernCoOrdinate",
                typeof(string),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("NorthernCoOrdinate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<NorthernCoOrdinate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            northernCoOrdinate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var regionId = runtimeEntityType.AddProperty(
                "RegionId",
                typeof(long?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("RegionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<RegionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            regionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportReconstructionWillBeContinued = runtimeEntityType.AddProperty(
                "ReportReconstructionWillBeContinued",
                typeof(bool?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("ReportReconstructionWillBeContinued", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<ReportReconstructionWillBeContinued>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            reportReconstructionWillBeContinued.AddAnnotation("Relational:DefaultValue", false);
            reportReconstructionWillBeContinued.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var roadSpeedId = runtimeEntityType.AddProperty(
                "RoadSpeedId",
                typeof(int?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("RoadSpeedId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<RoadSpeedId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            roadSpeedId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var roadSurfaceId = runtimeEntityType.AddProperty(
                "RoadSurfaceId",
                typeof(int?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("RoadSurfaceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<RoadSurfaceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            roadSurfaceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var scenarioId = runtimeEntityType.AddProperty(
                "ScenarioId",
                typeof(int?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("ScenarioId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<ScenarioId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            scenarioId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sectorId = runtimeEntityType.AddProperty(
                "SectorId",
                typeof(long?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("SectorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<SectorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            sectorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var streetId = runtimeEntityType.AddProperty(
                "StreetId",
                typeof(long?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("StreetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<StreetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            streetId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var timeStamp = runtimeEntityType.AddProperty(
                "TimeStamp",
                typeof(byte[]),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("TimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<TimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                concurrencyToken: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            timeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weatherId = runtimeEntityType.AddProperty(
                "WeatherId",
                typeof(int?),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("WeatherId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<WeatherId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            weatherId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { mdtaccidentBasicDetailsId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__MDTAccid__5C1D2444954EF239");

            var index = runtimeEntityType.AddIndex(
                new[] { accidentLocationDescriptionId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { accidentTypeId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { cityId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { collisionTypeId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { createdBy });

            var index4 = runtimeEntityType.AddIndex(
                new[] { crossingStreetId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { emiratesId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { intersectionId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { regionId });

            var index8 = runtimeEntityType.AddIndex(
                new[] { roadSpeedId });

            var index9 = runtimeEntityType.AddIndex(
                new[] { roadSurfaceId });

            var index10 = runtimeEntityType.AddIndex(
                new[] { scenarioId });

            var index11 = runtimeEntityType.AddIndex(
                new[] { sectorId });

            var index12 = runtimeEntityType.AddIndex(
                new[] { streetId });

            var index13 = runtimeEntityType.AddIndex(
                new[] { weatherId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("AccidentLocationDescriptionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("AccidentLocationDescriptionId") }),
                principalEntityType);

            var accidentLocationDescription = declaringEntityType.AddNavigation("AccidentLocationDescription",
                runtimeForeignKey,
                onDependent: true,
                typeof(AccidentLocationDescriptionDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("AccidentLocationDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<AccidentLocationDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(AccidentLocationDescriptionDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AccidentLocationDescriptionDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__MDTAccide__Accid__519EE6B3");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("AccidentTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("AccidentTypeId") }),
                principalEntityType);

            var accidentType = declaringEntityType.AddNavigation("AccidentType",
                runtimeForeignKey,
                onDependent: true,
                typeof(AccidentTypeDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("AccidentType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<AccidentType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(AccidentTypeDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AccidentTypeDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetails_AccidentTypeDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CityId") }),
                principalEntityType);

            var city = declaringEntityType.AddNavigation("City",
                runtimeForeignKey,
                onDependent: true,
                typeof(CityDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("City", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<City>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(CityDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CityDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetailsEmirates_CityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CollisionTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CollisionTypeId") }),
                principalEntityType);

            var collisionType = declaringEntityType.AddNavigation("CollisionType",
                runtimeForeignKey,
                onDependent: true,
                typeof(CollisionTypeDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("CollisionType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<CollisionType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(CollisionTypeDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CollisionTypeDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__MDTAccide__Colli__50AAC27A");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CreatedBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var createdByNavigation = declaringEntityType.AddNavigation("CreatedByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("CreatedByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<CreatedByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(Person).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetails_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CrossingStreetId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CrossStreetId") }),
                principalEntityType);

            var crossingStreet = declaringEntityType.AddNavigation("CrossingStreet",
                runtimeForeignKey,
                onDependent: true,
                typeof(CrossStreetDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("CrossingStreet", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<CrossingStreet>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(CrossStreetDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CrossStreetDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetailsEmirates_CrossStreetDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmiratesId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EmirateId") }),
                principalEntityType);

            var emirates = declaringEntityType.AddNavigation("Emirates",
                runtimeForeignKey,
                onDependent: true,
                typeof(EmirateDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("Emirates", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<Emirates>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(EmirateDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmirateDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetailsEmirates_EmirateDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IntersectionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IntersectionId") }),
                principalEntityType);

            var intersection = declaringEntityType.AddNavigation("Intersection",
                runtimeForeignKey,
                onDependent: true,
                typeof(IntersectionDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("Intersection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<Intersection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(IntersectionDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IntersectionDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetails_IntersectionDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RegionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("AreaId") }),
                principalEntityType);

            var region = declaringEntityType.AddNavigation("Region",
                runtimeForeignKey,
                onDependent: true,
                typeof(ReportAreaDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("Region", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<Region>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(ReportAreaDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportAreaDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetailsEmirates_ReportAreaDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RoadSpeedId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RoadSpeedId") }),
                principalEntityType);

            var roadSpeed = declaringEntityType.AddNavigation("RoadSpeed",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadSpeedDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("RoadSpeed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<RoadSpeed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(RoadSpeedDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadSpeedDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetails_RoadSpeedDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RoadSurfaceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RoadSurfaceId") }),
                principalEntityType);

            var roadSurface = declaringEntityType.AddNavigation("RoadSurface",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadSurfaceDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("RoadSurface", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<RoadSurface>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(RoadSurfaceDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadSurfaceDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetails_RoadSurfaceDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey12(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ScenarioId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ScenarioId") }),
                principalEntityType);

            var scenario = declaringEntityType.AddNavigation("Scenario",
                runtimeForeignKey,
                onDependent: true,
                typeof(ScenarioDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("Scenario", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<Scenario>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(ScenarioDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ScenarioDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetails_ScenarioDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey13(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SectorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SectorId") }),
                principalEntityType);

            var sector = declaringEntityType.AddNavigation("Sector",
                runtimeForeignKey,
                onDependent: true,
                typeof(SectorDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("Sector", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<Sector>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(SectorDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SectorDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetailsEmirates_SectorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey14(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("StreetId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("StreetId") }),
                principalEntityType);

            var street = declaringEntityType.AddNavigation("Street",
                runtimeForeignKey,
                onDependent: true,
                typeof(StreetDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("Street", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<Street>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(StreetDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(StreetDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetailsEmirates_StreetDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey15(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("WeatherId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("WeatherId") }),
                principalEntityType);

            var weather = declaringEntityType.AddNavigation("Weather",
                runtimeForeignKey,
                onDependent: true,
                typeof(WeatherDim),
                propertyInfo: typeof(MdtaccidentBasicDetail).GetProperty("Weather", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtaccidentBasicDetail).GetField("<Weather>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var mdtaccidentBasicDetails = principalEntityType.AddNavigation("MdtaccidentBasicDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MdtaccidentBasicDetail>),
                propertyInfo: typeof(WeatherDim).GetProperty("MdtaccidentBasicDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WeatherDim).GetField("<MdtaccidentBasicDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MDTAccidentBasicDetails_WeatherDim");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "MDTAccidentBasicDetails");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
