// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class QuestionnaireEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Questionnaire",
                typeof(Questionnaire),
                baseEntityType,
                propertyCount: 2,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 1,
                keyCount: 1);

            var documentId = runtimeEntityType.AddProperty(
                "DocumentId",
                typeof(long),
                propertyInfo: typeof(Questionnaire).GetProperty("DocumentId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Questionnaire).GetField("<DocumentId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            documentId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var questionnaireCategoryId = runtimeEntityType.AddProperty(
                "QuestionnaireCategoryId",
                typeof(int),
                propertyInfo: typeof(Questionnaire).GetProperty("QuestionnaireCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Questionnaire).GetField("<QuestionnaireCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            questionnaireCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            questionnaireCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { documentId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__Question__1ABEEF0FE69419DA");

            var index = runtimeEntityType.AddIndex(
                new[] { questionnaireCategoryId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DocumentId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DocumentId") }),
                principalEntityType,
                unique: true,
                required: true);

            var document = declaringEntityType.AddNavigation("Document",
                runtimeForeignKey,
                onDependent: true,
                typeof(Document),
                propertyInfo: typeof(Questionnaire).GetProperty("Document", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Questionnaire).GetField("<Document>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var questionnaire = principalEntityType.AddNavigation("Questionnaire",
                runtimeForeignKey,
                onDependent: false,
                typeof(Questionnaire),
                propertyInfo: typeof(Document).GetProperty("Questionnaire", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Document).GetField("<Questionnaire>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Questionnaire_Document");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("QuestionnaireCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("QuestionnaireCategoryId") }),
                principalEntityType,
                required: true);

            var questionnaireCategory = declaringEntityType.AddNavigation("QuestionnaireCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(QuestionnaireCategoryDim),
                propertyInfo: typeof(Questionnaire).GetProperty("QuestionnaireCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Questionnaire).GetField("<QuestionnaireCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var questionnaires = principalEntityType.AddNavigation("Questionnaires",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Questionnaire>),
                propertyInfo: typeof(QuestionnaireCategoryDim).GetProperty("Questionnaires", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(QuestionnaireCategoryDim).GetField("<Questionnaires>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Questionnaire_QuestionnaireCategoryDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Questionnaire");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
