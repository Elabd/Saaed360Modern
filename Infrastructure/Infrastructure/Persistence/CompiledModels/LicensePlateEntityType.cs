// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class LicensePlateEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.LicensePlate",
                typeof(LicensePlate),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 3,
                foreignKeyCount: 3,
                unnamedIndexCount: 2,
                keyCount: 1);

            var itemId = runtimeEntityType.AddProperty(
                "ItemId",
                typeof(long),
                propertyInfo: typeof(LicensePlate).GetProperty("ItemId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlate).GetField("<ItemId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            itemId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dateEntered = runtimeEntityType.AddProperty(
                "DateEntered",
                typeof(DateTime?),
                propertyInfo: typeof(LicensePlate).GetProperty("DateEntered", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlate).GetField("<DateEntered>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            dateEntered.AddAnnotation("Relational:ColumnType", "datetime");
            dateEntered.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dateOfTheft = runtimeEntityType.AddProperty(
                "DateOfTheft",
                typeof(DateTime?),
                propertyInfo: typeof(LicensePlate).GetProperty("DateOfTheft", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlate).GetField("<DateOfTheft>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            dateOfTheft.AddAnnotation("Relational:ColumnType", "datetime");
            dateOfTheft.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expireDate = runtimeEntityType.AddProperty(
                "ExpireDate",
                typeof(DateTime?),
                propertyInfo: typeof(LicensePlate).GetProperty("ExpireDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlate).GetField("<ExpireDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            expireDate.AddAnnotation("Relational:ColumnType", "datetime");
            expireDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licensePlateListSourceId = runtimeEntityType.AddProperty(
                "LicensePlateListSourceId",
                typeof(int?),
                propertyInfo: typeof(LicensePlate).GetProperty("LicensePlateListSourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlate).GetField("<LicensePlateListSourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            licensePlateListSourceId.AddAnnotation("Relational:DefaultValue", 1);
            licensePlateListSourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licensePlateListTypeId = runtimeEntityType.AddProperty(
                "LicensePlateListTypeId",
                typeof(int?),
                propertyInfo: typeof(LicensePlate).GetProperty("LicensePlateListTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlate).GetField("<LicensePlateListTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            licensePlateListTypeId.AddAnnotation("Relational:DefaultValue", 1);
            licensePlateListTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ncicnumber = runtimeEntityType.AddProperty(
                "Ncicnumber",
                typeof(string),
                propertyInfo: typeof(LicensePlate).GetProperty("Ncicnumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlate).GetField("<Ncicnumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            ncicnumber.AddAnnotation("Relational:ColumnName", "NCICNumber");
            ncicnumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { itemId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__LicenseP__727E838BB9EEF698");

            var index = runtimeEntityType.AddIndex(
                new[] { licensePlateListSourceId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { licensePlateListTypeId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemId") }),
                principalEntityType,
                unique: true,
                required: true);

            var item = declaringEntityType.AddNavigation("Item",
                runtimeForeignKey,
                onDependent: true,
                typeof(Item),
                propertyInfo: typeof(LicensePlate).GetProperty("Item", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlate).GetField("<Item>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var licensePlate = principalEntityType.AddNavigation("LicensePlate",
                runtimeForeignKey,
                onDependent: false,
                typeof(LicensePlate),
                propertyInfo: typeof(Item).GetProperty("LicensePlate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Item).GetField("<LicensePlate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_LicensePlate_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LicensePlateListSourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LicensePlateListSourceId") }),
                principalEntityType);

            var licensePlateListSource = declaringEntityType.AddNavigation("LicensePlateListSource",
                runtimeForeignKey,
                onDependent: true,
                typeof(LicensePlateListSourceDim),
                propertyInfo: typeof(LicensePlate).GetProperty("LicensePlateListSource", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlate).GetField("<LicensePlateListSource>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var licensePlates = principalEntityType.AddNavigation("LicensePlates",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<LicensePlate>),
                propertyInfo: typeof(LicensePlateListSourceDim).GetProperty("LicensePlates", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateListSourceDim).GetField("<LicensePlates>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_LicensePlate_LicensePlateListSourceDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LicensePlateListTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LicensePlateListTypeId") }),
                principalEntityType);

            var licensePlateListType = declaringEntityType.AddNavigation("LicensePlateListType",
                runtimeForeignKey,
                onDependent: true,
                typeof(LicensePlateListTypeDim),
                propertyInfo: typeof(LicensePlate).GetProperty("LicensePlateListType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlate).GetField("<LicensePlateListType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var licensePlates = principalEntityType.AddNavigation("LicensePlates",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<LicensePlate>),
                propertyInfo: typeof(LicensePlateListTypeDim).GetProperty("LicensePlates", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateListTypeDim).GetField("<LicensePlates>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_LicensePlate_LicensePlateListTypeDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "LicensePlate");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
