// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class MdtViewCheckUserLoginEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.MdtViewCheckUserLogin",
                typeof(MdtViewCheckUserLogin),
                baseEntityType,
                propertyCount: 11);

            var isLogoutOccurred = runtimeEntityType.AddProperty(
                "IsLogoutOccurred",
                typeof(int),
                propertyInfo: typeof(MdtViewCheckUserLogin).GetProperty("IsLogoutOccurred", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewCheckUserLogin).GetField("<IsLogoutOccurred>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            isLogoutOccurred.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isTempLoginRequired = runtimeEntityType.AddProperty(
                "IsTempLoginRequired",
                typeof(int),
                propertyInfo: typeof(MdtViewCheckUserLogin).GetProperty("IsTempLoginRequired", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewCheckUserLogin).GetField("<IsTempLoginRequired>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            isTempLoginRequired.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mainLoginDate = runtimeEntityType.AddProperty(
                "MainLoginDate",
                typeof(DateTime?),
                propertyInfo: typeof(MdtViewCheckUserLogin).GetProperty("MainLoginDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewCheckUserLogin).GetField("<MainLoginDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mainLoginDate.AddAnnotation("Relational:ColumnType", "datetime");
            mainLoginDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mainLoginId = runtimeEntityType.AddProperty(
                "MainLoginId",
                typeof(long),
                propertyInfo: typeof(MdtViewCheckUserLogin).GetProperty("MainLoginId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewCheckUserLogin).GetField("<MainLoginId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            mainLoginId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var patrolCode = runtimeEntityType.AddProperty(
                "PatrolCode",
                typeof(string),
                propertyInfo: typeof(MdtViewCheckUserLogin).GetProperty("PatrolCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewCheckUserLogin).GetField("<PatrolCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            patrolCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var patrolId = runtimeEntityType.AddProperty(
                "PatrolId",
                typeof(long),
                propertyInfo: typeof(MdtViewCheckUserLogin).GetProperty("PatrolId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewCheckUserLogin).GetField("<PatrolId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            patrolId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var teamId = runtimeEntityType.AddProperty(
                "TeamId",
                typeof(long),
                propertyInfo: typeof(MdtViewCheckUserLogin).GetProperty("TeamId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewCheckUserLogin).GetField("<TeamId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            teamId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tempLoginId = runtimeEntityType.AddProperty(
                "TempLoginId",
                typeof(long),
                propertyInfo: typeof(MdtViewCheckUserLogin).GetProperty("TempLoginId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewCheckUserLogin).GetField("<TempLoginId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            tempLoginId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tempLoginTime = runtimeEntityType.AddProperty(
                "TempLoginTime",
                typeof(DateTime?),
                propertyInfo: typeof(MdtViewCheckUserLogin).GetProperty("TempLoginTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewCheckUserLogin).GetField("<TempLoginTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            tempLoginTime.AddAnnotation("Relational:ColumnType", "datetime");
            tempLoginTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tempLogoutRequestAcceptDate = runtimeEntityType.AddProperty(
                "TempLogoutRequestAcceptDate",
                typeof(DateTime?),
                propertyInfo: typeof(MdtViewCheckUserLogin).GetProperty("TempLogoutRequestAcceptDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewCheckUserLogin).GetField("<TempLogoutRequestAcceptDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            tempLogoutRequestAcceptDate.AddAnnotation("Relational:ColumnType", "datetime");
            tempLogoutRequestAcceptDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tempLogoutRequestId = runtimeEntityType.AddProperty(
                "TempLogoutRequestId",
                typeof(long),
                propertyInfo: typeof(MdtViewCheckUserLogin).GetProperty("TempLogoutRequestId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewCheckUserLogin).GetField("<TempLogoutRequestId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            tempLogoutRequestId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "MdtViewCheckUserLogin");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
