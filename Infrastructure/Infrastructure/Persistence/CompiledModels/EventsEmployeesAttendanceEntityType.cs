// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EventsEmployeesAttendanceEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EventsEmployeesAttendance",
                typeof(EventsEmployeesAttendance),
                baseEntityType,
                propertyCount: 15,
                navigationCount: 7,
                foreignKeyCount: 6,
                unnamedIndexCount: 6,
                keyCount: 1);

            var eventsEmployeesAttandaceId = runtimeEntityType.AddProperty(
                "EventsEmployeesAttandaceId",
                typeof(long),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("EventsEmployeesAttandaceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<EventsEmployeesAttandaceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            eventsEmployeesAttandaceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var attandaceTypeId = runtimeEntityType.AddProperty(
                "AttandaceTypeId",
                typeof(long?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("AttandaceTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<AttandaceTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            attandaceTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdDate = runtimeEntityType.AddProperty(
                "CreatedDate",
                typeof(DateTime?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("CreatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<CreatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdDate.AddAnnotation("Relational:ColumnType", "datetime");
            createdDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var currentStatusId = runtimeEntityType.AddProperty(
                "CurrentStatusId",
                typeof(int?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("CurrentStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<CurrentStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            currentStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employeeId = runtimeEntityType.AddProperty(
                "EmployeeId",
                typeof(long?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("EmployeeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<EmployeeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            employeeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventId = runtimeEntityType.AddProperty(
                "EventId",
                typeof(long?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("EventId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<EventId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventPatrolId = runtimeEntityType.AddProperty(
                "EventPatrolId",
                typeof(long?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("EventPatrolId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<EventPatrolId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventPatrolId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var firstCheckinDate = runtimeEntityType.AddProperty(
                "FirstCheckinDate",
                typeof(DateTime?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("FirstCheckinDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<FirstCheckinDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            firstCheckinDate.AddAnnotation("Relational:ColumnType", "datetime");
            firstCheckinDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastCheckoutDate = runtimeEntityType.AddProperty(
                "LastCheckoutDate",
                typeof(DateTime?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("LastCheckoutDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<LastCheckoutDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastCheckoutDate.AddAnnotation("Relational:ColumnType", "datetime");
            lastCheckoutDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var locationFirstCheckIn = runtimeEntityType.AddProperty(
                "LocationFirstCheckIn",
                typeof(string),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("LocationFirstCheckIn", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<LocationFirstCheckIn>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            locationFirstCheckIn.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missionId = runtimeEntityType.AddProperty(
                "MissionId",
                typeof(long?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("MissionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<MissionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            missionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedBy = runtimeEntityType.AddProperty(
                "ModifiedBy",
                typeof(long?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("ModifiedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<ModifiedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDate = runtimeEntityType.AddProperty(
                "ModifiedDate",
                typeof(DateTime?),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("ModifiedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<ModifiedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedDate.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { eventsEmployeesAttandaceId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_EventAttandace");

            var index = runtimeEntityType.AddIndex(
                new[] { attandaceTypeId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { createdBy });

            var index1 = runtimeEntityType.AddIndex(
                new[] { currentStatusId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { employeeId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { eventId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { eventPatrolId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("AttandaceTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("AttandaceTypId") }),
                principalEntityType);

            var attandaceType = declaringEntityType.AddNavigation("AttandaceType",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsAttendanceTypeDim),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("AttandaceType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<AttandaceType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsEmployeesAttendances = principalEntityType.AddNavigation("EventsEmployeesAttendances",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsEmployeesAttendance>),
                propertyInfo: typeof(EventsAttendanceTypeDim).GetProperty("EventsEmployeesAttendances", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsAttendanceTypeDim).GetField("<EventsEmployeesAttendances>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventAttandace_AttandaceTypeDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CreatedBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var createdByNavigation = declaringEntityType.AddNavigation("CreatedByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("CreatedByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<CreatedByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsEmployeesAttendanceCreatedByNavigations = principalEntityType.AddNavigation("EventsEmployeesAttendanceCreatedByNavigations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsEmployeesAttendance>),
                propertyInfo: typeof(Person).GetProperty("EventsEmployeesAttendanceCreatedByNavigations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<EventsEmployeesAttendanceCreatedByNavigations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventAttandace_Person1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CurrentStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventAttandaceLogStatusId") }),
                principalEntityType);

            var currentStatus = declaringEntityType.AddNavigation("CurrentStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsAttendanceLogStatusDim),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("CurrentStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<CurrentStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsEmployeesAttendances = principalEntityType.AddNavigation("EventsEmployeesAttendances",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsEmployeesAttendance>),
                propertyInfo: typeof(EventsAttendanceLogStatusDim).GetProperty("EventsEmployeesAttendances", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsAttendanceLogStatusDim).GetField("<EventsEmployeesAttendances>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsEmployeesAttendance_EventsAttendanceLogStatusDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmployeeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var employee = declaringEntityType.AddNavigation("Employee",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("Employee", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<Employee>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsEmployeesAttendanceEmployees = principalEntityType.AddNavigation("EventsEmployeesAttendanceEmployees",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsEmployeesAttendance>),
                propertyInfo: typeof(Person).GetProperty("EventsEmployeesAttendanceEmployees", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<EventsEmployeesAttendanceEmployees>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventAttandace_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventId") }),
                principalEntityType);

            var @event = declaringEntityType.AddNavigation("Event",
                runtimeForeignKey,
                onDependent: true,
                typeof(Event),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("Event", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<Event>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsEmployeesAttendances = principalEntityType.AddNavigation("EventsEmployeesAttendances",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsEmployeesAttendance>),
                propertyInfo: typeof(Event).GetProperty("EventsEmployeesAttendances", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Event).GetField("<EventsEmployeesAttendances>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventAttandace_Events");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventPatrolId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventPatrolId") }),
                principalEntityType);

            var eventPatrol = declaringEntityType.AddNavigation("EventPatrol",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsPatrol),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("EventPatrol", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<EventPatrol>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsEmployeesAttendances = principalEntityType.AddNavigation("EventsEmployeesAttendances",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsEmployeesAttendance>),
                propertyInfo: typeof(EventsPatrol).GetProperty("EventsEmployeesAttendances", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPatrol).GetField("<EventsEmployeesAttendances>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsEmployeesAttendance_EventsPatrol");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EventsEmployeesAttendance");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
