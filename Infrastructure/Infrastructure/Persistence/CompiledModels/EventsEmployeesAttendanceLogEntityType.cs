// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EventsEmployeesAttendanceLogEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EventsEmployeesAttendanceLog",
                typeof(EventsEmployeesAttendanceLog),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var eventAttendanceLogId = runtimeEntityType.AddProperty(
                "EventAttendanceLogId",
                typeof(long),
                propertyInfo: typeof(EventsEmployeesAttendanceLog).GetProperty("EventAttendanceLogId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendanceLog).GetField("<EventAttendanceLogId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            eventAttendanceLogId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(EventsEmployeesAttendanceLog).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendanceLog).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDateTime = runtimeEntityType.AddProperty(
                "CreationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(EventsEmployeesAttendanceLog).GetProperty("CreationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendanceLog).GetField("<CreationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            creationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventAttendanceId = runtimeEntityType.AddProperty(
                "EventAttendanceId",
                typeof(long?),
                propertyInfo: typeof(EventsEmployeesAttendanceLog).GetProperty("EventAttendanceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendanceLog).GetField("<EventAttendanceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventAttendanceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventAttendanceLogStatusId = runtimeEntityType.AddProperty(
                "EventAttendanceLogStatusId",
                typeof(int?),
                propertyInfo: typeof(EventsEmployeesAttendanceLog).GetProperty("EventAttendanceLogStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendanceLog).GetField("<EventAttendanceLogStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventAttendanceLogStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modificationDateTime = runtimeEntityType.AddProperty(
                "ModificationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(EventsEmployeesAttendanceLog).GetProperty("ModificationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendanceLog).GetField("<ModificationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modificationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            modificationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedBy = runtimeEntityType.AddProperty(
                "ModifiedBy",
                typeof(long?),
                propertyInfo: typeof(EventsEmployeesAttendanceLog).GetProperty("ModifiedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendanceLog).GetField("<ModifiedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { eventAttendanceLogId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_EventsAttendanceLog");

            var index = runtimeEntityType.AddIndex(
                new[] { eventAttendanceId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { eventAttendanceLogStatusId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventAttendanceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventsEmployeesAttandaceId") }),
                principalEntityType);

            var eventAttendance = declaringEntityType.AddNavigation("EventAttendance",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsEmployeesAttendance),
                propertyInfo: typeof(EventsEmployeesAttendanceLog).GetProperty("EventAttendance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendanceLog).GetField("<EventAttendance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsEmployeesAttendanceLogs = principalEntityType.AddNavigation("EventsEmployeesAttendanceLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsEmployeesAttendanceLog>),
                propertyInfo: typeof(EventsEmployeesAttendance).GetProperty("EventsEmployeesAttendanceLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendance).GetField("<EventsEmployeesAttendanceLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsAttendanceLog_EventAttendance");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventAttendanceLogStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventAttandaceLogStatusId") }),
                principalEntityType);

            var eventAttendanceLogStatus = declaringEntityType.AddNavigation("EventAttendanceLogStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsAttendanceLogStatusDim),
                propertyInfo: typeof(EventsEmployeesAttendanceLog).GetProperty("EventAttendanceLogStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeesAttendanceLog).GetField("<EventAttendanceLogStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsEmployeesAttendanceLogs = principalEntityType.AddNavigation("EventsEmployeesAttendanceLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsEmployeesAttendanceLog>),
                propertyInfo: typeof(EventsAttendanceLogStatusDim).GetProperty("EventsEmployeesAttendanceLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsAttendanceLogStatusDim).GetField("<EventsEmployeesAttendanceLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsEmployeesAttendanceLog_EventsAttendanceLogStatusDim");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EventsEmployeesAttendanceLog");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
