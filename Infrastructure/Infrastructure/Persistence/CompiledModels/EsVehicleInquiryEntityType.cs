// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EsVehicleInquiryEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EsVehicleInquiry",
                typeof(EsVehicleInquiry),
                baseEntityType,
                propertyCount: 8,
                navigationCount: 7,
                foreignKeyCount: 4,
                unnamedIndexCount: 4,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var inquiryDate = runtimeEntityType.AddProperty(
                "InquiryDate",
                typeof(DateTime),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("InquiryDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<InquiryDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            inquiryDate.AddAnnotation("Relational:ColumnType", "datetime");
            inquiryDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var organizationId = runtimeEntityType.AddProperty(
                "OrganizationId",
                typeof(int?),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("OrganizationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<OrganizationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            organizationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateCategoryId = runtimeEntityType.AddProperty(
                "PlateCategoryId",
                typeof(int),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("PlateCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<PlateCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            plateCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateColorId = runtimeEntityType.AddProperty(
                "PlateColorId",
                typeof(int),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("PlateColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<PlateColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            plateColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateKindId = runtimeEntityType.AddProperty(
                "PlateKindId",
                typeof(int?),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("PlateKindId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<PlateKindId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateKindId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateNumber = runtimeEntityType.AddProperty(
                "PlateNumber",
                typeof(string),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("PlateNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<PlateNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20);
            plateNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateSourceId = runtimeEntityType.AddProperty(
                "PlateSourceId",
                typeof(int),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("PlateSourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<PlateSourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            plateSourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__ES_Vehic__3214EC07AC1F0940");

            var index = runtimeEntityType.AddIndex(
                new[] { plateCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { plateColorId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { plateKindId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { plateSourceId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlateCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemRegistrationPlateCategoryId") }),
                principalEntityType,
                required: true);

            var plateCategory = declaringEntityType.AddNavigation("PlateCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemRegistrationPlateCategoryDim),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("PlateCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<PlateCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var esVehicleInquiries = principalEntityType.AddNavigation("EsVehicleInquiries",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EsVehicleInquiry>),
                propertyInfo: typeof(ItemRegistrationPlateCategoryDim).GetProperty("EsVehicleInquiries", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemRegistrationPlateCategoryDim).GetField("<EsVehicleInquiries>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleInquiry_PlateCategory");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlateColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemRegistrationPlateColorId") }),
                principalEntityType,
                required: true);

            var plateColor = declaringEntityType.AddNavigation("PlateColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemRegistrationPlateColorDim),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("PlateColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<PlateColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var esVehicleInquiries = principalEntityType.AddNavigation("EsVehicleInquiries",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EsVehicleInquiry>),
                propertyInfo: typeof(ItemRegistrationPlateColorDim).GetProperty("EsVehicleInquiries", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemRegistrationPlateColorDim).GetField("<EsVehicleInquiries>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleInquiry_PlateColor");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlateKindId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemRegistrationPlateKindId") }),
                principalEntityType);

            var plateKind = declaringEntityType.AddNavigation("PlateKind",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemRegistrationPlateKindDim),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("PlateKind", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<PlateKind>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var esVehicleInquiries = principalEntityType.AddNavigation("EsVehicleInquiries",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EsVehicleInquiry>),
                propertyInfo: typeof(ItemRegistrationPlateKindDim).GetProperty("EsVehicleInquiries", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemRegistrationPlateKindDim).GetField("<EsVehicleInquiries>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleInquiry_PlateKind");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlateSourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PlateSourceId") }),
                principalEntityType,
                required: true);

            var plateSource = declaringEntityType.AddNavigation("PlateSource",
                runtimeForeignKey,
                onDependent: true,
                typeof(PlateSourceDim),
                propertyInfo: typeof(EsVehicleInquiry).GetProperty("PlateSource", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsVehicleInquiry).GetField("<PlateSource>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var esVehicleInquiries = principalEntityType.AddNavigation("EsVehicleInquiries",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EsVehicleInquiry>),
                propertyInfo: typeof(PlateSourceDim).GetProperty("EsVehicleInquiries", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PlateSourceDim).GetField("<EsVehicleInquiries>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleInquiry_PlateSource");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ES_VehicleInquiry");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
