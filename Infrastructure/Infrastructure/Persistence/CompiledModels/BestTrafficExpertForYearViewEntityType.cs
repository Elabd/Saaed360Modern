// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class BestTrafficExpertForYearViewEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.BestTrafficExpertForYearView",
                typeof(BestTrafficExpertForYearView),
                baseEntityType,
                propertyCount: 7);

            var averageReconstructionTime = runtimeEntityType.AddProperty(
                "AverageReconstructionTime",
                typeof(TimeOnly?),
                propertyInfo: typeof(BestTrafficExpertForYearView).GetProperty("AverageReconstructionTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BestTrafficExpertForYearView).GetField("<AverageReconstructionTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                precision: 0);
            averageReconstructionTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var controlCenter = runtimeEntityType.AddProperty(
                "ControlCenter",
                typeof(string),
                propertyInfo: typeof(BestTrafficExpertForYearView).GetProperty("ControlCenter", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BestTrafficExpertForYearView).GetField("<ControlCenter>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 250);
            controlCenter.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var image = runtimeEntityType.AddProperty(
                "Image",
                typeof(byte[]),
                propertyInfo: typeof(BestTrafficExpertForYearView).GetProperty("Image", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BestTrafficExpertForYearView).GetField("<Image>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            image.AddAnnotation("Relational:ColumnName", "image");
            image.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var noOfIncidents = runtimeEntityType.AddProperty(
                "NoOfIncidents",
                typeof(int?),
                propertyInfo: typeof(BestTrafficExpertForYearView).GetProperty("NoOfIncidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BestTrafficExpertForYearView).GetField("<NoOfIncidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            noOfIncidents.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trafficExpert = runtimeEntityType.AddProperty(
                "TrafficExpert",
                typeof(string),
                propertyInfo: typeof(BestTrafficExpertForYearView).GetProperty("TrafficExpert", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BestTrafficExpertForYearView).GetField("<TrafficExpert>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 152);
            trafficExpert.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trafficExpertCode = runtimeEntityType.AddProperty(
                "TrafficExpertCode",
                typeof(string),
                propertyInfo: typeof(BestTrafficExpertForYearView).GetProperty("TrafficExpertCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BestTrafficExpertForYearView).GetField("<TrafficExpertCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            trafficExpertCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trafficExpertId = runtimeEntityType.AddProperty(
                "TrafficExpertId",
                typeof(long?),
                propertyInfo: typeof(BestTrafficExpertForYearView).GetProperty("TrafficExpertId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BestTrafficExpertForYearView).GetField("<TrafficExpertId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            trafficExpertId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "BestTrafficExpertForYearView");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
