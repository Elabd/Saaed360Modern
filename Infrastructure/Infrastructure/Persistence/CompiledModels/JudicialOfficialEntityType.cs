// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class JudicialOfficialEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.JudicialOfficial",
                typeof(JudicialOfficial),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 4,
                foreignKeyCount: 4,
                unnamedIndexCount: 3,
                keyCount: 1);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(JudicialOfficial).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficial).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identificationJurisdiction = runtimeEntityType.AddProperty(
                "IdentificationJurisdiction",
                typeof(string),
                propertyInfo: typeof(JudicialOfficial).GetProperty("IdentificationJurisdiction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficial).GetField("<IdentificationJurisdiction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            identificationJurisdiction.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var judicialOfficialBarIdentification = runtimeEntityType.AddProperty(
                "JudicialOfficialBarIdentification",
                typeof(string),
                propertyInfo: typeof(JudicialOfficial).GetProperty("JudicialOfficialBarIdentification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficial).GetField("<JudicialOfficialBarIdentification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            judicialOfficialBarIdentification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var judicialOfficialBarStatusId = runtimeEntityType.AddProperty(
                "JudicialOfficialBarStatusId",
                typeof(int),
                propertyInfo: typeof(JudicialOfficial).GetProperty("JudicialOfficialBarStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficial).GetField("<JudicialOfficialBarStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            judicialOfficialBarStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var judicialOfficialCategoryId = runtimeEntityType.AddProperty(
                "JudicialOfficialCategoryId",
                typeof(int),
                propertyInfo: typeof(JudicialOfficial).GetProperty("JudicialOfficialCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficial).GetField("<JudicialOfficialCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            judicialOfficialCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var judicialOfficialPanelId = runtimeEntityType.AddProperty(
                "JudicialOfficialPanelId",
                typeof(int),
                propertyInfo: typeof(JudicialOfficial).GetProperty("JudicialOfficialPanelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficial).GetField("<JudicialOfficialPanelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            judicialOfficialPanelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var judicialOfficialRegIdentification = runtimeEntityType.AddProperty(
                "JudicialOfficialRegIdentification",
                typeof(string),
                propertyInfo: typeof(JudicialOfficial).GetProperty("JudicialOfficialRegIdentification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficial).GetField("<JudicialOfficialRegIdentification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            judicialOfficialRegIdentification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { personId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { judicialOfficialBarStatusId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { judicialOfficialCategoryId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { judicialOfficialPanelId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("JudicialOfficialBarStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("JudicialOfficialBarStatusId") }),
                principalEntityType,
                required: true);

            var judicialOfficialBarStatus = declaringEntityType.AddNavigation("JudicialOfficialBarStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(JudicialOfficialBarStatusDim),
                propertyInfo: typeof(JudicialOfficial).GetProperty("JudicialOfficialBarStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficial).GetField("<JudicialOfficialBarStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var judicialOfficials = principalEntityType.AddNavigation("JudicialOfficials",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<JudicialOfficial>),
                propertyInfo: typeof(JudicialOfficialBarStatusDim).GetProperty("JudicialOfficials", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficialBarStatusDim).GetField("<JudicialOfficials>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_JudicialOfficial_JudicialOfficialBarStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("JudicialOfficialCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("JudicialOfficialCategoryId") }),
                principalEntityType,
                required: true);

            var judicialOfficialCategory = declaringEntityType.AddNavigation("JudicialOfficialCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(JudicialOfficialCategoryDim),
                propertyInfo: typeof(JudicialOfficial).GetProperty("JudicialOfficialCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficial).GetField("<JudicialOfficialCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var judicialOfficials = principalEntityType.AddNavigation("JudicialOfficials",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<JudicialOfficial>),
                propertyInfo: typeof(JudicialOfficialCategoryDim).GetProperty("JudicialOfficials", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficialCategoryDim).GetField("<JudicialOfficials>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_JudicialOfficial_JudicialOffiicalCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("JudicialOfficialPanelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("JudicialOfficialPanelId") }),
                principalEntityType,
                required: true);

            var judicialOfficialPanel = declaringEntityType.AddNavigation("JudicialOfficialPanel",
                runtimeForeignKey,
                onDependent: true,
                typeof(JudicialOfficialPanelDim),
                propertyInfo: typeof(JudicialOfficial).GetProperty("JudicialOfficialPanel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficial).GetField("<JudicialOfficialPanel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var judicialOfficials = principalEntityType.AddNavigation("JudicialOfficials",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<JudicialOfficial>),
                propertyInfo: typeof(JudicialOfficialPanelDim).GetProperty("JudicialOfficials", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficialPanelDim).GetField("<JudicialOfficials>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_JudicialOfficial_JudicialOfficialPanelDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                unique: true,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(JudicialOfficial).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JudicialOfficial).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var judicialOfficial = principalEntityType.AddNavigation("JudicialOfficial",
                runtimeForeignKey,
                onDependent: false,
                typeof(JudicialOfficial),
                propertyInfo: typeof(Person).GetProperty("JudicialOfficial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<JudicialOfficial>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_JudicialOfficial_Person");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "JudicialOfficial");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
