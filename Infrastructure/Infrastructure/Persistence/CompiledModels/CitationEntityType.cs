// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class CitationEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Citation",
                typeof(Citation),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 3,
                foreignKeyCount: 3,
                unnamedIndexCount: 2,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(Citation).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Citation).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var citationDateTime = runtimeEntityType.AddProperty(
                "CitationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(Citation).GetProperty("CitationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Citation).GetField("<CitationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            citationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            citationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var citationDismissalConditionId = runtimeEntityType.AddProperty(
                "CitationDismissalConditionId",
                typeof(int?),
                propertyInfo: typeof(Citation).GetProperty("CitationDismissalConditionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Citation).GetField("<CitationDismissalConditionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            citationDismissalConditionId.AddAnnotation("Relational:DefaultValue", 1);
            citationDismissalConditionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var citationStatusId = runtimeEntityType.AddProperty(
                "CitationStatusId",
                typeof(int?),
                propertyInfo: typeof(Citation).GetProperty("CitationStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Citation).GetField("<CitationStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            citationStatusId.AddAnnotation("Relational:DefaultValue", 1);
            citationStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dismissalDateTime = runtimeEntityType.AddProperty(
                "DismissalDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(Citation).GetProperty("DismissalDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Citation).GetField("<DismissalDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            dismissalDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            dismissalDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fineAmount = runtimeEntityType.AddProperty(
                "FineAmount",
                typeof(double?),
                propertyInfo: typeof(Citation).GetProperty("FineAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Citation).GetField("<FineAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            fineAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var radarNumber = runtimeEntityType.AddProperty(
                "RadarNumber",
                typeof(string),
                propertyInfo: typeof(Citation).GetProperty("RadarNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Citation).GetField("<RadarNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            radarNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_Citation_1");

            var index = runtimeEntityType.AddIndex(
                new[] { citationDismissalConditionId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { citationStatusId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(Citation).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Citation).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var citation = principalEntityType.AddNavigation("Citation",
                runtimeForeignKey,
                onDependent: false,
                typeof(Citation),
                propertyInfo: typeof(Activity).GetProperty("Citation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<Citation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Citation_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CitationDismissalConditionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CitationDismissalConditionId") }),
                principalEntityType);

            var citationDismissalCondition = declaringEntityType.AddNavigation("CitationDismissalCondition",
                runtimeForeignKey,
                onDependent: true,
                typeof(CitationDismissalConditionDim),
                propertyInfo: typeof(Citation).GetProperty("CitationDismissalCondition", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Citation).GetField("<CitationDismissalCondition>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var citations = principalEntityType.AddNavigation("Citations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Citation>),
                propertyInfo: typeof(CitationDismissalConditionDim).GetProperty("Citations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CitationDismissalConditionDim).GetField("<Citations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "CitationDismissalConditionDIM_Citations_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CitationStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CitationStatusId") }),
                principalEntityType);

            var citationStatus = declaringEntityType.AddNavigation("CitationStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(CitationStatusDim),
                propertyInfo: typeof(Citation).GetProperty("CitationStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Citation).GetField("<CitationStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var citations = principalEntityType.AddNavigation("Citations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Citation>),
                propertyInfo: typeof(CitationStatusDim).GetProperty("Citations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CitationStatusDim).GetField("<Citations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "CitationStatusDIM_Citations_FK1");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Citation");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
