// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PersonDriverLicenseEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PersonDriverLicense",
                typeof(PersonDriverLicense),
                baseEntityType,
                propertyCount: 23,
                navigationCount: 10,
                foreignKeyCount: 10,
                unnamedIndexCount: 9,
                keyCount: 1);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createDateTimeStamp = runtimeEntityType.AddProperty(
                "CreateDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("CreateDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<CreateDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            createDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            createDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverLicenseCivilianClassId = runtimeEntityType.AddProperty(
                "DriverLicenseCivilianClassId",
                typeof(int?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("DriverLicenseCivilianClassId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<DriverLicenseCivilianClassId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverLicenseCivilianClassId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverLicenseCommericalClassId = runtimeEntityType.AddProperty(
                "DriverLicenseCommericalClassId",
                typeof(int?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("DriverLicenseCommericalClassId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<DriverLicenseCommericalClassId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverLicenseCommericalClassId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverLicenseImageGuid = runtimeEntityType.AddProperty(
                "DriverLicenseImageGuid",
                typeof(Guid?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("DriverLicenseImageGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<DriverLicenseImageGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverLicenseImageGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverLicenseImageId = runtimeEntityType.AddProperty(
                "DriverLicenseImageId",
                typeof(long?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("DriverLicenseImageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<DriverLicenseImageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverLicenseImageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverLicensePermitStatusId = runtimeEntityType.AddProperty(
                "DriverLicensePermitStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("DriverLicensePermitStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<DriverLicensePermitStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverLicensePermitStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var effectiveDate = runtimeEntityType.AddProperty(
                "EffectiveDate",
                typeof(DateOnly?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("EffectiveDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<EffectiveDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            effectiveDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var effectiveYear = runtimeEntityType.AddProperty(
                "EffectiveYear",
                typeof(int?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("EffectiveYear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<EffectiveYear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            effectiveYear.AddAnnotation("Relational:ComputedColumnSql", "(datepart(year,[EffectiveDate]))");
            effectiveYear.AddAnnotation("Relational:IsStored", false);
            effectiveYear.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expirationDate = runtimeEntityType.AddProperty(
                "ExpirationDate",
                typeof(DateOnly?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("ExpirationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<ExpirationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            expirationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expirationYear = runtimeEntityType.AddProperty(
                "ExpirationYear",
                typeof(int?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("ExpirationYear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<ExpirationYear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            expirationYear.AddAnnotation("Relational:ComputedColumnSql", "(datepart(year,[ExpirationDate]))");
            expirationYear.AddAnnotation("Relational:IsStored", false);
            expirationYear.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identification = runtimeEntityType.AddProperty(
                "Identification",
                typeof(string),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("Identification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<Identification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            identification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identificationAuthorityId = runtimeEntityType.AddProperty(
                "IdentificationAuthorityId",
                typeof(int?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("IdentificationAuthorityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<IdentificationAuthorityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            identificationAuthorityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isDeleted.AddAnnotation("Relational:DefaultValue", false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDateTimeStamp = runtimeEntityType.AddProperty(
                "ModifiedDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("ModifiedDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<ModifiedDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            modifiedDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            modifiedDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personDriverLicenseDescription = runtimeEntityType.AddProperty(
                "PersonDriverLicenseDescription",
                typeof(string),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("PersonDriverLicenseDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<PersonDriverLicenseDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 300);
            personDriverLicenseDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personDriverLicenseGuid = runtimeEntityType.AddProperty(
                "PersonDriverLicenseGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("PersonDriverLicenseGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<PersonDriverLicenseGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personDriverLicenseGuid.AddAnnotation("Relational:DefaultValueSql", "(newid())");
            personDriverLicenseGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personDriverLicenseId = runtimeEntityType.AddProperty(
                "PersonDriverLicenseId",
                typeof(long),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("PersonDriverLicenseId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<PersonDriverLicenseId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0L);
            personDriverLicenseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var personDrivingInsCoverageCategoryId = runtimeEntityType.AddProperty(
                "PersonDrivingInsCoverageCategoryId",
                typeof(int?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("PersonDrivingInsCoverageCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<PersonDrivingInsCoverageCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personDrivingInsCoverageCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personDrivingInsuranceStatusId = runtimeEntityType.AddProperty(
                "PersonDrivingInsuranceStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("PersonDrivingInsuranceStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<PersonDrivingInsuranceStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personDrivingInsuranceStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personGuid = runtimeEntityType.AddProperty(
                "PersonGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("PersonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<PersonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rowStatusId = runtimeEntityType.AddProperty(
                "RowStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("RowStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<RowStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            rowStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceId = runtimeEntityType.AddProperty(
                "SourceId",
                typeof(long),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("SourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<SourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            sourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { personId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { driverLicenseCivilianClassId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { driverLicenseCommericalClassId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { driverLicenseImageId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { driverLicensePermitStatusId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { identificationAuthorityId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { personDrivingInsCoverageCategoryId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { personDrivingInsuranceStatusId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { rowStatusId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { sourceId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DriverLicenseCivilianClassId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DriverLicenseCivilianClassId") }),
                principalEntityType);

            var driverLicenseCivilianClass = declaringEntityType.AddNavigation("DriverLicenseCivilianClass",
                runtimeForeignKey,
                onDependent: true,
                typeof(DriverLicenseCivilianClassDim),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("DriverLicenseCivilianClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<DriverLicenseCivilianClass>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personDriverLicenses = principalEntityType.AddNavigation("PersonDriverLicenses",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonDriverLicense>),
                propertyInfo: typeof(DriverLicenseCivilianClassDim).GetProperty("PersonDriverLicenses", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverLicenseCivilianClassDim).GetField("<PersonDriverLicenses>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonDriverLicense_DriverLicenseNonCommericalClassDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DriverLicenseCommericalClassId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DriverLicenseCommericalClassId") }),
                principalEntityType);

            var driverLicenseCommericalClass = declaringEntityType.AddNavigation("DriverLicenseCommericalClass",
                runtimeForeignKey,
                onDependent: true,
                typeof(DriverLicenseCommericalClassDim),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("DriverLicenseCommericalClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<DriverLicenseCommericalClass>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personDriverLicenses = principalEntityType.AddNavigation("PersonDriverLicenses",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonDriverLicense>),
                propertyInfo: typeof(DriverLicenseCommericalClassDim).GetProperty("PersonDriverLicenses", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverLicenseCommericalClassDim).GetField("<PersonDriverLicenses>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonDriverLicense_DriverLicenseCommericalClassDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DriverLicenseImageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonImageId") }),
                principalEntityType);

            var driverLicenseImage = declaringEntityType.AddNavigation("DriverLicenseImage",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonImage),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("DriverLicenseImage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<DriverLicenseImage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personDriverLicenses = principalEntityType.AddNavigation("PersonDriverLicenses",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonDriverLicense>),
                propertyInfo: typeof(PersonImage).GetProperty("PersonDriverLicenses", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonImage).GetField("<PersonDriverLicenses>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonDriverLicense_Image");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DriverLicensePermitStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DriverLicensePermitStatusId") }),
                principalEntityType);

            var driverLicensePermitStatus = declaringEntityType.AddNavigation("DriverLicensePermitStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(DriverLicensePermitStatusDim),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("DriverLicensePermitStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<DriverLicensePermitStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personDriverLicenses = principalEntityType.AddNavigation("PersonDriverLicenses",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonDriverLicense>),
                propertyInfo: typeof(DriverLicensePermitStatusDim).GetProperty("PersonDriverLicenses", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverLicensePermitStatusDim).GetField("<PersonDriverLicenses>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonDriverLicense_DriverLicensePermitStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdentificationAuthorityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IdentificationAuthorityId") }),
                principalEntityType);

            var identificationAuthority = declaringEntityType.AddNavigation("IdentificationAuthority",
                runtimeForeignKey,
                onDependent: true,
                typeof(IdentificationAuthorityDim),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("IdentificationAuthority", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<IdentificationAuthority>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personDriverLicenses = principalEntityType.AddNavigation("PersonDriverLicenses",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonDriverLicense>),
                propertyInfo: typeof(IdentificationAuthorityDim).GetProperty("PersonDriverLicenses", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentificationAuthorityDim).GetField("<PersonDriverLicenses>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonDriverLicense_IdentificationJurisdictionAuthorityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonDrivingInsCoverageCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonDrivingInsCoverageCategoryId") }),
                principalEntityType);

            var personDrivingInsCoverageCategory = declaringEntityType.AddNavigation("PersonDrivingInsCoverageCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonDrivingInsCoverageCategoryDim),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("PersonDrivingInsCoverageCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<PersonDrivingInsCoverageCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personDriverLicenses = principalEntityType.AddNavigation("PersonDriverLicenses",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonDriverLicense>),
                propertyInfo: typeof(PersonDrivingInsCoverageCategoryDim).GetProperty("PersonDriverLicenses", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDrivingInsCoverageCategoryDim).GetField("<PersonDriverLicenses>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonDriverLicense_PersonDrivingInsCoverageCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonDrivingInsuranceStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonDrivingInsuranceStatusId") }),
                principalEntityType);

            var personDrivingInsuranceStatus = declaringEntityType.AddNavigation("PersonDrivingInsuranceStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonDrivingInsuranceStatusDim),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("PersonDrivingInsuranceStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<PersonDrivingInsuranceStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personDriverLicenses = principalEntityType.AddNavigation("PersonDriverLicenses",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonDriverLicense>),
                propertyInfo: typeof(PersonDrivingInsuranceStatusDim).GetProperty("PersonDriverLicenses", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDrivingInsuranceStatusDim).GetField("<PersonDriverLicenses>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonDriverLicense_PersonDrivingInsuranceStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                unique: true,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personDriverLicense = principalEntityType.AddNavigation("PersonDriverLicense",
                runtimeForeignKey,
                onDependent: false,
                typeof(PersonDriverLicense),
                propertyInfo: typeof(Person).GetProperty("PersonDriverLicense", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<PersonDriverLicense>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonDriverLicense_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RowStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RowStatusId") }),
                principalEntityType);

            var rowStatus = declaringEntityType.AddNavigation("RowStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(RowStatusDim),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("RowStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<RowStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personDriverLicenses = principalEntityType.AddNavigation("PersonDriverLicenses",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonDriverLicense>),
                propertyInfo: typeof(RowStatusDim).GetProperty("PersonDriverLicenses", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RowStatusDim).GetField("<PersonDriverLicenses>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonDriverLicense_RowStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SourceId") }),
                principalEntityType,
                required: true);

            var source = declaringEntityType.AddNavigation("Source",
                runtimeForeignKey,
                onDependent: true,
                typeof(Source),
                propertyInfo: typeof(PersonDriverLicense).GetProperty("Source", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDriverLicense).GetField("<Source>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personDriverLicenses = principalEntityType.AddNavigation("PersonDriverLicenses",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonDriverLicense>),
                propertyInfo: typeof(Source).GetProperty("PersonDriverLicenses", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Source).GetField("<PersonDriverLicenses>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonDriverLicense_Source");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PersonDriverLicense");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
