// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class RoadAssistRequestEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.RoadAssistRequest",
                typeof(RoadAssistRequest),
                baseEntityType,
                propertyCount: 57,
                navigationCount: 22,
                foreignKeyCount: 18,
                unnamedIndexCount: 18,
                keyCount: 1);

            var requestId = runtimeEntityType.AddProperty(
                "RequestId",
                typeof(Guid),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RequestId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RequestId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            requestId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var additionalNotes = runtimeEntityType.AddProperty(
                "AdditionalNotes",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("AdditionalNotes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<AdditionalNotes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 150);
            additionalNotes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var applicantMobileNumber = runtimeEntityType.AddProperty(
                "ApplicantMobileNumber",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ApplicantMobileNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ApplicantMobileNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            applicantMobileNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var applicantProviderRateComment = runtimeEntityType.AddProperty(
                "ApplicantProviderRateComment",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ApplicantProviderRateComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ApplicantProviderRateComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 1000);
            applicantProviderRateComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var applicantProviderRateValue = runtimeEntityType.AddProperty(
                "ApplicantProviderRateValue",
                typeof(byte?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ApplicantProviderRateValue", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ApplicantProviderRateValue>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            applicantProviderRateValue.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var applicantServiceRateComment = runtimeEntityType.AddProperty(
                "ApplicantServiceRateComment",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ApplicantServiceRateComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ApplicantServiceRateComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 1000);
            applicantServiceRateComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var applicantServiceRateValue = runtimeEntityType.AddProperty(
                "ApplicantServiceRateValue",
                typeof(byte?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ApplicantServiceRateValue", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ApplicantServiceRateValue>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            applicantServiceRateValue.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var appliedProviderShareCalculatedValue = runtimeEntityType.AddProperty(
                "AppliedProviderShareCalculatedValue",
                typeof(decimal?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("AppliedProviderShareCalculatedValue", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<AppliedProviderShareCalculatedValue>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            appliedProviderShareCalculatedValue.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            appliedProviderShareCalculatedValue.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var appliedSaaedShareCalculatedValue = runtimeEntityType.AddProperty(
                "AppliedSaaedShareCalculatedValue",
                typeof(decimal?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("AppliedSaaedShareCalculatedValue", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<AppliedSaaedShareCalculatedValue>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            appliedSaaedShareCalculatedValue.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            appliedSaaedShareCalculatedValue.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var appliedSaaedShareValueId = runtimeEntityType.AddProperty(
                "AppliedSaaedShareValueId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("AppliedSaaedShareValueId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<AppliedSaaedShareValueId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            appliedSaaedShareValueId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var appliedVatValueId = runtimeEntityType.AddProperty(
                "AppliedVatValueId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("AppliedVatValueId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<AppliedVatValueId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            appliedVatValueId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var arrivalEtabaseDateTime = runtimeEntityType.AddProperty(
                "ArrivalEtabaseDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ArrivalEtabaseDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ArrivalEtabaseDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            arrivalEtabaseDateTime.AddAnnotation("Relational:ColumnName", "ArrivalETAbaseDateTime");
            arrivalEtabaseDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cancelReasonDescription = runtimeEntityType.AddProperty(
                "CancelReasonDescription",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("CancelReasonDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<CancelReasonDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cancelReasonDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var carGearOnNeutral = runtimeEntityType.AddProperty(
                "CarGearOnNeutral",
                typeof(bool?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("CarGearOnNeutral", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<CarGearOnNeutral>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            carGearOnNeutral.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdByUserId = runtimeEntityType.AddProperty(
                "CreatedByUserId",
                typeof(Guid),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("CreatedByUserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<CreatedByUserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            createdByUserId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDate = runtimeEntityType.AddProperty(
                "CreationDate",
                typeof(DateTime),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("CreationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<CreationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            creationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverCurrentLat = runtimeEntityType.AddProperty(
                "DriverCurrentLat",
                typeof(decimal?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("DriverCurrentLat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<DriverCurrentLat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverCurrentLat.AddAnnotation("Relational:ColumnType", "decimal(12, 9)");
            driverCurrentLat.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverCurrentLong = runtimeEntityType.AddProperty(
                "DriverCurrentLong",
                typeof(decimal?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("DriverCurrentLong", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<DriverCurrentLong>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverCurrentLong.AddAnnotation("Relational:ColumnType", "decimal(12, 9)");
            driverCurrentLong.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expectedArrivalMinutes = runtimeEntityType.AddProperty(
                "ExpectedArrivalMinutes",
                typeof(int?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ExpectedArrivalMinutes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ExpectedArrivalMinutes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            expectedArrivalMinutes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fuelFeesPerUnitId = runtimeEntityType.AddProperty(
                "FuelFeesPerUnitId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("FuelFeesPerUnitId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<FuelFeesPerUnitId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            fuelFeesPerUnitId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fuelPackageId = runtimeEntityType.AddProperty(
                "FuelPackageId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("FuelPackageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<FuelPackageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            fuelPackageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fuelTypeId = runtimeEntityType.AddProperty(
                "FuelTypeId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("FuelTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<FuelTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            fuelTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var languageCode = runtimeEntityType.AddProperty(
                "LanguageCode",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("LanguageCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<LanguageCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            languageCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastModificationDate = runtimeEntityType.AddProperty(
                "LastModificationDate",
                typeof(DateTime?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("LastModificationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<LastModificationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastModificationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastModifiedByUserId = runtimeEntityType.AddProperty(
                "LastModifiedByUserId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("LastModifiedByUserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<LastModifiedByUserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastModifiedByUserId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var locationsDistanceKm = runtimeEntityType.AddProperty(
                "LocationsDistanceKm",
                typeof(decimal?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("LocationsDistanceKm", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<LocationsDistanceKm>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            locationsDistanceKm.AddAnnotation("Relational:ColumnName", "LocationsDistanceKM");
            locationsDistanceKm.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            locationsDistanceKm.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var needBasementTowing = runtimeEntityType.AddProperty(
                "NeedBasementTowing",
                typeof(bool?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("NeedBasementTowing", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<NeedBasementTowing>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            needBasementTowing.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentRecieptDocUrl = runtimeEntityType.AddProperty(
                "PaymentRecieptDocUrl",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("PaymentRecieptDocUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<PaymentRecieptDocUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 1000,
                unicode: false);
            paymentRecieptDocUrl.AddAnnotation("Relational:ColumnName", "PaymentRecieptDocURL");
            paymentRecieptDocUrl.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var providerBranchId = runtimeEntityType.AddProperty(
                "ProviderBranchId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ProviderBranchId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ProviderBranchId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            providerBranchId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var providerId = runtimeEntityType.AddProperty(
                "ProviderId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ProviderId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ProviderId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            providerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var providerVehicleId = runtimeEntityType.AddProperty(
                "ProviderVehicleId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ProviderVehicleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ProviderVehicleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            providerVehicleId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestNumber = runtimeEntityType.AddProperty(
                "RequestNumber",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RequestNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RequestNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 50,
                unicode: false);
            requestNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestReferenceId = runtimeEntityType.AddProperty(
                "RequestReferenceId",
                typeof(long),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RequestReferenceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RequestReferenceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0L);
            requestReferenceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var requestScheduleEndTime = runtimeEntityType.AddProperty(
                "RequestScheduleEndTime",
                typeof(DateTime),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RequestScheduleEndTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RequestScheduleEndTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            requestScheduleEndTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestScheduleStartTime = runtimeEntityType.AddProperty(
                "RequestScheduleStartTime",
                typeof(DateTime),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RequestScheduleStartTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RequestScheduleStartTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            requestScheduleStartTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestStatusId = runtimeEntityType.AddProperty(
                "RequestStatusId",
                typeof(Guid),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RequestStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RequestStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            requestStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestTotalFees = runtimeEntityType.AddProperty(
                "RequestTotalFees",
                typeof(decimal?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RequestTotalFees", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RequestTotalFees>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requestTotalFees.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            requestTotalFees.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requesterCurrentLat = runtimeEntityType.AddProperty(
                "RequesterCurrentLat",
                typeof(decimal?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RequesterCurrentLat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RequesterCurrentLat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requesterCurrentLat.AddAnnotation("Relational:ColumnType", "decimal(12, 9)");
            requesterCurrentLat.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requesterCurrentLong = runtimeEntityType.AddProperty(
                "RequesterCurrentLong",
                typeof(decimal?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RequesterCurrentLong", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RequesterCurrentLong>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requesterCurrentLong.AddAnnotation("Relational:ColumnType", "decimal(12, 9)");
            requesterCurrentLong.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var riderId = runtimeEntityType.AddProperty(
                "RiderId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RiderId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RiderId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            riderId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var roadAssistRequestRejectionReasonId = runtimeEntityType.AddProperty(
                "RoadAssistRequestRejectionReasonId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RoadAssistRequestRejectionReasonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RoadAssistRequestRejectionReasonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            roadAssistRequestRejectionReasonId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceDeliveryDistinationEmirateId = runtimeEntityType.AddProperty(
                "ServiceDeliveryDistinationEmirateId",
                typeof(long?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServiceDeliveryDistinationEmirateId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServiceDeliveryDistinationEmirateId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceDeliveryDistinationEmirateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceDeliveryDistinationLat = runtimeEntityType.AddProperty(
                "ServiceDeliveryDistinationLat",
                typeof(decimal?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServiceDeliveryDistinationLat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServiceDeliveryDistinationLat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceDeliveryDistinationLat.AddAnnotation("Relational:ColumnType", "decimal(12, 9)");
            serviceDeliveryDistinationLat.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceDeliveryDistinationLong = runtimeEntityType.AddProperty(
                "ServiceDeliveryDistinationLong",
                typeof(decimal?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServiceDeliveryDistinationLong", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServiceDeliveryDistinationLong>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceDeliveryDistinationLong.AddAnnotation("Relational:ColumnType", "decimal(12, 9)");
            serviceDeliveryDistinationLong.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceDeliveryDistinationName = runtimeEntityType.AddProperty(
                "ServiceDeliveryDistinationName",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServiceDeliveryDistinationName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServiceDeliveryDistinationName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            serviceDeliveryDistinationName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceDeliveryLocationEmirateId = runtimeEntityType.AddProperty(
                "ServiceDeliveryLocationEmirateId",
                typeof(long),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServiceDeliveryLocationEmirateId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServiceDeliveryLocationEmirateId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            serviceDeliveryLocationEmirateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceDeliveryLocationLat = runtimeEntityType.AddProperty(
                "ServiceDeliveryLocationLat",
                typeof(decimal),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServiceDeliveryLocationLat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServiceDeliveryLocationLat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            serviceDeliveryLocationLat.AddAnnotation("Relational:ColumnType", "decimal(12, 9)");
            serviceDeliveryLocationLat.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceDeliveryLocationLong = runtimeEntityType.AddProperty(
                "ServiceDeliveryLocationLong",
                typeof(decimal),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServiceDeliveryLocationLong", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServiceDeliveryLocationLong>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            serviceDeliveryLocationLong.AddAnnotation("Relational:ColumnType", "decimal(12, 9)");
            serviceDeliveryLocationLong.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceDeliveryLocationName = runtimeEntityType.AddProperty(
                "ServiceDeliveryLocationName",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServiceDeliveryLocationName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServiceDeliveryLocationName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 500);
            serviceDeliveryLocationName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceId = runtimeEntityType.AddProperty(
                "ServiceId",
                typeof(Guid),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServiceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServiceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            serviceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var servicePriceByDistanceId = runtimeEntityType.AddProperty(
                "ServicePriceByDistanceId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServicePriceByDistanceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServicePriceByDistanceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            servicePriceByDistanceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var servicePriceByEmirateId = runtimeEntityType.AddProperty(
                "ServicePriceByEmirateId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServicePriceByEmirateId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServicePriceByEmirateId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            servicePriceByEmirateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var unreachableReasonDescription = runtimeEntityType.AddProperty(
                "UnreachableReasonDescription",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("UnreachableReasonDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<UnreachableReasonDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 4000);
            unreachableReasonDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var userVehicleId = runtimeEntityType.AddProperty(
                "UserVehicleId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("UserVehicleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<UserVehicleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            userVehicleId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleCondition = runtimeEntityType.AddProperty(
                "VehicleCondition",
                typeof(string),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("VehicleCondition", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<VehicleCondition>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            vehicleCondition.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var version = runtimeEntityType.AddProperty(
                "Version",
                typeof(byte[]),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("Version", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<Version>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                concurrencyToken: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            version.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { requestId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__RoadAssi__33A8517A2B6A0059");

            var index = runtimeEntityType.AddIndex(
                new[] { appliedSaaedShareValueId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { createdByUserId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { fuelFeesPerUnitId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { fuelPackageId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { fuelTypeId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { lastModifiedByUserId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { providerBranchId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { providerId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { providerVehicleId });

            var index8 = runtimeEntityType.AddIndex(
                new[] { requestStatusId });

            var index9 = runtimeEntityType.AddIndex(
                new[] { riderId });

            var index10 = runtimeEntityType.AddIndex(
                new[] { roadAssistRequestRejectionReasonId });

            var index11 = runtimeEntityType.AddIndex(
                new[] { serviceDeliveryDistinationEmirateId });

            var index12 = runtimeEntityType.AddIndex(
                new[] { serviceDeliveryLocationEmirateId });

            var index13 = runtimeEntityType.AddIndex(
                new[] { serviceId });

            var index14 = runtimeEntityType.AddIndex(
                new[] { servicePriceByDistanceId });

            var index15 = runtimeEntityType.AddIndex(
                new[] { servicePriceByEmirateId });

            var index16 = runtimeEntityType.AddIndex(
                new[] { userVehicleId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("AppliedSaaedShareValueId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SaaedShareValueId") }),
                principalEntityType);

            var appliedSaaedShareValue = declaringEntityType.AddNavigation("AppliedSaaedShareValue",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistSaaedShareValue),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("AppliedSaaedShareValue", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<AppliedSaaedShareValue>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistSaaedShareValue).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistSaaedShareValue).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__Appli__02448013");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CreatedByUserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("UserId") }),
                principalEntityType,
                required: true);

            var createdByUser = declaringEntityType.AddNavigation("CreatedByUser",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistUser),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("CreatedByUser", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<CreatedByUser>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequestCreatedByUsers = principalEntityType.AddNavigation("RoadAssistRequestCreatedByUsers",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistUser).GetProperty("RoadAssistRequestCreatedByUsers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistUser).GetField("<RoadAssistRequestCreatedByUsers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__Creat__1C6CCFBC");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FuelFeesPerUnitId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FuelFeesPerUnitId") }),
                principalEntityType);

            var fuelFeesPerUnit = declaringEntityType.AddNavigation("FuelFeesPerUnit",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistFuelFeesPerUnit),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("FuelFeesPerUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<FuelFeesPerUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_RoadAssistRequest_RoadAssistFuelFeesPerUnit");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FuelPackageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FuelPackageId") }),
                principalEntityType);

            var fuelPackage = declaringEntityType.AddNavigation("FuelPackage",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistFuelPackageDim),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("FuelPackage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<FuelPackage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistFuelPackageDim).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelPackageDim).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__FuelP__63F36C6F");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FuelTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FuelTypeId") }),
                principalEntityType);

            var fuelType = declaringEntityType.AddNavigation("FuelType",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistFuelTypeDim),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("FuelType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<FuelType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistFuelTypeDim).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelTypeDim).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__FuelT__64E790A8");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LastModifiedByUserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("UserId") }),
                principalEntityType);

            var lastModifiedByUser = declaringEntityType.AddNavigation("LastModifiedByUser",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistUser),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("LastModifiedByUser", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<LastModifiedByUser>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequestLastModifiedByUsers = principalEntityType.AddNavigation("RoadAssistRequestLastModifiedByUsers",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistUser).GetProperty("RoadAssistRequestLastModifiedByUsers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistUser).GetField("<RoadAssistRequestLastModifiedByUsers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__LastM__1D60F3F5");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProviderBranchId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("BranchId") }),
                principalEntityType);

            var providerBranch = declaringEntityType.AddNavigation("ProviderBranch",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistProviderBranch),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ProviderBranch", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ProviderBranch>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistProviderBranch).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistProviderBranch).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__Provi__13AFCE8E");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProviderId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProviderId") }),
                principalEntityType);

            var provider = declaringEntityType.AddNavigation("Provider",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistProvider),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("Provider", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<Provider>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistProvider).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistProvider).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__Provi__2225A912");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProviderVehicleId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProviderVehicleId") }),
                principalEntityType);

            var providerVehicle = declaringEntityType.AddNavigation("ProviderVehicle",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistProviderVehicle),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ProviderVehicle", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ProviderVehicle>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistProviderVehicle).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistProviderVehicle).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_RoadAssistRequest_RoadAssistProviderVehicle");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RequestStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RequestStatusId") }),
                principalEntityType,
                required: true);

            var requestStatus = declaringEntityType.AddNavigation("RequestStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistRequestStatusDim),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RequestStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RequestStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistRequestStatusDim).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequestStatusDim).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_RoadAssistRequest_RoadAssistRequestStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RiderId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RiderId") }),
                principalEntityType);

            var rider = declaringEntityType.AddNavigation("Rider",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistRider),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("Rider", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<Rider>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistRider).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRider).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__Rider__2319CD4B");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey12(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RoadAssistRequestRejectionReasonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RejectionReasonId") }),
                principalEntityType);

            var roadAssistRequestRejectionReason = declaringEntityType.AddNavigation("RoadAssistRequestRejectionReason",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistRequestRejectionReasonDim),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("RoadAssistRequestRejectionReason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<RoadAssistRequestRejectionReason>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistRequestRejectionReasonDim).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequestRejectionReasonDim).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__RoadA__24980169");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey13(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ServiceDeliveryDistinationEmirateId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EmirateId") }),
                principalEntityType);

            var serviceDeliveryDistinationEmirate = declaringEntityType.AddNavigation("ServiceDeliveryDistinationEmirate",
                runtimeForeignKey,
                onDependent: true,
                typeof(EmirateDim),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServiceDeliveryDistinationEmirate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServiceDeliveryDistinationEmirate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequestServiceDeliveryDistinationEmirates = principalEntityType.AddNavigation("RoadAssistRequestServiceDeliveryDistinationEmirates",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(EmirateDim).GetProperty("RoadAssistRequestServiceDeliveryDistinationEmirates", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmirateDim).GetField("<RoadAssistRequestServiceDeliveryDistinationEmirates>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__Servi__213184D9");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey14(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ServiceDeliveryLocationEmirateId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EmirateId") }),
                principalEntityType,
                required: true);

            var serviceDeliveryLocationEmirate = declaringEntityType.AddNavigation("ServiceDeliveryLocationEmirate",
                runtimeForeignKey,
                onDependent: true,
                typeof(EmirateDim),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServiceDeliveryLocationEmirate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServiceDeliveryLocationEmirate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequestServiceDeliveryLocationEmirates = principalEntityType.AddNavigation("RoadAssistRequestServiceDeliveryLocationEmirates",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(EmirateDim).GetProperty("RoadAssistRequestServiceDeliveryLocationEmirates", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmirateDim).GetField("<RoadAssistRequestServiceDeliveryLocationEmirates>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__Servi__203D60A0");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey15(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ServiceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ServiceId") }),
                principalEntityType,
                required: true);

            var service = declaringEntityType.AddNavigation("Service",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistService),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("Service", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<Service>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistService).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistService).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__Servi__1F493C67");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey16(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ServicePriceByDistanceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ServicePriceByDistanceId") }),
                principalEntityType);

            var servicePriceByDistance = declaringEntityType.AddNavigation("ServicePriceByDistance",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistServicePriceByDistance),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServicePriceByDistance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServicePriceByDistance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistServicePriceByDistance).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistServicePriceByDistance).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_RoadAssistRequest_RoadAssistServicePriceByDistance");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey17(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ServicePriceByEmirateId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ServicePriceByEmirateId") }),
                principalEntityType);

            var servicePriceByEmirate = declaringEntityType.AddNavigation("ServicePriceByEmirate",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistServicePriceByEmirate),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("ServicePriceByEmirate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<ServicePriceByEmirate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistServicePriceByEmirate).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistServicePriceByEmirate).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_RoadAssistRequest_RoadAssistServicePriceByEmirate");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey18(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("UserVehicleId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("UserVehicleId") }),
                principalEntityType);

            var userVehicle = declaringEntityType.AddNavigation("UserVehicle",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistUserVehicle),
                propertyInfo: typeof(RoadAssistRequest).GetProperty("UserVehicle", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistRequest).GetField("<UserVehicle>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistRequests = principalEntityType.AddNavigation("RoadAssistRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistRequest>),
                propertyInfo: typeof(RoadAssistUserVehicle).GetProperty("RoadAssistRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistUserVehicle).GetField("<RoadAssistRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__UserV__1E55182E");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "RoadAssistRequest");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
