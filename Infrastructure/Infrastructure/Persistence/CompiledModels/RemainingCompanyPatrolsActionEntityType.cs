// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class RemainingCompanyPatrolsActionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.RemainingCompanyPatrolsAction",
                typeof(RemainingCompanyPatrolsAction),
                baseEntityType,
                propertyCount: 6,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(RemainingCompanyPatrolsAction).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RemainingCompanyPatrolsAction).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long),
                propertyInfo: typeof(RemainingCompanyPatrolsAction).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RemainingCompanyPatrolsAction).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDateTime = runtimeEntityType.AddProperty(
                "CreationDateTime",
                typeof(DateTime),
                propertyInfo: typeof(RemainingCompanyPatrolsAction).GetProperty("CreationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RemainingCompanyPatrolsAction).GetField("<CreationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            creationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            creationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escortId = runtimeEntityType.AddProperty(
                "EscortId",
                typeof(long),
                propertyInfo: typeof(RemainingCompanyPatrolsAction).GetProperty("EscortId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RemainingCompanyPatrolsAction).GetField("<EscortId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            escortId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var patrolsCount = runtimeEntityType.AddProperty(
                "PatrolsCount",
                typeof(int),
                propertyInfo: typeof(RemainingCompanyPatrolsAction).GetProperty("PatrolsCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RemainingCompanyPatrolsAction).GetField("<PatrolsCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            patrolsCount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var remainingCompanyPatrolsActionTypeId = runtimeEntityType.AddProperty(
                "RemainingCompanyPatrolsActionTypeId",
                typeof(int),
                propertyInfo: typeof(RemainingCompanyPatrolsAction).GetProperty("RemainingCompanyPatrolsActionTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RemainingCompanyPatrolsAction).GetField("<RemainingCompanyPatrolsActionTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            remainingCompanyPatrolsActionTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { escortId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { remainingCompanyPatrolsActionTypeId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EscortId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EscortId") }),
                principalEntityType,
                required: true);

            var escort = declaringEntityType.AddNavigation("Escort",
                runtimeForeignKey,
                onDependent: true,
                typeof(Escort),
                propertyInfo: typeof(RemainingCompanyPatrolsAction).GetProperty("Escort", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RemainingCompanyPatrolsAction).GetField("<Escort>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var remainingCompanyPatrolsActions = principalEntityType.AddNavigation("RemainingCompanyPatrolsActions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RemainingCompanyPatrolsAction>),
                propertyInfo: typeof(Escort).GetProperty("RemainingCompanyPatrolsActions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Escort).GetField("<RemainingCompanyPatrolsActions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_RemainingCompanyPatrolsAction_Escort");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RemainingCompanyPatrolsActionTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var remainingCompanyPatrolsActionType = declaringEntityType.AddNavigation("RemainingCompanyPatrolsActionType",
                runtimeForeignKey,
                onDependent: true,
                typeof(RemainingCompanyPatrolsActionType),
                propertyInfo: typeof(RemainingCompanyPatrolsAction).GetProperty("RemainingCompanyPatrolsActionType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RemainingCompanyPatrolsAction).GetField("<RemainingCompanyPatrolsActionType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var remainingCompanyPatrolsActions = principalEntityType.AddNavigation("RemainingCompanyPatrolsActions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RemainingCompanyPatrolsAction>),
                propertyInfo: typeof(RemainingCompanyPatrolsActionType).GetProperty("RemainingCompanyPatrolsActions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RemainingCompanyPatrolsActionType).GetField("<RemainingCompanyPatrolsActions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_RemainingCompanyPatrolsAction_RemainingCompanyPatrolsActionType");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "RemainingCompanyPatrolsAction");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
