// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PaymentSettlementTransactionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PaymentSettlementTransaction",
                typeof(PaymentSettlementTransaction),
                baseEntityType,
                propertyCount: 8,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(PaymentSettlementTransaction).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentSettlementTransaction).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var payProCreationDate = runtimeEntityType.AddProperty(
                "PayProCreationDate",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentSettlementTransaction).GetProperty("PayProCreationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentSettlementTransaction).GetField("<PayProCreationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            payProCreationDate.AddAnnotation("Relational:ColumnType", "datetime");
            payProCreationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var payProMerchantReference = runtimeEntityType.AddProperty(
                "PayProMerchantReference",
                typeof(string),
                propertyInfo: typeof(PaymentSettlementTransaction).GetProperty("PayProMerchantReference", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentSettlementTransaction).GetField("<PayProMerchantReference>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            payProMerchantReference.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var payProPaymentReference = runtimeEntityType.AddProperty(
                "PayProPaymentReference",
                typeof(string),
                propertyInfo: typeof(PaymentSettlementTransaction).GetProperty("PayProPaymentReference", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentSettlementTransaction).GetField("<PayProPaymentReference>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            payProPaymentReference.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var payProRefundReference = runtimeEntityType.AddProperty(
                "PayProRefundReference",
                typeof(string),
                propertyInfo: typeof(PaymentSettlementTransaction).GetProperty("PayProRefundReference", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentSettlementTransaction).GetField("<PayProRefundReference>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            payProRefundReference.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var payProTransactionType = runtimeEntityType.AddProperty(
                "PayProTransactionType",
                typeof(int?),
                propertyInfo: typeof(PaymentSettlementTransaction).GetProperty("PayProTransactionType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentSettlementTransaction).GetField("<PayProTransactionType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            payProTransactionType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var saaedTransactionId = runtimeEntityType.AddProperty(
                "SaaedTransactionId",
                typeof(long?),
                propertyInfo: typeof(PaymentSettlementTransaction).GetProperty("SaaedTransactionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentSettlementTransaction).GetField("<SaaedTransactionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            saaedTransactionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var settlementId = runtimeEntityType.AddProperty(
                "SettlementId",
                typeof(int?),
                propertyInfo: typeof(PaymentSettlementTransaction).GetProperty("SettlementId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentSettlementTransaction).GetField("<SettlementId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            settlementId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { saaedTransactionId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { settlementId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SaaedTransactionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("TransactionId") }),
                principalEntityType);

            var saaedTransaction = declaringEntityType.AddNavigation("SaaedTransaction",
                runtimeForeignKey,
                onDependent: true,
                typeof(PaymentTransaction),
                propertyInfo: typeof(PaymentSettlementTransaction).GetProperty("SaaedTransaction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentSettlementTransaction).GetField("<SaaedTransaction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentSettlementTransactions = principalEntityType.AddNavigation("PaymentSettlementTransactions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentSettlementTransaction>),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentSettlementTransactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentSettlementTransactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentSettlementTransactions_PaymentTransaction");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SettlementId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var settlement = declaringEntityType.AddNavigation("Settlement",
                runtimeForeignKey,
                onDependent: true,
                typeof(PaymentSettlement),
                propertyInfo: typeof(PaymentSettlementTransaction).GetProperty("Settlement", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentSettlementTransaction).GetField("<Settlement>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentSettlementTransactions = principalEntityType.AddNavigation("PaymentSettlementTransactions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentSettlementTransaction>),
                propertyInfo: typeof(PaymentSettlement).GetProperty("PaymentSettlementTransactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentSettlement).GetField("<PaymentSettlementTransactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentSettlementTransactions_PaymentSettlements");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PaymentSettlementTransactions");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
