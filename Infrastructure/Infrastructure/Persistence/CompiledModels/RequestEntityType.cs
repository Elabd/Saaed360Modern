// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class RequestEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Request",
                typeof(Request),
                baseEntityType,
                propertyCount: 11,
                navigationCount: 6,
                foreignKeyCount: 6,
                unnamedIndexCount: 5,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(Request).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var classificationId = runtimeEntityType.AddProperty(
                "ClassificationId",
                typeof(int),
                propertyInfo: typeof(Request).GetProperty("ClassificationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<ClassificationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            classificationId.AddAnnotation("Relational:DefaultValue", 1);
            classificationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eGuardianReferenceNumber = runtimeEntityType.AddProperty(
                "EGuardianReferenceNumber",
                typeof(string),
                propertyInfo: typeof(Request).GetProperty("EGuardianReferenceNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<EGuardianReferenceNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            eGuardianReferenceNumber.AddAnnotation("Relational:ColumnName", "eGuardianReferenceNumber");
            eGuardianReferenceNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var inputMethodId = runtimeEntityType.AddProperty(
                "InputMethodId",
                typeof(int),
                propertyInfo: typeof(Request).GetProperty("InputMethodId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<InputMethodId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            inputMethodId.AddAnnotation("Relational:DefaultValue", 1);
            inputMethodId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var instruction = runtimeEntityType.AddProperty(
                "Instruction",
                typeof(string),
                propertyInfo: typeof(Request).GetProperty("Instruction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<Instruction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            instruction.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var policyId = runtimeEntityType.AddProperty(
                "PolicyId",
                typeof(int),
                propertyInfo: typeof(Request).GetProperty("PolicyId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<PolicyId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            policyId.AddAnnotation("Relational:DefaultValue", 1);
            policyId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var priorityHighLowId = runtimeEntityType.AddProperty(
                "PriorityHighLowId",
                typeof(int),
                propertyInfo: typeof(Request).GetProperty("PriorityHighLowId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<PriorityHighLowId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            priorityHighLowId.AddAnnotation("Relational:DefaultValue", 1);
            priorityHighLowId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestCategoryId = runtimeEntityType.AddProperty(
                "RequestCategoryId",
                typeof(int),
                propertyInfo: typeof(Request).GetProperty("RequestCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<RequestCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            requestCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            requestCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestDateTime = runtimeEntityType.AddProperty(
                "RequestDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(Request).GetProperty("RequestDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<RequestDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requestDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            requestDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trackingNumber = runtimeEntityType.AddProperty(
                "TrackingNumber",
                typeof(string),
                propertyInfo: typeof(Request).GetProperty("TrackingNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<TrackingNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            trackingNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var videoUri = runtimeEntityType.AddProperty(
                "VideoUri",
                typeof(string),
                propertyInfo: typeof(Request).GetProperty("VideoUri", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<VideoUri>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 250);
            videoUri.AddAnnotation("Relational:ColumnName", "VideoURI");
            videoUri.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__Request__45F4A791FCD7A66E");

            var index = runtimeEntityType.AddIndex(
                new[] { classificationId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { inputMethodId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { policyId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { priorityHighLowId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { requestCategoryId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(Request).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var request = principalEntityType.AddNavigation("Request",
                runtimeForeignKey,
                onDependent: false,
                typeof(Request),
                propertyInfo: typeof(Activity).GetProperty("Request", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<Request>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Request_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ClassificationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ClassificationId") }),
                principalEntityType,
                required: true);

            var classification = declaringEntityType.AddNavigation("Classification",
                runtimeForeignKey,
                onDependent: true,
                typeof(ClassificationDim),
                propertyInfo: typeof(Request).GetProperty("Classification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<Classification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var requests = principalEntityType.AddNavigation("Requests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Request>),
                propertyInfo: typeof(ClassificationDim).GetProperty("Requests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ClassificationDim).GetField("<Requests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Request_ClassificationDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InputMethodId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("InputMethodId") }),
                principalEntityType,
                required: true);

            var inputMethod = declaringEntityType.AddNavigation("InputMethod",
                runtimeForeignKey,
                onDependent: true,
                typeof(RequestInputMethodDim),
                propertyInfo: typeof(Request).GetProperty("InputMethod", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<InputMethod>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var requests = principalEntityType.AddNavigation("Requests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Request>),
                propertyInfo: typeof(RequestInputMethodDim).GetProperty("Requests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RequestInputMethodDim).GetField("<Requests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Request_RequestInputMethodDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PolicyId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PolicyId") }),
                principalEntityType,
                required: true);

            var policy = declaringEntityType.AddNavigation("Policy",
                runtimeForeignKey,
                onDependent: true,
                typeof(PolicyDim),
                propertyInfo: typeof(Request).GetProperty("Policy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<Policy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var requests = principalEntityType.AddNavigation("Requests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Request>),
                propertyInfo: typeof(PolicyDim).GetProperty("Requests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PolicyDim).GetField("<Requests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Request_PolicyDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PriorityHighLowId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("HighLowId") }),
                principalEntityType,
                required: true);

            var priorityHighLow = declaringEntityType.AddNavigation("PriorityHighLow",
                runtimeForeignKey,
                onDependent: true,
                typeof(HighLowDim),
                propertyInfo: typeof(Request).GetProperty("PriorityHighLow", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<PriorityHighLow>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var requests = principalEntityType.AddNavigation("Requests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Request>),
                propertyInfo: typeof(HighLowDim).GetProperty("Requests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(HighLowDim).GetField("<Requests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RequestCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RequestCategoryId") }),
                principalEntityType,
                required: true);

            var requestCategory = declaringEntityType.AddNavigation("RequestCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(RequestCategoryDim),
                propertyInfo: typeof(Request).GetProperty("RequestCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Request).GetField("<RequestCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var requests = principalEntityType.AddNavigation("Requests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Request>),
                propertyInfo: typeof(RequestCategoryDim).GetProperty("Requests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RequestCategoryDim).GetField("<Requests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Request_RequestCategoryDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Request");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
