// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ActivityInstanceEventsTableEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ActivityInstanceEventsTable",
                typeof(ActivityInstanceEventsTable),
                baseEntityType,
                propertyCount: 14,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(string),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 256);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityInstanceId = runtimeEntityType.AddProperty(
                "ActivityInstanceId",
                typeof(string),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("ActivityInstanceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<ActivityInstanceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 256);
            activityInstanceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityName = runtimeEntityType.AddProperty(
                "ActivityName",
                typeof(string),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("ActivityName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<ActivityName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 1024);
            activityName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityRecordType = runtimeEntityType.AddProperty(
                "ActivityRecordType",
                typeof(string),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("ActivityRecordType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<ActivityRecordType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 128);
            activityRecordType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityType = runtimeEntityType.AddProperty(
                "ActivityType",
                typeof(string),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("ActivityType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<ActivityType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 2048);
            activityType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var recordNumber = runtimeEntityType.AddProperty(
                "RecordNumber",
                typeof(long),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("RecordNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<RecordNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            recordNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serializedAnnotations = runtimeEntityType.AddProperty(
                "SerializedAnnotations",
                typeof(string),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("SerializedAnnotations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<SerializedAnnotations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serializedAnnotations.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serializedArguments = runtimeEntityType.AddProperty(
                "SerializedArguments",
                typeof(string),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("SerializedArguments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<SerializedArguments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serializedArguments.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serializedVariables = runtimeEntityType.AddProperty(
                "SerializedVariables",
                typeof(string),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("SerializedVariables", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<SerializedVariables>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serializedVariables.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var state = runtimeEntityType.AddProperty(
                "State",
                typeof(string),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("State", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<State>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 128);
            state.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var timeCreated = runtimeEntityType.AddProperty(
                "TimeCreated",
                typeof(DateTime),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("TimeCreated", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<TimeCreated>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            timeCreated.AddAnnotation("Relational:ColumnType", "datetime");
            timeCreated.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var traceLevelId = runtimeEntityType.AddProperty(
                "TraceLevelId",
                typeof(byte?),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("TraceLevelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<TraceLevelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            traceLevelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var workflowInstanceId = runtimeEntityType.AddProperty(
                "WorkflowInstanceId",
                typeof(Guid),
                propertyInfo: typeof(ActivityInstanceEventsTable).GetProperty("WorkflowInstanceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityInstanceEventsTable).GetField("<WorkflowInstanceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            workflowInstanceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_ActivityInstanceEventsTable_Id");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", "Microsoft.Samples.Tracking");
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ActivityInstanceEventsTable");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
