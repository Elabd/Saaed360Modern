// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PlateClassToPlateColorMapEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PlateClassToPlateColorMap",
                typeof(PlateClassToPlateColorMap),
                baseEntityType,
                propertyCount: 5,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(PlateClassToPlateColorMap).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PlateClassToPlateColorMap).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createdDateTime = runtimeEntityType.AddProperty(
                "CreatedDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(PlateClassToPlateColorMap).GetProperty("CreatedDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PlateClassToPlateColorMap).GetField("<CreatedDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            createdDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            createdDateTime.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createdDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isActive = runtimeEntityType.AddProperty(
                "IsActive",
                typeof(bool?),
                propertyInfo: typeof(PlateClassToPlateColorMap).GetProperty("IsActive", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PlateClassToPlateColorMap).GetField("<IsActive>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isActive.AddAnnotation("Relational:DefaultValue", false);
            isActive.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemRegistrationPlateColorId = runtimeEntityType.AddProperty(
                "ItemRegistrationPlateColorId",
                typeof(int?),
                propertyInfo: typeof(PlateClassToPlateColorMap).GetProperty("ItemRegistrationPlateColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PlateClassToPlateColorMap).GetField("<ItemRegistrationPlateColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            itemRegistrationPlateColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemRegistrationPlateKindId = runtimeEntityType.AddProperty(
                "ItemRegistrationPlateKindId",
                typeof(int?),
                propertyInfo: typeof(PlateClassToPlateColorMap).GetProperty("ItemRegistrationPlateKindId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PlateClassToPlateColorMap).GetField("<ItemRegistrationPlateKindId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            itemRegistrationPlateKindId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__PlateCla__3214EC071F607930");

            var index = runtimeEntityType.AddIndex(
                new[] { itemRegistrationPlateColorId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { itemRegistrationPlateKindId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemRegistrationPlateColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemRegistrationPlateColorId") }),
                principalEntityType);

            var itemRegistrationPlateColor = declaringEntityType.AddNavigation("ItemRegistrationPlateColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemRegistrationPlateColorDim),
                propertyInfo: typeof(PlateClassToPlateColorMap).GetProperty("ItemRegistrationPlateColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PlateClassToPlateColorMap).GetField("<ItemRegistrationPlateColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var plateClassToPlateColorMaps = principalEntityType.AddNavigation("PlateClassToPlateColorMaps",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PlateClassToPlateColorMap>),
                propertyInfo: typeof(ItemRegistrationPlateColorDim).GetProperty("PlateClassToPlateColorMaps", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemRegistrationPlateColorDim).GetField("<PlateClassToPlateColorMaps>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__PlateClas__ItemR__525B9EBD");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemRegistrationPlateKindId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemRegistrationPlateKindId") }),
                principalEntityType);

            var itemRegistrationPlateKind = declaringEntityType.AddNavigation("ItemRegistrationPlateKind",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemRegistrationPlateKindDim),
                propertyInfo: typeof(PlateClassToPlateColorMap).GetProperty("ItemRegistrationPlateKind", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PlateClassToPlateColorMap).GetField("<ItemRegistrationPlateKind>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var plateClassToPlateColorMaps = principalEntityType.AddNavigation("PlateClassToPlateColorMaps",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PlateClassToPlateColorMap>),
                propertyInfo: typeof(ItemRegistrationPlateKindDim).GetProperty("PlateClassToPlateColorMaps", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemRegistrationPlateKindDim).GetField("<PlateClassToPlateColorMaps>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__PlateClas__ItemR__51677A84");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PlateClassToPlateColorMap");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
