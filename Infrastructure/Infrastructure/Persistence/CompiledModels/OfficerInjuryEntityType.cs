// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class OfficerInjuryEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.OfficerInjury",
                typeof(OfficerInjury),
                baseEntityType,
                propertyCount: 11,
                navigationCount: 5,
                foreignKeyCount: 5,
                unnamedIndexCount: 4,
                keyCount: 1);

            var personInjuryId = runtimeEntityType.AddProperty(
                "PersonInjuryId",
                typeof(long),
                propertyInfo: typeof(OfficerInjury).GetProperty("PersonInjuryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<PersonInjuryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            personInjuryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var awareOfWeapon = runtimeEntityType.AddProperty(
                "AwareOfWeapon",
                typeof(bool),
                propertyInfo: typeof(OfficerInjury).GetProperty("AwareOfWeapon", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<AwareOfWeapon>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            awareOfWeapon.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var offenderFiredWeapon = runtimeEntityType.AddProperty(
                "OffenderFiredWeapon",
                typeof(bool),
                propertyInfo: typeof(OfficerInjury).GetProperty("OffenderFiredWeapon", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<OffenderFiredWeapon>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            offenderFiredWeapon.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var officerActivityId = runtimeEntityType.AddProperty(
                "OfficerActivityId",
                typeof(int),
                propertyInfo: typeof(OfficerInjury).GetProperty("OfficerActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<OfficerActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            officerActivityId.AddAnnotation("Relational:DefaultValue", 1);
            officerActivityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var officerAssignmentId = runtimeEntityType.AddProperty(
                "OfficerAssignmentId",
                typeof(int),
                propertyInfo: typeof(OfficerInjury).GetProperty("OfficerAssignmentId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<OfficerAssignmentId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            officerAssignmentId.AddAnnotation("Relational:DefaultValue", 1);
            officerAssignmentId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var officerFiredWeapon = runtimeEntityType.AddProperty(
                "OfficerFiredWeapon",
                typeof(bool),
                propertyInfo: typeof(OfficerInjury).GetProperty("OfficerFiredWeapon", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<OfficerFiredWeapon>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            officerFiredWeapon.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var officerInjuryListId = runtimeEntityType.AddProperty(
                "OfficerInjuryListId",
                typeof(int),
                propertyInfo: typeof(OfficerInjury).GetProperty("OfficerInjuryListId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<OfficerInjuryListId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            officerInjuryListId.AddAnnotation("Relational:DefaultValue", 1);
            officerInjuryListId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var officerMeansOfAttackId = runtimeEntityType.AddProperty(
                "OfficerMeansOfAttackId",
                typeof(int),
                propertyInfo: typeof(OfficerInjury).GetProperty("OfficerMeansOfAttackId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<OfficerMeansOfAttackId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            officerMeansOfAttackId.AddAnnotation("Relational:DefaultValue", 1);
            officerMeansOfAttackId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var useWeapon = runtimeEntityType.AddProperty(
                "UseWeapon",
                typeof(bool),
                propertyInfo: typeof(OfficerInjury).GetProperty("UseWeapon", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<UseWeapon>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            useWeapon.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var usedBodyAmor = runtimeEntityType.AddProperty(
                "UsedBodyAmor",
                typeof(bool),
                propertyInfo: typeof(OfficerInjury).GetProperty("UsedBodyAmor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<UsedBodyAmor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            usedBodyAmor.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var yearsOfExp = runtimeEntityType.AddProperty(
                "YearsOfExp",
                typeof(int),
                propertyInfo: typeof(OfficerInjury).GetProperty("YearsOfExp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<YearsOfExp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            yearsOfExp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { personInjuryId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { officerActivityId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { officerAssignmentId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { officerInjuryListId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { officerMeansOfAttackId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OfficerActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OfficerActivityId") }),
                principalEntityType,
                required: true);

            var officerActivity = declaringEntityType.AddNavigation("OfficerActivity",
                runtimeForeignKey,
                onDependent: true,
                typeof(OfficerActivityDim),
                propertyInfo: typeof(OfficerInjury).GetProperty("OfficerActivity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<OfficerActivity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var officerInjuries = principalEntityType.AddNavigation("OfficerInjuries",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OfficerInjury>),
                propertyInfo: typeof(OfficerActivityDim).GetProperty("OfficerInjuries", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerActivityDim).GetField("<OfficerInjuries>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OfficerInjury_OfficerActivityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OfficerAssignmentId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OfficerAssignmentId") }),
                principalEntityType,
                required: true);

            var officerAssignment = declaringEntityType.AddNavigation("OfficerAssignment",
                runtimeForeignKey,
                onDependent: true,
                typeof(OfficerAssignmentDim),
                propertyInfo: typeof(OfficerInjury).GetProperty("OfficerAssignment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<OfficerAssignment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var officerInjuries = principalEntityType.AddNavigation("OfficerInjuries",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OfficerInjury>),
                propertyInfo: typeof(OfficerAssignmentDim).GetProperty("OfficerInjuries", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerAssignmentDim).GetField("<OfficerInjuries>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OfficerInjury_OfficerAssignmentDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OfficerInjuryListId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OfficerInjuryListId") }),
                principalEntityType,
                required: true);

            var officerInjuryList = declaringEntityType.AddNavigation("OfficerInjuryList",
                runtimeForeignKey,
                onDependent: true,
                typeof(OfficerInjuryListDim),
                propertyInfo: typeof(OfficerInjury).GetProperty("OfficerInjuryList", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<OfficerInjuryList>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var officerInjuries = principalEntityType.AddNavigation("OfficerInjuries",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OfficerInjury>),
                propertyInfo: typeof(OfficerInjuryListDim).GetProperty("OfficerInjuries", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryListDim).GetField("<OfficerInjuries>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OfficerInjury_OfficerInjuryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OfficerMeansOfAttackId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OfficerMeansOfAttackId") }),
                principalEntityType,
                required: true);

            var officerMeansOfAttack = declaringEntityType.AddNavigation("OfficerMeansOfAttack",
                runtimeForeignKey,
                onDependent: true,
                typeof(OfficerMeansOfAttackDim),
                propertyInfo: typeof(OfficerInjury).GetProperty("OfficerMeansOfAttack", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<OfficerMeansOfAttack>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var officerInjuries = principalEntityType.AddNavigation("OfficerInjuries",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<OfficerInjury>),
                propertyInfo: typeof(OfficerMeansOfAttackDim).GetProperty("OfficerInjuries", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerMeansOfAttackDim).GetField("<OfficerInjuries>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OfficerInjury_OfficerMeansOfAttackDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonInjuryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonInjuryId") }),
                principalEntityType,
                unique: true,
                required: true);

            var personInjury = declaringEntityType.AddNavigation("PersonInjury",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonInjury),
                propertyInfo: typeof(OfficerInjury).GetProperty("PersonInjury", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjury).GetField("<PersonInjury>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var officerInjury = principalEntityType.AddNavigation("OfficerInjury",
                runtimeForeignKey,
                onDependent: false,
                typeof(OfficerInjury),
                propertyInfo: typeof(PersonInjury).GetProperty("OfficerInjury", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonInjury).GetField("<OfficerInjury>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_OfficerInjury_PersonInjury");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "OfficerInjury");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
