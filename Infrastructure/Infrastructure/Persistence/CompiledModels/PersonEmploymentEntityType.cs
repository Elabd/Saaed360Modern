// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PersonEmploymentEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PersonEmployment",
                typeof(PersonEmployment),
                baseEntityType,
                propertyCount: 21,
                navigationCount: 11,
                foreignKeyCount: 11,
                unnamedIndexCount: 11,
                keyCount: 1);

            var personEmploymentId = runtimeEntityType.AddProperty(
                "PersonEmploymentId",
                typeof(long),
                propertyInfo: typeof(PersonEmployment).GetProperty("PersonEmploymentId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<PersonEmploymentId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            personEmploymentId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createDateTimeStamp = runtimeEntityType.AddProperty(
                "CreateDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PersonEmployment).GetProperty("CreateDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<CreateDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            createDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            createDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employeeIdentification = runtimeEntityType.AddProperty(
                "EmployeeIdentification",
                typeof(string),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmployeeIdentification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmployeeIdentification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            employeeIdentification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employerOrganizationGuid = runtimeEntityType.AddProperty(
                "EmployerOrganizationGuid",
                typeof(Guid?),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmployerOrganizationGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmployerOrganizationGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            employerOrganizationGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employerOrganizationId = runtimeEntityType.AddProperty(
                "EmployerOrganizationId",
                typeof(long?),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmployerOrganizationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmployerOrganizationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            employerOrganizationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employerPersonGuid = runtimeEntityType.AddProperty(
                "EmployerPersonGuid",
                typeof(Guid?),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmployerPersonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmployerPersonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            employerPersonGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employerPersonId = runtimeEntityType.AddProperty(
                "EmployerPersonId",
                typeof(long?),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmployerPersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmployerPersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            employerPersonId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employmentDepartmentId = runtimeEntityType.AddProperty(
                "EmploymentDepartmentId",
                typeof(int?),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentDepartmentId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentDepartmentId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            employmentDepartmentId.AddAnnotation("Relational:DefaultValue", 1);
            employmentDepartmentId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employmentOccupationId = runtimeEntityType.AddProperty(
                "EmploymentOccupationId",
                typeof(int?),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentOccupationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentOccupationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            employmentOccupationId.AddAnnotation("Relational:DefaultValue", 1);
            employmentOccupationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employmentPositionId = runtimeEntityType.AddProperty(
                "EmploymentPositionId",
                typeof(int?),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentPositionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentPositionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            employmentPositionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employmentRankId = runtimeEntityType.AddProperty(
                "EmploymentRankId",
                typeof(int?),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentRankId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentRankId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            employmentRankId.AddAnnotation("Relational:DefaultValue", 1);
            employmentRankId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employmentStatusId = runtimeEntityType.AddProperty(
                "EmploymentStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            employmentStatusId.AddAnnotation("Relational:DefaultValue", 1);
            employmentStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employmentWorkShiftId = runtimeEntityType.AddProperty(
                "EmploymentWorkShiftId",
                typeof(int?),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentWorkShiftId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentWorkShiftId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            employmentWorkShiftId.AddAnnotation("Relational:DefaultValue", 1);
            employmentWorkShiftId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(PersonEmployment).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isDeleted.AddAnnotation("Relational:DefaultValue", false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDateTimeStamp = runtimeEntityType.AddProperty(
                "ModifiedDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PersonEmployment).GetProperty("ModifiedDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<ModifiedDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            modifiedDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            modifiedDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personEmploymentDescription = runtimeEntityType.AddProperty(
                "PersonEmploymentDescription",
                typeof(string),
                propertyInfo: typeof(PersonEmployment).GetProperty("PersonEmploymentDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<PersonEmploymentDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 300);
            personEmploymentDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personEmploymentGuid = runtimeEntityType.AddProperty(
                "PersonEmploymentGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonEmployment).GetProperty("PersonEmploymentGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<PersonEmploymentGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personEmploymentGuid.AddAnnotation("Relational:DefaultValueSql", "(newid())");
            personEmploymentGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personGuid = runtimeEntityType.AddProperty(
                "PersonGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonEmployment).GetProperty("PersonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<PersonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(PersonEmployment).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rowStatusId = runtimeEntityType.AddProperty(
                "RowStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonEmployment).GetProperty("RowStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<RowStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            rowStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceId = runtimeEntityType.AddProperty(
                "SourceId",
                typeof(long),
                propertyInfo: typeof(PersonEmployment).GetProperty("SourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<SourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            sourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { personEmploymentId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { employerOrganizationId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { employerPersonId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { employmentDepartmentId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { employmentOccupationId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { employmentPositionId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { employmentRankId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { employmentStatusId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { employmentWorkShiftId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { personId });

            var index8 = runtimeEntityType.AddIndex(
                new[] { rowStatusId });

            var index9 = runtimeEntityType.AddIndex(
                new[] { sourceId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmployerOrganizationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OrganizationId") }),
                principalEntityType);

            var employerOrganization = declaringEntityType.AddNavigation("EmployerOrganization",
                runtimeForeignKey,
                onDependent: true,
                typeof(Organization),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmployerOrganization", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmployerOrganization>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personEmployments = principalEntityType.AddNavigation("PersonEmployments",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonEmployment>),
                propertyInfo: typeof(Organization).GetProperty("PersonEmployments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Organization).GetField("<PersonEmployments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonEmployment_Organization");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmployerPersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var employerPerson = declaringEntityType.AddNavigation("EmployerPerson",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmployerPerson", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmployerPerson>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personEmploymentEmployerPeople = principalEntityType.AddNavigation("PersonEmploymentEmployerPeople",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonEmployment>),
                propertyInfo: typeof(Person).GetProperty("PersonEmploymentEmployerPeople", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<PersonEmploymentEmployerPeople>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonEmployment_Person1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmploymentDepartmentId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EmploymentDepartmentId") }),
                principalEntityType);

            var employmentDepartment = declaringEntityType.AddNavigation("EmploymentDepartment",
                runtimeForeignKey,
                onDependent: true,
                typeof(EmploymentDepartmentDim),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentDepartment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentDepartment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personEmployments = principalEntityType.AddNavigation("PersonEmployments",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonEmployment>),
                propertyInfo: typeof(EmploymentDepartmentDim).GetProperty("PersonEmployments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmploymentDepartmentDim).GetField("<PersonEmployments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonEmployment_EmploymentDepartmentDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmploymentOccupationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EmploymentOccupationId") }),
                principalEntityType);

            var employmentOccupation = declaringEntityType.AddNavigation("EmploymentOccupation",
                runtimeForeignKey,
                onDependent: true,
                typeof(EmploymentOccupationDim),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentOccupation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentOccupation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personEmployments = principalEntityType.AddNavigation("PersonEmployments",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonEmployment>),
                propertyInfo: typeof(EmploymentOccupationDim).GetProperty("PersonEmployments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmploymentOccupationDim).GetField("<PersonEmployments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "EmploymentOccupationDIM_PersonEmployment_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmploymentPositionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EmploymentPositionId") }),
                principalEntityType);

            var employmentPosition = declaringEntityType.AddNavigation("EmploymentPosition",
                runtimeForeignKey,
                onDependent: true,
                typeof(EmploymentPositionDim),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentPosition", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentPosition>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personEmployments = principalEntityType.AddNavigation("PersonEmployments",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonEmployment>),
                propertyInfo: typeof(EmploymentPositionDim).GetProperty("PersonEmployments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmploymentPositionDim).GetField("<PersonEmployments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "EmploymentPositionDIM_PersonEmployment_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmploymentRankId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EmploymentRankId") }),
                principalEntityType);

            var employmentRank = declaringEntityType.AddNavigation("EmploymentRank",
                runtimeForeignKey,
                onDependent: true,
                typeof(EmploymentRankDim),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentRank", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentRank>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personEmployments = principalEntityType.AddNavigation("PersonEmployments",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonEmployment>),
                propertyInfo: typeof(EmploymentRankDim).GetProperty("PersonEmployments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmploymentRankDim).GetField("<PersonEmployments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "EmploymentRankDIM_PersonEmployment_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmploymentStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EmploymentStatusId") }),
                principalEntityType);

            var employmentStatus = declaringEntityType.AddNavigation("EmploymentStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(EmploymentStatusDim),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personEmployments = principalEntityType.AddNavigation("PersonEmployments",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonEmployment>),
                propertyInfo: typeof(EmploymentStatusDim).GetProperty("PersonEmployments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmploymentStatusDim).GetField("<PersonEmployments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonEmployment_EmploymentStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmploymentWorkShiftId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EmploymentWorkShiftId") }),
                principalEntityType);

            var employmentWorkShift = declaringEntityType.AddNavigation("EmploymentWorkShift",
                runtimeForeignKey,
                onDependent: true,
                typeof(EmploymentWorkShiftDim),
                propertyInfo: typeof(PersonEmployment).GetProperty("EmploymentWorkShift", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<EmploymentWorkShift>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personEmployments = principalEntityType.AddNavigation("PersonEmployments",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonEmployment>),
                propertyInfo: typeof(EmploymentWorkShiftDim).GetProperty("PersonEmployments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmploymentWorkShiftDim).GetField("<PersonEmployments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "EmploymentWorkShiftDIM_PersonEmployment_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(PersonEmployment).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personEmploymentPeople = principalEntityType.AddNavigation("PersonEmploymentPeople",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonEmployment>),
                propertyInfo: typeof(Person).GetProperty("PersonEmploymentPeople", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<PersonEmploymentPeople>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonEmployment_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RowStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RowStatusId") }),
                principalEntityType);

            var rowStatus = declaringEntityType.AddNavigation("RowStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(RowStatusDim),
                propertyInfo: typeof(PersonEmployment).GetProperty("RowStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<RowStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personEmployments = principalEntityType.AddNavigation("PersonEmployments",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonEmployment>),
                propertyInfo: typeof(RowStatusDim).GetProperty("PersonEmployments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RowStatusDim).GetField("<PersonEmployments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonEmployment_RowStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SourceId") }),
                principalEntityType,
                required: true);

            var source = declaringEntityType.AddNavigation("Source",
                runtimeForeignKey,
                onDependent: true,
                typeof(Source),
                propertyInfo: typeof(PersonEmployment).GetProperty("Source", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEmployment).GetField("<Source>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personEmployments = principalEntityType.AddNavigation("PersonEmployments",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonEmployment>),
                propertyInfo: typeof(Source).GetProperty("PersonEmployments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Source).GetField("<PersonEmployments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonEmployment_Source");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PersonEmployment");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
