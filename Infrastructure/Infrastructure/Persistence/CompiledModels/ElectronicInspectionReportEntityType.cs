// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ElectronicInspectionReportEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ElectronicInspectionReport",
                typeof(ElectronicInspectionReport),
                baseEntityType,
                propertyCount: 28,
                navigationCount: 8,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var code = runtimeEntityType.AddProperty(
                "Code",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("Code", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<Code>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            code.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<Comment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDateTime = runtimeEntityType.AddProperty(
                "CreationDateTime",
                typeof(DateTime),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("CreationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<CreationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            creationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            creationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationUserId = runtimeEntityType.AddProperty(
                "CreationUserId",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("CreationUserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<CreationUserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            creationUserId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var day = runtimeEntityType.AddProperty(
                "Day",
                typeof(DateOnly?),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("Day", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<Day>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            day.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionReportStatusId = runtimeEntityType.AddProperty(
                "ElectronicInspectionReportStatusId",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ElectronicInspectionReportStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ElectronicInspectionReportStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0L);
            electronicInspectionReportStatusId.AddAnnotation("Relational:DefaultValue", 1L);
            electronicInspectionReportStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fmsreportStatusId = runtimeEntityType.AddProperty(
                "FmsreportStatusId",
                typeof(long?),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("FmsreportStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<FmsreportStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            fmsreportStatusId.AddAnnotation("Relational:ColumnName", "FMSReportStatusId");
            fmsreportStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fromPeriod = runtimeEntityType.AddProperty(
                "FromPeriod",
                typeof(TimeOnly?),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("FromPeriod", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<FromPeriod>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            fromPeriod.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fullDateFrom = runtimeEntityType.AddProperty(
                "FullDateFrom",
                typeof(DateTime?),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("FullDateFrom", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<FullDateFrom>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            fullDateFrom.AddAnnotation("Relational:ColumnType", "datetime");
            fullDateFrom.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fullDateTo = runtimeEntityType.AddProperty(
                "FullDateTo",
                typeof(DateTime?),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("FullDateTo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<FullDateTo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            fullDateTo.AddAnnotation("Relational:ColumnName", "FullDateTO");
            fullDateTo.AddAnnotation("Relational:ColumnType", "datetime");
            fullDateTo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var generalNotes = runtimeEntityType.AddProperty(
                "GeneralNotes",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("GeneralNotes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<GeneralNotes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            generalNotes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isViewed = runtimeEntityType.AddProperty(
                "IsViewed",
                typeof(bool?),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("IsViewed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<IsViewed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isViewed.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var parentBranchId = runtimeEntityType.AddProperty(
                "ParentBranchId",
                typeof(Guid?),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ParentBranchId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ParentBranchId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            parentBranchId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var parentBranchName = runtimeEntityType.AddProperty(
                "ParentBranchName",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ParentBranchName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ParentBranchName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            parentBranchName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var replacedCommunicationMachine = runtimeEntityType.AddProperty(
                "ReplacedCommunicationMachine",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ReplacedCommunicationMachine", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ReplacedCommunicationMachine>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            replacedCommunicationMachine.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var replacedComputer = runtimeEntityType.AddProperty(
                "ReplacedComputer",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ReplacedComputer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ReplacedComputer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            replacedComputer.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var replacedPrinter = runtimeEntityType.AddProperty(
                "ReplacedPrinter",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ReplacedPrinter", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ReplacedPrinter>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            replacedPrinter.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subBaranchId = runtimeEntityType.AddProperty(
                "SubBaranchId",
                typeof(Guid?),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("SubBaranchId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<SubBaranchId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subBaranchId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subBranchName = runtimeEntityType.AddProperty(
                "SubBranchName",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("SubBranchName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<SubBranchName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            subBranchName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var toPeriod = runtimeEntityType.AddProperty(
                "ToPeriod",
                typeof(TimeOnly?),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ToPeriod", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ToPeriod>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            toPeriod.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var transporterCode = runtimeEntityType.AddProperty(
                "TransporterCode",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("TransporterCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<TransporterCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            transporterCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var transporterColor = runtimeEntityType.AddProperty(
                "TransporterColor",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("TransporterColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<TransporterColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            transporterColor.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var transporterId = runtimeEntityType.AddProperty(
                "TransporterId",
                typeof(Guid?),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("TransporterId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<TransporterId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            transporterId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var transporterMileage = runtimeEntityType.AddProperty(
                "TransporterMileage",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("TransporterMileage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<TransporterMileage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            transporterMileage.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var transporterName = runtimeEntityType.AddProperty(
                "TransporterName",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("TransporterName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<TransporterName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            transporterName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var transporterNumber = runtimeEntityType.AddProperty(
                "TransporterNumber",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("TransporterNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<TransporterNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            transporterNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var transporterType = runtimeEntityType.AddProperty(
                "TransporterType",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("TransporterType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<TransporterType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 2000);
            transporterType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { electronicInspectionReportStatusId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ElectronicInspectionReportStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var electronicInspectionReportStatus = declaringEntityType.AddNavigation("ElectronicInspectionReportStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(ElectronicInspectionReportStatus),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ElectronicInspectionReportStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ElectronicInspectionReportStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionReports = principalEntityType.AddNavigation("ElectronicInspectionReports",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionReport>),
                propertyInfo: typeof(ElectronicInspectionReportStatus).GetProperty("ElectronicInspectionReports", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportStatus).GetField("<ElectronicInspectionReports>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ElectronicInspectionReport_ElectronicInspectionReportStatus");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ElectronicInspectionReport");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
