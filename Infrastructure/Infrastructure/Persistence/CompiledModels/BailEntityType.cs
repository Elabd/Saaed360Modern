// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class BailEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Bail",
                typeof(Bail),
                baseEntityType,
                propertyCount: 8,
                navigationCount: 3,
                foreignKeyCount: 3,
                unnamedIndexCount: 2,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(Bail).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bail).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bailConditionId = runtimeEntityType.AddProperty(
                "BailConditionId",
                typeof(int?),
                propertyInfo: typeof(Bail).GetProperty("BailConditionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bail).GetField("<BailConditionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            bailConditionId.AddAnnotation("Relational:DefaultValue", 1);
            bailConditionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bailHearingDate = runtimeEntityType.AddProperty(
                "BailHearingDate",
                typeof(DateTime?),
                propertyInfo: typeof(Bail).GetProperty("BailHearingDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bail).GetField("<BailHearingDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bailHearingDate.AddAnnotation("Relational:ColumnType", "datetime");
            bailHearingDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bailPostedAmount = runtimeEntityType.AddProperty(
                "BailPostedAmount",
                typeof(double?),
                propertyInfo: typeof(Bail).GetProperty("BailPostedAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bail).GetField("<BailPostedAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bailPostedAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bailPostedDate = runtimeEntityType.AddProperty(
                "BailPostedDate",
                typeof(DateTime?),
                propertyInfo: typeof(Bail).GetProperty("BailPostedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bail).GetField("<BailPostedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bailPostedDate.AddAnnotation("Relational:ColumnType", "datetime");
            bailPostedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bailRequirementId = runtimeEntityType.AddProperty(
                "BailRequirementId",
                typeof(int?),
                propertyInfo: typeof(Bail).GetProperty("BailRequirementId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bail).GetField("<BailRequirementId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            bailRequirementId.AddAnnotation("Relational:DefaultValue", 1);
            bailRequirementId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bailRevokedDate = runtimeEntityType.AddProperty(
                "BailRevokedDate",
                typeof(DateTime?),
                propertyInfo: typeof(Bail).GetProperty("BailRevokedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bail).GetField("<BailRevokedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bailRevokedDate.AddAnnotation("Relational:ColumnType", "datetime");
            bailRevokedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bailSetAmount = runtimeEntityType.AddProperty(
                "BailSetAmount",
                typeof(double?),
                propertyInfo: typeof(Bail).GetProperty("BailSetAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bail).GetField("<BailSetAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bailSetAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_Bail_1");

            var index = runtimeEntityType.AddIndex(
                new[] { bailConditionId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { bailRequirementId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(Bail).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bail).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var bail = principalEntityType.AddNavigation("Bail",
                runtimeForeignKey,
                onDependent: false,
                typeof(Bail),
                propertyInfo: typeof(Activity).GetProperty("Bail", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<Bail>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Bail_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BailConditionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("BailConditionId") }),
                principalEntityType);

            var bailCondition = declaringEntityType.AddNavigation("BailCondition",
                runtimeForeignKey,
                onDependent: true,
                typeof(BailConditionDim),
                propertyInfo: typeof(Bail).GetProperty("BailCondition", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bail).GetField("<BailCondition>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var bails = principalEntityType.AddNavigation("Bails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Bail>),
                propertyInfo: typeof(BailConditionDim).GetProperty("Bails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BailConditionDim).GetField("<Bails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Bail_BailConditionDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BailRequirementId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("BailRequirementId") }),
                principalEntityType);

            var bailRequirement = declaringEntityType.AddNavigation("BailRequirement",
                runtimeForeignKey,
                onDependent: true,
                typeof(BailRequirementDim),
                propertyInfo: typeof(Bail).GetProperty("BailRequirement", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bail).GetField("<BailRequirement>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var bails = principalEntityType.AddNavigation("Bails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Bail>),
                propertyInfo: typeof(BailRequirementDim).GetProperty("Bails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BailRequirementDim).GetField("<Bails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "BailRequirements_Bail_FK1");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Bail");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
