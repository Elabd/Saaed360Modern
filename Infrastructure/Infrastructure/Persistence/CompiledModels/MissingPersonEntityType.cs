// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class MissingPersonEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.MissingPerson",
                typeof(MissingPerson),
                baseEntityType,
                propertyCount: 15,
                navigationCount: 7,
                foreignKeyCount: 7,
                unnamedIndexCount: 6,
                keyCount: 1);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(MissingPerson).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var declarationDate = runtimeEntityType.AddProperty(
                "DeclarationDate",
                typeof(DateTime?),
                propertyInfo: typeof(MissingPerson).GetProperty("DeclarationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<DeclarationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            declarationDate.AddAnnotation("Relational:ColumnType", "datetime");
            declarationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var declarationPersonGuid = runtimeEntityType.AddProperty(
                "DeclarationPersonGuid",
                typeof(Guid),
                propertyInfo: typeof(MissingPerson).GetProperty("DeclarationPersonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<DeclarationPersonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            declarationPersonGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var declarationPersonId = runtimeEntityType.AddProperty(
                "DeclarationPersonId",
                typeof(long?),
                propertyInfo: typeof(MissingPerson).GetProperty("DeclarationPersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<DeclarationPersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            declarationPersonId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var foundDate = runtimeEntityType.AddProperty(
                "FoundDate",
                typeof(DateTime?),
                propertyInfo: typeof(MissingPerson).GetProperty("FoundDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<FoundDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            foundDate.AddAnnotation("Relational:ColumnType", "datetime");
            foundDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var foundIndicator = runtimeEntityType.AddProperty(
                "FoundIndicator",
                typeof(bool?),
                propertyInfo: typeof(MissingPerson).GetProperty("FoundIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<FoundIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            foundIndicator.AddAnnotation("Relational:DefaultValue", false);
            foundIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var foundLocationGuid = runtimeEntityType.AddProperty(
                "FoundLocationGuid",
                typeof(Guid),
                propertyInfo: typeof(MissingPerson).GetProperty("FoundLocationGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<FoundLocationGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            foundLocationGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var foundLocationId = runtimeEntityType.AddProperty(
                "FoundLocationId",
                typeof(long?),
                propertyInfo: typeof(MissingPerson).GetProperty("FoundLocationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<FoundLocationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            foundLocationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var interestIndicator = runtimeEntityType.AddProperty(
                "InterestIndicator",
                typeof(bool?),
                propertyInfo: typeof(MissingPerson).GetProperty("InterestIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<InterestIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            interestIndicator.AddAnnotation("Relational:DefaultValue", false);
            interestIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastSeenDate = runtimeEntityType.AddProperty(
                "LastSeenDate",
                typeof(DateTime?),
                propertyInfo: typeof(MissingPerson).GetProperty("LastSeenDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<LastSeenDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastSeenDate.AddAnnotation("Relational:ColumnType", "datetime");
            lastSeenDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastSeenLocationGuid = runtimeEntityType.AddProperty(
                "LastSeenLocationGuid",
                typeof(Guid),
                propertyInfo: typeof(MissingPerson).GetProperty("LastSeenLocationGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<LastSeenLocationGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            lastSeenLocationGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastSeenLocationId = runtimeEntityType.AddProperty(
                "LastSeenLocationId",
                typeof(long?),
                propertyInfo: typeof(MissingPerson).GetProperty("LastSeenLocationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<LastSeenLocationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastSeenLocationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missingPersonCategoryId = runtimeEntityType.AddProperty(
                "MissingPersonCategoryId",
                typeof(int?),
                propertyInfo: typeof(MissingPerson).GetProperty("MissingPersonCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<MissingPersonCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            missingPersonCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            missingPersonCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missingPersonCircumstanceId = runtimeEntityType.AddProperty(
                "MissingPersonCircumstanceId",
                typeof(int?),
                propertyInfo: typeof(MissingPerson).GetProperty("MissingPersonCircumstanceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<MissingPersonCircumstanceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            missingPersonCircumstanceId.AddAnnotation("Relational:DefaultValue", 1);
            missingPersonCircumstanceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missingPersonStatusId = runtimeEntityType.AddProperty(
                "MissingPersonStatusId",
                typeof(int?),
                propertyInfo: typeof(MissingPerson).GetProperty("MissingPersonStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<MissingPersonStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            missingPersonStatusId.AddAnnotation("Relational:DefaultValue", 1);
            missingPersonStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { personId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_MissingPerson_1");

            var index = runtimeEntityType.AddIndex(
                new[] { declarationPersonId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { foundLocationId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { lastSeenLocationId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { missingPersonCategoryId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { missingPersonCircumstanceId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { missingPersonStatusId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DeclarationPersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var declarationPerson = declaringEntityType.AddNavigation("DeclarationPerson",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(MissingPerson).GetProperty("DeclarationPerson", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<DeclarationPerson>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var missingPersonDeclarationPeople = principalEntityType.AddNavigation("MissingPersonDeclarationPeople",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MissingPerson>),
                propertyInfo: typeof(Person).GetProperty("MissingPersonDeclarationPeople", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<MissingPersonDeclarationPeople>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MissingPerson_Person-Declaration");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FoundLocationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LocationId") }),
                principalEntityType);

            var foundLocation = declaringEntityType.AddNavigation("FoundLocation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Location),
                propertyInfo: typeof(MissingPerson).GetProperty("FoundLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<FoundLocation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var missingPersonFoundLocations = principalEntityType.AddNavigation("MissingPersonFoundLocations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MissingPerson>),
                propertyInfo: typeof(Location).GetProperty("MissingPersonFoundLocations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Location).GetField("<MissingPersonFoundLocations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MissingPerson_Location-Found");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LastSeenLocationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LocationId") }),
                principalEntityType);

            var lastSeenLocation = declaringEntityType.AddNavigation("LastSeenLocation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Location),
                propertyInfo: typeof(MissingPerson).GetProperty("LastSeenLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<LastSeenLocation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var missingPersonLastSeenLocations = principalEntityType.AddNavigation("MissingPersonLastSeenLocations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MissingPerson>),
                propertyInfo: typeof(Location).GetProperty("MissingPersonLastSeenLocations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Location).GetField("<MissingPersonLastSeenLocations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MissingPerson_Location-LastSeen");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MissingPersonCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MissingPersonCategoryId") }),
                principalEntityType);

            var missingPersonCategory = declaringEntityType.AddNavigation("MissingPersonCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(MissingPersonCategoryDim),
                propertyInfo: typeof(MissingPerson).GetProperty("MissingPersonCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<MissingPersonCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var missingPeople = principalEntityType.AddNavigation("MissingPeople",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MissingPerson>),
                propertyInfo: typeof(MissingPersonCategoryDim).GetProperty("MissingPeople", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPersonCategoryDim).GetField("<MissingPeople>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MissingPerson_MissingPersonCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MissingPersonCircumstanceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MissingPersonCircumstanceId") }),
                principalEntityType);

            var missingPersonCircumstance = declaringEntityType.AddNavigation("MissingPersonCircumstance",
                runtimeForeignKey,
                onDependent: true,
                typeof(MissingPersonCircumstanceDim),
                propertyInfo: typeof(MissingPerson).GetProperty("MissingPersonCircumstance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<MissingPersonCircumstance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var missingPeople = principalEntityType.AddNavigation("MissingPeople",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MissingPerson>),
                propertyInfo: typeof(MissingPersonCircumstanceDim).GetProperty("MissingPeople", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPersonCircumstanceDim).GetField("<MissingPeople>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MissingPerson_MissingPersonCircumstanceDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MissingPersonStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MissingPersonStatusId") }),
                principalEntityType);

            var missingPersonStatus = declaringEntityType.AddNavigation("MissingPersonStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(MissingPersonStatusDim),
                propertyInfo: typeof(MissingPerson).GetProperty("MissingPersonStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<MissingPersonStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var missingPeople = principalEntityType.AddNavigation("MissingPeople",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<MissingPerson>),
                propertyInfo: typeof(MissingPersonStatusDim).GetProperty("MissingPeople", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPersonStatusDim).GetField("<MissingPeople>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MissingPerson_MissingPersonStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                unique: true,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(MissingPerson).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissingPerson).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var missingPersonPerson = principalEntityType.AddNavigation("MissingPersonPerson",
                runtimeForeignKey,
                onDependent: false,
                typeof(MissingPerson),
                propertyInfo: typeof(Person).GetProperty("MissingPersonPerson", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<MissingPersonPerson>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_MissingPerson_Person");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "MissingPerson");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
