// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class VMdtaccidentReportBasicDetailEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.VMdtaccidentReportBasicDetail",
                typeof(VMdtaccidentReportBasicDetail),
                baseEntityType,
                propertyCount: 65);

            var accidentLocation = runtimeEntityType.AddProperty(
                "AccidentLocation",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("AccidentLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<AccidentLocation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentLocation.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accidentLocationDescriptionId = runtimeEntityType.AddProperty(
                "AccidentLocationDescriptionId",
                typeof(long?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("AccidentLocationDescriptionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<AccidentLocationDescriptionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentLocationDescriptionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accidentReasonComment = runtimeEntityType.AddProperty(
                "AccidentReasonComment",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("AccidentReasonComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<AccidentReasonComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentReasonComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accidentType = runtimeEntityType.AddProperty(
                "AccidentType",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("AccidentType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<AccidentType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            accidentType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accidentTypeCode = runtimeEntityType.AddProperty(
                "AccidentTypeCode",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("AccidentTypeCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<AccidentTypeCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            accidentTypeCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accidentTypeComment = runtimeEntityType.AddProperty(
                "AccidentTypeComment",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("AccidentTypeComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<AccidentTypeComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentTypeComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accidentTypeId = runtimeEntityType.AddProperty(
                "AccidentTypeId",
                typeof(int?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("AccidentTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<AccidentTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityDate = runtimeEntityType.AddProperty(
                "ActivityDate",
                typeof(DateTime?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ActivityDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ActivityDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            activityDate.AddAnnotation("Relational:ColumnType", "datetime");
            activityDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityReason = runtimeEntityType.AddProperty(
                "ActivityReason",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ActivityReason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ActivityReason>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            activityReason.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityReasonId = runtimeEntityType.AddProperty(
                "ActivityReasonId",
                typeof(int?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ActivityReasonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ActivityReasonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            activityReasonId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var actualAccidentDate = runtimeEntityType.AddProperty(
                "ActualAccidentDate",
                typeof(DateTime?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ActualAccidentDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ActualAccidentDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            actualAccidentDate.AddAnnotation("Relational:ColumnType", "datetime");
            actualAccidentDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var area = runtimeEntityType.AddProperty(
                "Area",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("Area", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<Area>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            area.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var city = runtimeEntityType.AddProperty(
                "City",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("City", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<City>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            city.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cityId = runtimeEntityType.AddProperty(
                "CityId",
                typeof(long?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("CityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<CityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var collisionDescription = runtimeEntityType.AddProperty(
                "CollisionDescription",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("CollisionDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<CollisionDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            collisionDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var collisionTypeId = runtimeEntityType.AddProperty(
                "CollisionTypeId",
                typeof(long?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("CollisionTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<CollisionTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            collisionTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<Comment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var crossStreet = runtimeEntityType.AddProperty(
                "CrossStreet",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("CrossStreet", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<CrossStreet>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            crossStreet.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var crossingStreetId = runtimeEntityType.AddProperty(
                "CrossingStreetId",
                typeof(long?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("CrossingStreetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<CrossingStreetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            crossingStreetId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var easternCoOrdinate = runtimeEntityType.AddProperty(
                "EasternCoOrdinate",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("EasternCoOrdinate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<EasternCoOrdinate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            easternCoOrdinate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emirate = runtimeEntityType.AddProperty(
                "Emirate",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("Emirate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<Emirate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            emirate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emiratesId = runtimeEntityType.AddProperty(
                "EmiratesId",
                typeof(long?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("EmiratesId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<EmiratesId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            emiratesId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentGeneratedNumber = runtimeEntityType.AddProperty(
                "IncidentGeneratedNumber",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("IncidentGeneratedNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<IncidentGeneratedNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            incidentGeneratedNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intersection = runtimeEntityType.AddProperty(
                "Intersection",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("Intersection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<Intersection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            intersection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intersectionCode = runtimeEntityType.AddProperty(
                "IntersectionCode",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("IntersectionCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<IntersectionCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            intersectionCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intersectionComment = runtimeEntityType.AddProperty(
                "IntersectionComment",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("IntersectionComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<IntersectionComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intersectionComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intersectionId = runtimeEntityType.AddProperty(
                "IntersectionId",
                typeof(int?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("IntersectionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<IntersectionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intersectionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDraftStatus = runtimeEntityType.AddProperty(
                "IsDraftStatus",
                typeof(bool?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("IsDraftStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<IsDraftStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDraftStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isMonitoringWithCamera = runtimeEntityType.AddProperty(
                "IsMonitoringWithCamera",
                typeof(bool?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("IsMonitoringWithCamera", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<IsMonitoringWithCamera>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isMonitoringWithCamera.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isTransferedFromPolice = runtimeEntityType.AddProperty(
                "IsTransferedFromPolice",
                typeof(bool?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("IsTransferedFromPolice", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<IsTransferedFromPolice>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isTransferedFromPolice.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var locationDescription = runtimeEntityType.AddProperty(
                "LocationDescription",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("LocationDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<LocationDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            locationDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mappedFinalStatusId = runtimeEntityType.AddProperty(
                "MappedFinalStatusId",
                typeof(int?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("MappedFinalStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<MappedFinalStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mappedFinalStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mdtaccidentBasicDetailsId = runtimeEntityType.AddProperty(
                "MdtaccidentBasicDetailsId",
                typeof(int),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("MdtaccidentBasicDetailsId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<MdtaccidentBasicDetailsId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            mdtaccidentBasicDetailsId.AddAnnotation("Relational:ColumnName", "MDTAccidentBasicDetailsId");
            mdtaccidentBasicDetailsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var northernCoOrdinate = runtimeEntityType.AddProperty(
                "NorthernCoOrdinate",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("NorthernCoOrdinate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<NorthernCoOrdinate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            northernCoOrdinate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var organization = runtimeEntityType.AddProperty(
                "Organization",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("Organization", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<Organization>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 250);
            organization.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var organizationId = runtimeEntityType.AddProperty(
                "OrganizationId",
                typeof(long?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("OrganizationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<OrganizationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            organizationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var regionId = runtimeEntityType.AddProperty(
                "RegionId",
                typeof(long?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("RegionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<RegionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            regionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportDateTime = runtimeEntityType.AddProperty(
                "ReportDateTime",
                typeof(DateTime),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            reportDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            reportDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(int),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportNumber = runtimeEntityType.AddProperty(
                "ReportNumber",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            reportNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportReconstructionWillBeContinued = runtimeEntityType.AddProperty(
                "ReportReconstructionWillBeContinued",
                typeof(bool?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportReconstructionWillBeContinued", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportReconstructionWillBeContinued>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportReconstructionWillBeContinued.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportSourceId = runtimeEntityType.AddProperty(
                "ReportSourceId",
                typeof(long?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportSourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportSourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportSourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportSourceTypeCode = runtimeEntityType.AddProperty(
                "ReportSourceTypeCode",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportSourceTypeCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportSourceTypeCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 255);
            reportSourceTypeCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportSourceTypeId = runtimeEntityType.AddProperty(
                "ReportSourceTypeId",
                typeof(int?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportSourceTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportSourceTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportSourceTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportStatus = runtimeEntityType.AddProperty(
                "ReportStatus",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            reportStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportStatusCode = runtimeEntityType.AddProperty(
                "ReportStatusCode",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportStatusCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportStatusCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            reportStatusCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportStatusId = runtimeEntityType.AddProperty(
                "ReportStatusId",
                typeof(int?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportType = runtimeEntityType.AddProperty(
                "ReportType",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            reportType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportTypeCode = runtimeEntityType.AddProperty(
                "ReportTypeCode",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportTypeCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportTypeCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            reportTypeCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportTypeId = runtimeEntityType.AddProperty(
                "ReportTypeId",
                typeof(int?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ReportTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ReportTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var roadSpeed = runtimeEntityType.AddProperty(
                "RoadSpeed",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("RoadSpeed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<RoadSpeed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            roadSpeed.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var roadSpeedId = runtimeEntityType.AddProperty(
                "RoadSpeedId",
                typeof(int?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("RoadSpeedId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<RoadSpeedId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            roadSpeedId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var roadSurface = runtimeEntityType.AddProperty(
                "RoadSurface",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("RoadSurface", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<RoadSurface>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            roadSurface.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var roadSurfaceId = runtimeEntityType.AddProperty(
                "RoadSurfaceId",
                typeof(int?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("RoadSurfaceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<RoadSurfaceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            roadSurfaceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var scenario = runtimeEntityType.AddProperty(
                "Scenario",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("Scenario", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<Scenario>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            scenario.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var scenarioCode = runtimeEntityType.AddProperty(
                "ScenarioCode",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ScenarioCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ScenarioCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            scenarioCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var scenarioId = runtimeEntityType.AddProperty(
                "ScenarioId",
                typeof(int?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("ScenarioId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<ScenarioId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            scenarioId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sector = runtimeEntityType.AddProperty(
                "Sector",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("Sector", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<Sector>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            sector.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sectorId = runtimeEntityType.AddProperty(
                "SectorId",
                typeof(long?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("SectorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<SectorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            sectorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var street = runtimeEntityType.AddProperty(
                "Street",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("Street", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<Street>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            street.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var streetId = runtimeEntityType.AddProperty(
                "StreetId",
                typeof(long?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("StreetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<StreetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            streetId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weather = runtimeEntityType.AddProperty(
                "Weather",
                typeof(string),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("Weather", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<Weather>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            weather.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weatherId = runtimeEntityType.AddProperty(
                "WeatherId",
                typeof(int?),
                propertyInfo: typeof(VMdtaccidentReportBasicDetail).GetProperty("WeatherId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtaccidentReportBasicDetail).GetField("<WeatherId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            weatherId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "V_MDTAccidentReportBasicDetails");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
