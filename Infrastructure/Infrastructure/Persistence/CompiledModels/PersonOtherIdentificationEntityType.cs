// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PersonOtherIdentificationEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PersonOtherIdentification",
                typeof(PersonOtherIdentification),
                baseEntityType,
                propertyCount: 22,
                navigationCount: 9,
                foreignKeyCount: 9,
                unnamedIndexCount: 9,
                keyCount: 1);

            var personOtherIdentificationId = runtimeEntityType.AddProperty(
                "PersonOtherIdentificationId",
                typeof(long),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("PersonOtherIdentificationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<PersonOtherIdentificationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            personOtherIdentificationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createDateTimeStamp = runtimeEntityType.AddProperty(
                "CreateDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("CreateDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<CreateDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            createDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            createDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var effectiveDate = runtimeEntityType.AddProperty(
                "EffectiveDate",
                typeof(DateOnly?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("EffectiveDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<EffectiveDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            effectiveDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var effectiveYear = runtimeEntityType.AddProperty(
                "EffectiveYear",
                typeof(int?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("EffectiveYear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<EffectiveYear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            effectiveYear.AddAnnotation("Relational:ComputedColumnSql", "(datepart(year,[EffectiveDate]))");
            effectiveYear.AddAnnotation("Relational:IsStored", false);
            effectiveYear.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expirationDate = runtimeEntityType.AddProperty(
                "ExpirationDate",
                typeof(DateOnly?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("ExpirationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<ExpirationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            expirationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expirationYear = runtimeEntityType.AddProperty(
                "ExpirationYear",
                typeof(int?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("ExpirationYear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<ExpirationYear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            expirationYear.AddAnnotation("Relational:ComputedColumnSql", "(datepart(year,[ExpirationDate]))");
            expirationYear.AddAnnotation("Relational:IsStored", false);
            expirationYear.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identicationImageGuid = runtimeEntityType.AddProperty(
                "IdenticationImageGuid",
                typeof(Guid?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdenticationImageGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdenticationImageGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            identicationImageGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identicationImageId = runtimeEntityType.AddProperty(
                "IdenticationImageId",
                typeof(long?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdenticationImageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdenticationImageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            identicationImageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identification = runtimeEntityType.AddProperty(
                "Identification",
                typeof(string),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("Identification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<Identification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            identification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identificationAuthorityId = runtimeEntityType.AddProperty(
                "IdentificationAuthorityId",
                typeof(int?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdentificationAuthorityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdentificationAuthorityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            identificationAuthorityId.AddAnnotation("Relational:DefaultValue", 1);
            identificationAuthorityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identificationCategoryId = runtimeEntityType.AddProperty(
                "IdentificationCategoryId",
                typeof(int?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdentificationCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdentificationCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            identificationCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            identificationCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identificationClassId = runtimeEntityType.AddProperty(
                "IdentificationClassId",
                typeof(int?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdentificationClassId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdentificationClassId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            identificationClassId.AddAnnotation("Relational:DefaultValue", 1);
            identificationClassId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identificationRestrictionId = runtimeEntityType.AddProperty(
                "IdentificationRestrictionId",
                typeof(int?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdentificationRestrictionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdentificationRestrictionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            identificationRestrictionId.AddAnnotation("Relational:DefaultValue", 1);
            identificationRestrictionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identificationStatusId = runtimeEntityType.AddProperty(
                "IdentificationStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdentificationStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdentificationStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            identificationStatusId.AddAnnotation("Relational:DefaultValue", 1);
            identificationStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isDeleted.AddAnnotation("Relational:DefaultValue", false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDateTimeStamp = runtimeEntityType.AddProperty(
                "ModifiedDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("ModifiedDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<ModifiedDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            modifiedDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            modifiedDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personGuid = runtimeEntityType.AddProperty(
                "PersonGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("PersonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<PersonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personOtherIdentificationDescription = runtimeEntityType.AddProperty(
                "PersonOtherIdentificationDescription",
                typeof(string),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("PersonOtherIdentificationDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<PersonOtherIdentificationDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 300);
            personOtherIdentificationDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personOtherIdentificationGuid = runtimeEntityType.AddProperty(
                "PersonOtherIdentificationGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("PersonOtherIdentificationGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<PersonOtherIdentificationGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personOtherIdentificationGuid.AddAnnotation("Relational:DefaultValueSql", "(newid())");
            personOtherIdentificationGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rowStatusId = runtimeEntityType.AddProperty(
                "RowStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("RowStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<RowStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            rowStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceId = runtimeEntityType.AddProperty(
                "SourceId",
                typeof(long),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("SourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<SourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            sourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { personOtherIdentificationId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { identicationImageId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { identificationAuthorityId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { identificationCategoryId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { identificationClassId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { identificationRestrictionId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { identificationStatusId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { personId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { rowStatusId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { sourceId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdenticationImageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonImageId") }),
                principalEntityType);

            var identicationImage = declaringEntityType.AddNavigation("IdenticationImage",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonImage),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdenticationImage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdenticationImage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personOtherIdentifications = principalEntityType.AddNavigation("PersonOtherIdentifications",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonOtherIdentification>),
                propertyInfo: typeof(PersonImage).GetProperty("PersonOtherIdentifications", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonImage).GetField("<PersonOtherIdentifications>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonOtherIdentification_Image");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdentificationAuthorityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IdentificationAuthorityId") }),
                principalEntityType);

            var identificationAuthority = declaringEntityType.AddNavigation("IdentificationAuthority",
                runtimeForeignKey,
                onDependent: true,
                typeof(IdentificationAuthorityDim),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdentificationAuthority", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdentificationAuthority>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personOtherIdentifications = principalEntityType.AddNavigation("PersonOtherIdentifications",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonOtherIdentification>),
                propertyInfo: typeof(IdentificationAuthorityDim).GetProperty("PersonOtherIdentifications", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentificationAuthorityDim).GetField("<PersonOtherIdentifications>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "IdentityAuthorityDIM_PersonIdenityDocument_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdentificationCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IdentificationCategoryId") }),
                principalEntityType);

            var identificationCategory = declaringEntityType.AddNavigation("IdentificationCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(IdentificationCategoryDim),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdentificationCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdentificationCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personOtherIdentifications = principalEntityType.AddNavigation("PersonOtherIdentifications",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonOtherIdentification>),
                propertyInfo: typeof(IdentificationCategoryDim).GetProperty("PersonOtherIdentifications", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentificationCategoryDim).GetField("<PersonOtherIdentifications>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "IdentityTypeDIM_PersonIdenityDocument_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdentificationClassId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IdentificationClassId") }),
                principalEntityType);

            var identificationClass = declaringEntityType.AddNavigation("IdentificationClass",
                runtimeForeignKey,
                onDependent: true,
                typeof(IdentificationClassDim),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdentificationClass", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdentificationClass>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personOtherIdentifications = principalEntityType.AddNavigation("PersonOtherIdentifications",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonOtherIdentification>),
                propertyInfo: typeof(IdentificationClassDim).GetProperty("PersonOtherIdentifications", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentificationClassDim).GetField("<PersonOtherIdentifications>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "IdentityClassDIM_PersonIdenityDocument_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdentificationRestrictionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IdentificationRestrictionId") }),
                principalEntityType);

            var identificationRestriction = declaringEntityType.AddNavigation("IdentificationRestriction",
                runtimeForeignKey,
                onDependent: true,
                typeof(IdentificationRestrictionDim),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdentificationRestriction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdentificationRestriction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personOtherIdentifications = principalEntityType.AddNavigation("PersonOtherIdentifications",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonOtherIdentification>),
                propertyInfo: typeof(IdentificationRestrictionDim).GetProperty("PersonOtherIdentifications", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentificationRestrictionDim).GetField("<PersonOtherIdentifications>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "IdentityRestrictionsDIM_PersonIdenityDocument_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdentificationStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IdentificationStatusId") }),
                principalEntityType);

            var identificationStatus = declaringEntityType.AddNavigation("IdentificationStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(IdentificationtStatusDim),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("IdentificationStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<IdentificationStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personOtherIdentifications = principalEntityType.AddNavigation("PersonOtherIdentifications",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonOtherIdentification>),
                propertyInfo: typeof(IdentificationtStatusDim).GetProperty("PersonOtherIdentifications", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentificationtStatusDim).GetField("<PersonOtherIdentifications>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonOtherIdentification_IdentificationtStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personOtherIdentifications = principalEntityType.AddNavigation("PersonOtherIdentifications",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonOtherIdentification>),
                propertyInfo: typeof(Person).GetProperty("PersonOtherIdentifications", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<PersonOtherIdentifications>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonOtherIdentification_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RowStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RowStatusId") }),
                principalEntityType);

            var rowStatus = declaringEntityType.AddNavigation("RowStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(RowStatusDim),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("RowStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<RowStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personOtherIdentifications = principalEntityType.AddNavigation("PersonOtherIdentifications",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonOtherIdentification>),
                propertyInfo: typeof(RowStatusDim).GetProperty("PersonOtherIdentifications", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RowStatusDim).GetField("<PersonOtherIdentifications>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonOtherIdentification_RowStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SourceId") }),
                principalEntityType,
                required: true);

            var source = declaringEntityType.AddNavigation("Source",
                runtimeForeignKey,
                onDependent: true,
                typeof(Source),
                propertyInfo: typeof(PersonOtherIdentification).GetProperty("Source", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonOtherIdentification).GetField("<Source>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personOtherIdentifications = principalEntityType.AddNavigation("PersonOtherIdentifications",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonOtherIdentification>),
                propertyInfo: typeof(Source).GetProperty("PersonOtherIdentifications", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Source).GetField("<PersonOtherIdentifications>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonOtherIdentification_Source");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PersonOtherIdentification");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
