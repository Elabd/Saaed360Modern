// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PaymentAccountOperationEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PaymentAccountOperation",
                typeof(PaymentAccountOperation),
                baseEntityType,
                propertyCount: 16,
                navigationCount: 1,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("Relational:ColumnName", "ID");
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var bankOperationType = runtimeEntityType.AddProperty(
                "BankOperationType",
                typeof(int?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("BankOperationType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<BankOperationType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bankOperationType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var callBackStatus = runtimeEntityType.AddProperty(
                "CallBackStatus",
                typeof(int?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("CallBackStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<CallBackStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            callBackStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDate = runtimeEntityType.AddProperty(
                "CreationDate",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("CreationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<CreationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDate.AddAnnotation("Relational:ColumnType", "datetime");
            creationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var merchantRefrence = runtimeEntityType.AddProperty(
                "MerchantRefrence",
                typeof(string),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("MerchantRefrence", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<MerchantRefrence>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            merchantRefrence.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var netAmount = runtimeEntityType.AddProperty(
                "NetAmount",
                typeof(decimal?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("NetAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<NetAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            netAmount.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            netAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymenMethodType = runtimeEntityType.AddProperty(
                "PaymenMethodType",
                typeof(int?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("PaymenMethodType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<PaymenMethodType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymenMethodType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentGateWayFees = runtimeEntityType.AddProperty(
                "PaymentGateWayFees",
                typeof(decimal?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("PaymentGateWayFees", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<PaymentGateWayFees>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentGateWayFees.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            paymentGateWayFees.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentInfoId = runtimeEntityType.AddProperty(
                "PaymentInfoId",
                typeof(long?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("PaymentInfoId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<PaymentInfoId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentInfoId.AddAnnotation("Relational:ColumnName", "PaymentInfoID");
            paymentInfoId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentReference = runtimeEntityType.AddProperty(
                "PaymentReference",
                typeof(string),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("PaymentReference", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<PaymentReference>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            paymentReference.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentStatus = runtimeEntityType.AddProperty(
                "PaymentStatus",
                typeof(int?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("PaymentStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<PaymentStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceAmount = runtimeEntityType.AddProperty(
                "ServiceAmount",
                typeof(decimal?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("ServiceAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<ServiceAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceAmount.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            serviceAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var totalAmount = runtimeEntityType.AddProperty(
                "TotalAmount",
                typeof(decimal?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("TotalAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<TotalAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            totalAmount.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            totalAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updatedDate = runtimeEntityType.AddProperty(
                "UpdatedDate",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("UpdatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<UpdatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            updatedDate.AddAnnotation("Relational:ColumnType", "datetime");
            updatedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(string),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 255);
            userId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vat = runtimeEntityType.AddProperty(
                "Vat",
                typeof(decimal?),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("Vat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<Vat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vat.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            vat.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { paymentInfoId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PaymentInfoId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PaymentInfoId") }),
                principalEntityType);

            var paymentInfo = declaringEntityType.AddNavigation("PaymentInfo",
                runtimeForeignKey,
                onDependent: true,
                typeof(PaymentOrganizationInfo),
                propertyInfo: typeof(PaymentAccountOperation).GetProperty("PaymentInfo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentAccountOperation).GetField("<PaymentInfo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentAccountOperations = principalEntityType.AddNavigation("PaymentAccountOperations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentAccountOperation>),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("PaymentAccountOperations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<PaymentAccountOperations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentAccountOperations_PaymentOrganizationInfo");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PaymentAccountOperations");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
