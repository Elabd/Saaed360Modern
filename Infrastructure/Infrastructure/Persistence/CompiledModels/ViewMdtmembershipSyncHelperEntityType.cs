// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ViewMdtmembershipSyncHelperEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ViewMdtmembershipSyncHelper",
                typeof(ViewMdtmembershipSyncHelper),
                baseEntityType,
                propertyCount: 23);

            var applicationId = runtimeEntityType.AddProperty(
                "ApplicationId",
                typeof(Guid),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("ApplicationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<ApplicationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            applicationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<Comment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            comment.AddAnnotation("Relational:ColumnType", "ntext");
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createDate = runtimeEntityType.AddProperty(
                "CreateDate",
                typeof(DateTime),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("CreateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<CreateDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            createDate.AddAnnotation("Relational:ColumnType", "datetime");
            createDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var email = runtimeEntityType.AddProperty(
                "Email",
                typeof(string),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("Email", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<Email>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 256);
            email.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var failedPasswordAnswerAttemptCount = runtimeEntityType.AddProperty(
                "FailedPasswordAnswerAttemptCount",
                typeof(int),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("FailedPasswordAnswerAttemptCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<FailedPasswordAnswerAttemptCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            failedPasswordAnswerAttemptCount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var failedPasswordAnswerAttemptWindowStart = runtimeEntityType.AddProperty(
                "FailedPasswordAnswerAttemptWindowStart",
                typeof(DateTime),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("FailedPasswordAnswerAttemptWindowStart", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<FailedPasswordAnswerAttemptWindowStart>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            failedPasswordAnswerAttemptWindowStart.AddAnnotation("Relational:ColumnType", "datetime");
            failedPasswordAnswerAttemptWindowStart.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var failedPasswordAttemptCount = runtimeEntityType.AddProperty(
                "FailedPasswordAttemptCount",
                typeof(int),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("FailedPasswordAttemptCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<FailedPasswordAttemptCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            failedPasswordAttemptCount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var failedPasswordAttemptWindowStart = runtimeEntityType.AddProperty(
                "FailedPasswordAttemptWindowStart",
                typeof(DateTime),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("FailedPasswordAttemptWindowStart", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<FailedPasswordAttemptWindowStart>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            failedPasswordAttemptWindowStart.AddAnnotation("Relational:ColumnType", "datetime");
            failedPasswordAttemptWindowStart.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isApproved = runtimeEntityType.AddProperty(
                "IsApproved",
                typeof(bool),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("IsApproved", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<IsApproved>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isApproved.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isLockedOut = runtimeEntityType.AddProperty(
                "IsLockedOut",
                typeof(bool),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("IsLockedOut", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<IsLockedOut>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isLockedOut.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastLockoutDate = runtimeEntityType.AddProperty(
                "LastLockoutDate",
                typeof(DateTime),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("LastLockoutDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<LastLockoutDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            lastLockoutDate.AddAnnotation("Relational:ColumnType", "datetime");
            lastLockoutDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastLoginDate = runtimeEntityType.AddProperty(
                "LastLoginDate",
                typeof(DateTime),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("LastLoginDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<LastLoginDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            lastLoginDate.AddAnnotation("Relational:ColumnType", "datetime");
            lastLoginDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastModifiedDate = runtimeEntityType.AddProperty(
                "LastModifiedDate",
                typeof(DateTime?),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("LastModifiedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<LastModifiedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastModifiedDate.AddAnnotation("Relational:ColumnType", "datetime");
            lastModifiedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastPasswordChangedDate = runtimeEntityType.AddProperty(
                "LastPasswordChangedDate",
                typeof(DateTime),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("LastPasswordChangedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<LastPasswordChangedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            lastPasswordChangedDate.AddAnnotation("Relational:ColumnType", "datetime");
            lastPasswordChangedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var loweredEmail = runtimeEntityType.AddProperty(
                "LoweredEmail",
                typeof(string),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("LoweredEmail", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<LoweredEmail>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 256);
            loweredEmail.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mobilePin = runtimeEntityType.AddProperty(
                "MobilePin",
                typeof(string),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("MobilePin", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<MobilePin>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 16);
            mobilePin.AddAnnotation("Relational:ColumnName", "MobilePIN");
            mobilePin.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var password = runtimeEntityType.AddProperty(
                "Password",
                typeof(string),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("Password", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<Password>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 128);
            password.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var passwordAnswer = runtimeEntityType.AddProperty(
                "PasswordAnswer",
                typeof(string),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("PasswordAnswer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<PasswordAnswer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 128);
            passwordAnswer.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var passwordFormat = runtimeEntityType.AddProperty(
                "PasswordFormat",
                typeof(int),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("PasswordFormat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<PasswordFormat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            passwordFormat.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var passwordQuestion = runtimeEntityType.AddProperty(
                "PasswordQuestion",
                typeof(string),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("PasswordQuestion", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<PasswordQuestion>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 256);
            passwordQuestion.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var passwordSalt = runtimeEntityType.AddProperty(
                "PasswordSalt",
                typeof(string),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("PasswordSalt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<PasswordSalt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 128);
            passwordSalt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(Guid),
                propertyInfo: typeof(ViewMdtmembershipSyncHelper).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewMdtmembershipSyncHelper).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            userId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "ViewMDTMembershipSyncHelper");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
