// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ElectronicInspectionPatrolAttendanceEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ElectronicInspectionPatrolAttendance",
                typeof(ElectronicInspectionPatrolAttendance),
                baseEntityType,
                propertyCount: 8,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionPatrolAttendance).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionPatrolAttendance).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var actualEndDate = runtimeEntityType.AddProperty(
                "ActualEndDate",
                typeof(DateTime?),
                propertyInfo: typeof(ElectronicInspectionPatrolAttendance).GetProperty("ActualEndDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionPatrolAttendance).GetField("<ActualEndDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            actualEndDate.AddAnnotation("Relational:ColumnType", "datetime");
            actualEndDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var attendanceStatus = runtimeEntityType.AddProperty(
                "AttendanceStatus",
                typeof(int),
                propertyInfo: typeof(ElectronicInspectionPatrolAttendance).GetProperty("AttendanceStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionPatrolAttendance).GetField("<AttendanceStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            attendanceStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionReportId = runtimeEntityType.AddProperty(
                "ElectronicInspectionReportId",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionPatrolAttendance).GetProperty("ElectronicInspectionReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionPatrolAttendance).GetField("<ElectronicInspectionReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            electronicInspectionReportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expectedEndDate = runtimeEntityType.AddProperty(
                "ExpectedEndDate",
                typeof(DateTime?),
                propertyInfo: typeof(ElectronicInspectionPatrolAttendance).GetProperty("ExpectedEndDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionPatrolAttendance).GetField("<ExpectedEndDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            expectedEndDate.AddAnnotation("Relational:ColumnType", "datetime");
            expectedEndDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var startDate = runtimeEntityType.AddProperty(
                "StartDate",
                typeof(DateTime?),
                propertyInfo: typeof(ElectronicInspectionPatrolAttendance).GetProperty("StartDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionPatrolAttendance).GetField("<StartDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            startDate.AddAnnotation("Relational:ColumnType", "datetime");
            startDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var transporterId = runtimeEntityType.AddProperty(
                "TransporterId",
                typeof(Guid),
                propertyInfo: typeof(ElectronicInspectionPatrolAttendance).GetProperty("TransporterId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionPatrolAttendance).GetField("<TransporterId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            transporterId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionPatrolAttendance).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionPatrolAttendance).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            userId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { electronicInspectionReportId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { userId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ElectronicInspectionReportId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var electronicInspectionReport = declaringEntityType.AddNavigation("ElectronicInspectionReport",
                runtimeForeignKey,
                onDependent: true,
                typeof(ElectronicInspectionReport),
                propertyInfo: typeof(ElectronicInspectionPatrolAttendance).GetProperty("ElectronicInspectionReport", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionPatrolAttendance).GetField("<ElectronicInspectionReport>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionPatrolAttendances = principalEntityType.AddNavigation("ElectronicInspectionPatrolAttendances",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionPatrolAttendance>),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ElectronicInspectionPatrolAttendances", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ElectronicInspectionPatrolAttendances>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ElectronicInspectionPatrolAttendance_ElectronicInspectionReport");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("UserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                required: true);

            var user = declaringEntityType.AddNavigation("User",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(ElectronicInspectionPatrolAttendance).GetProperty("User", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionPatrolAttendance).GetField("<User>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionPatrolAttendances = principalEntityType.AddNavigation("ElectronicInspectionPatrolAttendances",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionPatrolAttendance>),
                propertyInfo: typeof(Person).GetProperty("ElectronicInspectionPatrolAttendances", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<ElectronicInspectionPatrolAttendances>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ElectronicInspectionPatrolAttendance_Person");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ElectronicInspectionPatrolAttendance");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
