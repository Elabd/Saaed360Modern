// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class VMdtViewReportDamagedPropertyEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.VMdtViewReportDamagedProperty",
                typeof(VMdtViewReportDamagedProperty),
                baseEntityType,
                propertyCount: 15);

            var damagedObjectOthersDescription = runtimeEntityType.AddProperty(
                "DamagedObjectOthersDescription",
                typeof(string),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("DamagedObjectOthersDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<DamagedObjectOthersDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            damagedObjectOthersDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var damagedPropertyId = runtimeEntityType.AddProperty(
                "DamagedPropertyId",
                typeof(int),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("DamagedPropertyId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<DamagedPropertyId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            damagedPropertyId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var impactLevel = runtimeEntityType.AddProperty(
                "ImpactLevel",
                typeof(string),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("ImpactLevel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<ImpactLevel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            impactLevel.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var impactLevelId = runtimeEntityType.AddProperty(
                "ImpactLevelId",
                typeof(int?),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("ImpactLevelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<ImpactLevelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            impactLevelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var impactType = runtimeEntityType.AddProperty(
                "ImpactType",
                typeof(string),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("ImpactType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<ImpactType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            impactType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var impactTypeId = runtimeEntityType.AddProperty(
                "ImpactTypeId",
                typeof(int?),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("ImpactTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<ImpactTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            impactTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isPublicProperty = runtimeEntityType.AddProperty(
                "IsPublicProperty",
                typeof(bool?),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("IsPublicProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<IsPublicProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isPublicProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var item = runtimeEntityType.AddProperty(
                "Item",
                typeof(string),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("Item", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<Item>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            item.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemId = runtimeEntityType.AddProperty(
                "ItemId",
                typeof(long?),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("ItemId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<ItemId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            itemId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var note = runtimeEntityType.AddProperty(
                "Note",
                typeof(string),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("Note", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<Note>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            note.AddAnnotation("Relational:ColumnName", "NOTE");
            note.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var organization = runtimeEntityType.AddProperty(
                "Organization",
                typeof(string),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("Organization", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<Organization>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 250);
            organization.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var organizationId = runtimeEntityType.AddProperty(
                "OrganizationId",
                typeof(long?),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("OrganizationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<OrganizationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            organizationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var organizationOthersDescription = runtimeEntityType.AddProperty(
                "OrganizationOthersDescription",
                typeof(string),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("OrganizationOthersDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<OrganizationOthersDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            organizationOthersDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var propertyTypeId = runtimeEntityType.AddProperty(
                "PropertyTypeId",
                typeof(int?),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("PropertyTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<PropertyTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            propertyTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(int),
                propertyInfo: typeof(VMdtViewReportDamagedProperty).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VMdtViewReportDamagedProperty).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "V_MdtViewReportDamagedProperties");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
