// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class WarrantEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Warrant",
                typeof(Warrant),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 7,
                foreignKeyCount: 7,
                unnamedIndexCount: 6,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(Warrant).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var warrantAppearanceBailForfeitId = runtimeEntityType.AddProperty(
                "WarrantAppearanceBailForfeitId",
                typeof(int?),
                propertyInfo: typeof(Warrant).GetProperty("WarrantAppearanceBailForfeitId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantAppearanceBailForfeitId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            warrantAppearanceBailForfeitId.AddAnnotation("Relational:DefaultValue", 1);
            warrantAppearanceBailForfeitId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var warrantCategoryId = runtimeEntityType.AddProperty(
                "WarrantCategoryId",
                typeof(int?),
                propertyInfo: typeof(Warrant).GetProperty("WarrantCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            warrantCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            warrantCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var warrantExtraditionLimitationId = runtimeEntityType.AddProperty(
                "WarrantExtraditionLimitationId",
                typeof(int?),
                propertyInfo: typeof(Warrant).GetProperty("WarrantExtraditionLimitationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantExtraditionLimitationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            warrantExtraditionLimitationId.AddAnnotation("Relational:DefaultValue", 1);
            warrantExtraditionLimitationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var warrantFurtherProcessingId = runtimeEntityType.AddProperty(
                "WarrantFurtherProcessingId",
                typeof(int?),
                propertyInfo: typeof(Warrant).GetProperty("WarrantFurtherProcessingId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantFurtherProcessingId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            warrantFurtherProcessingId.AddAnnotation("Relational:DefaultValue", 1);
            warrantFurtherProcessingId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var warrantLevelId = runtimeEntityType.AddProperty(
                "WarrantLevelId",
                typeof(int?),
                propertyInfo: typeof(Warrant).GetProperty("WarrantLevelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantLevelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            warrantLevelId.AddAnnotation("Relational:DefaultValue", 1);
            warrantLevelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var warrantProbableCauseId = runtimeEntityType.AddProperty(
                "WarrantProbableCauseId",
                typeof(int?),
                propertyInfo: typeof(Warrant).GetProperty("WarrantProbableCauseId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantProbableCauseId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            warrantProbableCauseId.AddAnnotation("Relational:DefaultValue", 1);
            warrantProbableCauseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_Warrant_1");

            var index = runtimeEntityType.AddIndex(
                new[] { warrantAppearanceBailForfeitId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { warrantCategoryId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { warrantExtraditionLimitationId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { warrantFurtherProcessingId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { warrantLevelId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { warrantProbableCauseId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(Warrant).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var warrant = principalEntityType.AddNavigation("Warrant",
                runtimeForeignKey,
                onDependent: false,
                typeof(Warrant),
                propertyInfo: typeof(Activity).GetProperty("Warrant", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<Warrant>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Warrant_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("WarrantAppearanceBailForfeitId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("WarrantAppearanceBailForfeitId") }),
                principalEntityType);

            var warrantAppearanceBailForfeit = declaringEntityType.AddNavigation("WarrantAppearanceBailForfeit",
                runtimeForeignKey,
                onDependent: true,
                typeof(WarrantAppearanceBailForfeitDim),
                propertyInfo: typeof(Warrant).GetProperty("WarrantAppearanceBailForfeit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantAppearanceBailForfeit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var warrants = principalEntityType.AddNavigation("Warrants",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Warrant>),
                propertyInfo: typeof(WarrantAppearanceBailForfeitDim).GetProperty("Warrants", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WarrantAppearanceBailForfeitDim).GetField("<Warrants>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Warrant_WarrantAppearanceBailForfeitDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("WarrantCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("WarrantCategoryId") }),
                principalEntityType);

            var warrantCategory = declaringEntityType.AddNavigation("WarrantCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(WarrantCategoryDim),
                propertyInfo: typeof(Warrant).GetProperty("WarrantCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var warrants = principalEntityType.AddNavigation("Warrants",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Warrant>),
                propertyInfo: typeof(WarrantCategoryDim).GetProperty("Warrants", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WarrantCategoryDim).GetField("<Warrants>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Warrant_WarrantCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("WarrantExtraditionLimitationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("WarrantExtraditionLimitationId") }),
                principalEntityType);

            var warrantExtraditionLimitation = declaringEntityType.AddNavigation("WarrantExtraditionLimitation",
                runtimeForeignKey,
                onDependent: true,
                typeof(WarrantExtraditionLimitationDim),
                propertyInfo: typeof(Warrant).GetProperty("WarrantExtraditionLimitation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantExtraditionLimitation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var warrants = principalEntityType.AddNavigation("Warrants",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Warrant>),
                propertyInfo: typeof(WarrantExtraditionLimitationDim).GetProperty("Warrants", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WarrantExtraditionLimitationDim).GetField("<Warrants>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Warrant_WarrantExtraditionLimitationDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("WarrantFurtherProcessingId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("WarrantFurtherProcessingId") }),
                principalEntityType);

            var warrantFurtherProcessing = declaringEntityType.AddNavigation("WarrantFurtherProcessing",
                runtimeForeignKey,
                onDependent: true,
                typeof(WarrantFurtherProcessingDim),
                propertyInfo: typeof(Warrant).GetProperty("WarrantFurtherProcessing", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantFurtherProcessing>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var warrants = principalEntityType.AddNavigation("Warrants",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Warrant>),
                propertyInfo: typeof(WarrantFurtherProcessingDim).GetProperty("Warrants", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WarrantFurtherProcessingDim).GetField("<Warrants>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Warrant_WarrantFurtherProcessingDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("WarrantLevelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("WarrantLevelId") }),
                principalEntityType);

            var warrantLevel = declaringEntityType.AddNavigation("WarrantLevel",
                runtimeForeignKey,
                onDependent: true,
                typeof(WarrantLevelDim),
                propertyInfo: typeof(Warrant).GetProperty("WarrantLevel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantLevel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var warrants = principalEntityType.AddNavigation("Warrants",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Warrant>),
                propertyInfo: typeof(WarrantLevelDim).GetProperty("Warrants", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WarrantLevelDim).GetField("<Warrants>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Warrant_WarrantLevelDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("WarrantProbableCauseId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("WarrantProbableCauseId") }),
                principalEntityType);

            var warrantProbableCause = declaringEntityType.AddNavigation("WarrantProbableCause",
                runtimeForeignKey,
                onDependent: true,
                typeof(WarrantProbableCauseDim),
                propertyInfo: typeof(Warrant).GetProperty("WarrantProbableCause", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Warrant).GetField("<WarrantProbableCause>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var warrants = principalEntityType.AddNavigation("Warrants",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Warrant>),
                propertyInfo: typeof(WarrantProbableCauseDim).GetProperty("Warrants", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WarrantProbableCauseDim).GetField("<Warrants>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Warrant_WarrantProbableCauseDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Warrant");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
