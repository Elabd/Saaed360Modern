// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ViewElectronicInspectionReportQuestionAnswerEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ViewElectronicInspectionReportQuestionAnswer",
                typeof(ViewElectronicInspectionReportQuestionAnswer),
                baseEntityType,
                propertyCount: 8);

            var answerId = runtimeEntityType.AddProperty(
                "AnswerId",
                typeof(long),
                propertyInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetProperty("AnswerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetField("<AnswerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            answerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var answerName = runtimeEntityType.AddProperty(
                "AnswerName",
                typeof(string),
                propertyInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetProperty("AnswerName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetField("<AnswerName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 500);
            answerName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetField("<Comment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 4000);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fmscode = runtimeEntityType.AddProperty(
                "Fmscode",
                typeof(Guid?),
                propertyInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetProperty("Fmscode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetField("<Fmscode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            fmscode.AddAnnotation("Relational:ColumnName", "FMSCode");
            fmscode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var questionId = runtimeEntityType.AddProperty(
                "QuestionId",
                typeof(long),
                propertyInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetProperty("QuestionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetField("<QuestionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            questionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var questionName = runtimeEntityType.AddProperty(
                "QuestionName",
                typeof(string),
                propertyInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetProperty("QuestionName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetField("<QuestionName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 500);
            questionName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportAnswerId = runtimeEntityType.AddProperty(
                "ReportAnswerId",
                typeof(long),
                propertyInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetProperty("ReportAnswerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetField("<ReportAnswerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            reportAnswerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(long),
                propertyInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ViewElectronicInspectionReportQuestionAnswer).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "ViewElectronicInspectionReportQuestionAnswers");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
