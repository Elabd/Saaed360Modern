// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EventsOvertimeReportBackupEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EventsOvertimeReportBackup",
                typeof(EventsOvertimeReportBackup),
                baseEntityType,
                propertyCount: 19);

            var attendanceInHours = runtimeEntityType.AddProperty(
                "AttendanceInHours",
                typeof(decimal),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("AttendanceInHours", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<AttendanceInHours>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            attendanceInHours.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            attendanceInHours.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var attendanceInMinutes = runtimeEntityType.AddProperty(
                "AttendanceInMinutes",
                typeof(decimal),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("AttendanceInMinutes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<AttendanceInMinutes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            attendanceInMinutes.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            attendanceInMinutes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDate = runtimeEntityType.AddProperty(
                "CreationDate",
                typeof(DateTime),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("CreationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<CreationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            creationDate.AddAnnotation("Relational:ColumnType", "datetime");
            creationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventId = runtimeEntityType.AddProperty(
                "EventId",
                typeof(long),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("EventId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<EventId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            eventId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventName = runtimeEntityType.AddProperty(
                "EventName",
                typeof(string),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("EventName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<EventName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 100);
            eventName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventsOvertimeReportConfigurationsId = runtimeEntityType.AddProperty(
                "EventsOvertimeReportConfigurationsId",
                typeof(int),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("EventsOvertimeReportConfigurationsId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<EventsOvertimeReportConfigurationsId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            eventsOvertimeReportConfigurationsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isPrivateVhicleUsed = runtimeEntityType.AddProperty(
                "IsPrivateVhicleUsed",
                typeof(bool),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("IsPrivateVhicleUsed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<IsPrivateVhicleUsed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isPrivateVhicleUsed.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var jobType = runtimeEntityType.AddProperty(
                "JobType",
                typeof(string),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("JobType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<JobType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 200);
            jobType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var jobTypeId = runtimeEntityType.AddProperty(
                "JobTypeId",
                typeof(int),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("JobTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<JobTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            jobTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var notes = runtimeEntityType.AddProperty(
                "Notes",
                typeof(string),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("Notes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<Notes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            notes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var overtimeAllowance = runtimeEntityType.AddProperty(
                "OvertimeAllowance",
                typeof(decimal),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("OvertimeAllowance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<OvertimeAllowance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            overtimeAllowance.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            overtimeAllowance.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var overtimeDate = runtimeEntityType.AddProperty(
                "OvertimeDate",
                typeof(DateTime),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("OvertimeDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<OvertimeDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            overtimeDate.AddAnnotation("Relational:ColumnType", "datetime");
            overtimeDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personName = runtimeEntityType.AddProperty(
                "PersonName",
                typeof(string),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("PersonName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<PersonName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 200);
            personName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personUserName = runtimeEntityType.AddProperty(
                "PersonUserName",
                typeof(string),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("PersonUserName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<PersonUserName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 256);
            personUserName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var totalAllowance = runtimeEntityType.AddProperty(
                "TotalAllowance",
                typeof(decimal),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("TotalAllowance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<TotalAllowance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            totalAllowance.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            totalAllowance.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleAllowance = runtimeEntityType.AddProperty(
                "VehicleAllowance",
                typeof(decimal),
                propertyInfo: typeof(EventsOvertimeReportBackup).GetProperty("VehicleAllowance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsOvertimeReportBackup).GetField("<VehicleAllowance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            vehicleAllowance.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            vehicleAllowance.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EventsOvertimeReportBackup");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
