// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ReportStatusToReportTypeMapEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ReportStatusToReportTypeMap",
                typeof(ReportStatusToReportTypeMap),
                baseEntityType,
                propertyCount: 4,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 1,
                keyCount: 1);

            var reportTypeId = runtimeEntityType.AddProperty(
                "ReportTypeId",
                typeof(int),
                propertyInfo: typeof(ReportStatusToReportTypeMap).GetProperty("ReportTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportStatusToReportTypeMap).GetField("<ReportTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            reportTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportStatusId = runtimeEntityType.AddProperty(
                "ReportStatusId",
                typeof(int),
                propertyInfo: typeof(ReportStatusToReportTypeMap).GetProperty("ReportStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportStatusToReportTypeMap).GetField("<ReportStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            reportStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isTechnicalSupport = runtimeEntityType.AddProperty(
                "IsTechnicalSupport",
                typeof(bool?),
                propertyInfo: typeof(ReportStatusToReportTypeMap).GetProperty("IsTechnicalSupport", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportStatusToReportTypeMap).GetField("<IsTechnicalSupport>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isTechnicalSupport.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportStatusToReportTypeMapId = runtimeEntityType.AddProperty(
                "ReportStatusToReportTypeMapId",
                typeof(int?),
                propertyInfo: typeof(ReportStatusToReportTypeMap).GetProperty("ReportStatusToReportTypeMapId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportStatusToReportTypeMap).GetField("<ReportStatusToReportTypeMapId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportStatusToReportTypeMapId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { reportTypeId, reportStatusId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { reportStatusId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ReportStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ReportStatusId") }),
                principalEntityType,
                required: true);

            var reportStatus = declaringEntityType.AddNavigation("ReportStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(ReportStatusDim),
                propertyInfo: typeof(ReportStatusToReportTypeMap).GetProperty("ReportStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportStatusToReportTypeMap).GetField("<ReportStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var reportStatusToReportTypeMaps = principalEntityType.AddNavigation("ReportStatusToReportTypeMaps",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ReportStatusToReportTypeMap>),
                propertyInfo: typeof(ReportStatusDim).GetProperty("ReportStatusToReportTypeMaps", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportStatusDim).GetField("<ReportStatusToReportTypeMaps>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ReportStatusToReportTypeMap_ReportStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ReportTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ReportTypeId") }),
                principalEntityType,
                required: true);

            var reportType = declaringEntityType.AddNavigation("ReportType",
                runtimeForeignKey,
                onDependent: true,
                typeof(ReportTypeDim),
                propertyInfo: typeof(ReportStatusToReportTypeMap).GetProperty("ReportType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportStatusToReportTypeMap).GetField("<ReportType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var reportStatusToReportTypeMaps = principalEntityType.AddNavigation("ReportStatusToReportTypeMaps",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ReportStatusToReportTypeMap>),
                propertyInfo: typeof(ReportTypeDim).GetProperty("ReportStatusToReportTypeMaps", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportTypeDim).GetField("<ReportStatusToReportTypeMaps>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ReportStatusToReportTypeMap_ReportTypeDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ReportStatusToReportTypeMap");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
