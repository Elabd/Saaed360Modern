// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PaymentIntegrationLogEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PaymentIntegrationLog",
                typeof(PaymentIntegrationLog),
                baseEntityType,
                propertyCount: 8,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var integerationLogId = runtimeEntityType.AddProperty(
                "IntegerationLogId",
                typeof(long),
                propertyInfo: typeof(PaymentIntegrationLog).GetProperty("IntegerationLogId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentIntegrationLog).GetField("<IntegerationLogId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            integerationLogId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var creationDate = runtimeEntityType.AddProperty(
                "CreationDate",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentIntegrationLog).GetProperty("CreationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentIntegrationLog).GetField("<CreationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDate.AddAnnotation("Relational:ColumnType", "datetime");
            creationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var integrationMethodId = runtimeEntityType.AddProperty(
                "IntegrationMethodId",
                typeof(int?),
                propertyInfo: typeof(PaymentIntegrationLog).GetProperty("IntegrationMethodId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentIntegrationLog).GetField("<IntegrationMethodId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            integrationMethodId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentTransactionId = runtimeEntityType.AddProperty(
                "PaymentTransactionId",
                typeof(long?),
                propertyInfo: typeof(PaymentIntegrationLog).GetProperty("PaymentTransactionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentIntegrationLog).GetField("<PaymentTransactionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentTransactionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var request = runtimeEntityType.AddProperty(
                "Request",
                typeof(string),
                propertyInfo: typeof(PaymentIntegrationLog).GetProperty("Request", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentIntegrationLog).GetField("<Request>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            request.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestTime = runtimeEntityType.AddProperty(
                "RequestTime",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentIntegrationLog).GetProperty("RequestTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentIntegrationLog).GetField("<RequestTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requestTime.AddAnnotation("Relational:ColumnType", "datetime");
            requestTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var response = runtimeEntityType.AddProperty(
                "Response",
                typeof(string),
                propertyInfo: typeof(PaymentIntegrationLog).GetProperty("Response", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentIntegrationLog).GetField("<Response>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            response.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var responseTime = runtimeEntityType.AddProperty(
                "ResponseTime",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentIntegrationLog).GetProperty("ResponseTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentIntegrationLog).GetField("<ResponseTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            responseTime.AddAnnotation("Relational:ColumnType", "datetime");
            responseTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { integerationLogId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { integrationMethodId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { paymentTransactionId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IntegrationMethodId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MethodId") }),
                principalEntityType);

            var integrationMethod = declaringEntityType.AddNavigation("IntegrationMethod",
                runtimeForeignKey,
                onDependent: true,
                typeof(PaymentIntegrationMethod),
                propertyInfo: typeof(PaymentIntegrationLog).GetProperty("IntegrationMethod", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentIntegrationLog).GetField("<IntegrationMethod>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentIntegrationLogs = principalEntityType.AddNavigation("PaymentIntegrationLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentIntegrationLog>),
                propertyInfo: typeof(PaymentIntegrationMethod).GetProperty("PaymentIntegrationLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentIntegrationMethod).GetField("<PaymentIntegrationLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentIntegrationLog_PaymentIntegrationMethods");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PaymentTransactionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("TransactionId") }),
                principalEntityType);

            var paymentTransaction = declaringEntityType.AddNavigation("PaymentTransaction",
                runtimeForeignKey,
                onDependent: true,
                typeof(PaymentTransaction),
                propertyInfo: typeof(PaymentIntegrationLog).GetProperty("PaymentTransaction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentIntegrationLog).GetField("<PaymentTransaction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentIntegrationLogs = principalEntityType.AddNavigation("PaymentIntegrationLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentIntegrationLog>),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentIntegrationLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentIntegrationLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentIntegrationLog_PaymentTransactions");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PaymentIntegrationLog");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
