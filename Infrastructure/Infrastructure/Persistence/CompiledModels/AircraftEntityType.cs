// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class AircraftEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Aircraft",
                typeof(Aircraft),
                baseEntityType,
                propertyCount: 10,
                navigationCount: 6,
                foreignKeyCount: 6,
                unnamedIndexCount: 5,
                keyCount: 1);

            var itemId = runtimeEntityType.AddProperty(
                "ItemId",
                typeof(long),
                propertyInfo: typeof(Aircraft).GetProperty("ItemId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<ItemId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            itemId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var aircraftCategoryId = runtimeEntityType.AddProperty(
                "AircraftCategoryId",
                typeof(int?),
                propertyInfo: typeof(Aircraft).GetProperty("AircraftCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<AircraftCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            aircraftCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            aircraftCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var aircraftUsageId = runtimeEntityType.AddProperty(
                "AircraftUsageId",
                typeof(int?),
                propertyInfo: typeof(Aircraft).GetProperty("AircraftUsageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<AircraftUsageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            aircraftUsageId.AddAnnotation("Relational:DefaultValue", 1);
            aircraftUsageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var baseAirportLocationGuid = runtimeEntityType.AddProperty(
                "BaseAirportLocationGuid",
                typeof(Guid?),
                propertyInfo: typeof(Aircraft).GetProperty("BaseAirportLocationGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<BaseAirportLocationGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            baseAirportLocationGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var baseAirportLocationId = runtimeEntityType.AddProperty(
                "BaseAirportLocationId",
                typeof(long?),
                propertyInfo: typeof(Aircraft).GetProperty("BaseAirportLocationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<BaseAirportLocationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            baseAirportLocationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var engineCylinderQuantity = runtimeEntityType.AddProperty(
                "EngineCylinderQuantity",
                typeof(int?),
                propertyInfo: typeof(Aircraft).GetProperty("EngineCylinderQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<EngineCylinderQuantity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            engineCylinderQuantity.AddAnnotation("Relational:DefaultValue", 0);
            engineCylinderQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var engineQuantity = runtimeEntityType.AddProperty(
                "EngineQuantity",
                typeof(int?),
                propertyInfo: typeof(Aircraft).GetProperty("EngineQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<EngineQuantity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            engineQuantity.AddAnnotation("Relational:DefaultValue", 0);
            engineQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fuselageColorId = runtimeEntityType.AddProperty(
                "FuselageColorId",
                typeof(int?),
                propertyInfo: typeof(Aircraft).GetProperty("FuselageColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<FuselageColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            fuselageColorId.AddAnnotation("Relational:DefaultValue", 1);
            fuselageColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tailIndentification = runtimeEntityType.AddProperty(
                "TailIndentification",
                typeof(string),
                propertyInfo: typeof(Aircraft).GetProperty("TailIndentification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<TailIndentification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 10);
            tailIndentification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var wingColorId = runtimeEntityType.AddProperty(
                "WingColorId",
                typeof(int?),
                propertyInfo: typeof(Aircraft).GetProperty("WingColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<WingColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            wingColorId.AddAnnotation("Relational:DefaultValue", 1);
            wingColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { itemId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { aircraftCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { aircraftUsageId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { baseAirportLocationId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { fuselageColorId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { wingColorId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("AircraftCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("AircraftCategoryId") }),
                principalEntityType);

            var aircraftCategory = declaringEntityType.AddNavigation("AircraftCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(AircraftCategoryDim),
                propertyInfo: typeof(Aircraft).GetProperty("AircraftCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<AircraftCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var aircraft = principalEntityType.AddNavigation("Aircraft",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Aircraft>),
                propertyInfo: typeof(AircraftCategoryDim).GetProperty("Aircraft", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AircraftCategoryDim).GetField("<Aircraft>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "AircraftTypeDIM_Aircraft_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("AircraftUsageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("AircraftUsageId") }),
                principalEntityType);

            var aircraftUsage = declaringEntityType.AddNavigation("AircraftUsage",
                runtimeForeignKey,
                onDependent: true,
                typeof(AircraftUsageDim),
                propertyInfo: typeof(Aircraft).GetProperty("AircraftUsage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<AircraftUsage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var aircraft = principalEntityType.AddNavigation("Aircraft",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Aircraft>),
                propertyInfo: typeof(AircraftUsageDim).GetProperty("Aircraft", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AircraftUsageDim).GetField("<Aircraft>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Aircraft_AircraftUsageDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BaseAirportLocationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LocationId") }),
                principalEntityType);

            var baseAirportLocation = declaringEntityType.AddNavigation("BaseAirportLocation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Location),
                propertyInfo: typeof(Aircraft).GetProperty("BaseAirportLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<BaseAirportLocation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var aircraft = principalEntityType.AddNavigation("Aircraft",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Aircraft>),
                propertyInfo: typeof(Location).GetProperty("Aircraft", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Location).GetField("<Aircraft>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Aircraft_Location");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FuselageColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemColorId") }),
                principalEntityType);

            var fuselageColor = declaringEntityType.AddNavigation("FuselageColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemColorDim),
                propertyInfo: typeof(Aircraft).GetProperty("FuselageColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<FuselageColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var aircraftFuselageColors = principalEntityType.AddNavigation("AircraftFuselageColors",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Aircraft>),
                propertyInfo: typeof(ItemColorDim).GetProperty("AircraftFuselageColors", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemColorDim).GetField("<AircraftFuselageColors>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Aircraft_ItemColorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemId") }),
                principalEntityType,
                unique: true,
                required: true);

            var item = declaringEntityType.AddNavigation("Item",
                runtimeForeignKey,
                onDependent: true,
                typeof(Item),
                propertyInfo: typeof(Aircraft).GetProperty("Item", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<Item>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var aircraft = principalEntityType.AddNavigation("Aircraft",
                runtimeForeignKey,
                onDependent: false,
                typeof(Aircraft),
                propertyInfo: typeof(Item).GetProperty("Aircraft", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Item).GetField("<Aircraft>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Aircraft_Item");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("WingColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemColorId") }),
                principalEntityType);

            var wingColor = declaringEntityType.AddNavigation("WingColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemColorDim),
                propertyInfo: typeof(Aircraft).GetProperty("WingColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Aircraft).GetField("<WingColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var aircraftWingColors = principalEntityType.AddNavigation("AircraftWingColors",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Aircraft>),
                propertyInfo: typeof(ItemColorDim).GetProperty("AircraftWingColors", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemColorDim).GetField("<AircraftWingColors>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "ItemColorDIM_Aircraft_FK1");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Aircraft");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
