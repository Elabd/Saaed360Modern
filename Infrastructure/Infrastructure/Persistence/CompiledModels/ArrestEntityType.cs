// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ArrestEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Arrest",
                typeof(Arrest),
                baseEntityType,
                propertyCount: 9,
                navigationCount: 4,
                foreignKeyCount: 4,
                unnamedIndexCount: 3,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(Arrest).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var arrestCategoryId = runtimeEntityType.AddProperty(
                "ArrestCategoryId",
                typeof(int?),
                propertyInfo: typeof(Arrest).GetProperty("ArrestCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<ArrestCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            arrestCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            arrestCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var arrestProbableCauseId = runtimeEntityType.AddProperty(
                "ArrestProbableCauseId",
                typeof(int?),
                propertyInfo: typeof(Arrest).GetProperty("ArrestProbableCauseId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<ArrestProbableCauseId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            arrestProbableCauseId.AddAnnotation("Relational:DefaultValue", 1);
            arrestProbableCauseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var arrestRightsReadResponseId = runtimeEntityType.AddProperty(
                "ArrestRightsReadResponseId",
                typeof(int?),
                propertyInfo: typeof(Arrest).GetProperty("ArrestRightsReadResponseId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<ArrestRightsReadResponseId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            arrestRightsReadResponseId.AddAnnotation("Relational:DefaultValue", 1);
            arrestRightsReadResponseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bloodAlcoholContent = runtimeEntityType.AddProperty(
                "BloodAlcoholContent",
                typeof(double?),
                propertyInfo: typeof(Arrest).GetProperty("BloodAlcoholContent", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<BloodAlcoholContent>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bloodAlcoholContent.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intoxicantInvolvedIndicator = runtimeEntityType.AddProperty(
                "IntoxicantInvolvedIndicator",
                typeof(bool?),
                propertyInfo: typeof(Arrest).GetProperty("IntoxicantInvolvedIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<IntoxicantInvolvedIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            intoxicantInvolvedIndicator.AddAnnotation("Relational:DefaultValue", false);
            intoxicantInvolvedIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var recordIdenification = runtimeEntityType.AddProperty(
                "RecordIdenification",
                typeof(string),
                propertyInfo: typeof(Arrest).GetProperty("RecordIdenification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<RecordIdenification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            recordIdenification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var resistedIndicator = runtimeEntityType.AddProperty(
                "ResistedIndicator",
                typeof(bool?),
                propertyInfo: typeof(Arrest).GetProperty("ResistedIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<ResistedIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            resistedIndicator.AddAnnotation("Relational:DefaultValue", false);
            resistedIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rightsReadIndicator = runtimeEntityType.AddProperty(
                "RightsReadIndicator",
                typeof(bool?),
                propertyInfo: typeof(Arrest).GetProperty("RightsReadIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<RightsReadIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            rightsReadIndicator.AddAnnotation("Relational:DefaultValue", false);
            rightsReadIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_Arrest_1");

            var index = runtimeEntityType.AddIndex(
                new[] { arrestCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { arrestProbableCauseId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { arrestRightsReadResponseId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(Arrest).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var arrest = principalEntityType.AddNavigation("Arrest",
                runtimeForeignKey,
                onDependent: false,
                typeof(Arrest),
                propertyInfo: typeof(Activity).GetProperty("Arrest", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<Arrest>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Arrest_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ArrestCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ArrestCategoryId") }),
                principalEntityType);

            var arrestCategory = declaringEntityType.AddNavigation("ArrestCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(ArrestCategoryDim),
                propertyInfo: typeof(Arrest).GetProperty("ArrestCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<ArrestCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var arrests = principalEntityType.AddNavigation("Arrests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Arrest>),
                propertyInfo: typeof(ArrestCategoryDim).GetProperty("Arrests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ArrestCategoryDim).GetField("<Arrests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "ArrestType_Arrests_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ArrestProbableCauseId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ArrestProbableCauseId") }),
                principalEntityType);

            var arrestProbableCause = declaringEntityType.AddNavigation("ArrestProbableCause",
                runtimeForeignKey,
                onDependent: true,
                typeof(ArrestProbableCauseDim),
                propertyInfo: typeof(Arrest).GetProperty("ArrestProbableCause", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<ArrestProbableCause>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var arrests = principalEntityType.AddNavigation("Arrests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Arrest>),
                propertyInfo: typeof(ArrestProbableCauseDim).GetProperty("Arrests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ArrestProbableCauseDim).GetField("<Arrests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Arrest_ArrestProbableCauseDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ArrestRightsReadResponseId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ArrestRightsReadResponseId") }),
                principalEntityType);

            var arrestRightsReadResponse = declaringEntityType.AddNavigation("ArrestRightsReadResponse",
                runtimeForeignKey,
                onDependent: true,
                typeof(ArrestRightsReadResponseDim),
                propertyInfo: typeof(Arrest).GetProperty("ArrestRightsReadResponse", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Arrest).GetField("<ArrestRightsReadResponse>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var arrests = principalEntityType.AddNavigation("Arrests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Arrest>),
                propertyInfo: typeof(ArrestRightsReadResponseDim).GetProperty("Arrests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ArrestRightsReadResponseDim).GetField("<Arrests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Arrest_ArrestRightsReadResponseDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Arrest");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
