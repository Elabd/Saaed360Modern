// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class RecalculationRequestEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.RecalculationRequest",
                typeof(RecalculationRequest),
                baseEntityType,
                propertyCount: 10,
                navigationCount: 6,
                foreignKeyCount: 4,
                unnamedIndexCount: 4,
                keyCount: 1);

            var recalculationRequestId = runtimeEntityType.AddProperty(
                "RecalculationRequestId",
                typeof(long),
                propertyInfo: typeof(RecalculationRequest).GetProperty("RecalculationRequestId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<RecalculationRequestId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            recalculationRequestId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(RecalculationRequest).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDateTime = runtimeEntityType.AddProperty(
                "CreationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(RecalculationRequest).GetProperty("CreationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<CreationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            creationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(RecalculationRequest).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modificationDateTime = runtimeEntityType.AddProperty(
                "ModificationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(RecalculationRequest).GetProperty("ModificationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<ModificationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modificationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            modificationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var recalculationRequestTypeCommect = runtimeEntityType.AddProperty(
                "RecalculationRequestTypeCommect",
                typeof(string),
                propertyInfo: typeof(RecalculationRequest).GetProperty("RecalculationRequestTypeCommect", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<RecalculationRequestTypeCommect>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            recalculationRequestTypeCommect.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var recalculationRequestTypeId = runtimeEntityType.AddProperty(
                "RecalculationRequestTypeId",
                typeof(int?),
                propertyInfo: typeof(RecalculationRequest).GetProperty("RecalculationRequestTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<RecalculationRequestTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            recalculationRequestTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(int?),
                propertyInfo: typeof(RecalculationRequest).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestDetails = runtimeEntityType.AddProperty(
                "RequestDetails",
                typeof(string),
                propertyInfo: typeof(RecalculationRequest).GetProperty("RequestDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<RequestDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requestDetails.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestStatusId = runtimeEntityType.AddProperty(
                "RequestStatusId",
                typeof(int?),
                propertyInfo: typeof(RecalculationRequest).GetProperty("RequestStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<RequestStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requestStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { recalculationRequestId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { createdBy });

            var index0 = runtimeEntityType.AddIndex(
                new[] { recalculationRequestTypeId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { reportId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { requestStatusId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CreatedBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var createdByNavigation = declaringEntityType.AddNavigation("CreatedByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(RecalculationRequest).GetProperty("CreatedByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<CreatedByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var recalculationRequests = principalEntityType.AddNavigation("RecalculationRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RecalculationRequest>),
                propertyInfo: typeof(Person).GetProperty("RecalculationRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<RecalculationRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Table_1_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RecalculationRequestTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RecalculationRequestTypeId") }),
                principalEntityType);

            var recalculationRequestType = declaringEntityType.AddNavigation("RecalculationRequestType",
                runtimeForeignKey,
                onDependent: true,
                typeof(RecalculationRequestTypeDim),
                propertyInfo: typeof(RecalculationRequest).GetProperty("RecalculationRequestType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<RecalculationRequestType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var recalculationRequests = principalEntityType.AddNavigation("RecalculationRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RecalculationRequest>),
                propertyInfo: typeof(RecalculationRequestTypeDim).GetProperty("RecalculationRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequestTypeDim).GetField("<RecalculationRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Table_1_RecalculationRequestTypeDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ReportId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ReportId") }),
                principalEntityType);

            var report = declaringEntityType.AddNavigation("Report",
                runtimeForeignKey,
                onDependent: true,
                typeof(Report),
                propertyInfo: typeof(RecalculationRequest).GetProperty("Report", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<Report>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var recalculationRequests = principalEntityType.AddNavigation("RecalculationRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RecalculationRequest>),
                propertyInfo: typeof(Report).GetProperty("RecalculationRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Report).GetField("<RecalculationRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Table_1_Report");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RequestStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RecalculationStatusId") }),
                principalEntityType);

            var requestStatus = declaringEntityType.AddNavigation("RequestStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(RecalculationStatusDim),
                propertyInfo: typeof(RecalculationRequest).GetProperty("RequestStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationRequest).GetField("<RequestStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var recalculationRequests = principalEntityType.AddNavigation("RecalculationRequests",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RecalculationRequest>),
                propertyInfo: typeof(RecalculationStatusDim).GetProperty("RecalculationRequests", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RecalculationStatusDim).GetField("<RecalculationRequests>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Table_1_RecalculationStatusDim");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "RecalculationRequest");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
