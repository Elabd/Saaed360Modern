// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EscortInfoEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EscortInfo",
                typeof(EscortInfo),
                baseEntityType,
                propertyCount: 31,
                navigationCount: 1,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var escortInfoId = runtimeEntityType.AddProperty(
                "EscortInfoId",
                typeof(long),
                propertyInfo: typeof(EscortInfo).GetProperty("EscortInfoId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<EscortInfoId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            escortInfoId.AddAnnotation("Relational:ColumnName", "EscortInfoID");
            escortInfoId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var amountAfterDiscountWithoutVat = runtimeEntityType.AddProperty(
                "AmountAfterDiscountWithoutVat",
                typeof(double?),
                propertyInfo: typeof(EscortInfo).GetProperty("AmountAfterDiscountWithoutVat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<AmountAfterDiscountWithoutVat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            amountAfterDiscountWithoutVat.AddAnnotation("Relational:ColumnName", "AmountAfterDiscountWithoutVAT");
            amountAfterDiscountWithoutVat.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cancelReason = runtimeEntityType.AddProperty(
                "CancelReason",
                typeof(string),
                propertyInfo: typeof(EscortInfo).GetProperty("CancelReason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<CancelReason>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 250);
            cancelReason.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var contactNumber = runtimeEntityType.AddProperty(
                "ContactNumber",
                typeof(string),
                propertyInfo: typeof(EscortInfo).GetProperty("ContactNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<ContactNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 150);
            contactNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escortAmount = runtimeEntityType.AddProperty(
                "EscortAmount",
                typeof(double?),
                propertyInfo: typeof(EscortInfo).GetProperty("EscortAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<EscortAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            escortAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escortDateFrom = runtimeEntityType.AddProperty(
                "EscortDateFrom",
                typeof(DateTime?),
                propertyInfo: typeof(EscortInfo).GetProperty("EscortDateFrom", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<EscortDateFrom>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            escortDateFrom.AddAnnotation("Relational:ColumnType", "datetime");
            escortDateFrom.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escortDateTo = runtimeEntityType.AddProperty(
                "EscortDateTo",
                typeof(DateTime?),
                propertyInfo: typeof(EscortInfo).GetProperty("EscortDateTo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<EscortDateTo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            escortDateTo.AddAnnotation("Relational:ColumnType", "datetime");
            escortDateTo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escortId = runtimeEntityType.AddProperty(
                "EscortId",
                typeof(long?),
                propertyInfo: typeof(EscortInfo).GetProperty("EscortId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<EscortId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            escortId.AddAnnotation("Relational:ColumnName", "EscortID");
            escortId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escortTax = runtimeEntityType.AddProperty(
                "EscortTax",
                typeof(double?),
                propertyInfo: typeof(EscortInfo).GetProperty("EscortTax", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<EscortTax>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            escortTax.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var height = runtimeEntityType.AddProperty(
                "Height",
                typeof(double?),
                propertyInfo: typeof(EscortInfo).GetProperty("Height", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<Height>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            height.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isContractedCompany = runtimeEntityType.AddProperty(
                "IsContractedCompany",
                typeof(bool?),
                propertyInfo: typeof(EscortInfo).GetProperty("IsContractedCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<IsContractedCompany>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isContractedCompany.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isPatrolsBalanceUsed = runtimeEntityType.AddProperty(
                "IsPatrolsBalanceUsed",
                typeof(bool?),
                propertyInfo: typeof(EscortInfo).GetProperty("IsPatrolsBalanceUsed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<IsPatrolsBalanceUsed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isPatrolsBalanceUsed.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var length = runtimeEntityType.AddProperty(
                "Length",
                typeof(double?),
                propertyInfo: typeof(EscortInfo).GetProperty("Length", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<Length>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            length.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var loadType = runtimeEntityType.AddProperty(
                "LoadType",
                typeof(string),
                propertyInfo: typeof(EscortInfo).GetProperty("LoadType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<LoadType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 150);
            loadType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var locationFrom = runtimeEntityType.AddProperty(
                "LocationFrom",
                typeof(string),
                propertyInfo: typeof(EscortInfo).GetProperty("LocationFrom", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<LocationFrom>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 150);
            locationFrom.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var locationTo = runtimeEntityType.AddProperty(
                "LocationTo",
                typeof(string),
                propertyInfo: typeof(EscortInfo).GetProperty("LocationTo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<LocationTo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 150);
            locationTo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var newPatrolsNumber = runtimeEntityType.AddProperty(
                "NewPatrolsNumber",
                typeof(int?),
                propertyInfo: typeof(EscortInfo).GetProperty("NewPatrolsNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<NewPatrolsNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            newPatrolsNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var numberOfPatrols = runtimeEntityType.AddProperty(
                "NumberOfPatrols",
                typeof(int?),
                propertyInfo: typeof(EscortInfo).GetProperty("NumberOfPatrols", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<NumberOfPatrols>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            numberOfPatrols.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var patrolBalancNumber = runtimeEntityType.AddProperty(
                "PatrolBalancNumber",
                typeof(int?),
                propertyInfo: typeof(EscortInfo).GetProperty("PatrolBalancNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<PatrolBalancNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            patrolBalancNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var policePermitEndDate = runtimeEntityType.AddProperty(
                "PolicePermitEndDate",
                typeof(DateTime?),
                propertyInfo: typeof(EscortInfo).GetProperty("PolicePermitEndDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<PolicePermitEndDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            policePermitEndDate.AddAnnotation("Relational:ColumnType", "datetime");
            policePermitEndDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var policePermitNumber = runtimeEntityType.AddProperty(
                "PolicePermitNumber",
                typeof(string),
                propertyInfo: typeof(EscortInfo).GetProperty("PolicePermitNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<PolicePermitNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            policePermitNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var policePermitStartDate = runtimeEntityType.AddProperty(
                "PolicePermitStartDate",
                typeof(DateTime?),
                propertyInfo: typeof(EscortInfo).GetProperty("PolicePermitStartDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<PolicePermitStartDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            policePermitStartDate.AddAnnotation("Relational:ColumnType", "datetime");
            policePermitStartDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var representativeName = runtimeEntityType.AddProperty(
                "RepresentativeName",
                typeof(string),
                propertyInfo: typeof(EscortInfo).GetProperty("RepresentativeName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<RepresentativeName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 150);
            representativeName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reservationSerial = runtimeEntityType.AddProperty(
                "ReservationSerial",
                typeof(string),
                propertyInfo: typeof(EscortInfo).GetProperty("ReservationSerial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<ReservationSerial>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            reservationSerial.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var returnReason = runtimeEntityType.AddProperty(
                "ReturnReason",
                typeof(string),
                propertyInfo: typeof(EscortInfo).GetProperty("ReturnReason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<ReturnReason>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 250);
            returnReason.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var totalAmount = runtimeEntityType.AddProperty(
                "TotalAmount",
                typeof(double?),
                propertyInfo: typeof(EscortInfo).GetProperty("TotalAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<TotalAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            totalAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var totalAmountAfterDiscount = runtimeEntityType.AddProperty(
                "TotalAmountAfterDiscount",
                typeof(double?),
                propertyInfo: typeof(EscortInfo).GetProperty("TotalAmountAfterDiscount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<TotalAmountAfterDiscount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            totalAmountAfterDiscount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vatafterDiscount = runtimeEntityType.AddProperty(
                "VatafterDiscount",
                typeof(double?),
                propertyInfo: typeof(EscortInfo).GetProperty("VatafterDiscount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<VatafterDiscount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vatafterDiscount.AddAnnotation("Relational:ColumnName", "VATAfterDiscount");
            vatafterDiscount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehiclesCount = runtimeEntityType.AddProperty(
                "VehiclesCount",
                typeof(int?),
                propertyInfo: typeof(EscortInfo).GetProperty("VehiclesCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<VehiclesCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehiclesCount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weight = runtimeEntityType.AddProperty(
                "Weight",
                typeof(double?),
                propertyInfo: typeof(EscortInfo).GetProperty("Weight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<Weight>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            weight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var width = runtimeEntityType.AddProperty(
                "Width",
                typeof(double?),
                propertyInfo: typeof(EscortInfo).GetProperty("Width", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<Width>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            width.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { escortInfoId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { escortId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EscortId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EscortId") }),
                principalEntityType);

            var escort = declaringEntityType.AddNavigation("Escort",
                runtimeForeignKey,
                onDependent: true,
                typeof(Escort),
                propertyInfo: typeof(EscortInfo).GetProperty("Escort", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortInfo).GetField("<Escort>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var escortInfos = principalEntityType.AddNavigation("EscortInfos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EscortInfo>),
                propertyInfo: typeof(Escort).GetProperty("EscortInfos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Escort).GetField("<EscortInfos>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EscortInfo_Escorts");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EscortInfo");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
