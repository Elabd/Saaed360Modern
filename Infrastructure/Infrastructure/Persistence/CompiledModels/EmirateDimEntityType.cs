// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EmirateDimEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EmirateDim",
                typeof(EmirateDim),
                baseEntityType,
                propertyCount: 6,
                navigationCount: 15,
                namedIndexCount: 1,
                keyCount: 1);

            var emirateId = runtimeEntityType.AddProperty(
                "EmirateId",
                typeof(long),
                propertyInfo: typeof(EmirateDim).GetProperty("EmirateId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmirateDim).GetField("<EmirateId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            emirateId.AddAnnotation("Relational:ColumnName", "EmirateID");
            emirateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emirateCode = runtimeEntityType.AddProperty(
                "EmirateCode",
                typeof(string),
                propertyInfo: typeof(EmirateDim).GetProperty("EmirateCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmirateDim).GetField("<EmirateCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            emirateCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emirateEnglishName = runtimeEntityType.AddProperty(
                "EmirateEnglishName",
                typeof(string),
                propertyInfo: typeof(EmirateDim).GetProperty("EmirateEnglishName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmirateDim).GetField("<EmirateEnglishName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            emirateEnglishName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emirateName = runtimeEntityType.AddProperty(
                "EmirateName",
                typeof(string),
                propertyInfo: typeof(EmirateDim).GetProperty("EmirateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmirateDim).GetField("<EmirateName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 200);
            emirateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var googleMappingName = runtimeEntityType.AddProperty(
                "GoogleMappingName",
                typeof(string),
                propertyInfo: typeof(EmirateDim).GetProperty("GoogleMappingName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmirateDim).GetField("<GoogleMappingName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            googleMappingName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDefaultForReportConstruction = runtimeEntityType.AddProperty(
                "IsDefaultForReportConstruction",
                typeof(bool),
                propertyInfo: typeof(EmirateDim).GetProperty("IsDefaultForReportConstruction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EmirateDim).GetField("<IsDefaultForReportConstruction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isDefaultForReportConstruction.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { emirateId });
            runtimeEntityType.SetPrimaryKey(key);

            var uNQ_EmirateDIM_IsDefaultForReportConstruction = runtimeEntityType.AddIndex(
                new[] { isDefaultForReportConstruction },
                name: "UNQ_EmirateDIM_IsDefaultForReportConstruction",
                unique: true);
            uNQ_EmirateDIM_IsDefaultForReportConstruction.AddAnnotation("Relational:Filter", "([IsDefaultForReportConstruction]=(1))");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EmirateDIM");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
