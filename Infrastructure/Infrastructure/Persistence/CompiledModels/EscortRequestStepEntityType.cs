// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EscortRequestStepEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EscortRequestStep",
                typeof(EscortRequestStep),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var escortRequestStepId = runtimeEntityType.AddProperty(
                "EscortRequestStepId",
                typeof(long),
                propertyInfo: typeof(EscortRequestStep).GetProperty("EscortRequestStepId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortRequestStep).GetField("<EscortRequestStepId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            escortRequestStepId.AddAnnotation("Relational:ColumnName", "EscortRequestStepID");
            escortRequestStepId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var creationDateTime = runtimeEntityType.AddProperty(
                "CreationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(EscortRequestStep).GetProperty("CreationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortRequestStep).GetField("<CreationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            creationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employeeId = runtimeEntityType.AddProperty(
                "EmployeeId",
                typeof(long?),
                propertyInfo: typeof(EscortRequestStep).GetProperty("EmployeeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortRequestStep).GetField("<EmployeeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            employeeId.AddAnnotation("Relational:ColumnName", "EmployeeID");
            employeeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escortId = runtimeEntityType.AddProperty(
                "EscortId",
                typeof(long),
                propertyInfo: typeof(EscortRequestStep).GetProperty("EscortId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortRequestStep).GetField("<EscortId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            escortId.AddAnnotation("Relational:ColumnName", "EscortID");
            escortId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isEmployeeAction = runtimeEntityType.AddProperty(
                "IsEmployeeAction",
                typeof(bool),
                propertyInfo: typeof(EscortRequestStep).GetProperty("IsEmployeeAction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortRequestStep).GetField("<IsEmployeeAction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isEmployeeAction.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var notes = runtimeEntityType.AddProperty(
                "Notes",
                typeof(string),
                propertyInfo: typeof(EscortRequestStep).GetProperty("Notes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortRequestStep).GetField("<Notes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 4000);
            notes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestStepId = runtimeEntityType.AddProperty(
                "RequestStepId",
                typeof(int),
                propertyInfo: typeof(EscortRequestStep).GetProperty("RequestStepId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortRequestStep).GetField("<RequestStepId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            requestStepId.AddAnnotation("Relational:ColumnName", "RequestStepID");
            requestStepId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { escortRequestStepId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_EscortSteps");

            var index = runtimeEntityType.AddIndex(
                new[] { escortId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { requestStepId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EscortId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EscortId") }),
                principalEntityType,
                required: true);

            var escort = declaringEntityType.AddNavigation("Escort",
                runtimeForeignKey,
                onDependent: true,
                typeof(Escort),
                propertyInfo: typeof(EscortRequestStep).GetProperty("Escort", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortRequestStep).GetField("<Escort>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var escortRequestSteps = principalEntityType.AddNavigation("EscortRequestSteps",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EscortRequestStep>),
                propertyInfo: typeof(Escort).GetProperty("EscortRequestSteps", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Escort).GetField("<EscortRequestSteps>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Escortsteps_Escorts");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RequestStepId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RequestStepId") }),
                principalEntityType,
                required: true);

            var requestStep = declaringEntityType.AddNavigation("RequestStep",
                runtimeForeignKey,
                onDependent: true,
                typeof(RequestStepDim),
                propertyInfo: typeof(EscortRequestStep).GetProperty("RequestStep", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortRequestStep).GetField("<RequestStep>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var escortRequestSteps = principalEntityType.AddNavigation("EscortRequestSteps",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EscortRequestStep>),
                propertyInfo: typeof(RequestStepDim).GetProperty("EscortRequestSteps", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RequestStepDim).GetField("<EscortRequestSteps>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EscortRequestStep_RequestStepDim");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EscortRequestStep");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
