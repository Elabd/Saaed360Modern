// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class SmartDispatchingReturnToOperationRoomLogEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.SmartDispatchingReturnToOperationRoomLog",
                typeof(SmartDispatchingReturnToOperationRoomLog),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 4,
                foreignKeyCount: 4,
                unnamedIndexCount: 4,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var incidentRequestId = runtimeEntityType.AddProperty(
                "IncidentRequestId",
                typeof(long),
                propertyInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetProperty("IncidentRequestId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetField("<IncidentRequestId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            incidentRequestId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var logDateTime = runtimeEntityType.AddProperty(
                "LogDateTime",
                typeof(DateTime),
                propertyInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetProperty("LogDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetField("<LogDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            logDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            logDateTime.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            logDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var patrolId = runtimeEntityType.AddProperty(
                "PatrolId",
                typeof(long),
                propertyInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetProperty("PatrolId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetField("<PatrolId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            patrolId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reasonDescription = runtimeEntityType.AddProperty(
                "ReasonDescription",
                typeof(string),
                propertyInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetProperty("ReasonDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetField("<ReasonDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 1000);
            reasonDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reasonId = runtimeEntityType.AddProperty(
                "ReasonId",
                typeof(int),
                propertyInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetProperty("ReasonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetField("<ReasonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            reasonId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__SmartDis__3214EC077B4CA8F7");

            var index = runtimeEntityType.AddIndex(
                new[] { incidentRequestId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { patrolId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { personId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { reasonId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IncidentRequestId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var incidentRequest = declaringEntityType.AddNavigation("IncidentRequest",
                runtimeForeignKey,
                onDependent: true,
                typeof(IcccincidentRequest),
                propertyInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetProperty("IncidentRequest", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetField("<IncidentRequest>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var smartDispatchingReturnToOperationRoomLogs = principalEntityType.AddNavigation("SmartDispatchingReturnToOperationRoomLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SmartDispatchingReturnToOperationRoomLog>),
                propertyInfo: typeof(IcccincidentRequest).GetProperty("SmartDispatchingReturnToOperationRoomLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IcccincidentRequest).GetField("<SmartDispatchingReturnToOperationRoomLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ReturnLog_IncidentRequest");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PatrolId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemId") }),
                principalEntityType,
                required: true);

            var patrol = declaringEntityType.AddNavigation("Patrol",
                runtimeForeignKey,
                onDependent: true,
                typeof(Item),
                propertyInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetProperty("Patrol", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetField("<Patrol>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var smartDispatchingReturnToOperationRoomLogs = principalEntityType.AddNavigation("SmartDispatchingReturnToOperationRoomLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SmartDispatchingReturnToOperationRoomLog>),
                propertyInfo: typeof(Item).GetProperty("SmartDispatchingReturnToOperationRoomLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Item).GetField("<SmartDispatchingReturnToOperationRoomLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ReturnLog_Item");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var smartDispatchingReturnToOperationRoomLogs = principalEntityType.AddNavigation("SmartDispatchingReturnToOperationRoomLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SmartDispatchingReturnToOperationRoomLog>),
                propertyInfo: typeof(Person).GetProperty("SmartDispatchingReturnToOperationRoomLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<SmartDispatchingReturnToOperationRoomLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ReturnLog_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ReasonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IncidentReturnToOrreasonsId") }),
                principalEntityType,
                required: true);

            var reason = declaringEntityType.AddNavigation("Reason",
                runtimeForeignKey,
                onDependent: true,
                typeof(IncidentReturnToOrreasonsDim),
                propertyInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetProperty("Reason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SmartDispatchingReturnToOperationRoomLog).GetField("<Reason>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var smartDispatchingReturnToOperationRoomLogs = principalEntityType.AddNavigation("SmartDispatchingReturnToOperationRoomLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SmartDispatchingReturnToOperationRoomLog>),
                propertyInfo: typeof(IncidentReturnToOrreasonsDim).GetProperty("SmartDispatchingReturnToOperationRoomLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentReturnToOrreasonsDim).GetField("<SmartDispatchingReturnToOperationRoomLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ReturnLog_Reason");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "SmartDispatchingReturnToOperationRoomLog");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
