// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ReportPaymentTransactionLogEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ReportPaymentTransactionLog",
                typeof(ReportPaymentTransactionLog),
                baseEntityType,
                propertyCount: 6,
                navigationCount: 1,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var reportPaymentTransactionLogId = runtimeEntityType.AddProperty(
                "ReportPaymentTransactionLogId",
                typeof(long),
                propertyInfo: typeof(ReportPaymentTransactionLog).GetProperty("ReportPaymentTransactionLogId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportPaymentTransactionLog).GetField("<ReportPaymentTransactionLogId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            reportPaymentTransactionLogId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createdDate = runtimeEntityType.AddProperty(
                "CreatedDate",
                typeof(DateTime),
                propertyInfo: typeof(ReportPaymentTransactionLog).GetProperty("CreatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportPaymentTransactionLog).GetField("<CreatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            createdDate.AddAnnotation("Relational:ColumnType", "datetime");
            createdDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var evgPaymentStatusId = runtimeEntityType.AddProperty(
                "EvgPaymentStatusId",
                typeof(int),
                propertyInfo: typeof(ReportPaymentTransactionLog).GetProperty("EvgPaymentStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportPaymentTransactionLog).GetField("<EvgPaymentStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            evgPaymentStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var orderId = runtimeEntityType.AddProperty(
                "OrderId",
                typeof(long),
                propertyInfo: typeof(ReportPaymentTransactionLog).GetProperty("OrderId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportPaymentTransactionLog).GetField("<OrderId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            orderId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentDate = runtimeEntityType.AddProperty(
                "PaymentDate",
                typeof(DateTime?),
                propertyInfo: typeof(ReportPaymentTransactionLog).GetProperty("PaymentDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportPaymentTransactionLog).GetField("<PaymentDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentDate.AddAnnotation("Relational:ColumnType", "datetime");
            paymentDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportPaymentTransactionId = runtimeEntityType.AddProperty(
                "ReportPaymentTransactionId",
                typeof(long),
                propertyInfo: typeof(ReportPaymentTransactionLog).GetProperty("ReportPaymentTransactionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportPaymentTransactionLog).GetField("<ReportPaymentTransactionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            reportPaymentTransactionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { reportPaymentTransactionLogId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { reportPaymentTransactionId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ReportPaymentTransactionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ReportPaymentTransactionId") }),
                principalEntityType,
                required: true);

            var reportPaymentTransaction = declaringEntityType.AddNavigation("ReportPaymentTransaction",
                runtimeForeignKey,
                onDependent: true,
                typeof(ReportPaymentTransaction),
                propertyInfo: typeof(ReportPaymentTransactionLog).GetProperty("ReportPaymentTransaction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportPaymentTransactionLog).GetField("<ReportPaymentTransaction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var reportPaymentTransactionLogs = principalEntityType.AddNavigation("ReportPaymentTransactionLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ReportPaymentTransactionLog>),
                propertyInfo: typeof(ReportPaymentTransaction).GetProperty("ReportPaymentTransactionLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportPaymentTransaction).GetField("<ReportPaymentTransactionLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ReportPaymentTransactionLog_ReportPaymentTransaction");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ReportPaymentTransactionLog");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
