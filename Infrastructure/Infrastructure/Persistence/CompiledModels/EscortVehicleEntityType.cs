// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EscortVehicleEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EscortVehicle",
                typeof(EscortVehicle),
                baseEntityType,
                propertyCount: 3,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var escortVehicleId = runtimeEntityType.AddProperty(
                "EscortVehicleId",
                typeof(long),
                propertyInfo: typeof(EscortVehicle).GetProperty("EscortVehicleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortVehicle).GetField("<EscortVehicleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            escortVehicleId.AddAnnotation("Relational:ColumnName", "EscortVehicleID");
            escortVehicleId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var companyVehicleId = runtimeEntityType.AddProperty(
                "CompanyVehicleId",
                typeof(long),
                propertyInfo: typeof(EscortVehicle).GetProperty("CompanyVehicleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortVehicle).GetField("<CompanyVehicleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            companyVehicleId.AddAnnotation("Relational:ColumnName", "CompanyVehicleID");
            companyVehicleId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escortId = runtimeEntityType.AddProperty(
                "EscortId",
                typeof(long),
                propertyInfo: typeof(EscortVehicle).GetProperty("EscortId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortVehicle).GetField("<EscortId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            escortId.AddAnnotation("Relational:ColumnName", "EscortID");
            escortId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { escortVehicleId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_EscortVehicles");

            var index = runtimeEntityType.AddIndex(
                new[] { companyVehicleId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { escortId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CompanyVehicleId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CompanyVehicleId") }),
                principalEntityType,
                required: true);

            var companyVehicle = declaringEntityType.AddNavigation("CompanyVehicle",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompanyVehicle),
                propertyInfo: typeof(EscortVehicle).GetProperty("CompanyVehicle", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortVehicle).GetField("<CompanyVehicle>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var escortVehicles = principalEntityType.AddNavigation("EscortVehicles",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EscortVehicle>),
                propertyInfo: typeof(CompanyVehicle).GetProperty("EscortVehicles", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompanyVehicle).GetField("<EscortVehicles>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EscortVehicles_CompanyVehicles");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EscortId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EscortId") }),
                principalEntityType,
                required: true);

            var escort = declaringEntityType.AddNavigation("Escort",
                runtimeForeignKey,
                onDependent: true,
                typeof(Escort),
                propertyInfo: typeof(EscortVehicle).GetProperty("Escort", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortVehicle).GetField("<Escort>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var escortVehicles = principalEntityType.AddNavigation("EscortVehicles",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EscortVehicle>),
                propertyInfo: typeof(Escort).GetProperty("EscortVehicles", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Escort).GetField("<EscortVehicles>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EscortVehicles_Escorts");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EscortVehicle");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
