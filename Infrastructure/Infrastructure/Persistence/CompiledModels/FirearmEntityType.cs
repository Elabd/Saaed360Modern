// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class FirearmEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Firearm",
                typeof(Firearm),
                baseEntityType,
                propertyCount: 8,
                navigationCount: 6,
                foreignKeyCount: 6,
                unnamedIndexCount: 5,
                keyCount: 1);

            var itemId = runtimeEntityType.AddProperty(
                "ItemId",
                typeof(long),
                propertyInfo: typeof(Firearm).GetProperty("ItemId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<ItemId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            itemId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var automaticIndicator = runtimeEntityType.AddProperty(
                "AutomaticIndicator",
                typeof(int),
                propertyInfo: typeof(Firearm).GetProperty("AutomaticIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<AutomaticIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore,
                sentinel: 0);
            automaticIndicator.AddAnnotation("Relational:ComputedColumnSql", "(case [FirearmActionCategoryId] when (2) then (1) else (0) end)");
            automaticIndicator.AddAnnotation("Relational:IsStored", false);
            automaticIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var barrelLength = runtimeEntityType.AddProperty(
                "BarrelLength",
                typeof(double?),
                propertyInfo: typeof(Firearm).GetProperty("BarrelLength", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<BarrelLength>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            barrelLength.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var firearmActionCategoryId = runtimeEntityType.AddProperty(
                "FirearmActionCategoryId",
                typeof(int?),
                propertyInfo: typeof(Firearm).GetProperty("FirearmActionCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<FirearmActionCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            firearmActionCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            firearmActionCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var firearmCategoryId = runtimeEntityType.AddProperty(
                "FirearmCategoryId",
                typeof(int?),
                propertyInfo: typeof(Firearm).GetProperty("FirearmCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<FirearmCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            firearmCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            firearmCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var firearmFinishId = runtimeEntityType.AddProperty(
                "FirearmFinishId",
                typeof(int?),
                propertyInfo: typeof(Firearm).GetProperty("FirearmFinishId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<FirearmFinishId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            firearmFinishId.AddAnnotation("Relational:DefaultValue", 1);
            firearmFinishId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var firearmGageCaliberId = runtimeEntityType.AddProperty(
                "FirearmGageCaliberId",
                typeof(int?),
                propertyInfo: typeof(Firearm).GetProperty("FirearmGageCaliberId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<FirearmGageCaliberId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            firearmGageCaliberId.AddAnnotation("Relational:DefaultValue", 1);
            firearmGageCaliberId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var firearmGripId = runtimeEntityType.AddProperty(
                "FirearmGripId",
                typeof(int?),
                propertyInfo: typeof(Firearm).GetProperty("FirearmGripId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<FirearmGripId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            firearmGripId.AddAnnotation("Relational:DefaultValue", 1);
            firearmGripId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { itemId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { firearmActionCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { firearmCategoryId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { firearmFinishId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { firearmGageCaliberId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { firearmGripId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FirearmActionCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FirearmActionCategoryId") }),
                principalEntityType);

            var firearmActionCategory = declaringEntityType.AddNavigation("FirearmActionCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(FirearmActionCategoryDim),
                propertyInfo: typeof(Firearm).GetProperty("FirearmActionCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<FirearmActionCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var firearms = principalEntityType.AddNavigation("Firearms",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Firearm>),
                propertyInfo: typeof(FirearmActionCategoryDim).GetProperty("Firearms", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FirearmActionCategoryDim).GetField("<Firearms>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FirearmActionTypeDIM_Firearm_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FirearmCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FirearmCategoryId") }),
                principalEntityType);

            var firearmCategory = declaringEntityType.AddNavigation("FirearmCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(FirearmCategoryDim),
                propertyInfo: typeof(Firearm).GetProperty("FirearmCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<FirearmCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var firearms = principalEntityType.AddNavigation("Firearms",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Firearm>),
                propertyInfo: typeof(FirearmCategoryDim).GetProperty("Firearms", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FirearmCategoryDim).GetField("<Firearms>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FirearmTypeDIM_Firearm_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FirearmFinishId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FirearmFinishId") }),
                principalEntityType);

            var firearmFinish = declaringEntityType.AddNavigation("FirearmFinish",
                runtimeForeignKey,
                onDependent: true,
                typeof(FirearmFinishDim),
                propertyInfo: typeof(Firearm).GetProperty("FirearmFinish", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<FirearmFinish>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var firearms = principalEntityType.AddNavigation("Firearms",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Firearm>),
                propertyInfo: typeof(FirearmFinishDim).GetProperty("Firearms", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FirearmFinishDim).GetField("<Firearms>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Firearm_FirearmFinishDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FirearmGageCaliberId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FirearmGageCaliberId") }),
                principalEntityType);

            var firearmGageCaliber = declaringEntityType.AddNavigation("FirearmGageCaliber",
                runtimeForeignKey,
                onDependent: true,
                typeof(FirearmGageCaliberDim),
                propertyInfo: typeof(Firearm).GetProperty("FirearmGageCaliber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<FirearmGageCaliber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var firearms = principalEntityType.AddNavigation("Firearms",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Firearm>),
                propertyInfo: typeof(FirearmGageCaliberDim).GetProperty("Firearms", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FirearmGageCaliberDim).GetField("<Firearms>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FirearmGageCaliberDIM_Firearm_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FirearmGripId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FirearmGripId") }),
                principalEntityType);

            var firearmGrip = declaringEntityType.AddNavigation("FirearmGrip",
                runtimeForeignKey,
                onDependent: true,
                typeof(FirearmGripDim),
                propertyInfo: typeof(Firearm).GetProperty("FirearmGrip", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<FirearmGrip>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var firearms = principalEntityType.AddNavigation("Firearms",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Firearm>),
                propertyInfo: typeof(FirearmGripDim).GetProperty("Firearms", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FirearmGripDim).GetField("<Firearms>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FirearmGripDIM_Firearm_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemId") }),
                principalEntityType,
                unique: true,
                required: true);

            var item = declaringEntityType.AddNavigation("Item",
                runtimeForeignKey,
                onDependent: true,
                typeof(Item),
                propertyInfo: typeof(Firearm).GetProperty("Item", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Firearm).GetField("<Item>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var firearm = principalEntityType.AddNavigation("Firearm",
                runtimeForeignKey,
                onDependent: false,
                typeof(Firearm),
                propertyInfo: typeof(Item).GetProperty("Firearm", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Item).GetField("<Firearm>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "Object_Firearm_FK1");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Firearm");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
