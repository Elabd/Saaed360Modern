// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class JewelryStoneEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.JewelryStone",
                typeof(JewelryStone),
                baseEntityType,
                propertyCount: 15,
                navigationCount: 7,
                foreignKeyCount: 7,
                unnamedIndexCount: 7,
                keyCount: 1);

            var jewelryStoneId = runtimeEntityType.AddProperty(
                "JewelryStoneId",
                typeof(long),
                propertyInfo: typeof(JewelryStone).GetProperty("JewelryStoneId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<JewelryStoneId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            jewelryStoneId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createDateTimeStamp = runtimeEntityType.AddProperty(
                "CreateDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(JewelryStone).GetProperty("CreateDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<CreateDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            createDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            createDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(JewelryStone).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isDeleted.AddAnnotation("Relational:DefaultValue", false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemGuid = runtimeEntityType.AddProperty(
                "ItemGuid",
                typeof(Guid),
                propertyInfo: typeof(JewelryStone).GetProperty("ItemGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<ItemGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            itemGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemId = runtimeEntityType.AddProperty(
                "ItemId",
                typeof(long),
                propertyInfo: typeof(JewelryStone).GetProperty("ItemId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<ItemId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            itemId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var jewelryStoneCaratId = runtimeEntityType.AddProperty(
                "JewelryStoneCaratId",
                typeof(int?),
                propertyInfo: typeof(JewelryStone).GetProperty("JewelryStoneCaratId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<JewelryStoneCaratId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            jewelryStoneCaratId.AddAnnotation("Relational:DefaultValue", 1);
            jewelryStoneCaratId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var jewelryStoneCategoryId = runtimeEntityType.AddProperty(
                "JewelryStoneCategoryId",
                typeof(int?),
                propertyInfo: typeof(JewelryStone).GetProperty("JewelryStoneCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<JewelryStoneCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            jewelryStoneCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            jewelryStoneCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var jewelryStoneColorId = runtimeEntityType.AddProperty(
                "JewelryStoneColorId",
                typeof(int?),
                propertyInfo: typeof(JewelryStone).GetProperty("JewelryStoneColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<JewelryStoneColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            jewelryStoneColorId.AddAnnotation("Relational:DefaultValue", 1);
            jewelryStoneColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var jewelryStoneCutId = runtimeEntityType.AddProperty(
                "JewelryStoneCutId",
                typeof(int?),
                propertyInfo: typeof(JewelryStone).GetProperty("JewelryStoneCutId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<JewelryStoneCutId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            jewelryStoneCutId.AddAnnotation("Relational:DefaultValue", 1);
            jewelryStoneCutId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var jewelryStoneDescription = runtimeEntityType.AddProperty(
                "JewelryStoneDescription",
                typeof(string),
                propertyInfo: typeof(JewelryStone).GetProperty("JewelryStoneDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<JewelryStoneDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 300);
            jewelryStoneDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var jewelryStoneGuid = runtimeEntityType.AddProperty(
                "JewelryStoneGuid",
                typeof(Guid),
                propertyInfo: typeof(JewelryStone).GetProperty("JewelryStoneGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<JewelryStoneGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            jewelryStoneGuid.AddAnnotation("Relational:DefaultValueSql", "(newid())");
            jewelryStoneGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDateTimeStamp = runtimeEntityType.AddProperty(
                "ModifiedDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(JewelryStone).GetProperty("ModifiedDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<ModifiedDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            modifiedDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            modifiedDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rowStatusId = runtimeEntityType.AddProperty(
                "RowStatusId",
                typeof(int?),
                propertyInfo: typeof(JewelryStone).GetProperty("RowStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<RowStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            rowStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceId = runtimeEntityType.AddProperty(
                "SourceId",
                typeof(long),
                propertyInfo: typeof(JewelryStone).GetProperty("SourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<SourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            sourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var stoneQuantity = runtimeEntityType.AddProperty(
                "StoneQuantity",
                typeof(double?),
                propertyInfo: typeof(JewelryStone).GetProperty("StoneQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<StoneQuantity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            stoneQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { jewelryStoneId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { itemId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { jewelryStoneCaratId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { jewelryStoneCategoryId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { jewelryStoneColorId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { jewelryStoneCutId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { rowStatusId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { sourceId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemId") }),
                principalEntityType,
                required: true);

            var item = declaringEntityType.AddNavigation("Item",
                runtimeForeignKey,
                onDependent: true,
                typeof(Item),
                propertyInfo: typeof(JewelryStone).GetProperty("Item", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<Item>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var jewelryStones = principalEntityType.AddNavigation("JewelryStones",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<JewelryStone>),
                propertyInfo: typeof(Item).GetProperty("JewelryStones", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Item).GetField("<JewelryStones>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "Jewelry_JewelryStone_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("JewelryStoneCaratId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("JewelryStoneCaratId") }),
                principalEntityType);

            var jewelryStoneCarat = declaringEntityType.AddNavigation("JewelryStoneCarat",
                runtimeForeignKey,
                onDependent: true,
                typeof(JewelryStoneCaratDim),
                propertyInfo: typeof(JewelryStone).GetProperty("JewelryStoneCarat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<JewelryStoneCarat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var jewelryStones = principalEntityType.AddNavigation("JewelryStones",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<JewelryStone>),
                propertyInfo: typeof(JewelryStoneCaratDim).GetProperty("JewelryStones", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStoneCaratDim).GetField("<JewelryStones>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "JewelryCaratDIM_JewelryStone_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("JewelryStoneCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("JewelryStoneCategoryId") }),
                principalEntityType);

            var jewelryStoneCategory = declaringEntityType.AddNavigation("JewelryStoneCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(JewelryStoneCategoryDim),
                propertyInfo: typeof(JewelryStone).GetProperty("JewelryStoneCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<JewelryStoneCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var jewelryStones = principalEntityType.AddNavigation("JewelryStones",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<JewelryStone>),
                propertyInfo: typeof(JewelryStoneCategoryDim).GetProperty("JewelryStones", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStoneCategoryDim).GetField("<JewelryStones>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "JewelryStoneTypeDIM_JewelryStone_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("JewelryStoneColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemColorId") }),
                principalEntityType);

            var jewelryStoneColor = declaringEntityType.AddNavigation("JewelryStoneColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemColorDim),
                propertyInfo: typeof(JewelryStone).GetProperty("JewelryStoneColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<JewelryStoneColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var jewelryStones = principalEntityType.AddNavigation("JewelryStones",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<JewelryStone>),
                propertyInfo: typeof(ItemColorDim).GetProperty("JewelryStones", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemColorDim).GetField("<JewelryStones>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "itemColorDIM_JewelryStone_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("JewelryStoneCutId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("JewelryStoneCutId") }),
                principalEntityType);

            var jewelryStoneCut = declaringEntityType.AddNavigation("JewelryStoneCut",
                runtimeForeignKey,
                onDependent: true,
                typeof(JewelryStoneCutDim),
                propertyInfo: typeof(JewelryStone).GetProperty("JewelryStoneCut", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<JewelryStoneCut>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var jewelryStones = principalEntityType.AddNavigation("JewelryStones",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<JewelryStone>),
                propertyInfo: typeof(JewelryStoneCutDim).GetProperty("JewelryStones", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStoneCutDim).GetField("<JewelryStones>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "JewelryStoneCutDIM_JewelryStone_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RowStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RowStatusId") }),
                principalEntityType);

            var rowStatus = declaringEntityType.AddNavigation("RowStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(RowStatusDim),
                propertyInfo: typeof(JewelryStone).GetProperty("RowStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<RowStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var jewelryStones = principalEntityType.AddNavigation("JewelryStones",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<JewelryStone>),
                propertyInfo: typeof(RowStatusDim).GetProperty("JewelryStones", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RowStatusDim).GetField("<JewelryStones>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_JewelryStone_RowStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SourceId") }),
                principalEntityType,
                required: true);

            var source = declaringEntityType.AddNavigation("Source",
                runtimeForeignKey,
                onDependent: true,
                typeof(Source),
                propertyInfo: typeof(JewelryStone).GetProperty("Source", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(JewelryStone).GetField("<Source>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var jewelryStones = principalEntityType.AddNavigation("JewelryStones",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<JewelryStone>),
                propertyInfo: typeof(Source).GetProperty("JewelryStones", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Source).GetField("<JewelryStones>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_JewelryStone_Source");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "JewelryStone");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
