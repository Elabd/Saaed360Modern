// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EventMissionAssignmentLogEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EventMissionAssignmentLog",
                typeof(EventMissionAssignmentLog),
                baseEntityType,
                propertyCount: 5,
                navigationCount: 3,
                foreignKeyCount: 3,
                unnamedIndexCount: 3,
                keyCount: 1);

            var eventMissionAssignmentLogId = runtimeEntityType.AddProperty(
                "EventMissionAssignmentLogId",
                typeof(long),
                propertyInfo: typeof(EventMissionAssignmentLog).GetProperty("EventMissionAssignmentLogId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventMissionAssignmentLog).GetField("<EventMissionAssignmentLogId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            eventMissionAssignmentLogId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createdby = runtimeEntityType.AddProperty(
                "Createdby",
                typeof(long?),
                propertyInfo: typeof(EventMissionAssignmentLog).GetProperty("Createdby", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventMissionAssignmentLog).GetField("<Createdby>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdby.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDateTime = runtimeEntityType.AddProperty(
                "CreationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(EventMissionAssignmentLog).GetProperty("CreationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventMissionAssignmentLog).GetField("<CreationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            creationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missionAssignId = runtimeEntityType.AddProperty(
                "MissionAssignId",
                typeof(long?),
                propertyInfo: typeof(EventMissionAssignmentLog).GetProperty("MissionAssignId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventMissionAssignmentLog).GetField("<MissionAssignId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            missionAssignId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statusId = runtimeEntityType.AddProperty(
                "StatusId",
                typeof(int?),
                propertyInfo: typeof(EventMissionAssignmentLog).GetProperty("StatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventMissionAssignmentLog).GetField("<StatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            statusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { eventMissionAssignmentLogId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { createdby });

            var index0 = runtimeEntityType.AddIndex(
                new[] { missionAssignId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { statusId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("Createdby") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var createdbyNavigation = declaringEntityType.AddNavigation("CreatedbyNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(EventMissionAssignmentLog).GetProperty("CreatedbyNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventMissionAssignmentLog).GetField("<CreatedbyNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventMissionAssignmentLogs = principalEntityType.AddNavigation("EventMissionAssignmentLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventMissionAssignmentLog>),
                propertyInfo: typeof(Person).GetProperty("EventMissionAssignmentLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<EventMissionAssignmentLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventMissionAssignmentLog_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MissionAssignId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MissionAssignId") }),
                principalEntityType);

            var missionAssign = declaringEntityType.AddNavigation("MissionAssign",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsMissionAssignment),
                propertyInfo: typeof(EventMissionAssignmentLog).GetProperty("MissionAssign", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventMissionAssignmentLog).GetField("<MissionAssign>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventMissionAssignmentLogs = principalEntityType.AddNavigation("EventMissionAssignmentLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventMissionAssignmentLog>),
                propertyInfo: typeof(EventsMissionAssignment).GetProperty("EventMissionAssignmentLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMissionAssignment).GetField("<EventMissionAssignmentLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventMissionAssignmentLog_EventsMissionAssignment");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("StatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MissionAssignmentStatusId") }),
                principalEntityType);

            var status = declaringEntityType.AddNavigation("Status",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventMissionAssignmentStatusDim),
                propertyInfo: typeof(EventMissionAssignmentLog).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventMissionAssignmentLog).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventMissionAssignmentLogs = principalEntityType.AddNavigation("EventMissionAssignmentLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventMissionAssignmentLog>),
                propertyInfo: typeof(EventMissionAssignmentStatusDim).GetProperty("EventMissionAssignmentLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventMissionAssignmentStatusDim).GetField("<EventMissionAssignmentLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventMissionAssignmentLog_EventMissionAssignmentStatusDim");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EventMissionAssignmentLog");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
