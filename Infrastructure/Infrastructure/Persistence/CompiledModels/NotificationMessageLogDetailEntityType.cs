// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class NotificationMessageLogDetailEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.NotificationMessageLogDetail",
                typeof(NotificationMessageLogDetail),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 1,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var notificationMessageLogDetailsId = runtimeEntityType.AddProperty(
                "NotificationMessageLogDetailsId",
                typeof(long),
                propertyInfo: typeof(NotificationMessageLogDetail).GetProperty("NotificationMessageLogDetailsId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(NotificationMessageLogDetail).GetField("<NotificationMessageLogDetailsId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            notificationMessageLogDetailsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var isSmssentTry = runtimeEntityType.AddProperty(
                "IsSmssentTry",
                typeof(bool),
                propertyInfo: typeof(NotificationMessageLogDetail).GetProperty("IsSmssentTry", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(NotificationMessageLogDetail).GetField("<IsSmssentTry>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isSmssentTry.AddAnnotation("Relational:ColumnName", "IsSMSSentTry");
            isSmssentTry.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lang = runtimeEntityType.AddProperty(
                "Lang",
                typeof(string),
                propertyInfo: typeof(NotificationMessageLogDetail).GetProperty("Lang", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(NotificationMessageLogDetail).GetField("<Lang>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 50);
            lang.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var notificationMessageLogId = runtimeEntityType.AddProperty(
                "NotificationMessageLogId",
                typeof(long),
                propertyInfo: typeof(NotificationMessageLogDetail).GetProperty("NotificationMessageLogId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(NotificationMessageLogDetail).GetField("<NotificationMessageLogId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            notificationMessageLogId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var retryPeriodSecs = runtimeEntityType.AddProperty(
                "RetryPeriodSecs",
                typeof(int),
                propertyInfo: typeof(NotificationMessageLogDetail).GetProperty("RetryPeriodSecs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(NotificationMessageLogDetail).GetField("<RetryPeriodSecs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            retryPeriodSecs.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var smssentTryDate = runtimeEntityType.AddProperty(
                "SmssentTryDate",
                typeof(DateTime?),
                propertyInfo: typeof(NotificationMessageLogDetail).GetProperty("SmssentTryDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(NotificationMessageLogDetail).GetField("<SmssentTryDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            smssentTryDate.AddAnnotation("Relational:ColumnName", "SMSSentTryDate");
            smssentTryDate.AddAnnotation("Relational:ColumnType", "datetime");
            smssentTryDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var smstext = runtimeEntityType.AddProperty(
                "Smstext",
                typeof(string),
                propertyInfo: typeof(NotificationMessageLogDetail).GetProperty("Smstext", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(NotificationMessageLogDetail).GetField("<Smstext>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            smstext.AddAnnotation("Relational:ColumnName", "SMSText");
            smstext.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { notificationMessageLogDetailsId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { notificationMessageLogId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("NotificationMessageLogId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MessageLogId") }),
                principalEntityType,
                required: true);

            var notificationMessageLog = declaringEntityType.AddNavigation("NotificationMessageLog",
                runtimeForeignKey,
                onDependent: true,
                typeof(NotificationMessageLog),
                propertyInfo: typeof(NotificationMessageLogDetail).GetProperty("NotificationMessageLog", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(NotificationMessageLogDetail).GetField("<NotificationMessageLog>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var notificationMessageLogDetails = principalEntityType.AddNavigation("NotificationMessageLogDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<NotificationMessageLogDetail>),
                propertyInfo: typeof(NotificationMessageLog).GetProperty("NotificationMessageLogDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(NotificationMessageLog).GetField("<NotificationMessageLogDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_NotificationMessageLogDetails_NotificationMessageLog");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "NotificationMessageLogDetails");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
