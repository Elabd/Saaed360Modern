// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class RealestateEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Realestate",
                typeof(Realestate),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 4,
                foreignKeyCount: 4,
                unnamedIndexCount: 3,
                keyCount: 1);

            var itemId = runtimeEntityType.AddProperty(
                "ItemId",
                typeof(long),
                propertyInfo: typeof(Realestate).GetProperty("ItemId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realestate).GetField("<ItemId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            itemId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var acreage = runtimeEntityType.AddProperty(
                "Acreage",
                typeof(string),
                propertyInfo: typeof(Realestate).GetProperty("Acreage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realestate).GetField("<Acreage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            acreage.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var boundry = runtimeEntityType.AddProperty(
                "Boundry",
                typeof(string),
                propertyInfo: typeof(Realestate).GetProperty("Boundry", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realestate).GetField("<Boundry>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 400);
            boundry.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var realestateAttachedFacilityId = runtimeEntityType.AddProperty(
                "RealestateAttachedFacilityId",
                typeof(int?),
                propertyInfo: typeof(Realestate).GetProperty("RealestateAttachedFacilityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realestate).GetField("<RealestateAttachedFacilityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            realestateAttachedFacilityId.AddAnnotation("Relational:DefaultValue", 1);
            realestateAttachedFacilityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var realestateCategoryId = runtimeEntityType.AddProperty(
                "RealestateCategoryId",
                typeof(int?),
                propertyInfo: typeof(Realestate).GetProperty("RealestateCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realestate).GetField("<RealestateCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            realestateCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            realestateCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var realestateLocationGuid = runtimeEntityType.AddProperty(
                "RealestateLocationGuid",
                typeof(Guid),
                propertyInfo: typeof(Realestate).GetProperty("RealestateLocationGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realestate).GetField("<RealestateLocationGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            realestateLocationGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var realestateLocationId = runtimeEntityType.AddProperty(
                "RealestateLocationId",
                typeof(long?),
                propertyInfo: typeof(Realestate).GetProperty("RealestateLocationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realestate).GetField("<RealestateLocationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            realestateLocationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { itemId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_Realestate_1");

            var index = runtimeEntityType.AddIndex(
                new[] { realestateAttachedFacilityId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { realestateCategoryId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { realestateLocationId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemId") }),
                principalEntityType,
                unique: true,
                required: true);

            var item = declaringEntityType.AddNavigation("Item",
                runtimeForeignKey,
                onDependent: true,
                typeof(Item),
                propertyInfo: typeof(Realestate).GetProperty("Item", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realestate).GetField("<Item>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var realestate = principalEntityType.AddNavigation("Realestate",
                runtimeForeignKey,
                onDependent: false,
                typeof(Realestate),
                propertyInfo: typeof(Item).GetProperty("Realestate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Item).GetField("<Realestate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "Object_Realestate_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RealestateAttachedFacilityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RealestateAttachedFacilityId") }),
                principalEntityType);

            var realestateAttachedFacility = declaringEntityType.AddNavigation("RealestateAttachedFacility",
                runtimeForeignKey,
                onDependent: true,
                typeof(RealestateAttachedFacilityDim),
                propertyInfo: typeof(Realestate).GetProperty("RealestateAttachedFacility", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realestate).GetField("<RealestateAttachedFacility>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var realestates = principalEntityType.AddNavigation("Realestates",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Realestate>),
                propertyInfo: typeof(RealestateAttachedFacilityDim).GetProperty("Realestates", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RealestateAttachedFacilityDim).GetField("<Realestates>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Realestate_RealestateAttachedFacilityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RealestateCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RealestateCategoryId") }),
                principalEntityType);

            var realestateCategory = declaringEntityType.AddNavigation("RealestateCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(RealestateCategoryDim),
                propertyInfo: typeof(Realestate).GetProperty("RealestateCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realestate).GetField("<RealestateCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var realestates = principalEntityType.AddNavigation("Realestates",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Realestate>),
                propertyInfo: typeof(RealestateCategoryDim).GetProperty("Realestates", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RealestateCategoryDim).GetField("<Realestates>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "RealestateTypeDIM_Realestate_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RealestateLocationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LocationId") }),
                principalEntityType);

            var realestateLocation = declaringEntityType.AddNavigation("RealestateLocation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Location),
                propertyInfo: typeof(Realestate).GetProperty("RealestateLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Realestate).GetField("<RealestateLocation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var realestates = principalEntityType.AddNavigation("Realestates",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Realestate>),
                propertyInfo: typeof(Location).GetProperty("Realestates", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Location).GetField("<Realestates>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Realestate_Location");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Realestate");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
