// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EscortAttachmentEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EscortAttachment",
                typeof(EscortAttachment),
                baseEntityType,
                propertyCount: 5,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var escortAttachmentId = runtimeEntityType.AddProperty(
                "EscortAttachmentId",
                typeof(int),
                propertyInfo: typeof(EscortAttachment).GetProperty("EscortAttachmentId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortAttachment).GetField("<EscortAttachmentId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            escortAttachmentId.AddAnnotation("Relational:ColumnName", "EscortAttachmentID");
            escortAttachmentId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var escortAttachmentTypeId = runtimeEntityType.AddProperty(
                "EscortAttachmentTypeId",
                typeof(int?),
                propertyInfo: typeof(EscortAttachment).GetProperty("EscortAttachmentTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortAttachment).GetField("<EscortAttachmentTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            escortAttachmentTypeId.AddAnnotation("Relational:ColumnName", "EscortAttachmentTypeID");
            escortAttachmentTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escortId = runtimeEntityType.AddProperty(
                "EscortId",
                typeof(long?),
                propertyInfo: typeof(EscortAttachment).GetProperty("EscortId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortAttachment).GetField("<EscortId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            escortId.AddAnnotation("Relational:ColumnName", "EscortID");
            escortId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(EscortAttachment).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortAttachment).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 150);
            name.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var path = runtimeEntityType.AddProperty(
                "Path",
                typeof(string),
                propertyInfo: typeof(EscortAttachment).GetProperty("Path", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortAttachment).GetField("<Path>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 150);
            path.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { escortAttachmentId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_EscortAttachments");

            var index = runtimeEntityType.AddIndex(
                new[] { escortAttachmentTypeId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { escortId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EscortAttachmentTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EscortAttachmentTypeId") }),
                principalEntityType);

            var escortAttachmentType = declaringEntityType.AddNavigation("EscortAttachmentType",
                runtimeForeignKey,
                onDependent: true,
                typeof(EscortAttachmentTypeDim),
                propertyInfo: typeof(EscortAttachment).GetProperty("EscortAttachmentType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortAttachment).GetField("<EscortAttachmentType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var escortAttachments = principalEntityType.AddNavigation("EscortAttachments",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EscortAttachment>),
                propertyInfo: typeof(EscortAttachmentTypeDim).GetProperty("EscortAttachments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortAttachmentTypeDim).GetField("<EscortAttachments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EscortAttachment_EscortAttachmentTypeDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EscortId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EscortId") }),
                principalEntityType);

            var escort = declaringEntityType.AddNavigation("Escort",
                runtimeForeignKey,
                onDependent: true,
                typeof(Escort),
                propertyInfo: typeof(EscortAttachment).GetProperty("Escort", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscortAttachment).GetField("<Escort>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var escortAttachments = principalEntityType.AddNavigation("EscortAttachments",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EscortAttachment>),
                propertyInfo: typeof(Escort).GetProperty("EscortAttachments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Escort).GetField("<EscortAttachments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EscortAttachments_Escorts");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EscortAttachment");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
