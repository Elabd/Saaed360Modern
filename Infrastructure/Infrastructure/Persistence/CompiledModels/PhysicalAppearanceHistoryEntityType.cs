// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PhysicalAppearanceHistoryEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PhysicalAppearanceHistory",
                typeof(PhysicalAppearanceHistory),
                baseEntityType,
                propertyCount: 18,
                navigationCount: 7,
                foreignKeyCount: 7,
                unnamedIndexCount: 7,
                keyCount: 1);

            var physicalAppearanceHistoryId = runtimeEntityType.AddProperty(
                "PhysicalAppearanceHistoryId",
                typeof(long),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PhysicalAppearanceHistoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PhysicalAppearanceHistoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            physicalAppearanceHistoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createDateTimeStamp = runtimeEntityType.AddProperty(
                "CreateDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("CreateDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<CreateDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            createDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            createDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var heightFeet = runtimeEntityType.AddProperty(
                "HeightFeet",
                typeof(string),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("HeightFeet", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<HeightFeet>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 10);
            heightFeet.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var heightInches = runtimeEntityType.AddProperty(
                "HeightInches",
                typeof(string),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("HeightInches", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<HeightInches>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 10);
            heightInches.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isDeleted.AddAnnotation("Relational:DefaultValue", false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDateTimeStamp = runtimeEntityType.AddProperty(
                "ModifiedDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("ModifiedDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<ModifiedDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            modifiedDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            modifiedDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personBuildId = runtimeEntityType.AddProperty(
                "PersonBuildId",
                typeof(int?),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonBuildId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonBuildId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            personBuildId.AddAnnotation("Relational:DefaultValue", 1);
            personBuildId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personGuid = runtimeEntityType.AddProperty(
                "PersonGuid",
                typeof(Guid),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personHairColorId = runtimeEntityType.AddProperty(
                "PersonHairColorId",
                typeof(int?),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonHairColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonHairColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            personHairColorId.AddAnnotation("Relational:DefaultValue", 1);
            personHairColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personLeftEyeColorId = runtimeEntityType.AddProperty(
                "PersonLeftEyeColorId",
                typeof(int?),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonLeftEyeColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonLeftEyeColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            personLeftEyeColorId.AddAnnotation("Relational:DefaultValue", 1);
            personLeftEyeColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personRightEyeColorId = runtimeEntityType.AddProperty(
                "PersonRightEyeColorId",
                typeof(int?),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonRightEyeColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonRightEyeColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            personRightEyeColorId.AddAnnotation("Relational:DefaultValue", 1);
            personRightEyeColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personSkinToneId = runtimeEntityType.AddProperty(
                "PersonSkinToneId",
                typeof(int?),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonSkinToneId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonSkinToneId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            personSkinToneId.AddAnnotation("Relational:DefaultValue", 1);
            personSkinToneId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var physicalAppearanceHistoryDescription = runtimeEntityType.AddProperty(
                "PhysicalAppearanceHistoryDescription",
                typeof(string),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PhysicalAppearanceHistoryDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PhysicalAppearanceHistoryDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 300);
            physicalAppearanceHistoryDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var physicalAppearanceHistoryGuid = runtimeEntityType.AddProperty(
                "PhysicalAppearanceHistoryGuid",
                typeof(Guid),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PhysicalAppearanceHistoryGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PhysicalAppearanceHistoryGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            physicalAppearanceHistoryGuid.AddAnnotation("Relational:DefaultValueSql", "(newid())");
            physicalAppearanceHistoryGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rowStatusId = runtimeEntityType.AddProperty(
                "RowStatusId",
                typeof(int?),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("RowStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<RowStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            rowStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceId = runtimeEntityType.AddProperty(
                "SourceId",
                typeof(long),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("SourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<SourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            sourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weight = runtimeEntityType.AddProperty(
                "Weight",
                typeof(string),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("Weight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<Weight>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 10);
            weight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { physicalAppearanceHistoryId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { personBuildId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { personHairColorId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { personId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { personLeftEyeColorId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { personRightEyeColorId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { personSkinToneId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { rowStatusId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonBuildId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonBuildId") }),
                principalEntityType);

            var personBuild = declaringEntityType.AddNavigation("PersonBuild",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonBuildDim),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonBuild", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonBuild>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var physicalAppearanceHistories = principalEntityType.AddNavigation("PhysicalAppearanceHistories",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PhysicalAppearanceHistory>),
                propertyInfo: typeof(PersonBuildDim).GetProperty("PhysicalAppearanceHistories", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonBuildDim).GetField("<PhysicalAppearanceHistories>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PhysicalAppearanceHistory_PersonBuildDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonHairColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonHairColorId") }),
                principalEntityType);

            var personHairColor = declaringEntityType.AddNavigation("PersonHairColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonHairColorDim),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonHairColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonHairColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var physicalAppearanceHistories = principalEntityType.AddNavigation("PhysicalAppearanceHistories",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PhysicalAppearanceHistory>),
                propertyInfo: typeof(PersonHairColorDim).GetProperty("PhysicalAppearanceHistories", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonHairColorDim).GetField("<PhysicalAppearanceHistories>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PhysicalAppearanceHistory_PersonHairColorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var physicalAppearanceHistories = principalEntityType.AddNavigation("PhysicalAppearanceHistories",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PhysicalAppearanceHistory>),
                propertyInfo: typeof(Person).GetProperty("PhysicalAppearanceHistories", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<PhysicalAppearanceHistories>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PhysicalAppearanceHistory_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonLeftEyeColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonEyeColorId") }),
                principalEntityType);

            var personLeftEyeColor = declaringEntityType.AddNavigation("PersonLeftEyeColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonEyeColorDim),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonLeftEyeColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonLeftEyeColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var physicalAppearanceHistoryPersonLeftEyeColors = principalEntityType.AddNavigation("PhysicalAppearanceHistoryPersonLeftEyeColors",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PhysicalAppearanceHistory>),
                propertyInfo: typeof(PersonEyeColorDim).GetProperty("PhysicalAppearanceHistoryPersonLeftEyeColors", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEyeColorDim).GetField("<PhysicalAppearanceHistoryPersonLeftEyeColors>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PhysicalAppearanceHistory_PersonLeftEyeColorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonRightEyeColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonEyeColorId") }),
                principalEntityType);

            var personRightEyeColor = declaringEntityType.AddNavigation("PersonRightEyeColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonEyeColorDim),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonRightEyeColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonRightEyeColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var physicalAppearanceHistoryPersonRightEyeColors = principalEntityType.AddNavigation("PhysicalAppearanceHistoryPersonRightEyeColors",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PhysicalAppearanceHistory>),
                propertyInfo: typeof(PersonEyeColorDim).GetProperty("PhysicalAppearanceHistoryPersonRightEyeColors", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEyeColorDim).GetField("<PhysicalAppearanceHistoryPersonRightEyeColors>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PhysicalAppearanceHistory_PersonRightEyeColorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonSkinToneId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonSkinToneId") }),
                principalEntityType);

            var personSkinTone = declaringEntityType.AddNavigation("PersonSkinTone",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonSkinToneDim),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("PersonSkinTone", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<PersonSkinTone>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var physicalAppearanceHistories = principalEntityType.AddNavigation("PhysicalAppearanceHistories",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PhysicalAppearanceHistory>),
                propertyInfo: typeof(PersonSkinToneDim).GetProperty("PhysicalAppearanceHistories", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonSkinToneDim).GetField("<PhysicalAppearanceHistories>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PhysicalAppearanceHistory_PersonSkinToneDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RowStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RowStatusId") }),
                principalEntityType);

            var rowStatus = declaringEntityType.AddNavigation("RowStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(RowStatusDim),
                propertyInfo: typeof(PhysicalAppearanceHistory).GetProperty("RowStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalAppearanceHistory).GetField("<RowStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var physicalAppearanceHistories = principalEntityType.AddNavigation("PhysicalAppearanceHistories",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PhysicalAppearanceHistory>),
                propertyInfo: typeof(RowStatusDim).GetProperty("PhysicalAppearanceHistories", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RowStatusDim).GetField("<PhysicalAppearanceHistories>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PhysicalAppearanceHistory_RowStatusDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PhysicalAppearanceHistory");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
