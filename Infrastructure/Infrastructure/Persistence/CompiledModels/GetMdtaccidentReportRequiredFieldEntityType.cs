// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class GetMdtaccidentReportRequiredFieldEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.GetMdtaccidentReportRequiredField",
                typeof(GetMdtaccidentReportRequiredField),
                baseEntityType,
                propertyCount: 40);

            var activityDate = runtimeEntityType.AddProperty(
                "ActivityDate",
                typeof(DateTime?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("ActivityDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<ActivityDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            activityDate.AddAnnotation("Relational:ColumnType", "datetime");
            activityDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var chasisNumber = runtimeEntityType.AddProperty(
                "ChasisNumber",
                typeof(string),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("ChasisNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<ChasisNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            chasisNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var chemicalId = runtimeEntityType.AddProperty(
                "ChemicalId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("ChemicalId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<ChemicalId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            chemicalId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var collisionId = runtimeEntityType.AddProperty(
                "CollisionId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("CollisionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<CollisionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            collisionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var countryOfOriginId = runtimeEntityType.AddProperty(
                "CountryOfOriginId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("CountryOfOriginId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<CountryOfOriginId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            countryOfOriginId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var crossingStreetId = runtimeEntityType.AddProperty(
                "CrossingStreetId",
                typeof(long),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("CrossingStreetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<CrossingStreetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            crossingStreetId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var damagedPartsId = runtimeEntityType.AddProperty(
                "DamagedPartsId",
                typeof(string),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("DamagedPartsId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<DamagedPartsId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200,
                unicode: false);
            damagedPartsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataLicenseExpiryDate = runtimeEntityType.AddProperty(
                "DriverDataLicenseExpiryDate",
                typeof(DateTime?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("DriverDataLicenseExpiryDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<DriverDataLicenseExpiryDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverDataLicenseExpiryDate.AddAnnotation("Relational:ColumnName", "DriverData_LicenseExpiryDate");
            driverDataLicenseExpiryDate.AddAnnotation("Relational:ColumnType", "datetime");
            driverDataLicenseExpiryDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataLicenseNumber = runtimeEntityType.AddProperty(
                "DriverDataLicenseNumber",
                typeof(string),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("DriverDataLicenseNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<DriverDataLicenseNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverDataLicenseNumber.AddAnnotation("Relational:ColumnName", "DriverData_LicenseNumber");
            driverDataLicenseNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataName = runtimeEntityType.AddProperty(
                "DriverDataName",
                typeof(string),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("DriverDataName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<DriverDataName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverDataName.AddAnnotation("Relational:ColumnName", "DriverData_Name");
            driverDataName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataTrafficCode = runtimeEntityType.AddProperty(
                "DriverDataTrafficCode",
                typeof(string),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("DriverDataTrafficCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<DriverDataTrafficCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverDataTrafficCode.AddAnnotation("Relational:ColumnName", "DriverData_TrafficCode");
            driverDataTrafficCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverStatusId = runtimeEntityType.AddProperty(
                "DriverStatusId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("DriverStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<DriverStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var glassColorId = runtimeEntityType.AddProperty(
                "GlassColorId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("GlassColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<GlassColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            glassColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insuranceCompanyId = runtimeEntityType.AddProperty(
                "InsuranceCompanyId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("InsuranceCompanyId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<InsuranceCompanyId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            insuranceCompanyId.AddAnnotation("Relational:ColumnName", "InsuranceCompanyID");
            insuranceCompanyId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insurancePolicyNumber = runtimeEntityType.AddProperty(
                "InsurancePolicyNumber",
                typeof(string),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("InsurancePolicyNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<InsurancePolicyNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            insurancePolicyNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intersectionId = runtimeEntityType.AddProperty(
                "IntersectionId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("IntersectionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<IntersectionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intersectionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isMainVehicle = runtimeEntityType.AddProperty(
                "IsMainVehicle",
                typeof(int),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("IsMainVehicle", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<IsMainVehicle>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            isMainVehicle.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licensePlateListSourceId = runtimeEntityType.AddProperty(
                "LicensePlateListSourceId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("LicensePlateListSourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<LicensePlateListSourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            licensePlateListSourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var manufactureYearId = runtimeEntityType.AddProperty(
                "ManufactureYearId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("ManufactureYearId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<ManufactureYearId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            manufactureYearId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var organizationId = runtimeEntityType.AddProperty(
                "OrganizationId",
                typeof(long),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("OrganizationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<OrganizationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            organizationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ownerDataName = runtimeEntityType.AddProperty(
                "OwnerDataName",
                typeof(string),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("OwnerDataName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<OwnerDataName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            ownerDataName.AddAnnotation("Relational:ColumnName", "OwnerData_Name");
            ownerDataName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ownerDataTrafficCode = runtimeEntityType.AddProperty(
                "OwnerDataTrafficCode",
                typeof(string),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("OwnerDataTrafficCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<OwnerDataTrafficCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            ownerDataTrafficCode.AddAnnotation("Relational:ColumnName", "OwnerData_TrafficCode");
            ownerDataTrafficCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateMatrixId = runtimeEntityType.AddProperty(
                "PlateMatrixId",
                typeof(long?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("PlateMatrixId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<PlateMatrixId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateMatrixId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateNumber = runtimeEntityType.AddProperty(
                "PlateNumber",
                typeof(string),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("PlateNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<PlateNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            plateNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var propertyTypeId = runtimeEntityType.AddProperty(
                "PropertyTypeId",
                typeof(int),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("PropertyTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<PropertyTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            propertyTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reasonCategoryId = runtimeEntityType.AddProperty(
                "ReasonCategoryId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("ReasonCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<ReasonCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reasonCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(int),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportStatusCode = runtimeEntityType.AddProperty(
                "ReportStatusCode",
                typeof(string),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("ReportStatusCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<ReportStatusCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            reportStatusCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportTypeId = runtimeEntityType.AddProperty(
                "ReportTypeId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("ReportTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<ReportTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var roadSpeedId = runtimeEntityType.AddProperty(
                "RoadSpeedId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("RoadSpeedId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<RoadSpeedId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            roadSpeedId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var roadSurfaceId = runtimeEntityType.AddProperty(
                "RoadSurfaceId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("RoadSurfaceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<RoadSurfaceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            roadSurfaceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var streetId = runtimeEntityType.AddProperty(
                "StreetId",
                typeof(long),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("StreetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<StreetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            streetId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleColorId = runtimeEntityType.AddProperty(
                "VehicleColorId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("VehicleColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<VehicleColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataId = runtimeEntityType.AddProperty(
                "VehicleDataId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("VehicleDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<VehicleDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataInsuranceExpiryDate = runtimeEntityType.AddProperty(
                "VehicleDataInsuranceExpiryDate",
                typeof(DateTime?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("VehicleDataInsuranceExpiryDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<VehicleDataInsuranceExpiryDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleDataInsuranceExpiryDate.AddAnnotation("Relational:ColumnName", "VehicleData_InsuranceExpiryDate");
            vehicleDataInsuranceExpiryDate.AddAnnotation("Relational:ColumnType", "datetime");
            vehicleDataInsuranceExpiryDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataTypeId = runtimeEntityType.AddProperty(
                "VehicleDataTypeId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("VehicleDataTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<VehicleDataTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleDataTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleMatrixId = runtimeEntityType.AddProperty(
                "VehicleMatrixId",
                typeof(long?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("VehicleMatrixId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<VehicleMatrixId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleMatrixId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleStatusId = runtimeEntityType.AddProperty(
                "VehicleStatusId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("VehicleStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<VehicleStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weatherId = runtimeEntityType.AddProperty(
                "WeatherId",
                typeof(int?),
                propertyInfo: typeof(GetMdtaccidentReportRequiredField).GetProperty("WeatherId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetMdtaccidentReportRequiredField).GetField("<WeatherId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            weatherId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "GetMDTAccidentReportRequiredFields");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
