// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class BondEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Bond",
                typeof(Bond),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 4,
                foreignKeyCount: 4,
                unnamedIndexCount: 3,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(Bond).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bond).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bondAmount = runtimeEntityType.AddProperty(
                "BondAmount",
                typeof(double?),
                propertyInfo: typeof(Bond).GetProperty("BondAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bond).GetField("<BondAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bondAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bondConditionId = runtimeEntityType.AddProperty(
                "BondConditionId",
                typeof(int?),
                propertyInfo: typeof(Bond).GetProperty("BondConditionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bond).GetField("<BondConditionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            bondConditionId.AddAnnotation("Relational:DefaultValue", 1);
            bondConditionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bondPaymentId = runtimeEntityType.AddProperty(
                "BondPaymentId",
                typeof(int?),
                propertyInfo: typeof(Bond).GetProperty("BondPaymentId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bond).GetField("<BondPaymentId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            bondPaymentId.AddAnnotation("Relational:DefaultValue", 1);
            bondPaymentId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bondRevolkeDate = runtimeEntityType.AddProperty(
                "BondRevolkeDate",
                typeof(DateTime?),
                propertyInfo: typeof(Bond).GetProperty("BondRevolkeDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bond).GetField("<BondRevolkeDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bondRevolkeDate.AddAnnotation("Relational:ColumnType", "datetime");
            bondRevolkeDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bondTerminationCategoryId = runtimeEntityType.AddProperty(
                "BondTerminationCategoryId",
                typeof(int?),
                propertyInfo: typeof(Bond).GetProperty("BondTerminationCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bond).GetField("<BondTerminationCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            bondTerminationCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            bondTerminationCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var bondTerminationDate = runtimeEntityType.AddProperty(
                "BondTerminationDate",
                typeof(DateTime?),
                propertyInfo: typeof(Bond).GetProperty("BondTerminationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bond).GetField("<BondTerminationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bondTerminationDate.AddAnnotation("Relational:ColumnType", "datetime");
            bondTerminationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_Bond_1");

            var index = runtimeEntityType.AddIndex(
                new[] { bondConditionId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { bondPaymentId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { bondTerminationCategoryId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(Bond).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bond).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var bond = principalEntityType.AddNavigation("Bond",
                runtimeForeignKey,
                onDependent: false,
                typeof(Bond),
                propertyInfo: typeof(Activity).GetProperty("Bond", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<Bond>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Bond_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BondConditionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("BondConditionId") }),
                principalEntityType);

            var bondCondition = declaringEntityType.AddNavigation("BondCondition",
                runtimeForeignKey,
                onDependent: true,
                typeof(BondConditionDim),
                propertyInfo: typeof(Bond).GetProperty("BondCondition", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bond).GetField("<BondCondition>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var bonds = principalEntityType.AddNavigation("Bonds",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Bond>),
                propertyInfo: typeof(BondConditionDim).GetProperty("Bonds", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BondConditionDim).GetField("<Bonds>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "BondConditionDIM_Bonds_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BondPaymentId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("BondPaymentId") }),
                principalEntityType);

            var bondPayment = declaringEntityType.AddNavigation("BondPayment",
                runtimeForeignKey,
                onDependent: true,
                typeof(BondPaymentDim),
                propertyInfo: typeof(Bond).GetProperty("BondPayment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bond).GetField("<BondPayment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var bonds = principalEntityType.AddNavigation("Bonds",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Bond>),
                propertyInfo: typeof(BondPaymentDim).GetProperty("Bonds", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BondPaymentDim).GetField("<Bonds>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "BondPaymentDIM_Bonds_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BondTerminationCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("BondTerminationCategoryId") }),
                principalEntityType);

            var bondTerminationCategory = declaringEntityType.AddNavigation("BondTerminationCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(BondTerminationCategoryDim),
                propertyInfo: typeof(Bond).GetProperty("BondTerminationCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Bond).GetField("<BondTerminationCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var bonds = principalEntityType.AddNavigation("Bonds",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Bond>),
                propertyInfo: typeof(BondTerminationCategoryDim).GetProperty("Bonds", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BondTerminationCategoryDim).GetField("<Bonds>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "BondTerminationTypeDIM_Bonds_FK1");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Bond");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
