// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class SaaedIprocessedImageEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.SaaedIprocessedImage",
                typeof(SaaedIprocessedImage),
                baseEntityType,
                propertyCount: 5,
                navigationCount: 4,
                foreignKeyCount: 4,
                unnamedIndexCount: 4,
                keyCount: 1);

            var saaedIprocessedImageId = runtimeEntityType.AddProperty(
                "SaaedIprocessedImageId",
                typeof(Guid),
                propertyInfo: typeof(SaaedIprocessedImage).GetProperty("SaaedIprocessedImageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaaedIprocessedImage).GetField("<SaaedIprocessedImageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            saaedIprocessedImageId.AddAnnotation("Relational:ColumnName", "SaaedIProcessedImageId");
            saaedIprocessedImageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var imageId = runtimeEntityType.AddProperty(
                "ImageId",
                typeof(long),
                propertyInfo: typeof(SaaedIprocessedImage).GetProperty("ImageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaaedIprocessedImage).GetField("<ImageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            imageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var imageTypeId = runtimeEntityType.AddProperty(
                "ImageTypeId",
                typeof(Guid),
                propertyInfo: typeof(SaaedIprocessedImage).GetProperty("ImageTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaaedIprocessedImage).GetField("<ImageTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            imageTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(int),
                propertyInfo: typeof(SaaedIprocessedImage).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaaedIprocessedImage).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataId = runtimeEntityType.AddProperty(
                "VehicleDataId",
                typeof(int?),
                propertyInfo: typeof(SaaedIprocessedImage).GetProperty("VehicleDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaaedIprocessedImage).GetField("<VehicleDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { saaedIprocessedImageId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__SaaedIPr__C5312C9F28BF0660");

            var index = runtimeEntityType.AddIndex(
                new[] { imageId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { imageTypeId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { reportId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { vehicleDataId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ImageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ImageId") }),
                principalEntityType,
                required: true);

            var image = declaringEntityType.AddNavigation("Image",
                runtimeForeignKey,
                onDependent: true,
                typeof(Image),
                propertyInfo: typeof(SaaedIprocessedImage).GetProperty("Image", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaaedIprocessedImage).GetField("<Image>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var saaedIprocessedImages = principalEntityType.AddNavigation("SaaedIprocessedImages",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SaaedIprocessedImage>),
                propertyInfo: typeof(Image).GetProperty("SaaedIprocessedImages", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Image).GetField("<SaaedIprocessedImages>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Reportt");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ImageTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SaaedIimageTypeId") }),
                principalEntityType,
                required: true);

            var imageType = declaringEntityType.AddNavigation("ImageType",
                runtimeForeignKey,
                onDependent: true,
                typeof(SaaedIimageTypeDim),
                propertyInfo: typeof(SaaedIprocessedImage).GetProperty("ImageType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaaedIprocessedImage).GetField("<ImageType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var saaedIprocessedImages = principalEntityType.AddNavigation("SaaedIprocessedImages",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SaaedIprocessedImage>),
                propertyInfo: typeof(SaaedIimageTypeDim).GetProperty("SaaedIprocessedImages", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaaedIimageTypeDim).GetField("<SaaedIprocessedImages>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SaaedIProcessedImagesDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ReportId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ReportId") }),
                principalEntityType,
                required: true);

            var report = declaringEntityType.AddNavigation("Report",
                runtimeForeignKey,
                onDependent: true,
                typeof(Report),
                propertyInfo: typeof(SaaedIprocessedImage).GetProperty("Report", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaaedIprocessedImage).GetField("<Report>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var saaedIprocessedImages = principalEntityType.AddNavigation("SaaedIprocessedImages",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SaaedIprocessedImage>),
                propertyInfo: typeof(Report).GetProperty("SaaedIprocessedImages", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Report).GetField("<SaaedIprocessedImages>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Report");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleDataId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleDataId") }),
                principalEntityType);

            var vehicleData = declaringEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleDatum),
                propertyInfo: typeof(SaaedIprocessedImage).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SaaedIprocessedImage).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var saaedIprocessedImages = principalEntityType.AddNavigation("SaaedIprocessedImages",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SaaedIprocessedImage>),
                propertyInfo: typeof(VehicleDatum).GetProperty("SaaedIprocessedImages", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<SaaedIprocessedImages>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VhiclData");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "SaaedIProcessedImages");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
