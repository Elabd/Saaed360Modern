// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class UploadReportServiceLoggerEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.UploadReportServiceLogger",
                typeof(UploadReportServiceLogger),
                baseEntityType,
                propertyCount: 5,
                keyCount: 1);

            var logId = runtimeEntityType.AddProperty(
                "LogId",
                typeof(long),
                propertyInfo: typeof(UploadReportServiceLogger).GetProperty("LogId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UploadReportServiceLogger).GetField("<LogId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            logId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var adpnumber = runtimeEntityType.AddProperty(
                "Adpnumber",
                typeof(string),
                propertyInfo: typeof(UploadReportServiceLogger).GetProperty("Adpnumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UploadReportServiceLogger).GetField("<Adpnumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            adpnumber.AddAnnotation("Relational:ColumnName", "ADPNumber");
            adpnumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestXml = runtimeEntityType.AddProperty(
                "RequestXml",
                typeof(string),
                propertyInfo: typeof(UploadReportServiceLogger).GetProperty("RequestXml", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UploadReportServiceLogger).GetField("<RequestXml>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requestXml.AddAnnotation("Relational:ColumnType", "xml");
            requestXml.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestedTimeStamp = runtimeEntityType.AddProperty(
                "RequestedTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(UploadReportServiceLogger).GetProperty("RequestedTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UploadReportServiceLogger).GetField("<RequestedTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            requestedTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            requestedTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            requestedTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var responseXml = runtimeEntityType.AddProperty(
                "ResponseXml",
                typeof(string),
                propertyInfo: typeof(UploadReportServiceLogger).GetProperty("ResponseXml", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UploadReportServiceLogger).GetField("<ResponseXml>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            responseXml.AddAnnotation("Relational:ColumnType", "xml");
            responseXml.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { logId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__UploadRe__5E5486484EE0375E");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "UploadReportServiceLogger");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
