// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ActivityItemStatusLocationEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ActivityItemStatusLocation",
                typeof(ActivityItemStatusLocation),
                baseEntityType,
                propertyCount: 6,
                navigationCount: 4,
                foreignKeyCount: 4,
                unnamedIndexCount: 4,
                keyCount: 1);

            var activityItemStatusLocationId = runtimeEntityType.AddProperty(
                "ActivityItemStatusLocationId",
                typeof(long),
                propertyInfo: typeof(ActivityItemStatusLocation).GetProperty("ActivityItemStatusLocationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItemStatusLocation).GetField("<ActivityItemStatusLocationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityItemStatusLocationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var activityItemId = runtimeEntityType.AddProperty(
                "ActivityItemId",
                typeof(long),
                propertyInfo: typeof(ActivityItemStatusLocation).GetProperty("ActivityItemId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItemStatusLocation).GetField("<ActivityItemId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            activityItemId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityItemStatusId = runtimeEntityType.AddProperty(
                "ActivityItemStatusId",
                typeof(long),
                propertyInfo: typeof(ActivityItemStatusLocation).GetProperty("ActivityItemStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItemStatusLocation).GetField("<ActivityItemStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            activityItemStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var changedBy = runtimeEntityType.AddProperty(
                "ChangedBy",
                typeof(long?),
                propertyInfo: typeof(ActivityItemStatusLocation).GetProperty("ChangedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItemStatusLocation).GetField("<ChangedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            changedBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dateTime = runtimeEntityType.AddProperty(
                "DateTime",
                typeof(DateTime),
                propertyInfo: typeof(ActivityItemStatusLocation).GetProperty("DateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItemStatusLocation).GetField("<DateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            dateTime.AddAnnotation("Relational:ColumnType", "datetime");
            dateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var locationId = runtimeEntityType.AddProperty(
                "LocationId",
                typeof(long),
                propertyInfo: typeof(ActivityItemStatusLocation).GetProperty("LocationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItemStatusLocation).GetField("<LocationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            locationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityItemStatusLocationId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { activityItemId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { activityItemStatusId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { changedBy });

            var index2 = runtimeEntityType.AddIndex(
                new[] { locationId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityItemId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityItemId") }),
                principalEntityType,
                required: true);

            var activityItem = declaringEntityType.AddNavigation("ActivityItem",
                runtimeForeignKey,
                onDependent: true,
                typeof(ActivityItem),
                propertyInfo: typeof(ActivityItemStatusLocation).GetProperty("ActivityItem", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItemStatusLocation).GetField("<ActivityItem>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var activityItemStatusLocations = principalEntityType.AddNavigation("ActivityItemStatusLocations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ActivityItemStatusLocation>),
                propertyInfo: typeof(ActivityItem).GetProperty("ActivityItemStatusLocations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItem).GetField("<ActivityItemStatusLocations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ActivityItemStatusLocation_ActivityItem");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityItemStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var activityItemStatus = declaringEntityType.AddNavigation("ActivityItemStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(ActivityItemStatusDim),
                propertyInfo: typeof(ActivityItemStatusLocation).GetProperty("ActivityItemStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItemStatusLocation).GetField("<ActivityItemStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var activityItemStatusLocations = principalEntityType.AddNavigation("ActivityItemStatusLocations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ActivityItemStatusLocation>),
                propertyInfo: typeof(ActivityItemStatusDim).GetProperty("ActivityItemStatusLocations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItemStatusDim).GetField("<ActivityItemStatusLocations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ActivityItemStatusLocation_ActivityItemStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ChangedBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var changedByNavigation = declaringEntityType.AddNavigation("ChangedByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(ActivityItemStatusLocation).GetProperty("ChangedByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItemStatusLocation).GetField("<ChangedByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var activityItemStatusLocations = principalEntityType.AddNavigation("ActivityItemStatusLocations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ActivityItemStatusLocation>),
                propertyInfo: typeof(Person).GetProperty("ActivityItemStatusLocations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<ActivityItemStatusLocations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ActivityItemStatusLocation_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LocationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LocationId") }),
                principalEntityType,
                required: true);

            var location = declaringEntityType.AddNavigation("Location",
                runtimeForeignKey,
                onDependent: true,
                typeof(Location),
                propertyInfo: typeof(ActivityItemStatusLocation).GetProperty("Location", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ActivityItemStatusLocation).GetField("<Location>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var activityItemStatusLocations = principalEntityType.AddNavigation("ActivityItemStatusLocations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ActivityItemStatusLocation>),
                propertyInfo: typeof(Location).GetProperty("ActivityItemStatusLocations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Location).GetField("<ActivityItemStatusLocations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ActivityItemStatusLocation_Location");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ActivityItemStatusLocation");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
