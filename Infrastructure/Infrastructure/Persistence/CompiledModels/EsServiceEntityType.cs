// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EsServiceEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EsService",
                typeof(EsService),
                baseEntityType,
                propertyCount: 22,
                navigationCount: 5,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                namedIndexCount: 3,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(EsService).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(DateTime),
                propertyInfo: typeof(EsService).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            createdAt.AddAnnotation("Relational:ColumnType", "datetime");
            createdAt.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createdAt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var descriptionArabic = runtimeEntityType.AddProperty(
                "DescriptionArabic",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("DescriptionArabic", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<DescriptionArabic>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            descriptionArabic.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var descriptionEnglish = runtimeEntityType.AddProperty(
                "DescriptionEnglish",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("DescriptionEnglish", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<DescriptionEnglish>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            descriptionEnglish.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var descriptionUrdu = runtimeEntityType.AddProperty(
                "DescriptionUrdu",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("DescriptionUrdu", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<DescriptionUrdu>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            descriptionUrdu.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var feesArabic = runtimeEntityType.AddProperty(
                "FeesArabic",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("FeesArabic", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<FeesArabic>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 150);
            feesArabic.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var feesEnglish = runtimeEntityType.AddProperty(
                "FeesEnglish",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("FeesEnglish", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<FeesEnglish>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 150);
            feesEnglish.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var feesUrdu = runtimeEntityType.AddProperty(
                "FeesUrdu",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("FeesUrdu", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<FeesUrdu>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 150);
            feesUrdu.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var feesValue = runtimeEntityType.AddProperty(
                "FeesValue",
                typeof(decimal),
                propertyInfo: typeof(EsService).GetProperty("FeesValue", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<FeesValue>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            feesValue.AddAnnotation("Relational:ColumnType", "decimal(9, 2)");
            feesValue.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var icon = runtimeEntityType.AddProperty(
                "Icon",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("Icon", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<Icon>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 255);
            icon.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool),
                propertyInfo: typeof(EsService).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isListedInDashboard = runtimeEntityType.AddProperty(
                "IsListedInDashboard",
                typeof(bool),
                propertyInfo: typeof(EsService).GetProperty("IsListedInDashboard", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<IsListedInDashboard>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: true);
            isListedInDashboard.AddAnnotation("Relational:DefaultValue", true);
            isListedInDashboard.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isPrepaid = runtimeEntityType.AddProperty(
                "IsPrepaid",
                typeof(bool?),
                propertyInfo: typeof(EsService).GetProperty("IsPrepaid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<IsPrepaid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isPrepaid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedAt = runtimeEntityType.AddProperty(
                "ModifiedAt",
                typeof(DateTime?),
                propertyInfo: typeof(EsService).GetProperty("ModifiedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<ModifiedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedAt.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedAt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var nameArabic = runtimeEntityType.AddProperty(
                "NameArabic",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("NameArabic", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<NameArabic>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 255);
            nameArabic.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var nameEnglish = runtimeEntityType.AddProperty(
                "NameEnglish",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("NameEnglish", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<NameEnglish>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 255);
            nameEnglish.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var nameUrdu = runtimeEntityType.AddProperty(
                "NameUrdu",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("NameUrdu", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<NameUrdu>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 255);
            nameUrdu.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var objectionRequestTypeId = runtimeEntityType.AddProperty(
                "ObjectionRequestTypeId",
                typeof(int),
                propertyInfo: typeof(EsService).GetProperty("ObjectionRequestTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<ObjectionRequestTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            objectionRequestTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentRequestId = runtimeEntityType.AddProperty(
                "PaymentRequestId",
                typeof(int?),
                propertyInfo: typeof(EsService).GetProperty("PaymentRequestId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<PaymentRequestId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            paymentRequestId.AddAnnotation("Relational:DefaultValueSql", "(NULL)");
            paymentRequestId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var processingTimeArabic = runtimeEntityType.AddProperty(
                "ProcessingTimeArabic",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("ProcessingTimeArabic", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<ProcessingTimeArabic>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 150);
            processingTimeArabic.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var processingTimeEnglish = runtimeEntityType.AddProperty(
                "ProcessingTimeEnglish",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("ProcessingTimeEnglish", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<ProcessingTimeEnglish>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 150);
            processingTimeEnglish.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var processingTimeUrdu = runtimeEntityType.AddProperty(
                "ProcessingTimeUrdu",
                typeof(string),
                propertyInfo: typeof(EsService).GetProperty("ProcessingTimeUrdu", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<ProcessingTimeUrdu>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 150);
            processingTimeUrdu.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__ES_Servi__3214EC07ACAF31FE");

            var index = runtimeEntityType.AddIndex(
                new[] { objectionRequestTypeId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { paymentRequestId });

            var uK_Service_NameArabic = runtimeEntityType.AddIndex(
                new[] { nameArabic },
                name: "UK_Service_NameArabic",
                unique: true);

            var uK_Service_NameEnglish = runtimeEntityType.AddIndex(
                new[] { nameEnglish },
                name: "UK_Service_NameEnglish",
                unique: true);

            var uK_Service_NameUrdu = runtimeEntityType.AddIndex(
                new[] { nameUrdu },
                name: "UK_Service_NameUrdu",
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ObjectionRequestTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RequestTypeId") }),
                principalEntityType,
                required: true);

            var objectionRequestType = declaringEntityType.AddNavigation("ObjectionRequestType",
                runtimeForeignKey,
                onDependent: true,
                typeof(ObjectionRequestType),
                propertyInfo: typeof(EsService).GetProperty("ObjectionRequestType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<ObjectionRequestType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var esServices = principalEntityType.AddNavigation("EsServices",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EsService>),
                propertyInfo: typeof(ObjectionRequestType).GetProperty("EsServices", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ObjectionRequestType).GetField("<EsServices>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Service_ObjectionRequestType");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PaymentRequestId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var paymentRequest = declaringEntityType.AddNavigation("PaymentRequest",
                runtimeForeignKey,
                onDependent: true,
                typeof(PaymentRequestTypeDim),
                propertyInfo: typeof(EsService).GetProperty("PaymentRequest", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsService).GetField("<PaymentRequest>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var esServices = principalEntityType.AddNavigation("EsServices",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EsService>),
                propertyInfo: typeof(PaymentRequestTypeDim).GetProperty("EsServices", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentRequestTypeDim).GetField("<EsServices>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Service_Payment");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ES_Service");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
