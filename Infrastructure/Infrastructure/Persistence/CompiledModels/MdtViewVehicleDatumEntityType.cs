// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class MdtViewVehicleDatumEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.MdtViewVehicleDatum",
                typeof(MdtViewVehicleDatum),
                baseEntityType,
                propertyCount: 61);

            var careerId = runtimeEntityType.AddProperty(
                "CareerId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("CareerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<CareerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            careerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var chasisNumber = runtimeEntityType.AddProperty(
                "ChasisNumber",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("ChasisNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<ChasisNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            chasisNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var chemicalId = runtimeEntityType.AddProperty(
                "ChemicalId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("ChemicalId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<ChemicalId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            chemicalId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var collisionId = runtimeEntityType.AddProperty(
                "CollisionId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("CollisionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<CollisionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            collisionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var confiscationDocumentTypeId = runtimeEntityType.AddProperty(
                "ConfiscationDocumentTypeId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("ConfiscationDocumentTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<ConfiscationDocumentTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            confiscationDocumentTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var confiscationLocationId = runtimeEntityType.AddProperty(
                "ConfiscationLocationId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("ConfiscationLocationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<ConfiscationLocationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            confiscationLocationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var countryOfOriginId = runtimeEntityType.AddProperty(
                "CountryOfOriginId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("CountryOfOriginId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<CountryOfOriginId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            countryOfOriginId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var damagedPartsDetails = runtimeEntityType.AddProperty(
                "DamagedPartsDetails",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DamagedPartsDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DamagedPartsDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            damagedPartsDetails.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var damagedVehiclePartsId = runtimeEntityType.AddProperty(
                "DamagedVehiclePartsId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DamagedVehiclePartsId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DamagedVehiclePartsId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            damagedVehiclePartsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataAddress = runtimeEntityType.AddProperty(
                "DriverDataAddress",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDataAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDataAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 300);
            driverDataAddress.AddAnnotation("Relational:ColumnName", "DriverData_Address");
            driverDataAddress.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataBirthDate = runtimeEntityType.AddProperty(
                "DriverDataBirthDate",
                typeof(DateTime?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDataBirthDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDataBirthDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverDataBirthDate.AddAnnotation("Relational:ColumnName", "DriverData_BirthDate");
            driverDataBirthDate.AddAnnotation("Relational:ColumnType", "datetime");
            driverDataBirthDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataExpiryDate = runtimeEntityType.AddProperty(
                "DriverDataExpiryDate",
                typeof(DateTime?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDataExpiryDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDataExpiryDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverDataExpiryDate.AddAnnotation("Relational:ColumnName", "DriverData_ExpiryDate");
            driverDataExpiryDate.AddAnnotation("Relational:ColumnType", "datetime");
            driverDataExpiryDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataId = runtimeEntityType.AddProperty(
                "DriverDataId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverDataId.AddAnnotation("Relational:ColumnName", "DriverData_Id");
            driverDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataIssueDate = runtimeEntityType.AddProperty(
                "DriverDataIssueDate",
                typeof(DateTime?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDataIssueDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDataIssueDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverDataIssueDate.AddAnnotation("Relational:ColumnName", "DriverData_IssueDate");
            driverDataIssueDate.AddAnnotation("Relational:ColumnType", "datetime");
            driverDataIssueDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataLicenseCategoryId = runtimeEntityType.AddProperty(
                "DriverDataLicenseCategoryId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDataLicenseCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDataLicenseCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverDataLicenseCategoryId.AddAnnotation("Relational:ColumnName", "DriverData_LicenseCategoryId");
            driverDataLicenseCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataLicenseNumber = runtimeEntityType.AddProperty(
                "DriverDataLicenseNumber",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDataLicenseNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDataLicenseNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverDataLicenseNumber.AddAnnotation("Relational:ColumnName", "DriverData_LicenseNumber");
            driverDataLicenseNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataMobileNumber = runtimeEntityType.AddProperty(
                "DriverDataMobileNumber",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDataMobileNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDataMobileNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            driverDataMobileNumber.AddAnnotation("Relational:ColumnName", "DriverData_MobileNumber");
            driverDataMobileNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataName = runtimeEntityType.AddProperty(
                "DriverDataName",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDataName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDataName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverDataName.AddAnnotation("Relational:ColumnName", "DriverData_Name");
            driverDataName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataNationalityId = runtimeEntityType.AddProperty(
                "DriverDataNationalityId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDataNationalityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDataNationalityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverDataNationalityId.AddAnnotation("Relational:ColumnName", "DriverData_NationalityId");
            driverDataNationalityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDataTrafficCode = runtimeEntityType.AddProperty(
                "DriverDataTrafficCode",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDataTrafficCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDataTrafficCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverDataTrafficCode.AddAnnotation("Relational:ColumnName", "DriverData_TrafficCode");
            driverDataTrafficCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDrinkingStatusId = runtimeEntityType.AddProperty(
                "DriverDrinkingStatusId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverDrinkingStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverDrinkingStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverDrinkingStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverStatusId = runtimeEntityType.AddProperty(
                "DriverStatusId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("DriverStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<DriverStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var educationStatusId = runtimeEntityType.AddProperty(
                "EducationStatusId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("EducationStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<EducationStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            educationStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var engineNumber = runtimeEntityType.AddProperty(
                "EngineNumber",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("EngineNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<EngineNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            engineNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escapedStatusId = runtimeEntityType.AddProperty(
                "EscapedStatusId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("EscapedStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<EscapedStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            escapedStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var genderId = runtimeEntityType.AddProperty(
                "GenderId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("GenderId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<GenderId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            genderId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var glassColorId = runtimeEntityType.AddProperty(
                "GlassColorId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("GlassColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<GlassColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            glassColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insuranceCompanyId = runtimeEntityType.AddProperty(
                "InsuranceCompanyId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("InsuranceCompanyId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<InsuranceCompanyId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            insuranceCompanyId.AddAnnotation("Relational:ColumnName", "InsuranceCompanyID");
            insuranceCompanyId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insurancePolicyNumber = runtimeEntityType.AddProperty(
                "InsurancePolicyNumber",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("InsurancePolicyNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<InsurancePolicyNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            insurancePolicyNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insuranceTypeId = runtimeEntityType.AddProperty(
                "InsuranceTypeId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("InsuranceTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<InsuranceTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            insuranceTypeId.AddAnnotation("Relational:ColumnName", "InsuranceTypeID");
            insuranceTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDriverHaveLicense = runtimeEntityType.AddProperty(
                "IsDriverHaveLicense",
                typeof(bool?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("IsDriverHaveLicense", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<IsDriverHaveLicense>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDriverHaveLicense.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isVehicleGoodAndNotRemoved = runtimeEntityType.AddProperty(
                "IsVehicleGoodAndNotRemoved",
                typeof(bool?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("IsVehicleGoodAndNotRemoved", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<IsVehicleGoodAndNotRemoved>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isVehicleGoodAndNotRemoved.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isVehicleWithoutPlateNumber = runtimeEntityType.AddProperty(
                "IsVehicleWithoutPlateNumber",
                typeof(bool?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("IsVehicleWithoutPlateNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<IsVehicleWithoutPlateNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isVehicleWithoutPlateNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemRegistrationPlateCategoryId = runtimeEntityType.AddProperty(
                "ItemRegistrationPlateCategoryId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("ItemRegistrationPlateCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<ItemRegistrationPlateCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            itemRegistrationPlateCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemRegistrationPlateColorId = runtimeEntityType.AddProperty(
                "ItemRegistrationPlateColorId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("ItemRegistrationPlateColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<ItemRegistrationPlateColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            itemRegistrationPlateColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemRegistrationPlateKindId = runtimeEntityType.AddProperty(
                "ItemRegistrationPlateKindId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("ItemRegistrationPlateKindId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<ItemRegistrationPlateKindId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            itemRegistrationPlateKindId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licensePlateListSourceId = runtimeEntityType.AddProperty(
                "LicensePlateListSourceId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("LicensePlateListSourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<LicensePlateListSourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            licensePlateListSourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var manufactureYearId = runtimeEntityType.AddProperty(
                "ManufactureYearId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("ManufactureYearId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<ManufactureYearId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            manufactureYearId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ownerDataAddress = runtimeEntityType.AddProperty(
                "OwnerDataAddress",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("OwnerDataAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<OwnerDataAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 300);
            ownerDataAddress.AddAnnotation("Relational:ColumnName", "OwnerData_Address");
            ownerDataAddress.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ownerDataId = runtimeEntityType.AddProperty(
                "OwnerDataId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("OwnerDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<OwnerDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            ownerDataId.AddAnnotation("Relational:ColumnName", "OwnerData_Id");
            ownerDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ownerDataName = runtimeEntityType.AddProperty(
                "OwnerDataName",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("OwnerDataName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<OwnerDataName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            ownerDataName.AddAnnotation("Relational:ColumnName", "OwnerData_Name");
            ownerDataName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ownerDataNationalityId = runtimeEntityType.AddProperty(
                "OwnerDataNationalityId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("OwnerDataNationalityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<OwnerDataNationalityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            ownerDataNationalityId.AddAnnotation("Relational:ColumnName", "OwnerData_NationalityId");
            ownerDataNationalityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ownerDataTrafficCode = runtimeEntityType.AddProperty(
                "OwnerDataTrafficCode",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("OwnerDataTrafficCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<OwnerDataTrafficCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            ownerDataTrafficCode.AddAnnotation("Relational:ColumnName", "OwnerData_TrafficCode");
            ownerDataTrafficCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateNumber = runtimeEntityType.AddProperty(
                "PlateNumber",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("PlateNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<PlateNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            plateNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateSourceId = runtimeEntityType.AddProperty(
                "PlateSourceId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("PlateSourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<PlateSourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateSourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reasonCategoryId = runtimeEntityType.AddProperty(
                "ReasonCategoryId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("ReasonCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<ReasonCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reasonCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(int),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleBrandId = runtimeEntityType.AddProperty(
                "VehicleBrandId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleBrandId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleBrandId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleBrandId.AddAnnotation("Relational:ColumnName", "VehicleBrandID");
            vehicleBrandId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleCategoryId = runtimeEntityType.AddProperty(
                "VehicleCategoryId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleCategoryId.AddAnnotation("Relational:ColumnName", "VehicleCategoryID");
            vehicleCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleColorId = runtimeEntityType.AddProperty(
                "VehicleColorId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataCausingType = runtimeEntityType.AddProperty(
                "VehicleDataCausingType",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleDataCausingType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleDataCausingType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            vehicleDataCausingType.AddAnnotation("Relational:ColumnName", "VehicleData_CausingType");
            vehicleDataCausingType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataComments = runtimeEntityType.AddProperty(
                "VehicleDataComments",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleDataComments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleDataComments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 300);
            vehicleDataComments.AddAnnotation("Relational:ColumnName", "VehicleData_Comments");
            vehicleDataComments.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataExpiryDate = runtimeEntityType.AddProperty(
                "VehicleDataExpiryDate",
                typeof(DateTime?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleDataExpiryDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleDataExpiryDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleDataExpiryDate.AddAnnotation("Relational:ColumnName", "VehicleData_ExpiryDate");
            vehicleDataExpiryDate.AddAnnotation("Relational:ColumnType", "datetime");
            vehicleDataExpiryDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataId = runtimeEntityType.AddProperty(
                "VehicleDataId",
                typeof(int),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            vehicleDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataTypeId = runtimeEntityType.AddProperty(
                "VehicleDataTypeId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleDataTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleDataTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleDataTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDescription = runtimeEntityType.AddProperty(
                "VehicleDescription",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 300);
            vehicleDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleModelId = runtimeEntityType.AddProperty(
                "VehicleModelId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleModelId.AddAnnotation("Relational:ColumnName", "VehicleModelID");
            vehicleModelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleStatusId = runtimeEntityType.AddProperty(
                "VehicleStatusId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleTypeId = runtimeEntityType.AddProperty(
                "VehicleTypeId",
                typeof(int?),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("VehicleTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<VehicleTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleTypeId.AddAnnotation("Relational:ColumnName", "VehicleTypeID");
            vehicleTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weightEmpty = runtimeEntityType.AddProperty(
                "WeightEmpty",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("WeightEmpty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<WeightEmpty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            weightEmpty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weightNonEmpty = runtimeEntityType.AddProperty(
                "WeightNonEmpty",
                typeof(string),
                propertyInfo: typeof(MdtViewVehicleDatum).GetProperty("WeightNonEmpty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MdtViewVehicleDatum).GetField("<WeightNonEmpty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            weightNonEmpty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "MdtViewVehicleData");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
