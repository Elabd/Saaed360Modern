// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PersonPhysicalFeatureEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PersonPhysicalFeature",
                typeof(PersonPhysicalFeature),
                baseEntityType,
                propertyCount: 18,
                navigationCount: 8,
                foreignKeyCount: 8,
                unnamedIndexCount: 8,
                keyCount: 1);

            var personPhysicalFeatureId = runtimeEntityType.AddProperty(
                "PersonPhysicalFeatureId",
                typeof(long),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PersonPhysicalFeatureId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PersonPhysicalFeatureId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            personPhysicalFeatureId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createDateTimeStamp = runtimeEntityType.AddProperty(
                "CreateDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("CreateDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<CreateDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            createDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            createDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isDeleted.AddAnnotation("Relational:DefaultValue", false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDateTimeStamp = runtimeEntityType.AddProperty(
                "ModifiedDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("ModifiedDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<ModifiedDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            modifiedDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            modifiedDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personGuid = runtimeEntityType.AddProperty(
                "PersonGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PersonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PersonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personPhysicalFeatureDescription = runtimeEntityType.AddProperty(
                "PersonPhysicalFeatureDescription",
                typeof(string),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PersonPhysicalFeatureDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PersonPhysicalFeatureDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 300);
            personPhysicalFeatureDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personPhysicalFeatureGuid = runtimeEntityType.AddProperty(
                "PersonPhysicalFeatureGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PersonPhysicalFeatureGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PersonPhysicalFeatureGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personPhysicalFeatureGuid.AddAnnotation("Relational:DefaultValueSql", "(newid())");
            personPhysicalFeatureGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var physicalFeatureCategoryId = runtimeEntityType.AddProperty(
                "PhysicalFeatureCategoryId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            physicalFeatureCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            physicalFeatureCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var physicalFeatureDescription = runtimeEntityType.AddProperty(
                "PhysicalFeatureDescription",
                typeof(string),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            physicalFeatureDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var physicalFeatureHandicapId = runtimeEntityType.AddProperty(
                "PhysicalFeatureHandicapId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureHandicapId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureHandicapId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            physicalFeatureHandicapId.AddAnnotation("Relational:DefaultValue", 1);
            physicalFeatureHandicapId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var physicalFeatureImageGuid = runtimeEntityType.AddProperty(
                "PhysicalFeatureImageGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureImageGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureImageGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            physicalFeatureImageGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var physicalFeatureImageId = runtimeEntityType.AddProperty(
                "PhysicalFeatureImageId",
                typeof(long?),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureImageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureImageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            physicalFeatureImageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var physicalFeatureLocationId = runtimeEntityType.AddProperty(
                "PhysicalFeatureLocationId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureLocationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureLocationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            physicalFeatureLocationId.AddAnnotation("Relational:DefaultValue", 1);
            physicalFeatureLocationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var physicalFeatureSeverityId = runtimeEntityType.AddProperty(
                "PhysicalFeatureSeverityId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureSeverityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureSeverityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            physicalFeatureSeverityId.AddAnnotation("Relational:DefaultValue", 1);
            physicalFeatureSeverityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var removedDate = runtimeEntityType.AddProperty(
                "RemovedDate",
                typeof(DateTime?),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("RemovedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<RemovedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            removedDate.AddAnnotation("Relational:ColumnType", "datetime");
            removedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rowStatusId = runtimeEntityType.AddProperty(
                "RowStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("RowStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<RowStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            rowStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceId = runtimeEntityType.AddProperty(
                "SourceId",
                typeof(long),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("SourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<SourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            sourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { personPhysicalFeatureId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { personId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { physicalFeatureCategoryId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { physicalFeatureHandicapId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { physicalFeatureImageId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { physicalFeatureLocationId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { physicalFeatureSeverityId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { rowStatusId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { sourceId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalFeatures = principalEntityType.AddNavigation("PersonPhysicalFeatures",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalFeature>),
                propertyInfo: typeof(Person).GetProperty("PersonPhysicalFeatures", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<PersonPhysicalFeatures>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "Person_PersonFeature_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PhysicalFeatureCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PhysicalFeatureCategoryId") }),
                principalEntityType);

            var physicalFeatureCategory = declaringEntityType.AddNavigation("PhysicalFeatureCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(PhysicalFeatureCategoryDim),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalFeatures = principalEntityType.AddNavigation("PersonPhysicalFeatures",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalFeature>),
                propertyInfo: typeof(PhysicalFeatureCategoryDim).GetProperty("PersonPhysicalFeatures", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalFeatureCategoryDim).GetField("<PersonPhysicalFeatures>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "PhysicalFeatureCategoryDIM_PersonFeature_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PhysicalFeatureHandicapId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PhysicalFeatureHandicapId") }),
                principalEntityType);

            var physicalFeatureHandicap = declaringEntityType.AddNavigation("PhysicalFeatureHandicap",
                runtimeForeignKey,
                onDependent: true,
                typeof(PhysicalFeatureHandicapDim),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureHandicap", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureHandicap>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalFeatures = principalEntityType.AddNavigation("PersonPhysicalFeatures",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalFeature>),
                propertyInfo: typeof(PhysicalFeatureHandicapDim).GetProperty("PersonPhysicalFeatures", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalFeatureHandicapDim).GetField("<PersonPhysicalFeatures>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonFeature_FeatureHandicapDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PhysicalFeatureImageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ImageId") }),
                principalEntityType);

            var physicalFeatureImage = declaringEntityType.AddNavigation("PhysicalFeatureImage",
                runtimeForeignKey,
                onDependent: true,
                typeof(Image),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureImage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureImage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalFeatures = principalEntityType.AddNavigation("PersonPhysicalFeatures",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalFeature>),
                propertyInfo: typeof(Image).GetProperty("PersonPhysicalFeatures", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Image).GetField("<PersonPhysicalFeatures>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalFeature_Image");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PhysicalFeatureLocationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PhysicalFeatureLocationId") }),
                principalEntityType);

            var physicalFeatureLocation = declaringEntityType.AddNavigation("PhysicalFeatureLocation",
                runtimeForeignKey,
                onDependent: true,
                typeof(PhysicalFeatureLocationDim),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureLocation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalFeatures = principalEntityType.AddNavigation("PersonPhysicalFeatures",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalFeature>),
                propertyInfo: typeof(PhysicalFeatureLocationDim).GetProperty("PersonPhysicalFeatures", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalFeatureLocationDim).GetField("<PersonPhysicalFeatures>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "PhysicalFeatureLocationDIM_PersonFeature_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PhysicalFeatureSeverityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PhysicalFeatureSeverityId") }),
                principalEntityType);

            var physicalFeatureSeverity = declaringEntityType.AddNavigation("PhysicalFeatureSeverity",
                runtimeForeignKey,
                onDependent: true,
                typeof(PhysicalFeatureSeverityDim),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("PhysicalFeatureSeverity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<PhysicalFeatureSeverity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalFeatures = principalEntityType.AddNavigation("PersonPhysicalFeatures",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalFeature>),
                propertyInfo: typeof(PhysicalFeatureSeverityDim).GetProperty("PersonPhysicalFeatures", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PhysicalFeatureSeverityDim).GetField("<PersonPhysicalFeatures>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalFeature_PhysicalFeatureSeverityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RowStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RowStatusId") }),
                principalEntityType);

            var rowStatus = declaringEntityType.AddNavigation("RowStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(RowStatusDim),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("RowStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<RowStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalFeatures = principalEntityType.AddNavigation("PersonPhysicalFeatures",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalFeature>),
                propertyInfo: typeof(RowStatusDim).GetProperty("PersonPhysicalFeatures", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RowStatusDim).GetField("<PersonPhysicalFeatures>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalFeature_RowStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SourceId") }),
                principalEntityType,
                required: true);

            var source = declaringEntityType.AddNavigation("Source",
                runtimeForeignKey,
                onDependent: true,
                typeof(Source),
                propertyInfo: typeof(PersonPhysicalFeature).GetProperty("Source", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalFeature).GetField("<Source>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalFeatures = principalEntityType.AddNavigation("PersonPhysicalFeatures",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalFeature>),
                propertyInfo: typeof(Source).GetProperty("PersonPhysicalFeatures", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Source).GetField("<PersonPhysicalFeatures>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalFeature_Source");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PersonPhysicalFeature");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
