// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class IncidentArcfullDetailEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.IncidentArcfullDetail",
                typeof(IncidentArcfullDetail),
                baseEntityType,
                propertyCount: 63,
                keyCount: 1);

            var vwIncidentArcfullDetailsId = runtimeEntityType.AddProperty(
                "VwIncidentArcfullDetailsId",
                typeof(long),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("VwIncidentArcfullDetailsId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<VwIncidentArcfullDetailsId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            vwIncidentArcfullDetailsId.AddAnnotation("Relational:ColumnName", "vw_IncidentARCFullDetailsId");
            vwIncidentArcfullDetailsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var accId = runtimeEntityType.AddProperty(
                "AccId",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("AccId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<AccId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            accId.AddAnnotation("Relational:ColumnName", "ACC_ID");
            accId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accLocDesc = runtimeEntityType.AddProperty(
                "AccLocDesc",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("AccLocDesc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<AccLocDesc>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            accLocDesc.AddAnnotation("Relational:ColumnName", "ACC_LOC_DESC");
            accLocDesc.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var areaText = runtimeEntityType.AddProperty(
                "AreaText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("AreaText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<AreaText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            areaText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cityText = runtimeEntityType.AddProperty(
                "CityText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("CityText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<CityText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            cityText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDate = runtimeEntityType.AddProperty(
                "CreationDate",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("CreationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<CreationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDate.AddAnnotation("Relational:ColumnType", "datetime");
            creationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var damges = runtimeEntityType.AddProperty(
                "Damges",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("Damges", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<Damges>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            damges.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverBirthDate = runtimeEntityType.AddProperty(
                "DriverBirthDate",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverBirthDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverBirthDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverBirthDate.AddAnnotation("Relational:ColumnType", "datetime");
            driverBirthDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDrinkingStatusText = runtimeEntityType.AddProperty(
                "DriverDrinkingStatusText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverDrinkingStatusText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverDrinkingStatusText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverDrinkingStatusText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverEducationLevelText = runtimeEntityType.AddProperty(
                "DriverEducationLevelText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverEducationLevelText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverEducationLevelText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            driverEducationLevelText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverGenderText = runtimeEntityType.AddProperty(
                "DriverGenderText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverGenderText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverGenderText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverGenderText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverLicenceExpDate = runtimeEntityType.AddProperty(
                "DriverLicenceExpDate",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverLicenceExpDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverLicenceExpDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverLicenceExpDate.AddAnnotation("Relational:ColumnType", "datetime");
            driverLicenceExpDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverLicenceNo = runtimeEntityType.AddProperty(
                "DriverLicenceNo",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverLicenceNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverLicenceNo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            driverLicenceNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverLicenceSourceText = runtimeEntityType.AddProperty(
                "DriverLicenceSourceText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverLicenceSourceText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverLicenceSourceText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverLicenceSourceText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverLicenceTypeText = runtimeEntityType.AddProperty(
                "DriverLicenceTypeText",
                typeof(int?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverLicenceTypeText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverLicenceTypeText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverLicenceTypeText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverName = runtimeEntityType.AddProperty(
                "DriverName",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            driverName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverNationalityText = runtimeEntityType.AddProperty(
                "DriverNationalityText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverNationalityText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverNationalityText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverNationalityText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverOccupationText = runtimeEntityType.AddProperty(
                "DriverOccupationText",
                typeof(int?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverOccupationText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverOccupationText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverOccupationText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverRunningStatusText = runtimeEntityType.AddProperty(
                "DriverRunningStatusText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverRunningStatusText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverRunningStatusText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverRunningStatusText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverStatusText = runtimeEntityType.AddProperty(
                "DriverStatusText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("DriverStatusText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<DriverStatusText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            driverStatusText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emariteText = runtimeEntityType.AddProperty(
                "EmariteText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("EmariteText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<EmariteText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            emariteText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var holdDocumentPlaceText = runtimeEntityType.AddProperty(
                "HoldDocumentPlaceText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("HoldDocumentPlaceText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<HoldDocumentPlaceText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            holdDocumentPlaceText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var holdDocumentsText = runtimeEntityType.AddProperty(
                "HoldDocumentsText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("HoldDocumentsText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<HoldDocumentsText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            holdDocumentsText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentCategoryText = runtimeEntityType.AddProperty(
                "IncidentCategoryText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("IncidentCategoryText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<IncidentCategoryText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            incidentCategoryText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentDate = runtimeEntityType.AddProperty(
                "IncidentDate",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("IncidentDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<IncidentDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            incidentDate.AddAnnotation("Relational:ColumnType", "datetime");
            incidentDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentNo = runtimeEntityType.AddProperty(
                "IncidentNo",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("IncidentNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<IncidentNo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            incidentNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentStatusText = runtimeEntityType.AddProperty(
                "IncidentStatusText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("IncidentStatusText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<IncidentStatusText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            incidentStatusText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentTypeText = runtimeEntityType.AddProperty(
                "IncidentTypeText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("IncidentTypeText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<IncidentTypeText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            incidentTypeText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insuranceCompanyText = runtimeEntityType.AddProperty(
                "InsuranceCompanyText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("InsuranceCompanyText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<InsuranceCompanyText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            insuranceCompanyText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insuranceExpireDate = runtimeEntityType.AddProperty(
                "InsuranceExpireDate",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("InsuranceExpireDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<InsuranceExpireDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            insuranceExpireDate.AddAnnotation("Relational:ColumnType", "datetime");
            insuranceExpireDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insuranceTypeText = runtimeEntityType.AddProperty(
                "InsuranceTypeText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("InsuranceTypeText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<InsuranceTypeText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            insuranceTypeText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isMain = runtimeEntityType.AddProperty(
                "IsMain",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("IsMain", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<IsMain>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 10);
            isMain.AddAnnotation("Relational:ColumnName", "IS_MAIN");
            isMain.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemDescA = runtimeEntityType.AddProperty(
                "ItemDescA",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("ItemDescA", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<ItemDescA>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            itemDescA.AddAnnotation("Relational:ColumnName", "ITEM_DESC_A");
            itemDescA.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mdtaccidentBasicDetailsId = runtimeEntityType.AddProperty(
                "MdtaccidentBasicDetailsId",
                typeof(int?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("MdtaccidentBasicDetailsId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<MdtaccidentBasicDetailsId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mdtaccidentBasicDetailsId.AddAnnotation("Relational:ColumnName", "MDTAccidentBasicDetailsId");
            mdtaccidentBasicDetailsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var objId = runtimeEntityType.AddProperty(
                "ObjId",
                typeof(int?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("ObjId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<ObjId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            objId.AddAnnotation("Relational:ColumnName", "OBJ_ID");
            objId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var objInjLvlTxt = runtimeEntityType.AddProperty(
                "ObjInjLvlTxt",
                typeof(int?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("ObjInjLvlTxt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<ObjInjLvlTxt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            objInjLvlTxt.AddAnnotation("Relational:ColumnName", "OBJ_INJ_LVL_TXT");
            objInjLvlTxt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var objInjTxt = runtimeEntityType.AddProperty(
                "ObjInjTxt",
                typeof(int?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("ObjInjTxt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<ObjInjTxt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            objInjTxt.AddAnnotation("Relational:ColumnName", "OBJ_INJ_TXT");
            objInjTxt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var objOther = runtimeEntityType.AddProperty(
                "ObjOther",
                typeof(int?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("ObjOther", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<ObjOther>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            objOther.AddAnnotation("Relational:ColumnName", "OBJ_OTHER");
            objOther.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var objOwnerTxt = runtimeEntityType.AddProperty(
                "ObjOwnerTxt",
                typeof(int?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("ObjOwnerTxt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<ObjOwnerTxt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            objOwnerTxt.AddAnnotation("Relational:ColumnName", "OBJ_OWNER_TXT");
            objOwnerTxt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var objTypeTxt = runtimeEntityType.AddProperty(
                "ObjTypeTxt",
                typeof(int?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("ObjTypeTxt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<ObjTypeTxt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            objTypeTxt.AddAnnotation("Relational:ColumnName", "OBJ_TYPE_TXT");
            objTypeTxt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var other = runtimeEntityType.AddProperty(
                "Other",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("Other", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<Other>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            other.AddAnnotation("Relational:ColumnName", "OTHER");
            other.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ownerName = runtimeEntityType.AddProperty(
                "OwnerName",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("OwnerName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<OwnerName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            ownerName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateClassText = runtimeEntityType.AddProperty(
                "PlateClassText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("PlateClassText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<PlateClassText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            plateClassText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateColorText = runtimeEntityType.AddProperty(
                "PlateColorText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("PlateColorText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<PlateColorText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            plateColorText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateNo = runtimeEntityType.AddProperty(
                "PlateNo",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("PlateNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<PlateNo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            plateNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateSourceText = runtimeEntityType.AddProperty(
                "PlateSourceText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("PlateSourceText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<PlateSourceText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            plateSourceText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateTypeText = runtimeEntityType.AddProperty(
                "PlateTypeText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("PlateTypeText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<PlateTypeText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            plateTypeText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(int?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var roadSpeedText = runtimeEntityType.AddProperty(
                "RoadSpeedText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("RoadSpeedText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<RoadSpeedText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            roadSpeedText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var roadSurfaceText = runtimeEntityType.AddProperty(
                "RoadSurfaceText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("RoadSurfaceText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<RoadSurfaceText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            roadSurfaceText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vecId = runtimeEntityType.AddProperty(
                "VecId",
                typeof(int?),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("VecId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<VecId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vecId.AddAnnotation("Relational:ColumnName", "VEC_ID");
            vecId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehiclaMakeText = runtimeEntityType.AddProperty(
                "VehiclaMakeText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("VehiclaMakeText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<VehiclaMakeText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            vehiclaMakeText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleCollisionPointText = runtimeEntityType.AddProperty(
                "VehicleCollisionPointText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("VehicleCollisionPointText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<VehicleCollisionPointText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            vehicleCollisionPointText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleCountryText = runtimeEntityType.AddProperty(
                "VehicleCountryText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("VehicleCountryText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<VehicleCountryText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            vehicleCountryText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleKindText = runtimeEntityType.AddProperty(
                "VehicleKindText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("VehicleKindText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<VehicleKindText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 150);
            vehicleKindText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleModelText = runtimeEntityType.AddProperty(
                "VehicleModelText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("VehicleModelText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<VehicleModelText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            vehicleModelText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleProductingYear = runtimeEntityType.AddProperty(
                "VehicleProductingYear",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("VehicleProductingYear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<VehicleProductingYear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            vehicleProductingYear.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleStatusText = runtimeEntityType.AddProperty(
                "VehicleStatusText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("VehicleStatusText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<VehicleStatusText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            vehicleStatusText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleTypeText = runtimeEntityType.AddProperty(
                "VehicleTypeText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("VehicleTypeText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<VehicleTypeText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            vehicleTypeText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehiclesLiabilityText = runtimeEntityType.AddProperty(
                "VehiclesLiabilityText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("VehiclesLiabilityText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<VehiclesLiabilityText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            vehiclesLiabilityText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weatherText = runtimeEntityType.AddProperty(
                "WeatherText",
                typeof(string),
                propertyInfo: typeof(IncidentArcfullDetail).GetProperty("WeatherText", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentArcfullDetail).GetField("<WeatherText>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            weatherText.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { vwIncidentArcfullDetailsId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "IncidentARCFullDetails");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
