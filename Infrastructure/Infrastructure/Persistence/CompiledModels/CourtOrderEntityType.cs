// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class CourtOrderEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.CourtOrder",
                typeof(CourtOrder),
                baseEntityType,
                propertyCount: 17,
                navigationCount: 9,
                foreignKeyCount: 9,
                unnamedIndexCount: 8,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(CourtOrder).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var attemptedDate = runtimeEntityType.AddProperty(
                "AttemptedDate",
                typeof(DateTime?),
                propertyInfo: typeof(CourtOrder).GetProperty("AttemptedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<AttemptedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            attemptedDate.AddAnnotation("Relational:ColumnType", "datetime");
            attemptedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var courtOrderCategoryId = runtimeEntityType.AddProperty(
                "CourtOrderCategoryId",
                typeof(int?),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            courtOrderCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            courtOrderCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var courtOrderProtectionConditionId = runtimeEntityType.AddProperty(
                "CourtOrderProtectionConditionId",
                typeof(int?),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderProtectionConditionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderProtectionConditionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            courtOrderProtectionConditionId.AddAnnotation("Relational:DefaultValue", 1);
            courtOrderProtectionConditionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var courtOrderRecallReasonId = runtimeEntityType.AddProperty(
                "CourtOrderRecallReasonId",
                typeof(int?),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderRecallReasonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderRecallReasonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            courtOrderRecallReasonId.AddAnnotation("Relational:DefaultValue", 1);
            courtOrderRecallReasonId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var courtOrderServiceCautionId = runtimeEntityType.AddProperty(
                "CourtOrderServiceCautionId",
                typeof(int?),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderServiceCautionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderServiceCautionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            courtOrderServiceCautionId.AddAnnotation("Relational:DefaultValue", 1);
            courtOrderServiceCautionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var courtOrderSignatureMethodId = runtimeEntityType.AddProperty(
                "CourtOrderSignatureMethodId",
                typeof(int?),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderSignatureMethodId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderSignatureMethodId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            courtOrderSignatureMethodId.AddAnnotation("Relational:DefaultValue", 1);
            courtOrderSignatureMethodId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var courtOrderSpecialInstructionId = runtimeEntityType.AddProperty(
                "CourtOrderSpecialInstructionId",
                typeof(int?),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderSpecialInstructionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderSpecialInstructionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            courtOrderSpecialInstructionId.AddAnnotation("Relational:DefaultValue", 1);
            courtOrderSpecialInstructionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var courtOrderStatusId = runtimeEntityType.AddProperty(
                "CourtOrderStatusId",
                typeof(int?),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            courtOrderStatusId.AddAnnotation("Relational:DefaultValue", 1);
            courtOrderStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var docketNumber = runtimeEntityType.AddProperty(
                "DocketNumber",
                typeof(string),
                propertyInfo: typeof(CourtOrder).GetProperty("DocketNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<DocketNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            docketNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var issuingDate = runtimeEntityType.AddProperty(
                "IssuingDate",
                typeof(DateTime?),
                propertyInfo: typeof(CourtOrder).GetProperty("IssuingDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<IssuingDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            issuingDate.AddAnnotation("Relational:ColumnType", "datetime");
            issuingDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var organizationPersonGuid = runtimeEntityType.AddProperty(
                "OrganizationPersonGuid",
                typeof(Guid?),
                propertyInfo: typeof(CourtOrder).GetProperty("OrganizationPersonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<OrganizationPersonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            organizationPersonGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var organizationPersonId = runtimeEntityType.AddProperty(
                "OrganizationPersonId",
                typeof(long?),
                propertyInfo: typeof(CourtOrder).GetProperty("OrganizationPersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<OrganizationPersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            organizationPersonId.AddAnnotation("Relational:DefaultValue", 1L);
            organizationPersonId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var recallDate = runtimeEntityType.AddProperty(
                "RecallDate",
                typeof(DateTime?),
                propertyInfo: typeof(CourtOrder).GetProperty("RecallDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<RecallDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            recallDate.AddAnnotation("Relational:ColumnType", "datetime");
            recallDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var receivedDate = runtimeEntityType.AddProperty(
                "ReceivedDate",
                typeof(DateTime?),
                propertyInfo: typeof(CourtOrder).GetProperty("ReceivedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<ReceivedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            receivedDate.AddAnnotation("Relational:ColumnType", "datetime");
            receivedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestDate = runtimeEntityType.AddProperty(
                "RequestDate",
                typeof(DateTime?),
                propertyInfo: typeof(CourtOrder).GetProperty("RequestDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<RequestDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requestDate.AddAnnotation("Relational:ColumnType", "datetime");
            requestDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var servedDate = runtimeEntityType.AddProperty(
                "ServedDate",
                typeof(DateTime?),
                propertyInfo: typeof(CourtOrder).GetProperty("ServedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<ServedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            servedDate.AddAnnotation("Relational:ColumnType", "datetime");
            servedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_CourtOrder_1");

            var index = runtimeEntityType.AddIndex(
                new[] { courtOrderCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { courtOrderProtectionConditionId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { courtOrderRecallReasonId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { courtOrderServiceCautionId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { courtOrderSignatureMethodId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { courtOrderSpecialInstructionId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { courtOrderStatusId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { organizationPersonId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(CourtOrder).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var courtOrder = principalEntityType.AddNavigation("CourtOrder",
                runtimeForeignKey,
                onDependent: false,
                typeof(CourtOrder),
                propertyInfo: typeof(Activity).GetProperty("CourtOrder", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<CourtOrder>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_CourtOrders_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CourtOrderCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CourtOrderCategoryId") }),
                principalEntityType);

            var courtOrderCategory = declaringEntityType.AddNavigation("CourtOrderCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(CourtOrderCategoryDim),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var courtOrders = principalEntityType.AddNavigation("CourtOrders",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CourtOrder>),
                propertyInfo: typeof(CourtOrderCategoryDim).GetProperty("CourtOrders", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrderCategoryDim).GetField("<CourtOrders>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_CourtOrders_CourtOrderTypeDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CourtOrderProtectionConditionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CourtOrderProtectionConditionId") }),
                principalEntityType);

            var courtOrderProtectionCondition = declaringEntityType.AddNavigation("CourtOrderProtectionCondition",
                runtimeForeignKey,
                onDependent: true,
                typeof(CourtOrderProtectionConditionDim),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderProtectionCondition", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderProtectionCondition>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var courtOrders = principalEntityType.AddNavigation("CourtOrders",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CourtOrder>),
                propertyInfo: typeof(CourtOrderProtectionConditionDim).GetProperty("CourtOrders", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrderProtectionConditionDim).GetField("<CourtOrders>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_CourtOrders_CourtOrderProtectionConditionDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CourtOrderRecallReasonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CourtOrderRecallReasonId") }),
                principalEntityType);

            var courtOrderRecallReason = declaringEntityType.AddNavigation("CourtOrderRecallReason",
                runtimeForeignKey,
                onDependent: true,
                typeof(CourtOrderRecallReasonDim),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderRecallReason", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderRecallReason>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var courtOrders = principalEntityType.AddNavigation("CourtOrders",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CourtOrder>),
                propertyInfo: typeof(CourtOrderRecallReasonDim).GetProperty("CourtOrders", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrderRecallReasonDim).GetField("<CourtOrders>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "CourtOrderRecallReasonDIM_CourtOrders_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CourtOrderServiceCautionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CourtOrderServiceCautionId") }),
                principalEntityType);

            var courtOrderServiceCaution = declaringEntityType.AddNavigation("CourtOrderServiceCaution",
                runtimeForeignKey,
                onDependent: true,
                typeof(CourtOrderServiceCautionDim),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderServiceCaution", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderServiceCaution>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var courtOrders = principalEntityType.AddNavigation("CourtOrders",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CourtOrder>),
                propertyInfo: typeof(CourtOrderServiceCautionDim).GetProperty("CourtOrders", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrderServiceCautionDim).GetField("<CourtOrders>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "CourtOrderServiceCautionDIM_CourtOrders_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CourtOrderSignatureMethodId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CourtOrderSignatureMethodId") }),
                principalEntityType);

            var courtOrderSignatureMethod = declaringEntityType.AddNavigation("CourtOrderSignatureMethod",
                runtimeForeignKey,
                onDependent: true,
                typeof(CourtOrderSignatureMethodDim),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderSignatureMethod", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderSignatureMethod>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var courtOrders = principalEntityType.AddNavigation("CourtOrders",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CourtOrder>),
                propertyInfo: typeof(CourtOrderSignatureMethodDim).GetProperty("CourtOrders", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrderSignatureMethodDim).GetField("<CourtOrders>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_CourtOrder_CourtOrderSignatureMethodDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CourtOrderSpecialInstructionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CourtOrderSpecialInstructionId") }),
                principalEntityType);

            var courtOrderSpecialInstruction = declaringEntityType.AddNavigation("CourtOrderSpecialInstruction",
                runtimeForeignKey,
                onDependent: true,
                typeof(CourtOrderSpecialInstructionDim),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderSpecialInstruction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderSpecialInstruction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var courtOrders = principalEntityType.AddNavigation("CourtOrders",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CourtOrder>),
                propertyInfo: typeof(CourtOrderSpecialInstructionDim).GetProperty("CourtOrders", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrderSpecialInstructionDim).GetField("<CourtOrders>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "CourtOrderSpecialInstructionDIM_CourtOrders_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CourtOrderStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CourtOrderStatusId") }),
                principalEntityType);

            var courtOrderStatus = declaringEntityType.AddNavigation("CourtOrderStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(CourtOrderStatusDim),
                propertyInfo: typeof(CourtOrder).GetProperty("CourtOrderStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<CourtOrderStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var courtOrders = principalEntityType.AddNavigation("CourtOrders",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CourtOrder>),
                propertyInfo: typeof(CourtOrderStatusDim).GetProperty("CourtOrders", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrderStatusDim).GetField("<CourtOrders>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_CourtOrder_CourtOrderStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OrganizationPersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OrganizationPersonId") }),
                principalEntityType);

            var organizationPerson = declaringEntityType.AddNavigation("OrganizationPerson",
                runtimeForeignKey,
                onDependent: true,
                typeof(OrganizationPerson),
                propertyInfo: typeof(CourtOrder).GetProperty("OrganizationPerson", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CourtOrder).GetField("<OrganizationPerson>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var courtOrders = principalEntityType.AddNavigation("CourtOrders",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CourtOrder>),
                propertyInfo: typeof(OrganizationPerson).GetProperty("CourtOrders", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OrganizationPerson).GetField("<CourtOrders>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_CourtOrder_OrganizaitonPerson");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "CourtOrder");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
