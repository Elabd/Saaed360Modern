// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EventsMissionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EventsMission",
                typeof(EventsMission),
                baseEntityType,
                propertyCount: 23,
                navigationCount: 11,
                foreignKeyCount: 7,
                unnamedIndexCount: 7,
                keyCount: 1);

            var missionId = runtimeEntityType.AddProperty(
                "MissionId",
                typeof(long),
                propertyInfo: typeof(EventsMission).GetProperty("MissionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            missionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(EventsMission).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDateTime = runtimeEntityType.AddProperty(
                "CreationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(EventsMission).GetProperty("CreationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<CreationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            creationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var currentStatusId = runtimeEntityType.AddProperty(
                "CurrentStatusId",
                typeof(int?),
                propertyInfo: typeof(EventsMission).GetProperty("CurrentStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<CurrentStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            currentStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventId = runtimeEntityType.AddProperty(
                "EventId",
                typeof(long?),
                propertyInfo: typeof(EventsMission).GetProperty("EventId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<EventId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventMissionAcceptanceBy = runtimeEntityType.AddProperty(
                "EventMissionAcceptanceBy",
                typeof(long?),
                propertyInfo: typeof(EventsMission).GetProperty("EventMissionAcceptanceBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<EventMissionAcceptanceBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventMissionAcceptanceBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventMissionAcceptanceDateTime = runtimeEntityType.AddProperty(
                "EventMissionAcceptanceDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(EventsMission).GetProperty("EventMissionAcceptanceDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<EventMissionAcceptanceDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventMissionAcceptanceDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            eventMissionAcceptanceDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventMissionAcceptanceStatusId = runtimeEntityType.AddProperty(
                "EventMissionAcceptanceStatusId",
                typeof(int?),
                propertyInfo: typeof(EventsMission).GetProperty("EventMissionAcceptanceStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<EventMissionAcceptanceStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventMissionAcceptanceStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var groupId = runtimeEntityType.AddProperty(
                "GroupId",
                typeof(string),
                propertyInfo: typeof(EventsMission).GetProperty("GroupId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<GroupId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            groupId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeteted = runtimeEntityType.AddProperty(
                "IsDeteted",
                typeof(bool?),
                propertyInfo: typeof(EventsMission).GetProperty("IsDeteted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<IsDeteted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDeteted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isPersonalMission = runtimeEntityType.AddProperty(
                "IsPersonalMission",
                typeof(bool?),
                propertyInfo: typeof(EventsMission).GetProperty("IsPersonalMission", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<IsPersonalMission>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isPersonalMission.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missionCategoryId = runtimeEntityType.AddProperty(
                "MissionCategoryId",
                typeof(int?),
                propertyInfo: typeof(EventsMission).GetProperty("MissionCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissionCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            missionCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missionDescription = runtimeEntityType.AddProperty(
                "MissionDescription",
                typeof(string),
                propertyInfo: typeof(EventsMission).GetProperty("MissionDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissionDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            missionDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missionEndDate = runtimeEntityType.AddProperty(
                "MissionEndDate",
                typeof(DateTime?),
                propertyInfo: typeof(EventsMission).GetProperty("MissionEndDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissionEndDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            missionEndDate.AddAnnotation("Relational:ColumnType", "datetime");
            missionEndDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missionName = runtimeEntityType.AddProperty(
                "MissionName",
                typeof(string),
                propertyInfo: typeof(EventsMission).GetProperty("MissionName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissionName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 70);
            missionName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missionNotes = runtimeEntityType.AddProperty(
                "MissionNotes",
                typeof(string),
                propertyInfo: typeof(EventsMission).GetProperty("MissionNotes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissionNotes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            missionNotes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missionNumber = runtimeEntityType.AddProperty(
                "MissionNumber",
                typeof(string),
                propertyInfo: typeof(EventsMission).GetProperty("MissionNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissionNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            missionNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missionStartDate = runtimeEntityType.AddProperty(
                "MissionStartDate",
                typeof(DateTime?),
                propertyInfo: typeof(EventsMission).GetProperty("MissionStartDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissionStartDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            missionStartDate.AddAnnotation("Relational:ColumnType", "datetime");
            missionStartDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missionTypeDescription = runtimeEntityType.AddProperty(
                "MissionTypeDescription",
                typeof(string),
                propertyInfo: typeof(EventsMission).GetProperty("MissionTypeDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissionTypeDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            missionTypeDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missonLevelId = runtimeEntityType.AddProperty(
                "MissonLevelId",
                typeof(int?),
                propertyInfo: typeof(EventsMission).GetProperty("MissonLevelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissonLevelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            missonLevelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modificationDateTime = runtimeEntityType.AddProperty(
                "ModificationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(EventsMission).GetProperty("ModificationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<ModificationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modificationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            modificationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedBy = runtimeEntityType.AddProperty(
                "ModifiedBy",
                typeof(long?),
                propertyInfo: typeof(EventsMission).GetProperty("ModifiedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<ModifiedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subGroupId = runtimeEntityType.AddProperty(
                "SubGroupId",
                typeof(string),
                propertyInfo: typeof(EventsMission).GetProperty("SubGroupId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<SubGroupId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            subGroupId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { missionId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { createdBy });

            var index0 = runtimeEntityType.AddIndex(
                new[] { currentStatusId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { eventId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { eventMissionAcceptanceStatusId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { missionCategoryId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { missonLevelId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { modifiedBy });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CreatedBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var createdByNavigation = declaringEntityType.AddNavigation("CreatedByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(EventsMission).GetProperty("CreatedByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<CreatedByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsMissionCreatedByNavigations = principalEntityType.AddNavigation("EventsMissionCreatedByNavigations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsMission>),
                propertyInfo: typeof(Person).GetProperty("EventsMissionCreatedByNavigations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<EventsMissionCreatedByNavigations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__EventsMis__Creat__1D360B6C");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CurrentStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventsMissionStatusId") }),
                principalEntityType);

            var currentStatus = declaringEntityType.AddNavigation("CurrentStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsMissionStatusDim),
                propertyInfo: typeof(EventsMission).GetProperty("CurrentStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<CurrentStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsMissions = principalEntityType.AddNavigation("EventsMissions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsMission>),
                propertyInfo: typeof(EventsMissionStatusDim).GetProperty("EventsMissions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMissionStatusDim).GetField("<EventsMissions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsMissions_EventsMissionStatusDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventId") }),
                principalEntityType);

            var @event = declaringEntityType.AddNavigation("Event",
                runtimeForeignKey,
                onDependent: true,
                typeof(Event),
                propertyInfo: typeof(EventsMission).GetProperty("Event", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<Event>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsMissions = principalEntityType.AddNavigation("EventsMissions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsMission>),
                propertyInfo: typeof(Event).GetProperty("EventsMissions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Event).GetField("<EventsMissions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsMissions_Events");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventMissionAcceptanceStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventMissionAcceptanceStatusId") }),
                principalEntityType);

            var eventMissionAcceptanceStatus = declaringEntityType.AddNavigation("EventMissionAcceptanceStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventMissionAcceptanceStatusDim),
                propertyInfo: typeof(EventsMission).GetProperty("EventMissionAcceptanceStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<EventMissionAcceptanceStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsMissions = principalEntityType.AddNavigation("EventsMissions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsMission>),
                propertyInfo: typeof(EventMissionAcceptanceStatusDim).GetProperty("EventsMissions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventMissionAcceptanceStatusDim).GetField("<EventsMissions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsMissions_EventMissionAcceptanceStatusDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MissionCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MissionCategoryId") }),
                principalEntityType);

            var missionCategory = declaringEntityType.AddNavigation("MissionCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(MissionCategoryDim),
                propertyInfo: typeof(EventsMission).GetProperty("MissionCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissionCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsMissions = principalEntityType.AddNavigation("EventsMissions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsMission>),
                propertyInfo: typeof(MissionCategoryDim).GetProperty("EventsMissions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MissionCategoryDim).GetField("<EventsMissions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__EventsMis__Missi__1E2A2FA5");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MissonLevelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventMissionLevelId") }),
                principalEntityType);

            var missonLevel = declaringEntityType.AddNavigation("MissonLevel",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsMissionLevelDim),
                propertyInfo: typeof(EventsMission).GetProperty("MissonLevel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<MissonLevel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsMissions = principalEntityType.AddNavigation("EventsMissions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsMission>),
                propertyInfo: typeof(EventsMissionLevelDim).GetProperty("EventsMissions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMissionLevelDim).GetField("<EventsMissions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsMissions_EventsMissionLevelDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModifiedBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var modifiedByNavigation = declaringEntityType.AddNavigation("ModifiedByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(EventsMission).GetProperty("ModifiedByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<ModifiedByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsMissionModifiedByNavigations = principalEntityType.AddNavigation("EventsMissionModifiedByNavigations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsMission>),
                propertyInfo: typeof(Person).GetProperty("EventsMissionModifiedByNavigations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<EventsMissionModifiedByNavigations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__EventsMis__Modif__54864056");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EventsMissions");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
