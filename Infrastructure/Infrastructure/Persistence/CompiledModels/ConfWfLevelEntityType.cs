// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ConfWfLevelEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ConfWfLevel",
                typeof(ConfWfLevel),
                baseEntityType,
                propertyCount: 9,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var levelId = runtimeEntityType.AddProperty(
                "LevelId",
                typeof(long),
                propertyInfo: typeof(ConfWfLevel).GetProperty("LevelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfLevel).GetField("<LevelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            levelId.AddAnnotation("Relational:ColumnName", "LevelID");
            levelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var associatedActionId = runtimeEntityType.AddProperty(
                "AssociatedActionId",
                typeof(long?),
                propertyInfo: typeof(ConfWfLevel).GetProperty("AssociatedActionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfLevel).GetField("<AssociatedActionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            associatedActionId.AddAnnotation("Relational:ColumnName", "AssociatedActionID");
            associatedActionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var delayTimeSpan = runtimeEntityType.AddProperty(
                "DelayTimeSpan",
                typeof(double),
                propertyInfo: typeof(ConfWfLevel).GetProperty("DelayTimeSpan", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfLevel).GetField("<DelayTimeSpan>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            delayTimeSpan.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(ConfWfLevel).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfLevel).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            description.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var displayedMessage = runtimeEntityType.AddProperty(
                "DisplayedMessage",
                typeof(string),
                propertyInfo: typeof(ConfWfLevel).GetProperty("DisplayedMessage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfLevel).GetField("<DisplayedMessage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            displayedMessage.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var levelName = runtimeEntityType.AddProperty(
                "LevelName",
                typeof(string),
                propertyInfo: typeof(ConfWfLevel).GetProperty("LevelName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfLevel).GetField("<LevelName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            levelName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var repeatEvery = runtimeEntityType.AddProperty(
                "RepeatEvery",
                typeof(double?),
                propertyInfo: typeof(ConfWfLevel).GetProperty("RepeatEvery", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfLevel).GetField("<RepeatEvery>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            repeatEvery.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var transId = runtimeEntityType.AddProperty(
                "TransId",
                typeof(long),
                propertyInfo: typeof(ConfWfLevel).GetProperty("TransId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfLevel).GetField("<TransId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            transId.AddAnnotation("Relational:ColumnName", "TransID");
            transId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var useWhile = runtimeEntityType.AddProperty(
                "UseWhile",
                typeof(bool),
                propertyInfo: typeof(ConfWfLevel).GetProperty("UseWhile", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfLevel).GetField("<UseWhile>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            useWhile.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { levelId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_ConfWF_Level0");

            var index = runtimeEntityType.AddIndex(
                new[] { associatedActionId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { transId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("AssociatedActionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActionId") }),
                principalEntityType);

            var associatedAction = declaringEntityType.AddNavigation("AssociatedAction",
                runtimeForeignKey,
                onDependent: true,
                typeof(ConfWfAction),
                propertyInfo: typeof(ConfWfLevel).GetProperty("AssociatedAction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfLevel).GetField("<AssociatedAction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var confWfLevels = principalEntityType.AddNavigation("ConfWfLevels",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ConfWfLevel>),
                propertyInfo: typeof(ConfWfAction).GetProperty("ConfWfLevels", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfAction).GetField("<ConfWfLevels>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ConfWF_Level_ConfWF_Action");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TransId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("TransactionId") }),
                principalEntityType,
                required: true);

            var trans = declaringEntityType.AddNavigation("Trans",
                runtimeForeignKey,
                onDependent: true,
                typeof(ConfWfTransaction),
                propertyInfo: typeof(ConfWfLevel).GetProperty("Trans", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfLevel).GetField("<Trans>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var confWfLevels = principalEntityType.AddNavigation("ConfWfLevels",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ConfWfLevel>),
                propertyInfo: typeof(ConfWfTransaction).GetProperty("ConfWfLevels", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfTransaction).GetField("<ConfWfLevels>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ConfWF_Level_ConfWF_Transaction");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ConfWF_Level");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
