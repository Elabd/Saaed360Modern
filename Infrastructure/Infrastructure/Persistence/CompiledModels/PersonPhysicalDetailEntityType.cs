// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PersonPhysicalDetailEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PersonPhysicalDetail",
                typeof(PersonPhysicalDetail),
                baseEntityType,
                propertyCount: 21,
                navigationCount: 19,
                foreignKeyCount: 19,
                unnamedIndexCount: 18,
                keyCount: 1);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            description.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personBodyPartStatusId = runtimeEntityType.AddProperty(
                "PersonBodyPartStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonBodyPartStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonBodyPartStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personBodyPartStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personBuildId = runtimeEntityType.AddProperty(
                "PersonBuildId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonBuildId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonBuildId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personBuildId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personCircumcisionId = runtimeEntityType.AddProperty(
                "PersonCircumcisionId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonCircumcisionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonCircumcisionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personCircumcisionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personComplexionId = runtimeEntityType.AddProperty(
                "PersonComplexionId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonComplexionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonComplexionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personComplexionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personDisguiseId = runtimeEntityType.AddProperty(
                "PersonDisguiseId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonDisguiseId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonDisguiseId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personDisguiseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personEyeColorId = runtimeEntityType.AddProperty(
                "PersonEyeColorId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonEyeColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonEyeColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personEyeColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personEyeWearId = runtimeEntityType.AddProperty(
                "PersonEyeWearId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonEyeWearId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonEyeWearId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personEyeWearId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personFacialHairId = runtimeEntityType.AddProperty(
                "PersonFacialHairId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonFacialHairId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonFacialHairId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personFacialHairId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personFootPrintAvailableIndicator = runtimeEntityType.AddProperty(
                "PersonFootPrintAvailableIndicator",
                typeof(bool?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonFootPrintAvailableIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonFootPrintAvailableIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personFootPrintAvailableIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personGeneralAppearanceId = runtimeEntityType.AddProperty(
                "PersonGeneralAppearanceId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonGeneralAppearanceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonGeneralAppearanceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personGeneralAppearanceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personHairAppearanceId = runtimeEntityType.AddProperty(
                "PersonHairAppearanceId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonHairAppearanceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonHairAppearanceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personHairAppearanceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personHairStyleId = runtimeEntityType.AddProperty(
                "PersonHairStyleId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonHairStyleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonHairStyleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personHairStyleId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personHandednessId = runtimeEntityType.AddProperty(
                "PersonHandednessId",
                typeof(int),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonHandednessId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonHandednessId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            personHandednessId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personJewelryId = runtimeEntityType.AddProperty(
                "PersonJewelryId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonJewelryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonJewelryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personJewelryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personRaceId = runtimeEntityType.AddProperty(
                "PersonRaceId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonRaceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonRaceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personRaceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personSexId = runtimeEntityType.AddProperty(
                "PersonSexId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonSexId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonSexId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personSexId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personSpeechId = runtimeEntityType.AddProperty(
                "PersonSpeechId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonSpeechId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonSpeechId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personSpeechId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rowStatusId = runtimeEntityType.AddProperty(
                "RowStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("RowStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<RowStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            rowStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceId = runtimeEntityType.AddProperty(
                "SourceId",
                typeof(long?),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("SourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<SourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            sourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { personId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { personBodyPartStatusId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { personBuildId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { personCircumcisionId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { personComplexionId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { personDisguiseId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { personEyeColorId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { personEyeWearId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { personFacialHairId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { personGeneralAppearanceId });

            var index8 = runtimeEntityType.AddIndex(
                new[] { personHairAppearanceId });

            var index9 = runtimeEntityType.AddIndex(
                new[] { personHairStyleId });

            var index10 = runtimeEntityType.AddIndex(
                new[] { personHandednessId });

            var index11 = runtimeEntityType.AddIndex(
                new[] { personJewelryId });

            var index12 = runtimeEntityType.AddIndex(
                new[] { personRaceId });

            var index13 = runtimeEntityType.AddIndex(
                new[] { personSexId });

            var index14 = runtimeEntityType.AddIndex(
                new[] { personSpeechId });

            var index15 = runtimeEntityType.AddIndex(
                new[] { rowStatusId });

            var index16 = runtimeEntityType.AddIndex(
                new[] { sourceId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonBodyPartStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonBodyPartStatusId") }),
                principalEntityType);

            var personBodyPartStatus = declaringEntityType.AddNavigation("PersonBodyPartStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonBodyPartStatusDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonBodyPartStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonBodyPartStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonBodyPartStatusDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonBodyPartStatusDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonBodyPartStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonBuildId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonBuildId") }),
                principalEntityType);

            var personBuild = declaringEntityType.AddNavigation("PersonBuild",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonBuildDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonBuild", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonBuild>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonBuildDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonBuildDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonBuildDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonCircumcisionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonCircumcisionId") }),
                principalEntityType);

            var personCircumcision = declaringEntityType.AddNavigation("PersonCircumcision",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonCircumcisionDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonCircumcision", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonCircumcision>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonCircumcisionDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonCircumcisionDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonCircumcisionDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonComplexionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonComplexionId") }),
                principalEntityType);

            var personComplexion = declaringEntityType.AddNavigation("PersonComplexion",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonComplexionDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonComplexion", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonComplexion>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonComplexionDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonComplexionDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonComplexionDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonDisguiseId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonDisguiseId") }),
                principalEntityType);

            var personDisguise = declaringEntityType.AddNavigation("PersonDisguise",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonDisguiseDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonDisguise", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonDisguise>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonDisguiseDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonDisguiseDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonDisguiseDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonEyeColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonEyeColorId") }),
                principalEntityType);

            var personEyeColor = declaringEntityType.AddNavigation("PersonEyeColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonEyeColorDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonEyeColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonEyeColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonEyeColorDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEyeColorDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonEyeColorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonEyeWearId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonEyeWearId") }),
                principalEntityType);

            var personEyeWear = declaringEntityType.AddNavigation("PersonEyeWear",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonEyeWearDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonEyeWear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonEyeWear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonEyeWearDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonEyeWearDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonEyeWearDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonFacialHairId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonFacialHairId") }),
                principalEntityType);

            var personFacialHair = declaringEntityType.AddNavigation("PersonFacialHair",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonFacialHairDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonFacialHair", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonFacialHair>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonFacialHairDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFacialHairDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonFacialHairDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonGeneralAppearanceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonGeneralAppearanceId") }),
                principalEntityType);

            var personGeneralAppearance = declaringEntityType.AddNavigation("PersonGeneralAppearance",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonGeneralAppearanceDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonGeneralAppearance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonGeneralAppearance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonGeneralAppearanceDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonGeneralAppearanceDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonGeneralAppearanceDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonHairAppearanceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonHairAppearanceId") }),
                principalEntityType);

            var personHairAppearance = declaringEntityType.AddNavigation("PersonHairAppearance",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonHairAppearanceDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonHairAppearance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonHairAppearance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonHairAppearanceDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonHairAppearanceDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonHairAppearanceDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonHairStyleId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonHairStyleId") }),
                principalEntityType);

            var personHairStyle = declaringEntityType.AddNavigation("PersonHairStyle",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonHairStyleDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonHairStyle", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonHairStyle>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonHairStyleDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonHairStyleDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonHairStyleDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey12(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonHandednessId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonHandednessId") }),
                principalEntityType,
                required: true);

            var personHandedness = declaringEntityType.AddNavigation("PersonHandedness",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonHandednessDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonHandedness", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonHandedness>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonHandednessDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonHandednessDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonHandednessDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey13(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                unique: true,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetail = principalEntityType.AddNavigation("PersonPhysicalDetail",
                runtimeForeignKey,
                onDependent: false,
                typeof(PersonPhysicalDetail),
                propertyInfo: typeof(Person).GetProperty("PersonPhysicalDetail", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<PersonPhysicalDetail>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey14(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonJewelryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonJewelryId") }),
                principalEntityType);

            var personJewelry = declaringEntityType.AddNavigation("PersonJewelry",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonJewelryDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonJewelry", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonJewelry>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonJewelryDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonJewelryDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonJewelryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey15(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonRaceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonRaceId") }),
                principalEntityType);

            var personRace = declaringEntityType.AddNavigation("PersonRace",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonRaceDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonRace", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonRace>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonRaceDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonRaceDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonRaceDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey16(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonSexId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonSexId") }),
                principalEntityType);

            var personSex = declaringEntityType.AddNavigation("PersonSex",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonSexDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonSex", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonSex>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonSexDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonSexDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonSexDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey17(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonSpeechId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonSpeechId") }),
                principalEntityType);

            var personSpeech = declaringEntityType.AddNavigation("PersonSpeech",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonSpeechDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("PersonSpeech", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<PersonSpeech>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(PersonSpeechDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonSpeechDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_PersonSpeechDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey18(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RowStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RowStatusId") }),
                principalEntityType);

            var rowStatus = declaringEntityType.AddNavigation("RowStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(RowStatusDim),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("RowStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<RowStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(RowStatusDim).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RowStatusDim).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_RowStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey19(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SourceId") }),
                principalEntityType);

            var source = declaringEntityType.AddNavigation("Source",
                runtimeForeignKey,
                onDependent: true,
                typeof(Source),
                propertyInfo: typeof(PersonPhysicalDetail).GetProperty("Source", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonPhysicalDetail).GetField("<Source>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personPhysicalDetails = principalEntityType.AddNavigation("PersonPhysicalDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonPhysicalDetail>),
                propertyInfo: typeof(Source).GetProperty("PersonPhysicalDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Source).GetField("<PersonPhysicalDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonPhysicalDetail_Source");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PersonPhysicalDetail");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
