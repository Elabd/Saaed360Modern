// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EventIncidentEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EventIncident",
                typeof(EventIncident),
                baseEntityType,
                propertyCount: 19,
                navigationCount: 14,
                foreignKeyCount: 9,
                unnamedIndexCount: 9,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(EventIncident).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var creationDate = runtimeEntityType.AddProperty(
                "CreationDate",
                typeof(DateTime?),
                propertyInfo: typeof(EventIncident).GetProperty("CreationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<CreationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDate.AddAnnotation("Relational:ColumnType", "datetime");
            creationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criticalityLevelId = runtimeEntityType.AddProperty(
                "CriticalityLevelId",
                typeof(long?),
                propertyInfo: typeof(EventIncident).GetProperty("CriticalityLevelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<CriticalityLevelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criticalityLevelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventId = runtimeEntityType.AddProperty(
                "EventId",
                typeof(long),
                propertyInfo: typeof(EventIncident).GetProperty("EventId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<EventId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            eventId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentEndTime = runtimeEntityType.AddProperty(
                "IncidentEndTime",
                typeof(DateTime?),
                propertyInfo: typeof(EventIncident).GetProperty("IncidentEndTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<IncidentEndTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            incidentEndTime.AddAnnotation("Relational:ColumnType", "datetime");
            incidentEndTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentLocationId = runtimeEntityType.AddProperty(
                "IncidentLocationId",
                typeof(long?),
                propertyInfo: typeof(EventIncident).GetProperty("IncidentLocationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<IncidentLocationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            incidentLocationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentStartTime = runtimeEntityType.AddProperty(
                "IncidentStartTime",
                typeof(DateTime?),
                propertyInfo: typeof(EventIncident).GetProperty("IncidentStartTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<IncidentStartTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            incidentStartTime.AddAnnotation("Relational:ColumnType", "datetime");
            incidentStartTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentSubTypeId = runtimeEntityType.AddProperty(
                "IncidentSubTypeId",
                typeof(long?),
                propertyInfo: typeof(EventIncident).GetProperty("IncidentSubTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<IncidentSubTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            incidentSubTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentTypeId = runtimeEntityType.AddProperty(
                "IncidentTypeId",
                typeof(long?),
                propertyInfo: typeof(EventIncident).GetProperty("IncidentTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<IncidentTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            incidentTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(EventIncident).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isFinished = runtimeEntityType.AddProperty(
                "IsFinished",
                typeof(bool?),
                propertyInfo: typeof(EventIncident).GetProperty("IsFinished", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<IsFinished>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isFinished.AddAnnotation("Relational:DefaultValue", false);
            isFinished.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var latitude = runtimeEntityType.AddProperty(
                "Latitude",
                typeof(decimal?),
                propertyInfo: typeof(EventIncident).GetProperty("Latitude", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<Latitude>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            latitude.AddAnnotation("Relational:ColumnType", "decimal(18, 15)");
            latitude.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var longitude = runtimeEntityType.AddProperty(
                "Longitude",
                typeof(decimal?),
                propertyInfo: typeof(EventIncident).GetProperty("Longitude", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<Longitude>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            longitude.AddAnnotation("Relational:ColumnType", "decimal(18, 15)");
            longitude.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var missionId = runtimeEntityType.AddProperty(
                "MissionId",
                typeof(long?),
                propertyInfo: typeof(EventIncident).GetProperty("MissionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<MissionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            missionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modificationBy = runtimeEntityType.AddProperty(
                "ModificationBy",
                typeof(long?),
                propertyInfo: typeof(EventIncident).GetProperty("ModificationBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<ModificationBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modificationBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modificationDate = runtimeEntityType.AddProperty(
                "ModificationDate",
                typeof(DateTime?),
                propertyInfo: typeof(EventIncident).GetProperty("ModificationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<ModificationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modificationDate.AddAnnotation("Relational:ColumnType", "datetime");
            modificationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var notes = runtimeEntityType.AddProperty(
                "Notes",
                typeof(string),
                propertyInfo: typeof(EventIncident).GetProperty("Notes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<Notes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            notes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long?),
                propertyInfo: typeof(EventIncident).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statusId = runtimeEntityType.AddProperty(
                "StatusId",
                typeof(int?),
                propertyInfo: typeof(EventIncident).GetProperty("StatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<StatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            statusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__EventInc__3214EC07EDE821B6");

            var index = runtimeEntityType.AddIndex(
                new[] { criticalityLevelId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { eventId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { incidentLocationId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { incidentSubTypeId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { incidentTypeId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { missionId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { modificationBy });

            var index6 = runtimeEntityType.AddIndex(
                new[] { personId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { statusId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriticalityLevelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var criticalityLevel = declaringEntityType.AddNavigation("CriticalityLevel",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventIncidentCriticalityLevelDim),
                propertyInfo: typeof(EventIncident).GetProperty("CriticalityLevel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<CriticalityLevel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventIncidents = principalEntityType.AddNavigation("EventIncidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventIncident>),
                propertyInfo: typeof(EventIncidentCriticalityLevelDim).GetProperty("EventIncidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncidentCriticalityLevelDim).GetField("<EventIncidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventIncidents_EventIncidentCriticalityLevelDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventId") }),
                principalEntityType,
                required: true);

            var @event = declaringEntityType.AddNavigation("Event",
                runtimeForeignKey,
                onDependent: true,
                typeof(Event),
                propertyInfo: typeof(EventIncident).GetProperty("Event", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<Event>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventIncidents = principalEntityType.AddNavigation("EventIncidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventIncident>),
                propertyInfo: typeof(Event).GetProperty("EventIncidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Event).GetField("<EventIncidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Incidents_Events");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IncidentLocationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventAreaId") }),
                principalEntityType);

            var incidentLocation = declaringEntityType.AddNavigation("IncidentLocation",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsArea),
                propertyInfo: typeof(EventIncident).GetProperty("IncidentLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<IncidentLocation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventIncidents = principalEntityType.AddNavigation("EventIncidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventIncident>),
                propertyInfo: typeof(EventsArea).GetProperty("EventIncidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsArea).GetField("<EventIncidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventIncidents_EventsAreas");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IncidentSubTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var incidentSubType = declaringEntityType.AddNavigation("IncidentSubType",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventIncidentSubTypeDim),
                propertyInfo: typeof(EventIncident).GetProperty("IncidentSubType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<IncidentSubType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventIncidents = principalEntityType.AddNavigation("EventIncidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventIncident>),
                propertyInfo: typeof(EventIncidentSubTypeDim).GetProperty("EventIncidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncidentSubTypeDim).GetField("<EventIncidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventIncidents_EventIncidentSubTypeDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IncidentTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var incidentType = declaringEntityType.AddNavigation("IncidentType",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventIncidentTypeDim),
                propertyInfo: typeof(EventIncident).GetProperty("IncidentType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<IncidentType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventIncidents = principalEntityType.AddNavigation("EventIncidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventIncident>),
                propertyInfo: typeof(EventIncidentTypeDim).GetProperty("EventIncidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncidentTypeDim).GetField("<EventIncidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventIncidents_EventIncidentTypeDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MissionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MissionId") }),
                principalEntityType);

            var mission = declaringEntityType.AddNavigation("Mission",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsMission),
                propertyInfo: typeof(EventIncident).GetProperty("Mission", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<Mission>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventIncidents = principalEntityType.AddNavigation("EventIncidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventIncident>),
                propertyInfo: typeof(EventsMission).GetProperty("EventIncidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<EventIncidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventIncidents_EventsMissions");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModificationBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var modificationByNavigation = declaringEntityType.AddNavigation("ModificationByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(EventIncident).GetProperty("ModificationByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<ModificationByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventIncidentModificationByNavigations = principalEntityType.AddNavigation("EventIncidentModificationByNavigations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventIncident>),
                propertyInfo: typeof(Person).GetProperty("EventIncidentModificationByNavigations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<EventIncidentModificationByNavigations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventIncidents_PersonModification");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(EventIncident).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventIncidentPeople = principalEntityType.AddNavigation("EventIncidentPeople",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventIncident>),
                propertyInfo: typeof(Person).GetProperty("EventIncidentPeople", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<EventIncidentPeople>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Incidents_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("StatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var status = declaringEntityType.AddNavigation("Status",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventIncidentStatusDim),
                propertyInfo: typeof(EventIncident).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncident).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventIncidents = principalEntityType.AddNavigation("EventIncidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventIncident>),
                propertyInfo: typeof(EventIncidentStatusDim).GetProperty("EventIncidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventIncidentStatusDim).GetField("<EventIncidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventIncidents_EventIncidentStatusDim");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EventIncidents");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
