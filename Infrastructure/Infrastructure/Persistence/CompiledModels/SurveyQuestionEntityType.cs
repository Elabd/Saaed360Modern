// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class SurveyQuestionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.SurveyQuestion",
                typeof(SurveyQuestion),
                baseEntityType,
                propertyCount: 10,
                navigationCount: 4,
                foreignKeyCount: 3,
                namedIndexCount: 3,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(SurveyQuestion).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var addedDate = runtimeEntityType.AddProperty(
                "AddedDate",
                typeof(DateTime?),
                propertyInfo: typeof(SurveyQuestion).GetProperty("AddedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<AddedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            addedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var arName = runtimeEntityType.AddProperty(
                "ArName",
                typeof(string),
                propertyInfo: typeof(SurveyQuestion).GetProperty("ArName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<ArName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 2000);
            arName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var enName = runtimeEntityType.AddProperty(
                "EnName",
                typeof(string),
                propertyInfo: typeof(SurveyQuestion).GetProperty("EnName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<EnName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 4000);
            enName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ipaddress = runtimeEntityType.AddProperty(
                "Ipaddress",
                typeof(string),
                propertyInfo: typeof(SurveyQuestion).GetProperty("Ipaddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<Ipaddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            ipaddress.AddAnnotation("Relational:ColumnName", "IPAddress");
            ipaddress.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDate = runtimeEntityType.AddProperty(
                "ModifiedDate",
                typeof(DateTime?),
                propertyInfo: typeof(SurveyQuestion).GetProperty("ModifiedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<ModifiedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var order = runtimeEntityType.AddProperty(
                "Order",
                typeof(long?),
                propertyInfo: typeof(SurveyQuestion).GetProperty("Order", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<Order>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            order.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var surveyAnswerGroupId = runtimeEntityType.AddProperty(
                "SurveyAnswerGroupId",
                typeof(long?),
                propertyInfo: typeof(SurveyQuestion).GetProperty("SurveyAnswerGroupId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<SurveyAnswerGroupId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            surveyAnswerGroupId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var surveyLanguageId = runtimeEntityType.AddProperty(
                "SurveyLanguageId",
                typeof(long?),
                propertyInfo: typeof(SurveyQuestion).GetProperty("SurveyLanguageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<SurveyLanguageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            surveyLanguageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var surveyQuestionTypeId = runtimeEntityType.AddProperty(
                "SurveyQuestionTypeId",
                typeof(long),
                propertyInfo: typeof(SurveyQuestion).GetProperty("SurveyQuestionTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<SurveyQuestionTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            surveyQuestionTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var iX_SurveyQuestion_SurveyAnswerGroupId = runtimeEntityType.AddIndex(
                new[] { surveyAnswerGroupId },
                name: "IX_SurveyQuestion_SurveyAnswerGroupId");

            var iX_SurveyQuestion_SurveyLanguageId = runtimeEntityType.AddIndex(
                new[] { surveyLanguageId },
                name: "IX_SurveyQuestion_SurveyLanguageId");

            var iX_SurveyQuestion_SurveyQuestionTypeId = runtimeEntityType.AddIndex(
                new[] { surveyQuestionTypeId },
                name: "IX_SurveyQuestion_SurveyQuestionTypeId");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SurveyAnswerGroupId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var surveyAnswerGroup = declaringEntityType.AddNavigation("SurveyAnswerGroup",
                runtimeForeignKey,
                onDependent: true,
                typeof(SurveyAnswerGroup),
                propertyInfo: typeof(SurveyQuestion).GetProperty("SurveyAnswerGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<SurveyAnswerGroup>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var surveyQuestions = principalEntityType.AddNavigation("SurveyQuestions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SurveyQuestion>),
                propertyInfo: typeof(SurveyAnswerGroup).GetProperty("SurveyQuestions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyAnswerGroup).GetField("<SurveyQuestions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SurveyLanguageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var surveyLanguage = declaringEntityType.AddNavigation("SurveyLanguage",
                runtimeForeignKey,
                onDependent: true,
                typeof(SurveyLanguage),
                propertyInfo: typeof(SurveyQuestion).GetProperty("SurveyLanguage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<SurveyLanguage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var surveyQuestions = principalEntityType.AddNavigation("SurveyQuestions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SurveyQuestion>),
                propertyInfo: typeof(SurveyLanguage).GetProperty("SurveyQuestions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyLanguage).GetField("<SurveyQuestions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SurveyQuestionTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var surveyQuestionType = declaringEntityType.AddNavigation("SurveyQuestionType",
                runtimeForeignKey,
                onDependent: true,
                typeof(SurveyQuestionType),
                propertyInfo: typeof(SurveyQuestion).GetProperty("SurveyQuestionType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestion).GetField("<SurveyQuestionType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var surveyQuestions = principalEntityType.AddNavigation("SurveyQuestions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SurveyQuestion>),
                propertyInfo: typeof(SurveyQuestionType).GetProperty("SurveyQuestions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyQuestionType).GetField("<SurveyQuestions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "SurveyQuestion");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
