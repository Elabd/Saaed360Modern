// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class VehicleTypeToVehicleModelMapEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.VehicleTypeToVehicleModelMap",
                typeof(VehicleTypeToVehicleModelMap),
                baseEntityType,
                propertyCount: 5,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(VehicleTypeToVehicleModelMap).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleTypeToVehicleModelMap).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var isActive = runtimeEntityType.AddProperty(
                "IsActive",
                typeof(bool?),
                propertyInfo: typeof(VehicleTypeToVehicleModelMap).GetProperty("IsActive", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleTypeToVehicleModelMap).GetField("<IsActive>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isActive.AddAnnotation("Relational:DefaultValue", false);
            isActive.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleModelId = runtimeEntityType.AddProperty(
                "VehicleModelId",
                typeof(int?),
                propertyInfo: typeof(VehicleTypeToVehicleModelMap).GetProperty("VehicleModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleTypeToVehicleModelMap).GetField("<VehicleModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleModelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleTypeId = runtimeEntityType.AddProperty(
                "VehicleTypeId",
                typeof(int?),
                propertyInfo: typeof(VehicleTypeToVehicleModelMap).GetProperty("VehicleTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleTypeToVehicleModelMap).GetField("<VehicleTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var versionDateTime = runtimeEntityType.AddProperty(
                "VersionDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(VehicleTypeToVehicleModelMap).GetProperty("VersionDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleTypeToVehicleModelMap).GetField("<VersionDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            versionDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            versionDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__VehicleT__3214EC07B1724F20");

            var index = runtimeEntityType.AddIndex(
                new[] { vehicleModelId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { vehicleTypeId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleModelId") }),
                principalEntityType);

            var vehicleModel = declaringEntityType.AddNavigation("VehicleModel",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleModelDim),
                propertyInfo: typeof(VehicleTypeToVehicleModelMap).GetProperty("VehicleModel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleTypeToVehicleModelMap).GetField("<VehicleModel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleTypeToVehicleModelMaps = principalEntityType.AddNavigation("VehicleTypeToVehicleModelMaps",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleTypeToVehicleModelMap>),
                propertyInfo: typeof(VehicleModelDim).GetProperty("VehicleTypeToVehicleModelMaps", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleModelDim).GetField("<VehicleTypeToVehicleModelMaps>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__VehicleTy__Vehic__43195B2D");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleTypeId") }),
                principalEntityType);

            var vehicleType = declaringEntityType.AddNavigation("VehicleType",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleTypeDim),
                propertyInfo: typeof(VehicleTypeToVehicleModelMap).GetProperty("VehicleType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleTypeToVehicleModelMap).GetField("<VehicleType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleTypeToVehicleModelMaps = principalEntityType.AddNavigation("VehicleTypeToVehicleModelMaps",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleTypeToVehicleModelMap>),
                propertyInfo: typeof(VehicleTypeDim).GetProperty("VehicleTypeToVehicleModelMaps", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleTypeDim).GetField("<VehicleTypeToVehicleModelMaps>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__VehicleTy__Vehic__422536F4");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "VehicleTypeToVehicleModelMap");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
