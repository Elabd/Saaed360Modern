// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class LicensePlateLocationEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.LicensePlateLocation",
                typeof(LicensePlateLocation),
                baseEntityType,
                propertyCount: 10,
                navigationCount: 5,
                foreignKeyCount: 5,
                unnamedIndexCount: 4,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isPhotoPresent = runtimeEntityType.AddProperty(
                "IsPhotoPresent",
                typeof(bool?),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("IsPhotoPresent", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<IsPhotoPresent>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isPhotoPresent.AddAnnotation("Relational:DefaultValue", false);
            isPhotoPresent.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isVideoPresent = runtimeEntityType.AddProperty(
                "IsVideoPresent",
                typeof(bool?),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("IsVideoPresent", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<IsVideoPresent>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isVideoPresent.AddAnnotation("Relational:DefaultValue", false);
            isVideoPresent.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var legalSpeedLimitForCapture = runtimeEntityType.AddProperty(
                "LegalSpeedLimitForCapture",
                typeof(int?),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("LegalSpeedLimitForCapture", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<LegalSpeedLimitForCapture>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            legalSpeedLimitForCapture.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var legalSpeedRate = runtimeEntityType.AddProperty(
                "LegalSpeedRate",
                typeof(int?),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("LegalSpeedRate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<LegalSpeedRate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            legalSpeedRate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licensePlateCameraId = runtimeEntityType.AddProperty(
                "LicensePlateCameraId",
                typeof(int?),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("LicensePlateCameraId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<LicensePlateCameraId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            licensePlateCameraId.AddAnnotation("Relational:DefaultValue", 1);
            licensePlateCameraId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licensePlateDirectionId = runtimeEntityType.AddProperty(
                "LicensePlateDirectionId",
                typeof(int?),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("LicensePlateDirectionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<LicensePlateDirectionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            licensePlateDirectionId.AddAnnotation("Relational:DefaultValue", 1);
            licensePlateDirectionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licensePlateLaneId = runtimeEntityType.AddProperty(
                "LicensePlateLaneId",
                typeof(int?),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("LicensePlateLaneId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<LicensePlateLaneId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            licensePlateLaneId.AddAnnotation("Relational:DefaultValue", 1);
            licensePlateLaneId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licensePlateViolationTypeId = runtimeEntityType.AddProperty(
                "LicensePlateViolationTypeId",
                typeof(int?),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("LicensePlateViolationTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<LicensePlateViolationTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            licensePlateViolationTypeId.AddAnnotation("Relational:DefaultValue", 1);
            licensePlateViolationTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var recordedSpeedRate = runtimeEntityType.AddProperty(
                "RecordedSpeedRate",
                typeof(int?),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("RecordedSpeedRate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<RecordedSpeedRate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            recordedSpeedRate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__LicenseP__45F4A791418D84B7");

            var index = runtimeEntityType.AddIndex(
                new[] { licensePlateCameraId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { licensePlateDirectionId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { licensePlateLaneId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { licensePlateViolationTypeId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var licensePlateLocation = principalEntityType.AddNavigation("LicensePlateLocation",
                runtimeForeignKey,
                onDependent: false,
                typeof(LicensePlateLocation),
                propertyInfo: typeof(Activity).GetProperty("LicensePlateLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<LicensePlateLocation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_LicensePlateLocation_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LicensePlateCameraId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LicensePlateCameraId") }),
                principalEntityType);

            var licensePlateCamera = declaringEntityType.AddNavigation("LicensePlateCamera",
                runtimeForeignKey,
                onDependent: true,
                typeof(LicensePlateCameraDim),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("LicensePlateCamera", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<LicensePlateCamera>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var licensePlateLocations = principalEntityType.AddNavigation("LicensePlateLocations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<LicensePlateLocation>),
                propertyInfo: typeof(LicensePlateCameraDim).GetProperty("LicensePlateLocations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateCameraDim).GetField("<LicensePlateLocations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_LicensePlateLocation_LicensePlaceCameraDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LicensePlateDirectionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LicensePlateDirectionId") }),
                principalEntityType);

            var licensePlateDirection = declaringEntityType.AddNavigation("LicensePlateDirection",
                runtimeForeignKey,
                onDependent: true,
                typeof(LicensePlateDirectionDim),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("LicensePlateDirection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<LicensePlateDirection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var licensePlateLocations = principalEntityType.AddNavigation("LicensePlateLocations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<LicensePlateLocation>),
                propertyInfo: typeof(LicensePlateDirectionDim).GetProperty("LicensePlateLocations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateDirectionDim).GetField("<LicensePlateLocations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_LicensePlateLocation_LicensePlateDirectionDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LicensePlateLaneId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LicensePlateLaneId") }),
                principalEntityType);

            var licensePlateLane = declaringEntityType.AddNavigation("LicensePlateLane",
                runtimeForeignKey,
                onDependent: true,
                typeof(LicensePlateLaneDim),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("LicensePlateLane", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<LicensePlateLane>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var licensePlateLocations = principalEntityType.AddNavigation("LicensePlateLocations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<LicensePlateLocation>),
                propertyInfo: typeof(LicensePlateLaneDim).GetProperty("LicensePlateLocations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLaneDim).GetField("<LicensePlateLocations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_LicensePlateLocation_LicensePlateLaneDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LicensePlateViolationTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LicensePlateViolationTypeId") }),
                principalEntityType);

            var licensePlateViolationType = declaringEntityType.AddNavigation("LicensePlateViolationType",
                runtimeForeignKey,
                onDependent: true,
                typeof(LicensePlateViolationTypeDim),
                propertyInfo: typeof(LicensePlateLocation).GetProperty("LicensePlateViolationType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateLocation).GetField("<LicensePlateViolationType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var licensePlateLocations = principalEntityType.AddNavigation("LicensePlateLocations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<LicensePlateLocation>),
                propertyInfo: typeof(LicensePlateViolationTypeDim).GetProperty("LicensePlateLocations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateViolationTypeDim).GetField("<LicensePlateLocations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_LicensePlateLocation_LicensePlateViolationTypeDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "LicensePlateLocation");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
