// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PaymentTransactionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PaymentTransaction",
                typeof(PaymentTransaction),
                baseEntityType,
                propertyCount: 25,
                navigationCount: 11,
                foreignKeyCount: 7,
                unnamedIndexCount: 7,
                keyCount: 1);

            var transactionId = runtimeEntityType.AddProperty(
                "TransactionId",
                typeof(long),
                propertyInfo: typeof(PaymentTransaction).GetProperty("TransactionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<TransactionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            transactionId.AddAnnotation("Relational:ColumnName", "TransactionID");
            transactionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var channelId = runtimeEntityType.AddProperty(
                "ChannelId",
                typeof(int?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("ChannelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<ChannelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            channelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDateTime = runtimeEntityType.AddProperty(
                "CreationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("CreationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<CreationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            creationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isSetteled = runtimeEntityType.AddProperty(
                "IsSetteled",
                typeof(bool?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("IsSetteled", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<IsSetteled>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isSetteled.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isWallet = runtimeEntityType.AddProperty(
                "IsWallet",
                typeof(bool?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("IsWallet", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<IsWallet>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isWallet.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modificationDateTime = runtimeEntityType.AddProperty(
                "ModificationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("ModificationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<ModificationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modificationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            modificationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var netAmount = runtimeEntityType.AddProperty(
                "NetAmount",
                typeof(double?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("NetAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<NetAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            netAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var objectionId = runtimeEntityType.AddProperty(
                "ObjectionId",
                typeof(long?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("ObjectionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<ObjectionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            objectionId.AddAnnotation("Relational:ColumnName", "ObjectionID");
            objectionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var payProPaymentReference = runtimeEntityType.AddProperty(
                "PayProPaymentReference",
                typeof(string),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PayProPaymentReference", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PayProPaymentReference>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            payProPaymentReference.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var payProRefundReference = runtimeEntityType.AddProperty(
                "PayProRefundReference",
                typeof(string),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PayProRefundReference", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PayProRefundReference>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            payProRefundReference.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentDate = runtimeEntityType.AddProperty(
                "PaymentDate",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentDate.AddAnnotation("Relational:ColumnType", "datetime");
            paymentDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentGatewayFees = runtimeEntityType.AddProperty(
                "PaymentGatewayFees",
                typeof(double?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentGatewayFees", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentGatewayFees>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentGatewayFees.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentInfoId = runtimeEntityType.AddProperty(
                "PaymentInfoId",
                typeof(long?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentInfoId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentInfoId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentInfoId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentMethod = runtimeEntityType.AddProperty(
                "PaymentMethod",
                typeof(short?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentMethod", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentMethod>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentMethod.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentRequestTypeId = runtimeEntityType.AddProperty(
                "PaymentRequestTypeId",
                typeof(int?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentRequestTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentRequestTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentRequestTypeId.AddAnnotation("Relational:ColumnName", "PaymentRequestTypeID");
            paymentRequestTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentStatusId = runtimeEntityType.AddProperty(
                "PaymentStatusId",
                typeof(int?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentStatusId.AddAnnotation("Relational:ColumnName", "PaymentStatusID");
            paymentStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentUserAccountId = runtimeEntityType.AddProperty(
                "PaymentUserAccountId",
                typeof(int?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentUserAccountId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentUserAccountId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentUserAccountId.AddAnnotation("Relational:ColumnName", "PaymentUserAccountID");
            paymentUserAccountId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportVehicleDataId = runtimeEntityType.AddProperty(
                "ReportVehicleDataId",
                typeof(int?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("ReportVehicleDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<ReportVehicleDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportVehicleDataId.AddAnnotation("Relational:ColumnName", "ReportVehicleDataID");
            reportVehicleDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestId = runtimeEntityType.AddProperty(
                "RequestId",
                typeof(long?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("RequestId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<RequestId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requestId.AddAnnotation("Relational:ColumnName", "RequestID");
            requestId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var saaedPaymentReference = runtimeEntityType.AddProperty(
                "SaaedPaymentReference",
                typeof(string),
                propertyInfo: typeof(PaymentTransaction).GetProperty("SaaedPaymentReference", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<SaaedPaymentReference>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            saaedPaymentReference.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceAmount = runtimeEntityType.AddProperty(
                "ServiceAmount",
                typeof(double?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("ServiceAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<ServiceAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceStatus = runtimeEntityType.AddProperty(
                "ServiceStatus",
                typeof(int?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("ServiceStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<ServiceStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var settlementDate = runtimeEntityType.AddProperty(
                "SettlementDate",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("SettlementDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<SettlementDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            settlementDate.AddAnnotation("Relational:ColumnType", "datetime");
            settlementDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var totalAmount = runtimeEntityType.AddProperty(
                "TotalAmount",
                typeof(double?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("TotalAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<TotalAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            totalAmount.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vat = runtimeEntityType.AddProperty(
                "Vat",
                typeof(double?),
                propertyInfo: typeof(PaymentTransaction).GetProperty("Vat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<Vat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vat.AddAnnotation("Relational:ColumnName", "VAT");
            vat.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { transactionId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { channelId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { objectionId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { paymentInfoId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { paymentRequestTypeId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { paymentStatusId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { paymentUserAccountId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { reportVehicleDataId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ChannelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ChannelId") }),
                principalEntityType);

            var channel = declaringEntityType.AddNavigation("Channel",
                runtimeForeignKey,
                onDependent: true,
                typeof(ObjectionRequestChannelDim),
                propertyInfo: typeof(PaymentTransaction).GetProperty("Channel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<Channel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentTransactions = principalEntityType.AddNavigation("PaymentTransactions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentTransaction>),
                propertyInfo: typeof(ObjectionRequestChannelDim).GetProperty("PaymentTransactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ObjectionRequestChannelDim).GetField("<PaymentTransactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__PaymentTr__Chann__71C19D82");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ObjectionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ObjectionId") }),
                principalEntityType);

            var objection = declaringEntityType.AddNavigation("Objection",
                runtimeForeignKey,
                onDependent: true,
                typeof(Objection),
                propertyInfo: typeof(PaymentTransaction).GetProperty("Objection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<Objection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentTransactions = principalEntityType.AddNavigation("PaymentTransactions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentTransaction>),
                propertyInfo: typeof(Objection).GetProperty("PaymentTransactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Objection).GetField("<PaymentTransactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentTransactions_Objection");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PaymentInfoId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PaymentInfoId") }),
                principalEntityType);

            var paymentInfo = declaringEntityType.AddNavigation("PaymentInfo",
                runtimeForeignKey,
                onDependent: true,
                typeof(PaymentOrganizationInfo),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentInfo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentInfo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentTransactions = principalEntityType.AddNavigation("PaymentTransactions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentTransaction>),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("PaymentTransactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<PaymentTransactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentTransactions_PaymentOrganizationInfo");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PaymentRequestTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var paymentRequestType = declaringEntityType.AddNavigation("PaymentRequestType",
                runtimeForeignKey,
                onDependent: true,
                typeof(PaymentRequestTypeDim),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentRequestType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentRequestType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentTransactions = principalEntityType.AddNavigation("PaymentTransactions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentTransaction>),
                propertyInfo: typeof(PaymentRequestTypeDim).GetProperty("PaymentTransactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentRequestTypeDim).GetField("<PaymentTransactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentTransactions_PaymentRequestTypeDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PaymentStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var paymentStatus = declaringEntityType.AddNavigation("PaymentStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(PaymentRequestStatusDim),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentTransactions = principalEntityType.AddNavigation("PaymentTransactions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentTransaction>),
                propertyInfo: typeof(PaymentRequestStatusDim).GetProperty("PaymentTransactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentRequestStatusDim).GetField("<PaymentTransactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentTransactions_PaymentRequestStatusDim");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PaymentUserAccountId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var paymentUserAccount = declaringEntityType.AddNavigation("PaymentUserAccount",
                runtimeForeignKey,
                onDependent: true,
                typeof(PaymentUserAccount),
                propertyInfo: typeof(PaymentTransaction).GetProperty("PaymentUserAccount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<PaymentUserAccount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentTransactions = principalEntityType.AddNavigation("PaymentTransactions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentTransaction>),
                propertyInfo: typeof(PaymentUserAccount).GetProperty("PaymentTransactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentUserAccount).GetField("<PaymentTransactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentTransactions_PaymentUserAccounts");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ReportVehicleDataId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ReportVehicleDataId") }),
                principalEntityType);

            var reportVehicleData = declaringEntityType.AddNavigation("ReportVehicleData",
                runtimeForeignKey,
                onDependent: true,
                typeof(ReportVehicleDatum),
                propertyInfo: typeof(PaymentTransaction).GetProperty("ReportVehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentTransaction).GetField("<ReportVehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentTransactions = principalEntityType.AddNavigation("PaymentTransactions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentTransaction>),
                propertyInfo: typeof(ReportVehicleDatum).GetProperty("PaymentTransactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportVehicleDatum).GetField("<PaymentTransactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentTransactions_ReportVehicleData");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PaymentTransactions");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
