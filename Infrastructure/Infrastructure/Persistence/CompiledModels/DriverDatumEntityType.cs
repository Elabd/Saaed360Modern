// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class DriverDatumEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.DriverDatum",
                typeof(DriverDatum),
                baseEntityType,
                propertyCount: 29,
                navigationCount: 15,
                foreignKeyCount: 14,
                unnamedIndexCount: 14,
                keyCount: 1);

            var driverDataId = runtimeEntityType.AddProperty(
                "DriverDataId",
                typeof(int),
                propertyInfo: typeof(DriverDatum).GetProperty("DriverDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<DriverDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            driverDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var address = runtimeEntityType.AddProperty(
                "Address",
                typeof(string),
                propertyInfo: typeof(DriverDatum).GetProperty("Address", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<Address>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            address.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var birthDate = runtimeEntityType.AddProperty(
                "BirthDate",
                typeof(DateTime?),
                propertyInfo: typeof(DriverDatum).GetProperty("BirthDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<BirthDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            birthDate.AddAnnotation("Relational:ColumnType", "datetime");
            birthDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var careerId = runtimeEntityType.AddProperty(
                "CareerId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("CareerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<CareerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            careerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var confiscationDocumentTypeId = runtimeEntityType.AddProperty(
                "ConfiscationDocumentTypeId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("ConfiscationDocumentTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<ConfiscationDocumentTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            confiscationDocumentTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var confiscationLocationId = runtimeEntityType.AddProperty(
                "ConfiscationLocationId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("ConfiscationLocationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<ConfiscationLocationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            confiscationLocationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var confiscationStatusId = runtimeEntityType.AddProperty(
                "ConfiscationStatusId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("ConfiscationStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<ConfiscationStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            confiscationStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(DriverDatum).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdDate = runtimeEntityType.AddProperty(
                "CreatedDate",
                typeof(DateTime?),
                propertyInfo: typeof(DriverDatum).GetProperty("CreatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<CreatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            createdDate.AddAnnotation("Relational:ColumnType", "datetime");
            createdDate.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createdDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDrinkingStatusId = runtimeEntityType.AddProperty(
                "DriverDrinkingStatusId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("DriverDrinkingStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<DriverDrinkingStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverDrinkingStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverStatusId = runtimeEntityType.AddProperty(
                "DriverStatusId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("DriverStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<DriverStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var educationStatusId = runtimeEntityType.AddProperty(
                "EducationStatusId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("EducationStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<EducationStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            educationStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escapedStatusId = runtimeEntityType.AddProperty(
                "EscapedStatusId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("EscapedStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<EscapedStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            escapedStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expiryDate = runtimeEntityType.AddProperty(
                "ExpiryDate",
                typeof(DateTime?),
                propertyInfo: typeof(DriverDatum).GetProperty("ExpiryDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<ExpiryDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            expiryDate.AddAnnotation("Relational:ColumnType", "datetime");
            expiryDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var genderId = runtimeEntityType.AddProperty(
                "GenderId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("GenderId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<GenderId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            genderId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(DriverDatum).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isDeleted.AddAnnotation("Relational:DefaultValue", false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDriverHaveLicense = runtimeEntityType.AddProperty(
                "IsDriverHaveLicense",
                typeof(bool?),
                propertyInfo: typeof(DriverDatum).GetProperty("IsDriverHaveLicense", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<IsDriverHaveLicense>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDriverHaveLicense.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isWanted = runtimeEntityType.AddProperty(
                "IsWanted",
                typeof(bool?),
                propertyInfo: typeof(DriverDatum).GetProperty("IsWanted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<IsWanted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isWanted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var issueDate = runtimeEntityType.AddProperty(
                "IssueDate",
                typeof(DateTime?),
                propertyInfo: typeof(DriverDatum).GetProperty("IssueDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<IssueDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            issueDate.AddAnnotation("Relational:ColumnType", "datetime");
            issueDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licenseCategoryId = runtimeEntityType.AddProperty(
                "LicenseCategoryId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("LicenseCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<LicenseCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            licenseCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licenseNumber = runtimeEntityType.AddProperty(
                "LicenseNumber",
                typeof(string),
                propertyInfo: typeof(DriverDatum).GetProperty("LicenseNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<LicenseNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            licenseNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licensePlateListSourceId = runtimeEntityType.AddProperty(
                "LicensePlateListSourceId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("LicensePlateListSourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<LicensePlateListSourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            licensePlateListSourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mobileNumber = runtimeEntityType.AddProperty(
                "MobileNumber",
                typeof(string),
                propertyInfo: typeof(DriverDatum).GetProperty("MobileNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<MobileNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            mobileNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDate = runtimeEntityType.AddProperty(
                "ModifiedDate",
                typeof(DateTime?),
                propertyInfo: typeof(DriverDatum).GetProperty("ModifiedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<ModifiedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            modifiedDate.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDate.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            modifiedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(DriverDatum).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            name.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var nationalityId = runtimeEntityType.AddProperty(
                "NationalityId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("NationalityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<NationalityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nationalityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var timeStamp = runtimeEntityType.AddProperty(
                "TimeStamp",
                typeof(byte[]),
                propertyInfo: typeof(DriverDatum).GetProperty("TimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<TimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                concurrencyToken: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            timeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trafficCode = runtimeEntityType.AddProperty(
                "TrafficCode",
                typeof(string),
                propertyInfo: typeof(DriverDatum).GetProperty("TrafficCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<TrafficCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            trafficCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataId = runtimeEntityType.AddProperty(
                "VehicleDataId",
                typeof(int?),
                propertyInfo: typeof(DriverDatum).GetProperty("VehicleDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<VehicleDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { driverDataId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__DriverDa__97BA9ADF8BB33E05");

            var index = runtimeEntityType.AddIndex(
                new[] { careerId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { confiscationDocumentTypeId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { confiscationLocationId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { confiscationStatusId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { createdBy });

            var index4 = runtimeEntityType.AddIndex(
                new[] { driverDrinkingStatusId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { driverStatusId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { educationStatusId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { escapedStatusId });

            var index8 = runtimeEntityType.AddIndex(
                new[] { genderId });

            var index9 = runtimeEntityType.AddIndex(
                new[] { licenseCategoryId });

            var index10 = runtimeEntityType.AddIndex(
                new[] { licensePlateListSourceId });

            var index11 = runtimeEntityType.AddIndex(
                new[] { nationalityId });

            var index12 = runtimeEntityType.AddIndex(
                new[] { vehicleDataId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CareerId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CareerId") }),
                principalEntityType);

            var career = declaringEntityType.AddNavigation("Career",
                runtimeForeignKey,
                onDependent: true,
                typeof(CareerDim),
                propertyInfo: typeof(DriverDatum).GetProperty("Career", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<Career>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(CareerDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CareerDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_CareerDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ConfiscationDocumentTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ConfiscationDocumentTypeId") }),
                principalEntityType);

            var confiscationDocumentType = declaringEntityType.AddNavigation("ConfiscationDocumentType",
                runtimeForeignKey,
                onDependent: true,
                typeof(ConfiscationDocumentTypeDim),
                propertyInfo: typeof(DriverDatum).GetProperty("ConfiscationDocumentType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<ConfiscationDocumentType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(ConfiscationDocumentTypeDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfiscationDocumentTypeDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_ConfiscationDocumentTypeDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ConfiscationLocationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ConfiscationLocationId") }),
                principalEntityType);

            var confiscationLocation = declaringEntityType.AddNavigation("ConfiscationLocation",
                runtimeForeignKey,
                onDependent: true,
                typeof(ConfiscationLocationDim),
                propertyInfo: typeof(DriverDatum).GetProperty("ConfiscationLocation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<ConfiscationLocation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(ConfiscationLocationDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfiscationLocationDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_ConfiscationLocationDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ConfiscationStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ConfiscationStatusId") }),
                principalEntityType);

            var confiscationStatus = declaringEntityType.AddNavigation("ConfiscationStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(ConfiscationStatusDim),
                propertyInfo: typeof(DriverDatum).GetProperty("ConfiscationStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<ConfiscationStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(ConfiscationStatusDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfiscationStatusDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_ConfiscationStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CreatedBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var createdByNavigation = declaringEntityType.AddNavigation("CreatedByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(DriverDatum).GetProperty("CreatedByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<CreatedByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(Person).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DriverDrinkingStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DriverDrinkingStatusId") }),
                principalEntityType);

            var driverDrinkingStatus = declaringEntityType.AddNavigation("DriverDrinkingStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(DriverDrinkingStatusDim),
                propertyInfo: typeof(DriverDatum).GetProperty("DriverDrinkingStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<DriverDrinkingStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(DriverDrinkingStatusDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDrinkingStatusDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_DriverDrinkingStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DriverStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DriverStatusId") }),
                principalEntityType);

            var driverStatus = declaringEntityType.AddNavigation("DriverStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(DriverStatusDim),
                propertyInfo: typeof(DriverDatum).GetProperty("DriverStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<DriverStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(DriverStatusDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverStatusDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_DriverStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EducationStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EducationStatusId") }),
                principalEntityType);

            var educationStatus = declaringEntityType.AddNavigation("EducationStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(EducationStatusDim),
                propertyInfo: typeof(DriverDatum).GetProperty("EducationStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<EducationStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(EducationStatusDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EducationStatusDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_EducationStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EscapedStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EscapedStatusId") }),
                principalEntityType);

            var escapedStatus = declaringEntityType.AddNavigation("EscapedStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(EscapedStatusDim),
                propertyInfo: typeof(DriverDatum).GetProperty("EscapedStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<EscapedStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(EscapedStatusDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EscapedStatusDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_EscapedStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("GenderId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("GenderId") }),
                principalEntityType);

            var gender = declaringEntityType.AddNavigation("Gender",
                runtimeForeignKey,
                onDependent: true,
                typeof(GenderDim),
                propertyInfo: typeof(DriverDatum).GetProperty("Gender", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<Gender>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(GenderDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GenderDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_GenderDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LicenseCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LicenseCategoryId") }),
                principalEntityType);

            var licenseCategory = declaringEntityType.AddNavigation("LicenseCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(LicenseCategoryDim),
                propertyInfo: typeof(DriverDatum).GetProperty("LicenseCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<LicenseCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(LicenseCategoryDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicenseCategoryDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_LicenseCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey12(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LicensePlateListSourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LicensePlateListSourceId") }),
                principalEntityType);

            var licensePlateListSource = declaringEntityType.AddNavigation("LicensePlateListSource",
                runtimeForeignKey,
                onDependent: true,
                typeof(LicensePlateListSourceDim),
                propertyInfo: typeof(DriverDatum).GetProperty("LicensePlateListSource", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<LicensePlateListSource>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(LicensePlateListSourceDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicensePlateListSourceDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_LicensePlateListSourceDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey13(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("NationalityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("NationalityId") }),
                principalEntityType);

            var nationality = declaringEntityType.AddNavigation("Nationality",
                runtimeForeignKey,
                onDependent: true,
                typeof(NationalityDim),
                propertyInfo: typeof(DriverDatum).GetProperty("Nationality", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<Nationality>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(NationalityDim).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(NationalityDim).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_NationalityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey14(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleDataId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleDataId") }),
                principalEntityType);

            var vehicleData = declaringEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleDatum),
                propertyInfo: typeof(DriverDatum).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DriverDatum).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var driverData = principalEntityType.AddNavigation("DriverData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DriverDatum>),
                propertyInfo: typeof(VehicleDatum).GetProperty("DriverData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<DriverData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DriverData_VehicleData");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "DriverData");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
