// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ConfWfTransactionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ConfWfTransaction",
                typeof(ConfWfTransaction),
                baseEntityType,
                propertyCount: 3,
                navigationCount: 2,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var transactionId = runtimeEntityType.AddProperty(
                "TransactionId",
                typeof(long),
                propertyInfo: typeof(ConfWfTransaction).GetProperty("TransactionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfTransaction).GetField("<TransactionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            transactionId.AddAnnotation("Relational:ColumnName", "TransactionID");
            transactionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var transactionName = runtimeEntityType.AddProperty(
                "TransactionName",
                typeof(string),
                propertyInfo: typeof(ConfWfTransaction).GetProperty("TransactionName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfTransaction).GetField("<TransactionName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            transactionName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var workFlowId = runtimeEntityType.AddProperty(
                "WorkFlowId",
                typeof(long?),
                propertyInfo: typeof(ConfWfTransaction).GetProperty("WorkFlowId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfTransaction).GetField("<WorkFlowId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            workFlowId.AddAnnotation("Relational:ColumnName", "WorkFlowID");
            workFlowId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { transactionId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { workFlowId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("WorkFlowId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("WorkFlowId") }),
                principalEntityType);

            var workFlow = declaringEntityType.AddNavigation("WorkFlow",
                runtimeForeignKey,
                onDependent: true,
                typeof(ConfWfWorkFlow),
                propertyInfo: typeof(ConfWfTransaction).GetProperty("WorkFlow", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfTransaction).GetField("<WorkFlow>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var confWfTransactions = principalEntityType.AddNavigation("ConfWfTransactions",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ConfWfTransaction>),
                propertyInfo: typeof(ConfWfWorkFlow).GetProperty("ConfWfTransactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ConfWfWorkFlow).GetField("<ConfWfTransactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ConfWF_Transaction_ConfWF_WorkFlow");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ConfWF_Transaction");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
