// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class VSketchReportDatumEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.VSketchReportDatum",
                typeof(VSketchReportDatum),
                baseEntityType,
                propertyCount: 24);

            var activityDate = runtimeEntityType.AddProperty(
                "ActivityDate",
                typeof(DateTime?),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("ActivityDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<ActivityDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            activityDate.AddAnnotation("Relational:ColumnType", "datetime");
            activityDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityDescription = runtimeEntityType.AddProperty(
                "ActivityDescription",
                typeof(string),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("ActivityDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<ActivityDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            activityDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var adpDate = runtimeEntityType.AddProperty(
                "AdpDate",
                typeof(DateTime?),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("AdpDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<AdpDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            adpDate.AddAnnotation("Relational:ColumnType", "datetime");
            adpDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var adpNumber = runtimeEntityType.AddProperty(
                "AdpNumber",
                typeof(string),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("AdpNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<AdpNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 255);
            adpNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var arcdelay = runtimeEntityType.AddProperty(
                "Arcdelay",
                typeof(string),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("Arcdelay", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<Arcdelay>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            arcdelay.AddAnnotation("Relational:ColumnName", "ARCDelay");
            arcdelay.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var areaDescription = runtimeEntityType.AddProperty(
                "AreaDescription",
                typeof(string),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("AreaDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<AreaDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            areaDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var arrival1DateTime = runtimeEntityType.AddProperty(
                "Arrival1DateTime",
                typeof(DateTime?),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("Arrival1DateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<Arrival1DateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            arrival1DateTime.AddAnnotation("Relational:ColumnType", "datetime");
            arrival1DateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var arrival2DateTime = runtimeEntityType.AddProperty(
                "Arrival2DateTime",
                typeof(DateTime?),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("Arrival2DateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<Arrival2DateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            arrival2DateTime.AddAnnotation("Relational:ColumnType", "datetime");
            arrival2DateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var arrivalToEndErc = runtimeEntityType.AddProperty(
                "ArrivalToEndErc",
                typeof(int?),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("ArrivalToEndErc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<ArrivalToEndErc>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            arrivalToEndErc.AddAnnotation("Relational:ColumnName", "ArrivalToEndERC");
            arrivalToEndErc.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var callTaker = runtimeEntityType.AddProperty(
                "CallTaker",
                typeof(string),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("CallTaker", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<CallTaker>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            callTaker.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var contactInformation = runtimeEntityType.AddProperty(
                "ContactInformation",
                typeof(string),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("ContactInformation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<ContactInformation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            contactInformation.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var contactName = runtimeEntityType.AddProperty(
                "ContactName",
                typeof(string),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("ContactName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<ContactName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            contactName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var customerDateTime = runtimeEntityType.AddProperty(
                "CustomerDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("CustomerDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<CustomerDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            customerDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            customerDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dispatcher = runtimeEntityType.AddProperty(
                "Dispatcher",
                typeof(string),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("Dispatcher", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<Dispatcher>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            dispatcher.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emirateId = runtimeEntityType.AddProperty(
                "EmirateId",
                typeof(long),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("EmirateId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<EmirateId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            emirateId.AddAnnotation("Relational:ColumnName", "EmirateID");
            emirateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var endArcdateTime = runtimeEntityType.AddProperty(
                "EndArcdateTime",
                typeof(DateTime?),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("EndArcdateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<EndArcdateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            endArcdateTime.AddAnnotation("Relational:ColumnName", "EndARCDateTime");
            endArcdateTime.AddAnnotation("Relational:ColumnType", "datetime");
            endArcdateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var hasSupport = runtimeEntityType.AddProperty(
                "HasSupport",
                typeof(string),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("HasSupport", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<HasSupport>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 1,
                unicode: false);
            hasSupport.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentGeneratedNumber = runtimeEntityType.AddProperty(
                "IncidentGeneratedNumber",
                typeof(string),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("IncidentGeneratedNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<IncidentGeneratedNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            incidentGeneratedNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var policeIncidentDateTime = runtimeEntityType.AddProperty(
                "PoliceIncidentDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("PoliceIncidentDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<PoliceIncidentDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            policeIncidentDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            policeIncidentDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestToCloseDateTime = runtimeEntityType.AddProperty(
                "RequestToCloseDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("RequestToCloseDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<RequestToCloseDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requestToCloseDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            requestToCloseDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var startArcdateTime = runtimeEntityType.AddProperty(
                "StartArcdateTime",
                typeof(DateTime?),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("StartArcdateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<StartArcdateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            startArcdateTime.AddAnnotation("Relational:ColumnName", "StartARCDateTime");
            startArcdateTime.AddAnnotation("Relational:ColumnType", "datetime");
            startArcdateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var startToEndErc = runtimeEntityType.AddProperty(
                "StartToEndErc",
                typeof(int?),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("StartToEndErc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<StartToEndErc>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            startToEndErc.AddAnnotation("Relational:ColumnName", "StartToEndERC");
            startToEndErc.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trafficExpert = runtimeEntityType.AddProperty(
                "TrafficExpert",
                typeof(string),
                propertyInfo: typeof(VSketchReportDatum).GetProperty("TrafficExpert", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSketchReportDatum).GetField("<TrafficExpert>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            trafficExpert.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "v_SketchReportData");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
