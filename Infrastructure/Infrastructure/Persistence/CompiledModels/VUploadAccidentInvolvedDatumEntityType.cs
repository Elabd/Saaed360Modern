// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class VUploadAccidentInvolvedDatumEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.VUploadAccidentInvolvedDatum",
                typeof(VUploadAccidentInvolvedDatum),
                baseEntityType,
                propertyCount: 59);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var birthDate = runtimeEntityType.AddProperty(
                "BirthDate",
                typeof(DateTime?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("BirthDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<BirthDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            birthDate.AddAnnotation("Relational:ColumnType", "datetime");
            birthDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var confiscationDocumentTypeId = runtimeEntityType.AddProperty(
                "ConfiscationDocumentTypeId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("ConfiscationDocumentTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<ConfiscationDocumentTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            confiscationDocumentTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var confiscationLocationId = runtimeEntityType.AddProperty(
                "ConfiscationLocationId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("ConfiscationLocationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<ConfiscationLocationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            confiscationLocationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var confiscationStatusId = runtimeEntityType.AddProperty(
                "ConfiscationStatusId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("ConfiscationStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<ConfiscationStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            confiscationStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var countryCode = runtimeEntityType.AddProperty(
                "CountryCode",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("CountryCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<CountryCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            countryCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverDrinkingStatusId = runtimeEntityType.AddProperty(
                "DriverDrinkingStatusId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("DriverDrinkingStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<DriverDrinkingStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverDrinkingStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var driverStatusId = runtimeEntityType.AddProperty(
                "DriverStatusId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("DriverStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<DriverStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            driverStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dtDrivingLicenseExpiryDate = runtimeEntityType.AddProperty(
                "DtDrivingLicenseExpiryDate",
                typeof(DateTime?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("DtDrivingLicenseExpiryDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<DtDrivingLicenseExpiryDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            dtDrivingLicenseExpiryDate.AddAnnotation("Relational:ColumnType", "datetime");
            dtDrivingLicenseExpiryDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dtInsuranceExpiry = runtimeEntityType.AddProperty(
                "DtInsuranceExpiry",
                typeof(DateTime?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("DtInsuranceExpiry", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<DtInsuranceExpiry>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            dtInsuranceExpiry.AddAnnotation("Relational:ColumnType", "datetime");
            dtInsuranceExpiry.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var educationStatusId = runtimeEntityType.AddProperty(
                "EducationStatusId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("EducationStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<EducationStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            educationStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emiratesId = runtimeEntityType.AddProperty(
                "EmiratesId",
                typeof(long?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("EmiratesId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<EmiratesId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            emiratesId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var engineNumber = runtimeEntityType.AddProperty(
                "EngineNumber",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("EngineNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<EngineNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            engineNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var escapedStatusId = runtimeEntityType.AddProperty(
                "EscapedStatusId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("EscapedStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<EscapedStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            escapedStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var genderId = runtimeEntityType.AddProperty(
                "GenderId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("GenderId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<GenderId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            genderId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insuranceTypeId = runtimeEntityType.AddProperty(
                "InsuranceTypeId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("InsuranceTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<InsuranceTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            insuranceTypeId.AddAnnotation("Relational:ColumnName", "InsuranceTypeID");
            insuranceTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intDrivingLicenseSourceCode = runtimeEntityType.AddProperty(
                "IntDrivingLicenseSourceCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntDrivingLicenseSourceCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntDrivingLicenseSourceCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intDrivingLicenseSourceCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intInsuranceCompanyCode = runtimeEntityType.AddProperty(
                "IntInsuranceCompanyCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntInsuranceCompanyCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntInsuranceCompanyCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intInsuranceCompanyCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intPcolorCode = runtimeEntityType.AddProperty(
                "IntPcolorCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntPcolorCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntPcolorCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intPcolorCode.AddAnnotation("Relational:ColumnName", "IntPColorCode");
            intPcolorCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intPkindCode = runtimeEntityType.AddProperty(
                "IntPkindCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntPkindCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntPkindCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intPkindCode.AddAnnotation("Relational:ColumnName", "IntPKindCode");
            intPkindCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intPointOfCrachCode = runtimeEntityType.AddProperty(
                "IntPointOfCrachCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntPointOfCrachCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntPointOfCrachCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intPointOfCrachCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intPsourceCode = runtimeEntityType.AddProperty(
                "IntPsourceCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntPsourceCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntPsourceCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intPsourceCode.AddAnnotation("Relational:ColumnName", "IntPSourceCode");
            intPsourceCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intPtypeCode = runtimeEntityType.AddProperty(
                "IntPtypeCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntPtypeCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntPtypeCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intPtypeCode.AddAnnotation("Relational:ColumnName", "IntPTypeCode");
            intPtypeCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intRoleCode = runtimeEntityType.AddProperty(
                "IntRoleCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntRoleCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntRoleCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intRoleCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intVehColorCode = runtimeEntityType.AddProperty(
                "IntVehColorCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntVehColorCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntVehColorCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intVehColorCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intVehKindCode = runtimeEntityType.AddProperty(
                "IntVehKindCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntVehKindCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntVehKindCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intVehKindCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intVehMakeCode = runtimeEntityType.AddProperty(
                "IntVehMakeCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntVehMakeCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntVehMakeCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intVehMakeCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intVehModelCode = runtimeEntityType.AddProperty(
                "IntVehModelCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntVehModelCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntVehModelCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intVehModelCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intVehNatCode = runtimeEntityType.AddProperty(
                "IntVehNatCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntVehNatCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntVehNatCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intVehNatCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intVehStatusCode = runtimeEntityType.AddProperty(
                "IntVehStatusCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntVehStatusCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntVehStatusCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intVehStatusCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intVehTypeCode = runtimeEntityType.AddProperty(
                "IntVehTypeCode",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntVehTypeCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntVehTypeCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intVehTypeCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intVehYear = runtimeEntityType.AddProperty(
                "IntVehYear",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntVehYear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntVehYear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intVehYear.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intVehYearFull = runtimeEntityType.AddProperty(
                "IntVehYearFull",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntVehYearFull", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntVehYearFull>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 100);
            intVehYearFull.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var intYear = runtimeEntityType.AddProperty(
                "IntYear",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IntYear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IntYear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            intYear.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var issueDate = runtimeEntityType.AddProperty(
                "IssueDate",
                typeof(DateTime?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("IssueDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<IssueDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            issueDate.AddAnnotation("Relational:ColumnType", "datetime");
            issueDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licenseCategoryId = runtimeEntityType.AddProperty(
                "LicenseCategoryId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("LicenseCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<LicenseCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            licenseCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lngDrivingLicenseNumber = runtimeEntityType.AddProperty(
                "LngDrivingLicenseNumber",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("LngDrivingLicenseNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<LngDrivingLicenseNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            lngDrivingLicenseNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lngOwnTcfNumber = runtimeEntityType.AddProperty(
                "LngOwnTcfNumber",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("LngOwnTcfNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<LngOwnTcfNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            lngOwnTcfNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lngTcfNumber = runtimeEntityType.AddProperty(
                "LngTcfNumber",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("LngTcfNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<LngTcfNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            lngTcfNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mobileNumber = runtimeEntityType.AddProperty(
                "MobileNumber",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("MobileNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<MobileNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            mobileNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var nationalityId = runtimeEntityType.AddProperty(
                "NationalityId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("NationalityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<NationalityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nationalityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(int),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportNumber = runtimeEntityType.AddProperty(
                "ReportNumber",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("ReportNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<ReportNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            reportNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportTypeId = runtimeEntityType.AddProperty(
                "ReportTypeId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("ReportTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<ReportTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var strChaseNumber = runtimeEntityType.AddProperty(
                "StrChaseNumber",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("StrChaseNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<StrChaseNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            strChaseNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var strDriverName = runtimeEntityType.AddProperty(
                "StrDriverName",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("StrDriverName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<StrDriverName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            strDriverName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var strDrvAwarenessDesc = runtimeEntityType.AddProperty(
                "StrDrvAwarenessDesc",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("StrDrvAwarenessDesc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<StrDrvAwarenessDesc>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 6,
                unicode: false);
            strDrvAwarenessDesc.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var strInsurancePolicy = runtimeEntityType.AddProperty(
                "StrInsurancePolicy",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("StrInsurancePolicy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<StrInsurancePolicy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 15);
            strInsurancePolicy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var strIsChemicalDanger = runtimeEntityType.AddProperty(
                "StrIsChemicalDanger",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("StrIsChemicalDanger", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<StrIsChemicalDanger>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 1,
                unicode: false);
            strIsChemicalDanger.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var strIsWinTinted = runtimeEntityType.AddProperty(
                "StrIsWinTinted",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("StrIsWinTinted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<StrIsWinTinted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 1,
                unicode: false);
            strIsWinTinted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var strOwnerName = runtimeEntityType.AddProperty(
                "StrOwnerName",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("StrOwnerName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<StrOwnerName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            strOwnerName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var strPno = runtimeEntityType.AddProperty(
                "StrPno",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("StrPno", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<StrPno>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            strPno.AddAnnotation("Relational:ColumnName", "StrPNo");
            strPno.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var strVehStatusDesc = runtimeEntityType.AddProperty(
                "StrVehStatusDesc",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("StrVehStatusDesc", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<StrVehStatusDesc>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            strVehStatusDesc.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var streetId = runtimeEntityType.AddProperty(
                "StreetId",
                typeof(long?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("StreetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<StreetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            streetId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataId = runtimeEntityType.AddProperty(
                "VehicleDataId",
                typeof(int?),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("VehicleDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<VehicleDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleStatusComment = runtimeEntityType.AddProperty(
                "VehicleStatusComment",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("VehicleStatusComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<VehicleStatusComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleStatusComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weightEmpty = runtimeEntityType.AddProperty(
                "WeightEmpty",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("WeightEmpty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<WeightEmpty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            weightEmpty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weightNonEmpty = runtimeEntityType.AddProperty(
                "WeightNonEmpty",
                typeof(string),
                propertyInfo: typeof(VUploadAccidentInvolvedDatum).GetProperty("WeightNonEmpty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VUploadAccidentInvolvedDatum).GetField("<WeightNonEmpty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            weightNonEmpty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "V_UploadAccidentInvolvedData");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
