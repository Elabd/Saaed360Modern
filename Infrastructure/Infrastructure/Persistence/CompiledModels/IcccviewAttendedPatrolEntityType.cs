// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class IcccviewAttendedPatrolEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.IcccviewAttendedPatrol",
                typeof(IcccviewAttendedPatrol),
                baseEntityType,
                propertyCount: 9);

            var finalDismissTime = runtimeEntityType.AddProperty(
                "FinalDismissTime",
                typeof(DateTime?),
                propertyInfo: typeof(IcccviewAttendedPatrol).GetProperty("FinalDismissTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IcccviewAttendedPatrol).GetField("<FinalDismissTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            finalDismissTime.AddAnnotation("Relational:ColumnType", "datetime");
            finalDismissTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var loginAcknowledgeDate = runtimeEntityType.AddProperty(
                "LoginAcknowledgeDate",
                typeof(DateTime?),
                propertyInfo: typeof(IcccviewAttendedPatrol).GetProperty("LoginAcknowledgeDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IcccviewAttendedPatrol).GetField("<LoginAcknowledgeDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            loginAcknowledgeDate.AddAnnotation("Relational:ColumnType", "datetime");
            loginAcknowledgeDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var loginAcknowledged = runtimeEntityType.AddProperty(
                "LoginAcknowledged",
                typeof(bool?),
                propertyInfo: typeof(IcccviewAttendedPatrol).GetProperty("LoginAcknowledged", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IcccviewAttendedPatrol).GetField("<LoginAcknowledged>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            loginAcknowledged.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var loginId = runtimeEntityType.AddProperty(
                "LoginId",
                typeof(long?),
                propertyInfo: typeof(IcccviewAttendedPatrol).GetProperty("LoginId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IcccviewAttendedPatrol).GetField("<LoginId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            loginId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var loginTime = runtimeEntityType.AddProperty(
                "LoginTime",
                typeof(DateTime?),
                propertyInfo: typeof(IcccviewAttendedPatrol).GetProperty("LoginTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IcccviewAttendedPatrol).GetField("<LoginTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            loginTime.AddAnnotation("Relational:ColumnType", "datetime");
            loginTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var patrolCode = runtimeEntityType.AddProperty(
                "PatrolCode",
                typeof(string),
                propertyInfo: typeof(IcccviewAttendedPatrol).GetProperty("PatrolCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IcccviewAttendedPatrol).GetField("<PatrolCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            patrolCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var patrolId = runtimeEntityType.AddProperty(
                "PatrolId",
                typeof(long),
                propertyInfo: typeof(IcccviewAttendedPatrol).GetProperty("PatrolId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IcccviewAttendedPatrol).GetField("<PatrolId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            patrolId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var returnBackTime = runtimeEntityType.AddProperty(
                "ReturnBackTime",
                typeof(DateTime?),
                propertyInfo: typeof(IcccviewAttendedPatrol).GetProperty("ReturnBackTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IcccviewAttendedPatrol).GetField("<ReturnBackTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            returnBackTime.AddAnnotation("Relational:ColumnType", "datetime");
            returnBackTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tempLogoutTime = runtimeEntityType.AddProperty(
                "TempLogoutTime",
                typeof(DateTime?),
                propertyInfo: typeof(IcccviewAttendedPatrol).GetProperty("TempLogoutTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IcccviewAttendedPatrol).GetField("<TempLogoutTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            tempLogoutTime.AddAnnotation("Relational:ColumnType", "datetime");
            tempLogoutTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "ICCCViewAttendedPatrol");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
