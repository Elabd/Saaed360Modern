// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EventsMissionsTypeEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EventsMissionsType",
                typeof(EventsMissionsType),
                baseEntityType,
                propertyCount: 4,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var eventsMissionsTypesId = runtimeEntityType.AddProperty(
                "EventsMissionsTypesId",
                typeof(long),
                propertyInfo: typeof(EventsMissionsType).GetProperty("EventsMissionsTypesId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMissionsType).GetField("<EventsMissionsTypesId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            eventsMissionsTypesId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var eventsMissionId = runtimeEntityType.AddProperty(
                "EventsMissionId",
                typeof(long),
                propertyInfo: typeof(EventsMissionsType).GetProperty("EventsMissionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMissionsType).GetField("<EventsMissionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            eventsMissionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventsMissionTypeDimId = runtimeEntityType.AddProperty(
                "EventsMissionTypeDimId",
                typeof(int),
                propertyInfo: typeof(EventsMissionsType).GetProperty("EventsMissionTypeDimId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMissionsType).GetField("<EventsMissionTypeDimId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            eventsMissionTypeDimId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeteted = runtimeEntityType.AddProperty(
                "IsDeteted",
                typeof(bool?),
                propertyInfo: typeof(EventsMissionsType).GetProperty("IsDeteted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMissionsType).GetField("<IsDeteted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDeteted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { eventsMissionsTypesId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_EventsMissionTypeRel");

            var index = runtimeEntityType.AddIndex(
                new[] { eventsMissionId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { eventsMissionTypeDimId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventsMissionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MissionId") }),
                principalEntityType,
                required: true);

            var eventsMission = declaringEntityType.AddNavigation("EventsMission",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsMission),
                propertyInfo: typeof(EventsMissionsType).GetProperty("EventsMission", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMissionsType).GetField("<EventsMission>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsMissionsTypes = principalEntityType.AddNavigation("EventsMissionsTypes",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsMissionsType>),
                propertyInfo: typeof(EventsMission).GetProperty("EventsMissionsTypes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMission).GetField("<EventsMissionsTypes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsMissionTypeRel_EventsMissions");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventsMissionTypeDimId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventMissionTypeId") }),
                principalEntityType,
                required: true);

            var eventsMissionTypeDim = declaringEntityType.AddNavigation("EventsMissionTypeDim",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsMissionTypeDim),
                propertyInfo: typeof(EventsMissionsType).GetProperty("EventsMissionTypeDim", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMissionsType).GetField("<EventsMissionTypeDim>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsMissionsTypes = principalEntityType.AddNavigation("EventsMissionsTypes",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsMissionsType>),
                propertyInfo: typeof(EventsMissionTypeDim).GetProperty("EventsMissionsTypes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsMissionTypeDim).GetField("<EventsMissionsTypes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsMissionTypeRel_EventsMissionTypeDim");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EventsMissionsTypes");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
