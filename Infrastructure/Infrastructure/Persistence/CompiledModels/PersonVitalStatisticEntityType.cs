// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PersonVitalStatisticEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PersonVitalStatistic",
                typeof(PersonVitalStatistic),
                baseEntityType,
                propertyCount: 21,
                navigationCount: 10,
                foreignKeyCount: 10,
                unnamedIndexCount: 9,
                keyCount: 1);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ethnicityId = runtimeEntityType.AddProperty(
                "EthnicityId",
                typeof(int?),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("EthnicityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<EthnicityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            ethnicityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personBirthDate = runtimeEntityType.AddProperty(
                "PersonBirthDate",
                typeof(DateTime?),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonBirthDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonBirthDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personBirthDate.AddAnnotation("Relational:ColumnType", "datetime");
            personBirthDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personBloodTypeId = runtimeEntityType.AddProperty(
                "PersonBloodTypeId",
                typeof(int?),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonBloodTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonBloodTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personBloodTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personBodyXrayId = runtimeEntityType.AddProperty(
                "PersonBodyXrayId",
                typeof(int?),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonBodyXrayId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonBodyXrayId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personBodyXrayId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personDeathCauseId = runtimeEntityType.AddProperty(
                "PersonDeathCauseId",
                typeof(int?),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonDeathCauseId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonDeathCauseId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personDeathCauseId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personDeathDate = runtimeEntityType.AddProperty(
                "PersonDeathDate",
                typeof(DateTime?),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonDeathDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonDeathDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personDeathDate.AddAnnotation("Relational:ColumnType", "datetime");
            personDeathDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personHairColorId = runtimeEntityType.AddProperty(
                "PersonHairColorId",
                typeof(int?),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonHairColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonHairColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personHairColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personHeight = runtimeEntityType.AddProperty(
                "PersonHeight",
                typeof(string),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonHeight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonHeight>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            personHeight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personHeightMin = runtimeEntityType.AddProperty(
                "PersonHeightMin",
                typeof(string),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonHeightMin", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonHeightMin>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            personHeightMin.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personHeightmax = runtimeEntityType.AddProperty(
                "PersonHeightmax",
                typeof(string),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonHeightmax", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonHeightmax>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            personHeightmax.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personMaritalStatusId = runtimeEntityType.AddProperty(
                "PersonMaritalStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonMaritalStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonMaritalStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personMaritalStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personReligionId = runtimeEntityType.AddProperty(
                "PersonReligionId",
                typeof(int),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonReligionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonReligionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            personReligionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personSexualOrientationId = runtimeEntityType.AddProperty(
                "PersonSexualOrientationId",
                typeof(int?),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonSexualOrientationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonSexualOrientationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personSexualOrientationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personSkinToneId = runtimeEntityType.AddProperty(
                "PersonSkinToneId",
                typeof(int?),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonSkinToneId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonSkinToneId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personSkinToneId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personVitalStatisticDescription = runtimeEntityType.AddProperty(
                "PersonVitalStatisticDescription",
                typeof(string),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonVitalStatisticDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonVitalStatisticDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            personVitalStatisticDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personWeight = runtimeEntityType.AddProperty(
                "PersonWeight",
                typeof(string),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonWeight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonWeight>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            personWeight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personWeightMax = runtimeEntityType.AddProperty(
                "PersonWeightMax",
                typeof(string),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonWeightMax", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonWeightMax>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            personWeightMax.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personWeightMin = runtimeEntityType.AddProperty(
                "PersonWeightMin",
                typeof(string),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonWeightMin", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonWeightMin>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            personWeightMin.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rowStatusId = runtimeEntityType.AddProperty(
                "RowStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("RowStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<RowStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            rowStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceId = runtimeEntityType.AddProperty(
                "SourceId",
                typeof(long),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("SourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<SourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            sourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { personId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { ethnicityId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { personBodyXrayId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { personHairColorId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { personMaritalStatusId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { personReligionId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { personSexualOrientationId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { personSkinToneId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { rowStatusId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { sourceId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EthnicityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EthnicityId") }),
                principalEntityType);

            var ethnicity = declaringEntityType.AddNavigation("Ethnicity",
                runtimeForeignKey,
                onDependent: true,
                typeof(EthnicityDim),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("Ethnicity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<Ethnicity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personVitalStatistics = principalEntityType.AddNavigation("PersonVitalStatistics",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonVitalStatistic>),
                propertyInfo: typeof(EthnicityDim).GetProperty("PersonVitalStatistics", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EthnicityDim).GetField("<PersonVitalStatistics>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonVitalStatistic_EthnicityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonBodyXrayId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonBodyXrayId") }),
                principalEntityType);

            var personBodyXray = declaringEntityType.AddNavigation("PersonBodyXray",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonBodyXrayDim),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonBodyXray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonBodyXray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personVitalStatistics = principalEntityType.AddNavigation("PersonVitalStatistics",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonVitalStatistic>),
                propertyInfo: typeof(PersonBodyXrayDim).GetProperty("PersonVitalStatistics", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonBodyXrayDim).GetField("<PersonVitalStatistics>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonVitalStatistic_PersonBodyXrayDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonHairColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonHairColorId") }),
                principalEntityType);

            var personHairColor = declaringEntityType.AddNavigation("PersonHairColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonHairColorDim),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonHairColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonHairColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personVitalStatistics = principalEntityType.AddNavigation("PersonVitalStatistics",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonVitalStatistic>),
                propertyInfo: typeof(PersonHairColorDim).GetProperty("PersonVitalStatistics", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonHairColorDim).GetField("<PersonVitalStatistics>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonVitalStatistic_PersonHairColorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                unique: true,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personVitalStatistic = principalEntityType.AddNavigation("PersonVitalStatistic",
                runtimeForeignKey,
                onDependent: false,
                typeof(PersonVitalStatistic),
                propertyInfo: typeof(Person).GetProperty("PersonVitalStatistic", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<PersonVitalStatistic>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonVitalStatistic_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonMaritalStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonMaritalStatusId") }),
                principalEntityType);

            var personMaritalStatus = declaringEntityType.AddNavigation("PersonMaritalStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonMaritalStatusDim),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonMaritalStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonMaritalStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personVitalStatistics = principalEntityType.AddNavigation("PersonVitalStatistics",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonVitalStatistic>),
                propertyInfo: typeof(PersonMaritalStatusDim).GetProperty("PersonVitalStatistics", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonMaritalStatusDim).GetField("<PersonVitalStatistics>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonVitalStatistic_PersonMaritalStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonReligionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonReligionId") }),
                principalEntityType,
                required: true);

            var personReligion = declaringEntityType.AddNavigation("PersonReligion",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonReligionDim),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonReligion", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonReligion>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personVitalStatistics = principalEntityType.AddNavigation("PersonVitalStatistics",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonVitalStatistic>),
                propertyInfo: typeof(PersonReligionDim).GetProperty("PersonVitalStatistics", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonReligionDim).GetField("<PersonVitalStatistics>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonVitalStatistic_PersonReligionDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonSexualOrientationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonSexualOrientationId") }),
                principalEntityType);

            var personSexualOrientation = declaringEntityType.AddNavigation("PersonSexualOrientation",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonSexualOrientationDim),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonSexualOrientation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonSexualOrientation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personVitalStatistics = principalEntityType.AddNavigation("PersonVitalStatistics",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonVitalStatistic>),
                propertyInfo: typeof(PersonSexualOrientationDim).GetProperty("PersonVitalStatistics", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonSexualOrientationDim).GetField("<PersonVitalStatistics>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonVitalStatistic_PersonSexualOrientationDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonSkinToneId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonSkinToneId") }),
                principalEntityType);

            var personSkinTone = declaringEntityType.AddNavigation("PersonSkinTone",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonSkinToneDim),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("PersonSkinTone", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<PersonSkinTone>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personVitalStatistics = principalEntityType.AddNavigation("PersonVitalStatistics",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonVitalStatistic>),
                propertyInfo: typeof(PersonSkinToneDim).GetProperty("PersonVitalStatistics", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonSkinToneDim).GetField("<PersonVitalStatistics>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonVitalStatistic_PersonSkinToneDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RowStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RowStatusId") }),
                principalEntityType);

            var rowStatus = declaringEntityType.AddNavigation("RowStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(RowStatusDim),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("RowStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<RowStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personVitalStatistics = principalEntityType.AddNavigation("PersonVitalStatistics",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonVitalStatistic>),
                propertyInfo: typeof(RowStatusDim).GetProperty("PersonVitalStatistics", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RowStatusDim).GetField("<PersonVitalStatistics>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonVitalStatistic_RowStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SourceId") }),
                principalEntityType,
                required: true);

            var source = declaringEntityType.AddNavigation("Source",
                runtimeForeignKey,
                onDependent: true,
                typeof(Source),
                propertyInfo: typeof(PersonVitalStatistic).GetProperty("Source", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonVitalStatistic).GetField("<Source>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personVitalStatistics = principalEntityType.AddNavigation("PersonVitalStatistics",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonVitalStatistic>),
                propertyInfo: typeof(Source).GetProperty("PersonVitalStatistics", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Source).GetField("<PersonVitalStatistics>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonVitalStatistic_Source");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PersonVitalStatistic");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
