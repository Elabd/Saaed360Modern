// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class VSmartDispatchingIncidentDetailEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.VSmartDispatchingIncidentDetail",
                typeof(VSmartDispatchingIncidentDetail),
                baseEntityType,
                propertyCount: 28);

            var address = runtimeEntityType.AddProperty(
                "Address",
                typeof(string),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("Address", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<Address>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            address.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var areaId = runtimeEntityType.AddProperty(
                "AreaId",
                typeof(long),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("AreaId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<AreaId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            areaId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var areaName = runtimeEntityType.AddProperty(
                "AreaName",
                typeof(string),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("AreaName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<AreaName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            areaName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var callerName = runtimeEntityType.AddProperty(
                "CallerName",
                typeof(string),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("CallerName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<CallerName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 100);
            callerName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var callerPhone = runtimeEntityType.AddProperty(
                "CallerPhone",
                typeof(string),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("CallerPhone", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<CallerPhone>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 250);
            callerPhone.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var confirmationTime = runtimeEntityType.AddProperty(
                "ConfirmationTime",
                typeof(DateTime?),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("ConfirmationTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<ConfirmationTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            confirmationTime.AddAnnotation("Relational:ColumnType", "datetime");
            confirmationTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var controlCenterId = runtimeEntityType.AddProperty(
                "ControlCenterId",
                typeof(long?),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("ControlCenterId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<ControlCenterId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            controlCenterId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            description.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dispatchTime = runtimeEntityType.AddProperty(
                "DispatchTime",
                typeof(DateTime?),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("DispatchTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<DispatchTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            dispatchTime.AddAnnotation("Relational:ColumnType", "datetime");
            dispatchTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emirateId = runtimeEntityType.AddProperty(
                "EmirateId",
                typeof(long?),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("EmirateId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<EmirateId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            emirateId.AddAnnotation("Relational:ColumnName", "EmirateID");
            emirateId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emirateName = runtimeEntityType.AddProperty(
                "EmirateName",
                typeof(string),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("EmirateName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<EmirateName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            emirateName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expectedTime = runtimeEntityType.AddProperty(
                "ExpectedTime",
                typeof(decimal?),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("ExpectedTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<ExpectedTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            expectedTime.AddAnnotation("Relational:ColumnType", "decimal(10, 2)");
            expectedTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var icccincidentId = runtimeEntityType.AddProperty(
                "IcccincidentId",
                typeof(long),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("IcccincidentId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<IcccincidentId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            icccincidentId.AddAnnotation("Relational:ColumnName", "ICCCIncidentId");
            icccincidentId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var icccincidentNumber = runtimeEntityType.AddProperty(
                "IcccincidentNumber",
                typeof(string),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("IcccincidentNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<IcccincidentNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 50);
            icccincidentNumber.AddAnnotation("Relational:ColumnName", "ICCCIncidentNumber");
            icccincidentNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var icccrequestStatus = runtimeEntityType.AddProperty(
                "IcccrequestStatus",
                typeof(string),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("IcccrequestStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<IcccrequestStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 50);
            icccrequestStatus.AddAnnotation("Relational:ColumnName", "ICCCRequestStatus");
            icccrequestStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var icccrequestStatusCode = runtimeEntityType.AddProperty(
                "IcccrequestStatusCode",
                typeof(string),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("IcccrequestStatusCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<IcccrequestStatusCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 10);
            icccrequestStatusCode.AddAnnotation("Relational:ColumnName", "ICCCRequestStatusCode");
            icccrequestStatusCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var icccrequestStatusId = runtimeEntityType.AddProperty(
                "IcccrequestStatusId",
                typeof(int),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("IcccrequestStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<IcccrequestStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            icccrequestStatusId.AddAnnotation("Relational:ColumnName", "ICCCRequestStatusId");
            icccrequestStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentPriorityId = runtimeEntityType.AddProperty(
                "IncidentPriorityId",
                typeof(int),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("IncidentPriorityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<IncidentPriorityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            incidentPriorityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var latitude = runtimeEntityType.AddProperty(
                "Latitude",
                typeof(double?),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("Latitude", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<Latitude>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            latitude.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var longitude = runtimeEntityType.AddProperty(
                "Longitude",
                typeof(double?),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("Longitude", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<Longitude>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            longitude.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var patrolId = runtimeEntityType.AddProperty(
                "PatrolId",
                typeof(long?),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("PatrolId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<PatrolId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            patrolId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long?),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requestTime = runtimeEntityType.AddProperty(
                "RequestTime",
                typeof(DateTime),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("RequestTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<RequestTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            requestTime.AddAnnotation("Relational:ColumnType", "datetime");
            requestTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceOperationRoomId = runtimeEntityType.AddProperty(
                "SourceOperationRoomId",
                typeof(int),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("SourceOperationRoomId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<SourceOperationRoomId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            sourceOperationRoomId.AddAnnotation("Relational:ColumnName", "SourceOperationRoomID");
            sourceOperationRoomId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var status = runtimeEntityType.AddProperty(
                "Status",
                typeof(string),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            status.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statusCode = runtimeEntityType.AddProperty(
                "StatusCode",
                typeof(string),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("StatusCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<StatusCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 50);
            statusCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statusId = runtimeEntityType.AddProperty(
                "StatusId",
                typeof(int),
                propertyInfo: typeof(VSmartDispatchingIncidentDetail).GetProperty("StatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VSmartDispatchingIncidentDetail).GetField("<StatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            statusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "v_SmartDispatchingIncidentDetails");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
