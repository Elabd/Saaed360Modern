// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class DrugEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Drug",
                typeof(Drug),
                baseEntityType,
                propertyCount: 7,
                navigationCount: 6,
                foreignKeyCount: 6,
                unnamedIndexCount: 5,
                keyCount: 1);

            var itemId = runtimeEntityType.AddProperty(
                "ItemId",
                typeof(long),
                propertyInfo: typeof(Drug).GetProperty("ItemId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<ItemId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            itemId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var drugCategoryId = runtimeEntityType.AddProperty(
                "DrugCategoryId",
                typeof(int?),
                propertyInfo: typeof(Drug).GetProperty("DrugCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<DrugCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            drugCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            drugCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var drugCompositionId = runtimeEntityType.AddProperty(
                "DrugCompositionId",
                typeof(int?),
                propertyInfo: typeof(Drug).GetProperty("DrugCompositionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<DrugCompositionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            drugCompositionId.AddAnnotation("Relational:DefaultValue", 1);
            drugCompositionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var drugContainerId = runtimeEntityType.AddProperty(
                "DrugContainerId",
                typeof(int?),
                propertyInfo: typeof(Drug).GetProperty("DrugContainerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<DrugContainerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            drugContainerId.AddAnnotation("Relational:DefaultValue", 1);
            drugContainerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var drugFoundId = runtimeEntityType.AddProperty(
                "DrugFoundId",
                typeof(int?),
                propertyInfo: typeof(Drug).GetProperty("DrugFoundId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<DrugFoundId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            drugFoundId.AddAnnotation("Relational:DefaultValue", 1);
            drugFoundId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var drugSubstanceFormId = runtimeEntityType.AddProperty(
                "DrugSubstanceFormId",
                typeof(int?),
                propertyInfo: typeof(Drug).GetProperty("DrugSubstanceFormId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<DrugSubstanceFormId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            drugSubstanceFormId.AddAnnotation("Relational:DefaultValue", 1);
            drugSubstanceFormId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var quantityMeasure = runtimeEntityType.AddProperty(
                "QuantityMeasure",
                typeof(double?),
                propertyInfo: typeof(Drug).GetProperty("QuantityMeasure", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<QuantityMeasure>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            quantityMeasure.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { itemId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { drugCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { drugCompositionId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { drugContainerId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { drugFoundId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { drugSubstanceFormId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DrugCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DrugCategoryId") }),
                principalEntityType);

            var drugCategory = declaringEntityType.AddNavigation("DrugCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(DrugCategoryDim),
                propertyInfo: typeof(Drug).GetProperty("DrugCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<DrugCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var drugs = principalEntityType.AddNavigation("Drugs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Drug>),
                propertyInfo: typeof(DrugCategoryDim).GetProperty("Drugs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DrugCategoryDim).GetField("<Drugs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "DrugTypeDIM_Drug_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DrugCompositionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DrugCompositionId") }),
                principalEntityType);

            var drugComposition = declaringEntityType.AddNavigation("DrugComposition",
                runtimeForeignKey,
                onDependent: true,
                typeof(DrugCompositionDim),
                propertyInfo: typeof(Drug).GetProperty("DrugComposition", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<DrugComposition>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var drugs = principalEntityType.AddNavigation("Drugs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Drug>),
                propertyInfo: typeof(DrugCompositionDim).GetProperty("Drugs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DrugCompositionDim).GetField("<Drugs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "DrugComposition_Drug_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DrugContainerId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DrugContainerId") }),
                principalEntityType);

            var drugContainer = declaringEntityType.AddNavigation("DrugContainer",
                runtimeForeignKey,
                onDependent: true,
                typeof(DrugContainerDim),
                propertyInfo: typeof(Drug).GetProperty("DrugContainer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<DrugContainer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var drugs = principalEntityType.AddNavigation("Drugs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Drug>),
                propertyInfo: typeof(DrugContainerDim).GetProperty("Drugs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DrugContainerDim).GetField("<Drugs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "DrugContainerDIM_Drug_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DrugFoundId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DrugFoundId") }),
                principalEntityType);

            var drugFound = declaringEntityType.AddNavigation("DrugFound",
                runtimeForeignKey,
                onDependent: true,
                typeof(DrugFoundDim),
                propertyInfo: typeof(Drug).GetProperty("DrugFound", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<DrugFound>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var drugs = principalEntityType.AddNavigation("Drugs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Drug>),
                propertyInfo: typeof(DrugFoundDim).GetProperty("Drugs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DrugFoundDim).GetField("<Drugs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "DrugFoundDIM_Drug_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DrugSubstanceFormId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DrugSubstanceFormId") }),
                principalEntityType);

            var drugSubstanceForm = declaringEntityType.AddNavigation("DrugSubstanceForm",
                runtimeForeignKey,
                onDependent: true,
                typeof(DrugSubstanceFormDim),
                propertyInfo: typeof(Drug).GetProperty("DrugSubstanceForm", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<DrugSubstanceForm>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var drugs = principalEntityType.AddNavigation("Drugs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Drug>),
                propertyInfo: typeof(DrugSubstanceFormDim).GetProperty("Drugs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DrugSubstanceFormDim).GetField("<Drugs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "DrugSubstanceFormDIM_Drug_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemId") }),
                principalEntityType,
                unique: true,
                required: true);

            var item = declaringEntityType.AddNavigation("Item",
                runtimeForeignKey,
                onDependent: true,
                typeof(Item),
                propertyInfo: typeof(Drug).GetProperty("Item", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Drug).GetField("<Item>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var drug = principalEntityType.AddNavigation("Drug",
                runtimeForeignKey,
                onDependent: false,
                typeof(Drug),
                propertyInfo: typeof(Item).GetProperty("Drug", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Item).GetField("<Drug>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "Object_Drug_FK1");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Drug");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
