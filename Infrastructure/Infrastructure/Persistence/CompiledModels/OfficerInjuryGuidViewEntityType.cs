// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class OfficerInjuryGuidViewEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.OfficerInjuryGuidView",
                typeof(OfficerInjuryGuidView),
                baseEntityType,
                propertyCount: 32);

            var awareOfWeapon = runtimeEntityType.AddProperty(
                "AwareOfWeapon",
                typeof(bool),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("AwareOfWeapon", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<AwareOfWeapon>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            awareOfWeapon.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var coronerNotified = runtimeEntityType.AddProperty(
                "CoronerNotified",
                typeof(bool?),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("CoronerNotified", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<CoronerNotified>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            coronerNotified.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createDateTimeStamp = runtimeEntityType.AddProperty(
                "CreateDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("CreateDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<CreateDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            createDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emsarrivedDateTime = runtimeEntityType.AddProperty(
                "EmsarrivedDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("EmsarrivedDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<EmsarrivedDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            emsarrivedDateTime.AddAnnotation("Relational:ColumnName", "EMSArrivedDateTime");
            emsarrivedDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            emsarrivedDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emsnotifiedDateTime = runtimeEntityType.AddProperty(
                "EmsnotifiedDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("EmsnotifiedDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<EmsnotifiedDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            emsnotifiedDateTime.AddAnnotation("Relational:ColumnName", "EMSNotifiedDateTime");
            emsnotifiedDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            emsnotifiedDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDead = runtimeEntityType.AddProperty(
                "IsDead",
                typeof(bool?),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("IsDead", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<IsDead>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDead.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isInjured = runtimeEntityType.AddProperty(
                "IsInjured",
                typeof(bool?),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("IsInjured", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<IsInjured>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isInjured.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var kinNotified = runtimeEntityType.AddProperty(
                "KinNotified",
                typeof(bool?),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("KinNotified", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<KinNotified>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            kinNotified.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDateTimeStamp = runtimeEntityType.AddProperty(
                "ModifiedDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("ModifiedDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<ModifiedDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var offenderFiredWeapon = runtimeEntityType.AddProperty(
                "OffenderFiredWeapon",
                typeof(bool),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("OffenderFiredWeapon", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<OffenderFiredWeapon>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            offenderFiredWeapon.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var officerActivityCode = runtimeEntityType.AddProperty(
                "OfficerActivityCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("OfficerActivityCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<OfficerActivityCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            officerActivityCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var officerAssignmentCode = runtimeEntityType.AddProperty(
                "OfficerAssignmentCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("OfficerAssignmentCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<OfficerAssignmentCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            officerAssignmentCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var officerFiredWeapon = runtimeEntityType.AddProperty(
                "OfficerFiredWeapon",
                typeof(bool),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("OfficerFiredWeapon", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<OfficerFiredWeapon>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            officerFiredWeapon.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var officerInjuryListCode = runtimeEntityType.AddProperty(
                "OfficerInjuryListCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("OfficerInjuryListCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<OfficerInjuryListCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            officerInjuryListCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var officerMeansOfAttackCode = runtimeEntityType.AddProperty(
                "OfficerMeansOfAttackCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("OfficerMeansOfAttackCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<OfficerMeansOfAttackCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            officerMeansOfAttackCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personGuid = runtimeEntityType.AddProperty(
                "PersonGuid",
                typeof(Guid),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("PersonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<PersonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personInjuryDescription = runtimeEntityType.AddProperty(
                "PersonInjuryDescription",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("PersonInjuryDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<PersonInjuryDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 300);
            personInjuryDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personInjuryGuid = runtimeEntityType.AddProperty(
                "PersonInjuryGuid",
                typeof(Guid),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("PersonInjuryGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<PersonInjuryGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personInjuryGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personInjuryLevelCode = runtimeEntityType.AddProperty(
                "PersonInjuryLevelCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("PersonInjuryLevelCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<PersonInjuryLevelCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            personInjuryLevelCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personInjuryListCode = runtimeEntityType.AddProperty(
                "PersonInjuryListCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("PersonInjuryListCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<PersonInjuryListCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            personInjuryListCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personMedicalByCode = runtimeEntityType.AddProperty(
                "PersonMedicalByCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("PersonMedicalByCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<PersonMedicalByCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            personMedicalByCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personMedicationCode = runtimeEntityType.AddProperty(
                "PersonMedicationCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("PersonMedicationCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<PersonMedicationCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            personMedicationCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personMoruaryCode = runtimeEntityType.AddProperty(
                "PersonMoruaryCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("PersonMoruaryCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<PersonMoruaryCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            personMoruaryCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personPhysicianCode = runtimeEntityType.AddProperty(
                "PersonPhysicianCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("PersonPhysicianCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<PersonPhysicianCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            personPhysicianCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personTransportedByCode = runtimeEntityType.AddProperty(
                "PersonTransportedByCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("PersonTransportedByCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<PersonTransportedByCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            personTransportedByCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var pronouncedDateTime = runtimeEntityType.AddProperty(
                "PronouncedDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("PronouncedDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<PronouncedDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            pronouncedDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            pronouncedDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rowStatusCode = runtimeEntityType.AddProperty(
                "RowStatusCode",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("RowStatusCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<RowStatusCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50,
                unicode: false);
            rowStatusCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceName = runtimeEntityType.AddProperty(
                "SourceName",
                typeof(string),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("SourceName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<SourceName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100,
                unicode: false);
            sourceName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var useWeapon = runtimeEntityType.AddProperty(
                "UseWeapon",
                typeof(bool),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("UseWeapon", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<UseWeapon>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            useWeapon.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var usedBodyAmor = runtimeEntityType.AddProperty(
                "UsedBodyAmor",
                typeof(bool),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("UsedBodyAmor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<UsedBodyAmor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            usedBodyAmor.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var yearsOfExp = runtimeEntityType.AddProperty(
                "YearsOfExp",
                typeof(int),
                propertyInfo: typeof(OfficerInjuryGuidView).GetProperty("YearsOfExp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OfficerInjuryGuidView).GetField("<YearsOfExp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            yearsOfExp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "OfficerInjuryGuidView");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
