// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class IncidentsFullDetailEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.IncidentsFullDetail",
                typeof(IncidentsFullDetail),
                baseEntityType,
                propertyCount: 38,
                keyCount: 1);

            var incidentsFullDetailsId = runtimeEntityType.AddProperty(
                "IncidentsFullDetailsId",
                typeof(long),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("IncidentsFullDetailsId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<IncidentsFullDetailsId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            incidentsFullDetailsId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var area = runtimeEntityType.AddProperty(
                "Area",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("Area", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<Area>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            area.AddAnnotation("Relational:ColumnName", "AREA");
            area.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var callTakerName = runtimeEntityType.AddProperty(
                "CallTakerName",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("CallTakerName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<CallTakerName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            callTakerName.AddAnnotation("Relational:ColumnName", "CALL_TAKER_NAME");
            callTakerName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var city = runtimeEntityType.AddProperty(
                "City",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("City", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<City>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            city.AddAnnotation("Relational:ColumnName", "CITY");
            city.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var closingComment = runtimeEntityType.AddProperty(
                "ClosingComment",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("ClosingComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<ClosingComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            closingComment.AddAnnotation("Relational:ColumnName", "CLOSING_COMMENT");
            closingComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var closingEndDatetime = runtimeEntityType.AddProperty(
                "ClosingEndDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("ClosingEndDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<ClosingEndDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            closingEndDatetime.AddAnnotation("Relational:ColumnName", "CLOSING_END_DATETIME");
            closingEndDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            closingEndDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var closingReasons = runtimeEntityType.AddProperty(
                "ClosingReasons",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("ClosingReasons", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<ClosingReasons>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            closingReasons.AddAnnotation("Relational:ColumnName", "CLOSING_REASONS");
            closingReasons.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var closingStartDatetime = runtimeEntityType.AddProperty(
                "ClosingStartDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("ClosingStartDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<ClosingStartDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            closingStartDatetime.AddAnnotation("Relational:ColumnName", "CLOSING_START_DATETIME");
            closingStartDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            closingStartDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDateTime = runtimeEntityType.AddProperty(
                "CreationDateTime",
                typeof(DateTime),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("CreationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<CreationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            creationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            creationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            description.AddAnnotation("Relational:ColumnName", "DESCRIPTION");
            description.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dispatcherName = runtimeEntityType.AddProperty(
                "DispatcherName",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("DispatcherName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<DispatcherName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            dispatcherName.AddAnnotation("Relational:ColumnName", "DISPATCHER_NAME");
            dispatcherName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var emi = runtimeEntityType.AddProperty(
                "Emi",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("Emi", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<Emi>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            emi.AddAnnotation("Relational:ColumnName", "EMI");
            emi.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var firstArrivalDatetime = runtimeEntityType.AddProperty(
                "FirstArrivalDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("FirstArrivalDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<FirstArrivalDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            firstArrivalDatetime.AddAnnotation("Relational:ColumnName", "FIRST_ARRIVAL_DATETIME");
            firstArrivalDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            firstArrivalDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var firstArrivalReasons = runtimeEntityType.AddProperty(
                "FirstArrivalReasons",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("FirstArrivalReasons", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<FirstArrivalReasons>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            firstArrivalReasons.AddAnnotation("Relational:ColumnName", "FIRST_ARRIVAL_REASONS");
            firstArrivalReasons.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var handOverDocumentsDatetime = runtimeEntityType.AddProperty(
                "HandOverDocumentsDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("HandOverDocumentsDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<HandOverDocumentsDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            handOverDocumentsDatetime.AddAnnotation("Relational:ColumnName", "HAND_OVER_DOCUMENTS_DATETIME");
            handOverDocumentsDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            handOverDocumentsDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentAssignmentDatetime = runtimeEntityType.AddProperty(
                "IncidentAssignmentDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("IncidentAssignmentDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<IncidentAssignmentDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            incidentAssignmentDatetime.AddAnnotation("Relational:ColumnName", "INCIDENT_ASSIGNMENT_DATETIME");
            incidentAssignmentDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            incidentAssignmentDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentDatetime = runtimeEntityType.AddProperty(
                "IncidentDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("IncidentDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<IncidentDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            incidentDatetime.AddAnnotation("Relational:ColumnName", "INCIDENT_DATETIME");
            incidentDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            incidentDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentMasterId = runtimeEntityType.AddProperty(
                "IncidentMasterId",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("IncidentMasterId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<IncidentMasterId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            incidentMasterId.AddAnnotation("Relational:ColumnName", "INCIDENT_MASTER_ID");
            incidentMasterId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentSourceDescription = runtimeEntityType.AddProperty(
                "IncidentSourceDescription",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("IncidentSourceDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<IncidentSourceDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            incidentSourceDescription.AddAnnotation("Relational:ColumnName", "INCIDENT_SOURCE_DESCRIPTION");
            incidentSourceDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentTypeDescription = runtimeEntityType.AddProperty(
                "IncidentTypeDescription",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("IncidentTypeDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<IncidentTypeDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            incidentTypeDescription.AddAnnotation("Relational:ColumnName", "INCIDENT_TYPE_DESCRIPTION");
            incidentTypeDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var latitude = runtimeEntityType.AddProperty(
                "Latitude",
                typeof(double?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("Latitude", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<Latitude>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            latitude.AddAnnotation("Relational:ColumnName", "LATITUDE");
            latitude.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var longitude = runtimeEntityType.AddProperty(
                "Longitude",
                typeof(double?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("Longitude", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<Longitude>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            longitude.AddAnnotation("Relational:ColumnName", "LONGITUDE");
            longitude.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var patrolCode = runtimeEntityType.AddProperty(
                "PatrolCode",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("PatrolCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<PatrolCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            patrolCode.AddAnnotation("Relational:ColumnName", "PATROL_CODE");
            patrolCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var policeDatetime = runtimeEntityType.AddProperty(
                "PoliceDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("PoliceDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<PoliceDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            policeDatetime.AddAnnotation("Relational:ColumnName", "POLICE_DATETIME");
            policeDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            policeDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var policeNo = runtimeEntityType.AddProperty(
                "PoliceNo",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("PoliceNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<PoliceNo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 255);
            policeNo.AddAnnotation("Relational:ColumnName", "POLICE_NO");
            policeNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var secondArrivalEndDatetime = runtimeEntityType.AddProperty(
                "SecondArrivalEndDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("SecondArrivalEndDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<SecondArrivalEndDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            secondArrivalEndDatetime.AddAnnotation("Relational:ColumnName", "SECOND_ARRIVAL_END_DATETIME");
            secondArrivalEndDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            secondArrivalEndDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var secondArrivalReasons = runtimeEntityType.AddProperty(
                "SecondArrivalReasons",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("SecondArrivalReasons", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<SecondArrivalReasons>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            secondArrivalReasons.AddAnnotation("Relational:ColumnName", "SECOND_ARRIVAL_REASONS");
            secondArrivalReasons.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var secondArrivalStartDatetime = runtimeEntityType.AddProperty(
                "SecondArrivalStartDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("SecondArrivalStartDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<SecondArrivalStartDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            secondArrivalStartDatetime.AddAnnotation("Relational:ColumnName", "SECOND_ARRIVAL_START_DATETIME");
            secondArrivalStartDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            secondArrivalStartDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var severityStatus = runtimeEntityType.AddProperty(
                "SeverityStatus",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("SeverityStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<SeverityStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            severityStatus.AddAnnotation("Relational:ColumnName", "SEVERITY_STATUS");
            severityStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sketchEndDatetime = runtimeEntityType.AddProperty(
                "SketchEndDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("SketchEndDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<SketchEndDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            sketchEndDatetime.AddAnnotation("Relational:ColumnName", "SKETCH_END_DATETIME");
            sketchEndDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            sketchEndDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sketchStartDatetime = runtimeEntityType.AddProperty(
                "SketchStartDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("SketchStartDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<SketchStartDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            sketchStartDatetime.AddAnnotation("Relational:ColumnName", "SKETCH_START_DATETIME");
            sketchStartDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            sketchStartDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sketchingReasons = runtimeEntityType.AddProperty(
                "SketchingReasons",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("SketchingReasons", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<SketchingReasons>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            sketchingReasons.AddAnnotation("Relational:ColumnName", "SKETCHING_REASONS");
            sketchingReasons.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trafficExpertName = runtimeEntityType.AddProperty(
                "TrafficExpertName",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("TrafficExpertName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<TrafficExpertName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            trafficExpertName.AddAnnotation("Relational:ColumnName", "TRAFFIC_EXPERT_NAME");
            trafficExpertName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trafficExpertReceiveDatetime = runtimeEntityType.AddProperty(
                "TrafficExpertReceiveDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("TrafficExpertReceiveDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<TrafficExpertReceiveDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            trafficExpertReceiveDatetime.AddAnnotation("Relational:ColumnName", "TRAFFIC_EXPERT_RECEIVE_DATETIME");
            trafficExpertReceiveDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            trafficExpertReceiveDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var transferToPoliceCenterDatetime = runtimeEntityType.AddProperty(
                "TransferToPoliceCenterDatetime",
                typeof(DateTime?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("TransferToPoliceCenterDatetime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<TransferToPoliceCenterDatetime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            transferToPoliceCenterDatetime.AddAnnotation("Relational:ColumnName", "TRANSFER_TO_POLICE_CENTER_DATETIME");
            transferToPoliceCenterDatetime.AddAnnotation("Relational:ColumnType", "datetime");
            transferToPoliceCenterDatetime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var transferToPoliceCenterReasons = runtimeEntityType.AddProperty(
                "TransferToPoliceCenterReasons",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("TransferToPoliceCenterReasons", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<TransferToPoliceCenterReasons>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            transferToPoliceCenterReasons.AddAnnotation("Relational:ColumnName", "TRANSFER_TO_POLICE_CENTER_REASONS");
            transferToPoliceCenterReasons.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var userFullName = runtimeEntityType.AddProperty(
                "UserFullName",
                typeof(string),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("UserFullName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<UserFullName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            userFullName.AddAnnotation("Relational:ColumnName", "USER_FULL_NAME");
            userFullName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(long?),
                propertyInfo: typeof(IncidentsFullDetail).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentsFullDetail).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            userId.AddAnnotation("Relational:ColumnName", "USER_ID");
            userId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { incidentsFullDetailsId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "IncidentsFullDetails");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
