// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class IncidentEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Incident",
                typeof(Incident),
                baseEntityType,
                propertyCount: 15,
                navigationCount: 6,
                foreignKeyCount: 6,
                unnamedIndexCount: 5,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(Incident).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var approvedDate = runtimeEntityType.AddProperty(
                "ApprovedDate",
                typeof(DateTime?),
                propertyInfo: typeof(Incident).GetProperty("ApprovedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<ApprovedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            approvedDate.AddAnnotation("Relational:ColumnType", "datetime");
            approvedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var exceptionalClearanceDate = runtimeEntityType.AddProperty(
                "ExceptionalClearanceDate",
                typeof(DateTime?),
                propertyInfo: typeof(Incident).GetProperty("ExceptionalClearanceDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<ExceptionalClearanceDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            exceptionalClearanceDate.AddAnnotation("Relational:ColumnType", "datetime");
            exceptionalClearanceDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var forceInvolvedIndicator = runtimeEntityType.AddProperty(
                "ForceInvolvedIndicator",
                typeof(bool?),
                propertyInfo: typeof(Incident).GetProperty("ForceInvolvedIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<ForceInvolvedIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            forceInvolvedIndicator.AddAnnotation("Relational:DefaultValue", false);
            forceInvolvedIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentActivityCategoryId = runtimeEntityType.AddProperty(
                "IncidentActivityCategoryId",
                typeof(int),
                propertyInfo: typeof(Incident).GetProperty("IncidentActivityCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<IncidentActivityCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            incidentActivityCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            incidentActivityCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentExceptionalClearanceId = runtimeEntityType.AddProperty(
                "IncidentExceptionalClearanceId",
                typeof(int?),
                propertyInfo: typeof(Incident).GetProperty("IncidentExceptionalClearanceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<IncidentExceptionalClearanceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            incidentExceptionalClearanceId.AddAnnotation("Relational:DefaultValue", 1);
            incidentExceptionalClearanceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentForceLevelId = runtimeEntityType.AddProperty(
                "IncidentForceLevelId",
                typeof(int?),
                propertyInfo: typeof(Incident).GetProperty("IncidentForceLevelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<IncidentForceLevelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            incidentForceLevelId.AddAnnotation("Relational:DefaultValue", 1);
            incidentForceLevelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentLevelId = runtimeEntityType.AddProperty(
                "IncidentLevelId",
                typeof(int?),
                propertyInfo: typeof(Incident).GetProperty("IncidentLevelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<IncidentLevelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            incidentLevelId.AddAnnotation("Relational:DefaultValue", 1);
            incidentLevelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentMethodId = runtimeEntityType.AddProperty(
                "IncidentMethodId",
                typeof(int?),
                propertyInfo: typeof(Incident).GetProperty("IncidentMethodId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<IncidentMethodId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            incidentMethodId.AddAnnotation("Relational:DefaultValue", 1);
            incidentMethodId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var involvedCivilian = runtimeEntityType.AddProperty(
                "InvolvedCivilian",
                typeof(bool?),
                propertyInfo: typeof(Incident).GetProperty("InvolvedCivilian", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<InvolvedCivilian>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            involvedCivilian.AddAnnotation("Relational:DefaultValue", false);
            involvedCivilian.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var involvedDomestic = runtimeEntityType.AddProperty(
                "InvolvedDomestic",
                typeof(bool?),
                propertyInfo: typeof(Incident).GetProperty("InvolvedDomestic", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<InvolvedDomestic>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            involvedDomestic.AddAnnotation("Relational:DefaultValue", false);
            involvedDomestic.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var involvedGang = runtimeEntityType.AddProperty(
                "InvolvedGang",
                typeof(bool?),
                propertyInfo: typeof(Incident).GetProperty("InvolvedGang", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<InvolvedGang>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            involvedGang.AddAnnotation("Relational:DefaultValue", false);
            involvedGang.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var involvedJuvenile = runtimeEntityType.AddProperty(
                "InvolvedJuvenile",
                typeof(bool?),
                propertyInfo: typeof(Incident).GetProperty("InvolvedJuvenile", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<InvolvedJuvenile>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            involvedJuvenile.AddAnnotation("Relational:DefaultValue", false);
            involvedJuvenile.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var involvedSenior = runtimeEntityType.AddProperty(
                "InvolvedSenior",
                typeof(bool?),
                propertyInfo: typeof(Incident).GetProperty("InvolvedSenior", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<InvolvedSenior>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            involvedSenior.AddAnnotation("Relational:DefaultValue", false);
            involvedSenior.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var involvedSubstance = runtimeEntityType.AddProperty(
                "InvolvedSubstance",
                typeof(bool?),
                propertyInfo: typeof(Incident).GetProperty("InvolvedSubstance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<InvolvedSubstance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            involvedSubstance.AddAnnotation("Relational:DefaultValue", false);
            involvedSubstance.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_Incident_1");

            var index = runtimeEntityType.AddIndex(
                new[] { incidentActivityCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { incidentExceptionalClearanceId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { incidentForceLevelId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { incidentLevelId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { incidentMethodId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(Incident).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var incident = principalEntityType.AddNavigation("Incident",
                runtimeForeignKey,
                onDependent: false,
                typeof(Incident),
                propertyInfo: typeof(Activity).GetProperty("Incident", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<Incident>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Incident_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IncidentActivityCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IncidentActivityCategoryId") }),
                principalEntityType,
                required: true);

            var incidentActivityCategory = declaringEntityType.AddNavigation("IncidentActivityCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(IncidentActivityCategoryDim),
                propertyInfo: typeof(Incident).GetProperty("IncidentActivityCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<IncidentActivityCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var incidents = principalEntityType.AddNavigation("Incidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Incident>),
                propertyInfo: typeof(IncidentActivityCategoryDim).GetProperty("Incidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentActivityCategoryDim).GetField("<Incidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "IncidentCategoryTypeDIM_Incident_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IncidentExceptionalClearanceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IncidentExceptionalClearanceId") }),
                principalEntityType);

            var incidentExceptionalClearance = declaringEntityType.AddNavigation("IncidentExceptionalClearance",
                runtimeForeignKey,
                onDependent: true,
                typeof(IncidentExceptionalClearanceDim),
                propertyInfo: typeof(Incident).GetProperty("IncidentExceptionalClearance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<IncidentExceptionalClearance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var incidents = principalEntityType.AddNavigation("Incidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Incident>),
                propertyInfo: typeof(IncidentExceptionalClearanceDim).GetProperty("Incidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentExceptionalClearanceDim).GetField("<Incidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "IncidentExceptionalClearanceDIM_Incident_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IncidentForceLevelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IncidentForceLevelId") }),
                principalEntityType);

            var incidentForceLevel = declaringEntityType.AddNavigation("IncidentForceLevel",
                runtimeForeignKey,
                onDependent: true,
                typeof(IncidentForceLevelDim),
                propertyInfo: typeof(Incident).GetProperty("IncidentForceLevel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<IncidentForceLevel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var incidents = principalEntityType.AddNavigation("Incidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Incident>),
                propertyInfo: typeof(IncidentForceLevelDim).GetProperty("Incidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentForceLevelDim).GetField("<Incidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "IncidentForceTypeDIM_Incident_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IncidentLevelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IncidentLevelId") }),
                principalEntityType);

            var incidentLevel = declaringEntityType.AddNavigation("IncidentLevel",
                runtimeForeignKey,
                onDependent: true,
                typeof(IncidentLevelDim),
                propertyInfo: typeof(Incident).GetProperty("IncidentLevel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<IncidentLevel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var incidents = principalEntityType.AddNavigation("Incidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Incident>),
                propertyInfo: typeof(IncidentLevelDim).GetProperty("Incidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentLevelDim).GetField("<Incidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "IncidentLevelDIM_Incident_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IncidentMethodId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("IncidentMethodId") }),
                principalEntityType);

            var incidentMethod = declaringEntityType.AddNavigation("IncidentMethod",
                runtimeForeignKey,
                onDependent: true,
                typeof(IncidentMethodDim),
                propertyInfo: typeof(Incident).GetProperty("IncidentMethod", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Incident).GetField("<IncidentMethod>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var incidents = principalEntityType.AddNavigation("Incidents",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Incident>),
                propertyInfo: typeof(IncidentMethodDim).GetProperty("Incidents", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentMethodDim).GetField("<Incidents>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "IncidentMethodDIM_Incident_FK1");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Incident");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
