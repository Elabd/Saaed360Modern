// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EventsPersonEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EventsPerson",
                typeof(EventsPerson),
                baseEntityType,
                propertyCount: 10,
                navigationCount: 6,
                foreignKeyCount: 5,
                unnamedIndexCount: 5,
                keyCount: 1);

            var eventPersonId = runtimeEntityType.AddProperty(
                "EventPersonId",
                typeof(long),
                propertyInfo: typeof(EventsPerson).GetProperty("EventPersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<EventPersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            eventPersonId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(EventsPerson).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDateTime = runtimeEntityType.AddProperty(
                "CreationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(EventsPerson).GetProperty("CreationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<CreationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            creationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            creationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventId = runtimeEntityType.AddProperty(
                "EventId",
                typeof(long?),
                propertyInfo: typeof(EventsPerson).GetProperty("EventId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<EventId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventsEmployeeTypeId = runtimeEntityType.AddProperty(
                "EventsEmployeeTypeId",
                typeof(int?),
                propertyInfo: typeof(EventsPerson).GetProperty("EventsEmployeeTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<EventsEmployeeTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventsEmployeeTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var eventsPersonJobTypeId = runtimeEntityType.AddProperty(
                "EventsPersonJobTypeId",
                typeof(int?),
                propertyInfo: typeof(EventsPerson).GetProperty("EventsPersonJobTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<EventsPersonJobTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventsPersonJobTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeteted = runtimeEntityType.AddProperty(
                "IsDeteted",
                typeof(bool?),
                propertyInfo: typeof(EventsPerson).GetProperty("IsDeteted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<IsDeteted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDeteted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isPrivateVehicleUsed = runtimeEntityType.AddProperty(
                "IsPrivateVehicleUsed",
                typeof(bool?),
                propertyInfo: typeof(EventsPerson).GetProperty("IsPrivateVehicleUsed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<IsPrivateVehicleUsed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isPrivateVehicleUsed.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modificationDateTime = runtimeEntityType.AddProperty(
                "ModificationDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(EventsPerson).GetProperty("ModificationDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<ModificationDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modificationDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            modificationDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long?),
                propertyInfo: typeof(EventsPerson).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { eventPersonId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { createdBy });

            var index0 = runtimeEntityType.AddIndex(
                new[] { eventId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { eventsEmployeeTypeId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { eventsPersonJobTypeId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { personId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CreatedBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var createdByNavigation = declaringEntityType.AddNavigation("CreatedByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(EventsPerson).GetProperty("CreatedByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<CreatedByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsPersonCreatedByNavigations = principalEntityType.AddNavigation("EventsPersonCreatedByNavigations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsPerson>),
                propertyInfo: typeof(Person).GetProperty("EventsPersonCreatedByNavigations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<EventsPersonCreatedByNavigations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__EventsPer__Creat__018DF0F7");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventId") }),
                principalEntityType);

            var @event = declaringEntityType.AddNavigation("Event",
                runtimeForeignKey,
                onDependent: true,
                typeof(Event),
                propertyInfo: typeof(EventsPerson).GetProperty("Event", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<Event>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsPeople = principalEntityType.AddNavigation("EventsPeople",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsPerson>),
                propertyInfo: typeof(Event).GetProperty("EventsPeople", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Event).GetField("<EventsPeople>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsPersons_Events");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventsEmployeeTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventEmployeeTypeId") }),
                principalEntityType);

            var eventsEmployeeType = declaringEntityType.AddNavigation("EventsEmployeeType",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsEmployeeTypeDim),
                propertyInfo: typeof(EventsPerson).GetProperty("EventsEmployeeType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<EventsEmployeeType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsPeople = principalEntityType.AddNavigation("EventsPeople",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsPerson>),
                propertyInfo: typeof(EventsEmployeeTypeDim).GetProperty("EventsPeople", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsEmployeeTypeDim).GetField("<EventsPeople>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsPersons_EventsEmployeeType");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EventsPersonJobTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EventsPersonJobTypeId") }),
                principalEntityType);

            var eventsPersonJobType = declaringEntityType.AddNavigation("EventsPersonJobType",
                runtimeForeignKey,
                onDependent: true,
                typeof(EventsPersonJobTypeDim),
                propertyInfo: typeof(EventsPerson).GetProperty("EventsPersonJobType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<EventsPersonJobType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsPeople = principalEntityType.AddNavigation("EventsPeople",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsPerson>),
                propertyInfo: typeof(EventsPersonJobTypeDim).GetProperty("EventsPeople", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPersonJobTypeDim).GetField("<EventsPeople>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsPersons_EventsPersonJobType");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(EventsPerson).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EventsPerson).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var eventsPersonPeople = principalEntityType.AddNavigation("EventsPersonPeople",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EventsPerson>),
                propertyInfo: typeof(Person).GetProperty("EventsPersonPeople", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<EventsPersonPeople>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_EventsPersons_Person");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EventsPersons");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
