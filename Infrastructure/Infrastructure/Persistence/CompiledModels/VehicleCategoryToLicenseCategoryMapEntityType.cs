// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class VehicleCategoryToLicenseCategoryMapEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.VehicleCategoryToLicenseCategoryMap",
                typeof(VehicleCategoryToLicenseCategoryMap),
                baseEntityType,
                propertyCount: 3,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(VehicleCategoryToLicenseCategoryMap).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleCategoryToLicenseCategoryMap).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licenseCategoryId = runtimeEntityType.AddProperty(
                "LicenseCategoryId",
                typeof(int),
                propertyInfo: typeof(VehicleCategoryToLicenseCategoryMap).GetProperty("LicenseCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleCategoryToLicenseCategoryMap).GetField("<LicenseCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            licenseCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleCategoryId = runtimeEntityType.AddProperty(
                "VehicleCategoryId",
                typeof(int),
                propertyInfo: typeof(VehicleCategoryToLicenseCategoryMap).GetProperty("VehicleCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleCategoryToLicenseCategoryMap).GetField("<VehicleCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            vehicleCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__VehicleC__3214EC076DB209D3");

            var index = runtimeEntityType.AddIndex(
                new[] { licenseCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { vehicleCategoryId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LicenseCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LicenseCategoryId") }),
                principalEntityType,
                required: true);

            var licenseCategory = declaringEntityType.AddNavigation("LicenseCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(LicenseCategoryDim),
                propertyInfo: typeof(VehicleCategoryToLicenseCategoryMap).GetProperty("LicenseCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleCategoryToLicenseCategoryMap).GetField("<LicenseCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleCategoryToLicenseCategoryMaps = principalEntityType.AddNavigation("VehicleCategoryToLicenseCategoryMaps",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleCategoryToLicenseCategoryMap>),
                propertyInfo: typeof(LicenseCategoryDim).GetProperty("VehicleCategoryToLicenseCategoryMaps", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(LicenseCategoryDim).GetField("<VehicleCategoryToLicenseCategoryMaps>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__VehicleCa__Licen__07079E82");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleCategoryId") }),
                principalEntityType,
                required: true);

            var vehicleCategory = declaringEntityType.AddNavigation("VehicleCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleCategoryDim),
                propertyInfo: typeof(VehicleCategoryToLicenseCategoryMap).GetProperty("VehicleCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleCategoryToLicenseCategoryMap).GetField("<VehicleCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleCategoryToLicenseCategoryMaps = principalEntityType.AddNavigation("VehicleCategoryToLicenseCategoryMaps",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleCategoryToLicenseCategoryMap>),
                propertyInfo: typeof(VehicleCategoryDim).GetProperty("VehicleCategoryToLicenseCategoryMaps", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleCategoryDim).GetField("<VehicleCategoryToLicenseCategoryMaps>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__VehicleCa__Vehic__07FBC2BB");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "VehicleCategoryToLicenseCategoryMap");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
