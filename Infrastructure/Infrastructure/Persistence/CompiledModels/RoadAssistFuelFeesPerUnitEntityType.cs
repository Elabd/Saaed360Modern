// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class RoadAssistFuelFeesPerUnitEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.RoadAssistFuelFeesPerUnit",
                typeof(RoadAssistFuelFeesPerUnit),
                baseEntityType,
                propertyCount: 13,
                navigationCount: 7,
                foreignKeyCount: 6,
                unnamedIndexCount: 6,
                keyCount: 1);

            var fuelFeesPerUnitId = runtimeEntityType.AddProperty(
                "FuelFeesPerUnitId",
                typeof(Guid),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("FuelFeesPerUnitId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<FuelFeesPerUnitId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            fuelFeesPerUnitId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdByUserId = runtimeEntityType.AddProperty(
                "CreatedByUserId",
                typeof(Guid),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("CreatedByUserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<CreatedByUserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            createdByUserId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var creationDate = runtimeEntityType.AddProperty(
                "CreationDate",
                typeof(DateTime),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("CreationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<CreationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            creationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var effectiveEndDate = runtimeEntityType.AddProperty(
                "EffectiveEndDate",
                typeof(DateTime?),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("EffectiveEndDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<EffectiveEndDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            effectiveEndDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var effectiveStartDate = runtimeEntityType.AddProperty(
                "EffectiveStartDate",
                typeof(DateTime),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("EffectiveStartDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<EffectiveStartDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            effectiveStartDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fuelPackageId = runtimeEntityType.AddProperty(
                "FuelPackageId",
                typeof(Guid),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("FuelPackageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<FuelPackageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            fuelPackageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fuelTypeId = runtimeEntityType.AddProperty(
                "FuelTypeId",
                typeof(Guid),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("FuelTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<FuelTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            fuelTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastModificationDate = runtimeEntityType.AddProperty(
                "LastModificationDate",
                typeof(DateTime?),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("LastModificationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<LastModificationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastModificationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastModifiedByUserId = runtimeEntityType.AddProperty(
                "LastModifiedByUserId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("LastModifiedByUserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<LastModifiedByUserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastModifiedByUserId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var pricePerUnit = runtimeEntityType.AddProperty(
                "PricePerUnit",
                typeof(decimal),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("PricePerUnit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<PricePerUnit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            pricePerUnit.AddAnnotation("Relational:ColumnType", "decimal(18, 2)");
            pricePerUnit.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var providerBranchId = runtimeEntityType.AddProperty(
                "ProviderBranchId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("ProviderBranchId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<ProviderBranchId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            providerBranchId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var providerId = runtimeEntityType.AddProperty(
                "ProviderId",
                typeof(Guid?),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("ProviderId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<ProviderId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            providerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { fuelFeesPerUnitId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__RoadAssi__EA95806A405FA4E4");

            var index = runtimeEntityType.AddIndex(
                new[] { createdByUserId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { fuelPackageId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { fuelTypeId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { lastModifiedByUserId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { providerBranchId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { providerId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CreatedByUserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("UserId") }),
                principalEntityType,
                required: true);

            var createdByUser = declaringEntityType.AddNavigation("CreatedByUser",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistUser),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("CreatedByUser", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<CreatedByUser>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistFuelFeesPerUnitCreatedByUsers = principalEntityType.AddNavigation("RoadAssistFuelFeesPerUnitCreatedByUsers",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistFuelFeesPerUnit>),
                propertyInfo: typeof(RoadAssistUser).GetProperty("RoadAssistFuelFeesPerUnitCreatedByUsers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistUser).GetField("<RoadAssistFuelFeesPerUnitCreatedByUsers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__Creat__484B51FA");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FuelPackageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FuelPackageId") }),
                principalEntityType,
                required: true);

            var fuelPackage = declaringEntityType.AddNavigation("FuelPackage",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistFuelPackageDim),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("FuelPackage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<FuelPackage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistFuelFeesPerUnits = principalEntityType.AddNavigation("RoadAssistFuelFeesPerUnits",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistFuelFeesPerUnit>),
                propertyInfo: typeof(RoadAssistFuelPackageDim).GetProperty("RoadAssistFuelFeesPerUnits", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelPackageDim).GetField("<RoadAssistFuelFeesPerUnits>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__FuelP__62FF4836");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FuelTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FuelTypeId") }),
                principalEntityType,
                required: true);

            var fuelType = declaringEntityType.AddNavigation("FuelType",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistFuelTypeDim),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("FuelType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<FuelType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistFuelFeesPerUnits = principalEntityType.AddNavigation("RoadAssistFuelFeesPerUnits",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistFuelFeesPerUnit>),
                propertyInfo: typeof(RoadAssistFuelTypeDim).GetProperty("RoadAssistFuelFeesPerUnits", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelTypeDim).GetField("<RoadAssistFuelFeesPerUnits>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__FuelT__4B27BEA5");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LastModifiedByUserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("UserId") }),
                principalEntityType);

            var lastModifiedByUser = declaringEntityType.AddNavigation("LastModifiedByUser",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistUser),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("LastModifiedByUser", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<LastModifiedByUser>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistFuelFeesPerUnitLastModifiedByUsers = principalEntityType.AddNavigation("RoadAssistFuelFeesPerUnitLastModifiedByUsers",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistFuelFeesPerUnit>),
                propertyInfo: typeof(RoadAssistUser).GetProperty("RoadAssistFuelFeesPerUnitLastModifiedByUsers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistUser).GetField("<RoadAssistFuelFeesPerUnitLastModifiedByUsers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__LastM__493F7633");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProviderBranchId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("BranchId") }),
                principalEntityType);

            var providerBranch = declaringEntityType.AddNavigation("ProviderBranch",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistProviderBranch),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("ProviderBranch", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<ProviderBranch>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistFuelFeesPerUnits = principalEntityType.AddNavigation("RoadAssistFuelFeesPerUnits",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistFuelFeesPerUnit>),
                propertyInfo: typeof(RoadAssistProviderBranch).GetProperty("RoadAssistFuelFeesPerUnits", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistProviderBranch).GetField("<RoadAssistFuelFeesPerUnits>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_FuelFeesPerUnit_ProviderBranchId");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ProviderId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ProviderId") }),
                principalEntityType);

            var provider = declaringEntityType.AddNavigation("Provider",
                runtimeForeignKey,
                onDependent: true,
                typeof(RoadAssistProvider),
                propertyInfo: typeof(RoadAssistFuelFeesPerUnit).GetProperty("Provider", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistFuelFeesPerUnit).GetField("<Provider>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var roadAssistFuelFeesPerUnits = principalEntityType.AddNavigation("RoadAssistFuelFeesPerUnits",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RoadAssistFuelFeesPerUnit>),
                propertyInfo: typeof(RoadAssistProvider).GetProperty("RoadAssistFuelFeesPerUnits", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RoadAssistProvider).GetField("<RoadAssistFuelFeesPerUnits>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RoadAssis__Provi__4A339A6C");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "RoadAssistFuelFeesPerUnit");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
