// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class VehicleDamagePartEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.VehicleDamagePart",
                typeof(VehicleDamagePart),
                baseEntityType,
                propertyCount: 5,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var vehicleDamagePartId = runtimeEntityType.AddProperty(
                "VehicleDamagePartId",
                typeof(int),
                propertyInfo: typeof(VehicleDamagePart).GetProperty("VehicleDamagePartId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDamagePart).GetField("<VehicleDamagePartId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            vehicleDamagePartId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var damagePartId = runtimeEntityType.AddProperty(
                "DamagePartId",
                typeof(int),
                propertyInfo: typeof(VehicleDamagePart).GetProperty("DamagePartId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDamagePart).GetField("<DamagePartId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            damagePartId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var timeStamp = runtimeEntityType.AddProperty(
                "TimeStamp",
                typeof(byte[]),
                propertyInfo: typeof(VehicleDamagePart).GetProperty("TimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDamagePart).GetField("<TimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                concurrencyToken: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            timeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDamagePartCreatinDate = runtimeEntityType.AddProperty(
                "VehicleDamagePartCreatinDate",
                typeof(DateTime?),
                propertyInfo: typeof(VehicleDamagePart).GetProperty("VehicleDamagePartCreatinDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDamagePart).GetField("<VehicleDamagePartCreatinDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleDamagePartCreatinDate.AddAnnotation("Relational:ColumnType", "datetime");
            vehicleDamagePartCreatinDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataId = runtimeEntityType.AddProperty(
                "VehicleDataId",
                typeof(int),
                propertyInfo: typeof(VehicleDamagePart).GetProperty("VehicleDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDamagePart).GetField("<VehicleDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            vehicleDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { vehicleDamagePartId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { damagePartId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { vehicleDataId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DamagePartId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DamagePartId") }),
                principalEntityType,
                required: true);

            var damagePart = declaringEntityType.AddNavigation("DamagePart",
                runtimeForeignKey,
                onDependent: true,
                typeof(DamagePartsDim),
                propertyInfo: typeof(VehicleDamagePart).GetProperty("DamagePart", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDamagePart).GetField("<DamagePart>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleDamageParts = principalEntityType.AddNavigation("VehicleDamageParts",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDamagePart>),
                propertyInfo: typeof(DamagePartsDim).GetProperty("VehicleDamageParts", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DamagePartsDim).GetField("<VehicleDamageParts>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleDamageParts_DamagePartsDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleDataId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleDataId") }),
                principalEntityType,
                required: true);

            var vehicleData = declaringEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleDatum),
                propertyInfo: typeof(VehicleDamagePart).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDamagePart).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleDamageParts = principalEntityType.AddNavigation("VehicleDamageParts",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDamagePart>),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleDamageParts", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleDamageParts>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleDamageParts_VehicleData");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "VehicleDamageParts");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
