// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ElectronicInspectionReportDamagePartslogEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ElectronicInspectionReportDamagePartslog",
                typeof(ElectronicInspectionReportDamagePartslog),
                baseEntityType,
                propertyCount: 12,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var actionDateTime = runtimeEntityType.AddProperty(
                "ActionDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("ActionDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<ActionDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            actionDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            actionDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var actionUserId = runtimeEntityType.AddProperty(
                "ActionUserId",
                typeof(long?),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("ActionUserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<ActionUserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            actionUserId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var actionUserName = runtimeEntityType.AddProperty(
                "ActionUserName",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("ActionUserName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<ActionUserName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            actionUserName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<Comment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var damagePartId = runtimeEntityType.AddProperty(
                "DamagePartId",
                typeof(int),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("DamagePartId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<DamagePartId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            damagePartId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var damagePartName = runtimeEntityType.AddProperty(
                "DamagePartName",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("DamagePartName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<DamagePartName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            damagePartName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionReportId = runtimeEntityType.AddProperty(
                "ElectronicInspectionReportId",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("ElectronicInspectionReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<ElectronicInspectionReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            electronicInspectionReportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sentGroup = runtimeEntityType.AddProperty(
                "SentGroup",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("SentGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<SentGroup>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            sentGroup.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statusId = runtimeEntityType.AddProperty(
                "StatusId",
                typeof(long?),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("StatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<StatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            statusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statusName = runtimeEntityType.AddProperty(
                "StatusName",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("StatusName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<StatusName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            statusName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var userName = runtimeEntityType.AddProperty(
                "UserName",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("UserName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<UserName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 256);
            userName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { damagePartId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { electronicInspectionReportId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DamagePartId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DamagePartId") }),
                principalEntityType,
                required: true);

            var damagePart = declaringEntityType.AddNavigation("DamagePart",
                runtimeForeignKey,
                onDependent: true,
                typeof(DamagePartsDim),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("DamagePart", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<DamagePart>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionReportDamagePartslogs = principalEntityType.AddNavigation("ElectronicInspectionReportDamagePartslogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionReportDamagePartslog>),
                propertyInfo: typeof(DamagePartsDim).GetProperty("ElectronicInspectionReportDamagePartslogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DamagePartsDim).GetField("<ElectronicInspectionReportDamagePartslogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ElectronicInspectionReportDamagePartslog_DamagePartsDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ElectronicInspectionReportId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var electronicInspectionReport = declaringEntityType.AddNavigation("ElectronicInspectionReport",
                runtimeForeignKey,
                onDependent: true,
                typeof(ElectronicInspectionReport),
                propertyInfo: typeof(ElectronicInspectionReportDamagePartslog).GetProperty("ElectronicInspectionReport", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportDamagePartslog).GetField("<ElectronicInspectionReport>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionReportDamagePartslogs = principalEntityType.AddNavigation("ElectronicInspectionReportDamagePartslogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionReportDamagePartslog>),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ElectronicInspectionReportDamagePartslogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ElectronicInspectionReportDamagePartslogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ElectronicInspectionReportDamagePartslog_ElectronicInspectionReport");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ElectronicInspectionReportDamagePartslog");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
