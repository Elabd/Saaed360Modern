// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class VesselEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Vessel",
                typeof(Vessel),
                baseEntityType,
                propertyCount: 21,
                navigationCount: 6,
                foreignKeyCount: 6,
                unnamedIndexCount: 5,
                keyCount: 1);

            var itemId = runtimeEntityType.AddProperty(
                "ItemId",
                typeof(long),
                propertyInfo: typeof(Vessel).GetProperty("ItemId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<ItemId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            itemId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cruiseRangeMeasure = runtimeEntityType.AddProperty(
                "CruiseRangeMeasure",
                typeof(double?),
                propertyInfo: typeof(Vessel).GetProperty("CruiseRangeMeasure", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<CruiseRangeMeasure>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cruiseRangeMeasure.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cruiseSpeedMeasure = runtimeEntityType.AddProperty(
                "CruiseSpeedMeasure",
                typeof(double?),
                propertyInfo: typeof(Vessel).GetProperty("CruiseSpeedMeasure", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<CruiseSpeedMeasure>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cruiseSpeedMeasure.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var deadWeightMeasure = runtimeEntityType.AddProperty(
                "DeadWeightMeasure",
                typeof(double?),
                propertyInfo: typeof(Vessel).GetProperty("DeadWeightMeasure", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<DeadWeightMeasure>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            deadWeightMeasure.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var engineCylinderQuantity = runtimeEntityType.AddProperty(
                "EngineCylinderQuantity",
                typeof(int?),
                propertyInfo: typeof(Vessel).GetProperty("EngineCylinderQuantity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<EngineCylinderQuantity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            engineCylinderQuantity.AddAnnotation("Relational:DefaultValue", 0);
            engineCylinderQuantity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var engineQuanity = runtimeEntityType.AddProperty(
                "EngineQuanity",
                typeof(int?),
                propertyInfo: typeof(Vessel).GetProperty("EngineQuanity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<EngineQuanity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            engineQuanity.AddAnnotation("Relational:DefaultValue", 0);
            engineQuanity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var geoCountryId = runtimeEntityType.AddProperty(
                "GeoCountryId",
                typeof(int?),
                propertyInfo: typeof(Vessel).GetProperty("GeoCountryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<GeoCountryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            geoCountryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var hullIdentification = runtimeEntityType.AddProperty(
                "HullIdentification",
                typeof(string),
                propertyInfo: typeof(Vessel).GetProperty("HullIdentification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<HullIdentification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            hullIdentification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var imonumber = runtimeEntityType.AddProperty(
                "Imonumber",
                typeof(string),
                propertyInfo: typeof(Vessel).GetProperty("Imonumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<Imonumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            imonumber.AddAnnotation("Relational:ColumnName", "IMONumber");
            imonumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var internationalRadioCallSign = runtimeEntityType.AddProperty(
                "InternationalRadioCallSign",
                typeof(string),
                propertyInfo: typeof(Vessel).GetProperty("InternationalRadioCallSign", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<InternationalRadioCallSign>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            internationalRadioCallSign.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var licenseNumber = runtimeEntityType.AddProperty(
                "LicenseNumber",
                typeof(string),
                propertyInfo: typeof(Vessel).GetProperty("LicenseNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<LicenseNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            licenseNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mmsinumber = runtimeEntityType.AddProperty(
                "Mmsinumber",
                typeof(string),
                propertyInfo: typeof(Vessel).GetProperty("Mmsinumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<Mmsinumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            mmsinumber.AddAnnotation("Relational:ColumnName", "MMSINumber");
            mmsinumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var officalCoastGuardNumber = runtimeEntityType.AddProperty(
                "OfficalCoastGuardNumber",
                typeof(string),
                propertyInfo: typeof(Vessel).GetProperty("OfficalCoastGuardNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<OfficalCoastGuardNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            officalCoastGuardNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var portOfRegistry = runtimeEntityType.AddProperty(
                "PortOfRegistry",
                typeof(string),
                propertyInfo: typeof(Vessel).GetProperty("PortOfRegistry", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<PortOfRegistry>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            portOfRegistry.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var registrationNumber = runtimeEntityType.AddProperty(
                "RegistrationNumber",
                typeof(string),
                propertyInfo: typeof(Vessel).GetProperty("RegistrationNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<RegistrationNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            registrationNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sailNumber = runtimeEntityType.AddProperty(
                "SailNumber",
                typeof(string),
                propertyInfo: typeof(Vessel).GetProperty("SailNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<SailNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            sailNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vesselCategoryId = runtimeEntityType.AddProperty(
                "VesselCategoryId",
                typeof(int?),
                propertyInfo: typeof(Vessel).GetProperty("VesselCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<VesselCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            vesselCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            vesselCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vesselHullMaterialId = runtimeEntityType.AddProperty(
                "VesselHullMaterialId",
                typeof(int?),
                propertyInfo: typeof(Vessel).GetProperty("VesselHullMaterialId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<VesselHullMaterialId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            vesselHullMaterialId.AddAnnotation("Relational:DefaultValue", 1);
            vesselHullMaterialId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vesselHullShapeId = runtimeEntityType.AddProperty(
                "VesselHullShapeId",
                typeof(int?),
                propertyInfo: typeof(Vessel).GetProperty("VesselHullShapeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<VesselHullShapeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            vesselHullShapeId.AddAnnotation("Relational:DefaultValue", 1);
            vesselHullShapeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vesselPropulsionTypeId = runtimeEntityType.AddProperty(
                "VesselPropulsionTypeId",
                typeof(int?),
                propertyInfo: typeof(Vessel).GetProperty("VesselPropulsionTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<VesselPropulsionTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            vesselPropulsionTypeId.AddAnnotation("Relational:DefaultValue", 1);
            vesselPropulsionTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vesselRegistrationNumber = runtimeEntityType.AddProperty(
                "VesselRegistrationNumber",
                typeof(string),
                propertyInfo: typeof(Vessel).GetProperty("VesselRegistrationNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<VesselRegistrationNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            vesselRegistrationNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { itemId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_Vessel_1");

            var index = runtimeEntityType.AddIndex(
                new[] { geoCountryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { vesselCategoryId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { vesselHullMaterialId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { vesselHullShapeId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { vesselPropulsionTypeId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("GeoCountryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("GeoCountryId") }),
                principalEntityType);

            var geoCountry = declaringEntityType.AddNavigation("GeoCountry",
                runtimeForeignKey,
                onDependent: true,
                typeof(GeoCountryDim),
                propertyInfo: typeof(Vessel).GetProperty("GeoCountry", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<GeoCountry>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vessels = principalEntityType.AddNavigation("Vessels",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Vessel>),
                propertyInfo: typeof(GeoCountryDim).GetProperty("Vessels", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GeoCountryDim).GetField("<Vessels>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Vessel_GeoCountry");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemId") }),
                principalEntityType,
                unique: true,
                required: true);

            var item = declaringEntityType.AddNavigation("Item",
                runtimeForeignKey,
                onDependent: true,
                typeof(Item),
                propertyInfo: typeof(Vessel).GetProperty("Item", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<Item>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vessel = principalEntityType.AddNavigation("Vessel",
                runtimeForeignKey,
                onDependent: false,
                typeof(Vessel),
                propertyInfo: typeof(Item).GetProperty("Vessel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Item).GetField("<Vessel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "Object_Vessel_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VesselCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VesselCategoryId") }),
                principalEntityType);

            var vesselCategory = declaringEntityType.AddNavigation("VesselCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(VesselCategoryDim),
                propertyInfo: typeof(Vessel).GetProperty("VesselCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<VesselCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vessels = principalEntityType.AddNavigation("Vessels",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Vessel>),
                propertyInfo: typeof(VesselCategoryDim).GetProperty("Vessels", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VesselCategoryDim).GetField("<Vessels>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "VesselTypeDIM_Vessel_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VesselHullMaterialId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VesselHullMaterialId") }),
                principalEntityType);

            var vesselHullMaterial = declaringEntityType.AddNavigation("VesselHullMaterial",
                runtimeForeignKey,
                onDependent: true,
                typeof(VesselHullMaterialDim),
                propertyInfo: typeof(Vessel).GetProperty("VesselHullMaterial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<VesselHullMaterial>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vessels = principalEntityType.AddNavigation("Vessels",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Vessel>),
                propertyInfo: typeof(VesselHullMaterialDim).GetProperty("Vessels", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VesselHullMaterialDim).GetField("<Vessels>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Vessel_VesselHullMaterialDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VesselHullShapeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VesselHullShapeId") }),
                principalEntityType);

            var vesselHullShape = declaringEntityType.AddNavigation("VesselHullShape",
                runtimeForeignKey,
                onDependent: true,
                typeof(VesselHullShapeDim),
                propertyInfo: typeof(Vessel).GetProperty("VesselHullShape", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<VesselHullShape>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vessels = principalEntityType.AddNavigation("Vessels",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Vessel>),
                propertyInfo: typeof(VesselHullShapeDim).GetProperty("Vessels", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VesselHullShapeDim).GetField("<Vessels>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Vessel_VesselHullShapeDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VesselPropulsionTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VesselPropulsionTypeId") }),
                principalEntityType);

            var vesselPropulsionType = declaringEntityType.AddNavigation("VesselPropulsionType",
                runtimeForeignKey,
                onDependent: true,
                typeof(VesselPropulsionTypeDim),
                propertyInfo: typeof(Vessel).GetProperty("VesselPropulsionType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Vessel).GetField("<VesselPropulsionType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vessels = principalEntityType.AddNavigation("Vessels",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Vessel>),
                propertyInfo: typeof(VesselPropulsionTypeDim).GetProperty("Vessels", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VesselPropulsionTypeDim).GetField("<Vessels>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "VesselPropulsionTypeDIM_Vessel_FK1");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Vessel");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
