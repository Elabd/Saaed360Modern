// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ServiceCallEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ServiceCall",
                typeof(ServiceCall),
                baseEntityType,
                propertyCount: 22,
                navigationCount: 7,
                foreignKeyCount: 7,
                unnamedIndexCount: 6,
                namedIndexCount: 1,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(ServiceCall).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(ServiceCall).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var customerNotAnswerReasonId = runtimeEntityType.AddProperty(
                "CustomerNotAnswerReasonId",
                typeof(int?),
                propertyInfo: typeof(ServiceCall).GetProperty("CustomerNotAnswerReasonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<CustomerNotAnswerReasonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            customerNotAnswerReasonId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var hasPriorsIndicator = runtimeEntityType.AddProperty(
                "HasPriorsIndicator",
                typeof(bool?),
                propertyInfo: typeof(ServiceCall).GetProperty("HasPriorsIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<HasPriorsIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            hasPriorsIndicator.AddAnnotation("Relational:DefaultValue", false);
            hasPriorsIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var hazardCallIndicator = runtimeEntityType.AddProperty(
                "HazardCallIndicator",
                typeof(bool?),
                propertyInfo: typeof(ServiceCall).GetProperty("HazardCallIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<HazardCallIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            hazardCallIndicator.AddAnnotation("Relational:DefaultValue", false);
            hazardCallIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var icccdispatcherId = runtimeEntityType.AddProperty(
                "IcccdispatcherId",
                typeof(long?),
                propertyInfo: typeof(ServiceCall).GetProperty("IcccdispatcherId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<IcccdispatcherId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            icccdispatcherId.AddAnnotation("Relational:ColumnName", "ICCCDispatcherId");
            icccdispatcherId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var incidentGeneratedNumber = runtimeEntityType.AddProperty(
                "IncidentGeneratedNumber",
                typeof(string),
                propertyInfo: typeof(ServiceCall).GetProperty("IncidentGeneratedNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<IncidentGeneratedNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            incidentGeneratedNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isSelfInitiated = runtimeEntityType.AddProperty(
                "IsSelfInitiated",
                typeof(bool?),
                propertyInfo: typeof(ServiceCall).GetProperty("IsSelfInitiated", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<IsSelfInitiated>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isSelfInitiated.AddAnnotation("Relational:DefaultValue", false);
            isSelfInitiated.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedBy = runtimeEntityType.AddProperty(
                "ModifiedBy",
                typeof(long?),
                propertyInfo: typeof(ServiceCall).GetProperty("ModifiedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ModifiedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var outofServiceIndicator = runtimeEntityType.AddProperty(
                "OutofServiceIndicator",
                typeof(bool?),
                propertyInfo: typeof(ServiceCall).GetProperty("OutofServiceIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<OutofServiceIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            outofServiceIndicator.AddAnnotation("Relational:DefaultValue", false);
            outofServiceIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallArrivedDate = runtimeEntityType.AddProperty(
                "ServiceCallArrivedDate",
                typeof(DateTime?),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallArrivedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallArrivedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceCallArrivedDate.AddAnnotation("Relational:ColumnType", "datetime");
            serviceCallArrivedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallCategoryId = runtimeEntityType.AddProperty(
                "ServiceCallCategoryId",
                typeof(int?),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            serviceCallCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            serviceCallCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallClearedDate = runtimeEntityType.AddProperty(
                "ServiceCallClearedDate",
                typeof(DateTime?),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallClearedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallClearedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceCallClearedDate.AddAnnotation("Relational:ColumnType", "datetime");
            serviceCallClearedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallDispatchedDate = runtimeEntityType.AddProperty(
                "ServiceCallDispatchedDate",
                typeof(DateTime?),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallDispatchedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallDispatchedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceCallDispatchedDate.AddAnnotation("Relational:ColumnType", "datetime");
            serviceCallDispatchedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallEnrouteDate = runtimeEntityType.AddProperty(
                "ServiceCallEnrouteDate",
                typeof(DateTime?),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallEnrouteDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallEnrouteDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceCallEnrouteDate.AddAnnotation("Relational:ColumnType", "datetime");
            serviceCallEnrouteDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallInControlDate = runtimeEntityType.AddProperty(
                "ServiceCallInControlDate",
                typeof(DateTime?),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallInControlDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallInControlDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceCallInControlDate.AddAnnotation("Relational:ColumnType", "datetime");
            serviceCallInControlDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallIncidentTypeId = runtimeEntityType.AddProperty(
                "ServiceCallIncidentTypeId",
                typeof(int?),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallIncidentTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallIncidentTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceCallIncidentTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallPriorityId = runtimeEntityType.AddProperty(
                "ServiceCallPriorityId",
                typeof(int?),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallPriorityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallPriorityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            serviceCallPriorityId.AddAnnotation("Relational:DefaultValue", 1);
            serviceCallPriorityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallReceivedDate = runtimeEntityType.AddProperty(
                "ServiceCallReceivedDate",
                typeof(DateTime?),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallReceivedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallReceivedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceCallReceivedDate.AddAnnotation("Relational:ColumnType", "datetime");
            serviceCallReceivedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallSourceId = runtimeEntityType.AddProperty(
                "ServiceCallSourceId",
                typeof(int?),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallSourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallSourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            serviceCallSourceId.AddAnnotation("Relational:DefaultValue", 1);
            serviceCallSourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallStagedDate = runtimeEntityType.AddProperty(
                "ServiceCallStagedDate",
                typeof(DateTime?),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallStagedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallStagedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceCallStagedDate.AddAnnotation("Relational:ColumnType", "datetime");
            serviceCallStagedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var timeStamp = runtimeEntityType.AddProperty(
                "TimeStamp",
                typeof(byte[]),
                propertyInfo: typeof(ServiceCall).GetProperty("TimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<TimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                concurrencyToken: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            timeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__ServiceC__45F4A791BC7A967E");

            var index = runtimeEntityType.AddIndex(
                new[] { createdBy });

            var index0 = runtimeEntityType.AddIndex(
                new[] { modifiedBy });

            var index1 = runtimeEntityType.AddIndex(
                new[] { serviceCallCategoryId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { serviceCallIncidentTypeId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { serviceCallPriorityId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { serviceCallSourceId });

            var iX_ServiceCall_ServiceCallArrivedDate = runtimeEntityType.AddIndex(
                new[] { serviceCallArrivedDate },
                name: "IX_ServiceCall_ServiceCallArrivedDate");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(ServiceCall).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var serviceCall = principalEntityType.AddNavigation("ServiceCall",
                runtimeForeignKey,
                onDependent: false,
                typeof(ServiceCall),
                propertyInfo: typeof(Activity).GetProperty("ServiceCall", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<ServiceCall>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ServiceCall_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CreatedBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var createdByNavigation = declaringEntityType.AddNavigation("CreatedByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(ServiceCall).GetProperty("CreatedByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<CreatedByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var serviceCallCreatedByNavigations = principalEntityType.AddNavigation("ServiceCallCreatedByNavigations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ServiceCall>),
                propertyInfo: typeof(Person).GetProperty("ServiceCallCreatedByNavigations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<ServiceCallCreatedByNavigations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ServiceCall_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ModifiedBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var modifiedByNavigation = declaringEntityType.AddNavigation("ModifiedByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(ServiceCall).GetProperty("ModifiedByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ModifiedByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var serviceCallModifiedByNavigations = principalEntityType.AddNavigation("ServiceCallModifiedByNavigations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ServiceCall>),
                propertyInfo: typeof(Person).GetProperty("ServiceCallModifiedByNavigations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<ServiceCallModifiedByNavigations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ServiceCall_Person1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ServiceCallCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ServiceCallCategoryId") }),
                principalEntityType);

            var serviceCallCategory = declaringEntityType.AddNavigation("ServiceCallCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(ServiceCallCategoryDim),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var serviceCalls = principalEntityType.AddNavigation("ServiceCalls",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ServiceCall>),
                propertyInfo: typeof(ServiceCallCategoryDim).GetProperty("ServiceCalls", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCallCategoryDim).GetField("<ServiceCalls>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ServiceCall_ServiceCallCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ServiceCallIncidentTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ServiceCallIncidentTypeId") }),
                principalEntityType);

            var serviceCallIncidentType = declaringEntityType.AddNavigation("ServiceCallIncidentType",
                runtimeForeignKey,
                onDependent: true,
                typeof(ServiceCallIncidentTypeDim),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallIncidentType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallIncidentType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var serviceCalls = principalEntityType.AddNavigation("ServiceCalls",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ServiceCall>),
                propertyInfo: typeof(ServiceCallIncidentTypeDim).GetProperty("ServiceCalls", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCallIncidentTypeDim).GetField("<ServiceCalls>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ServiceCall_ServiceCallIncidentTypeDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ServiceCallPriorityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ServiceCallPriorityId") }),
                principalEntityType);

            var serviceCallPriority = declaringEntityType.AddNavigation("ServiceCallPriority",
                runtimeForeignKey,
                onDependent: true,
                typeof(ServiceCallPriorityDim),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallPriority", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallPriority>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var serviceCalls = principalEntityType.AddNavigation("ServiceCalls",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ServiceCall>),
                propertyInfo: typeof(ServiceCallPriorityDim).GetProperty("ServiceCalls", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCallPriorityDim).GetField("<ServiceCalls>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ServiceCall_ServiceCallPriorityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ServiceCallSourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ServiceCallSourceId") }),
                principalEntityType);

            var serviceCallSource = declaringEntityType.AddNavigation("ServiceCallSource",
                runtimeForeignKey,
                onDependent: true,
                typeof(ServiceCallSourceDim),
                propertyInfo: typeof(ServiceCall).GetProperty("ServiceCallSource", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCall).GetField("<ServiceCallSource>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var serviceCalls = principalEntityType.AddNavigation("ServiceCalls",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ServiceCall>),
                propertyInfo: typeof(ServiceCallSourceDim).GetProperty("ServiceCalls", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCallSourceDim).GetField("<ServiceCalls>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ServiceCall_ServiceCallSourceDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ServiceCall");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
