// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class RspVehicleDatumEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.RspVehicleDatum",
                typeof(RspVehicleDatum),
                baseEntityType,
                propertyCount: 16,
                navigationCount: 10,
                foreignKeyCount: 8,
                unnamedIndexCount: 8,
                keyCount: 1);

            var rspVehicleDataId = runtimeEntityType.AddProperty(
                "RspVehicleDataId",
                typeof(long),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("RspVehicleDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<RspVehicleDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            rspVehicleDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createdDateTime = runtimeEntityType.AddProperty(
                "CreatedDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("CreatedDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<CreatedDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            createdDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isActive = runtimeEntityType.AddProperty(
                "IsActive",
                typeof(bool?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("IsActive", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<IsActive>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isActive.AddAnnotation("Relational:DefaultValue", false);
            isActive.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isInsured = runtimeEntityType.AddProperty(
                "IsInsured",
                typeof(bool?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("IsInsured", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<IsInsured>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isInsured.AddAnnotation("Relational:DefaultValue", true);
            isInsured.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isNoVehiclePresent = runtimeEntityType.AddProperty(
                "IsNoVehiclePresent",
                typeof(bool?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("IsNoVehiclePresent", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<IsNoVehiclePresent>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isNoVehiclePresent.AddAnnotation("Relational:DefaultValue", false);
            isNoVehiclePresent.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var manufactureYearId = runtimeEntityType.AddProperty(
                "ManufactureYearId",
                typeof(int?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("ManufactureYearId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<ManufactureYearId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            manufactureYearId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDateTime = runtimeEntityType.AddProperty(
                "ModifiedDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("ModifiedDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<ModifiedDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateCategoryId = runtimeEntityType.AddProperty(
                "PlateCategoryId",
                typeof(int?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("PlateCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<PlateCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateColorId = runtimeEntityType.AddProperty(
                "PlateColorId",
                typeof(int?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("PlateColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<PlateColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateNumber = runtimeEntityType.AddProperty(
                "PlateNumber",
                typeof(string),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("PlateNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<PlateNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100,
                unicode: false);
            plateNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateSourceId = runtimeEntityType.AddProperty(
                "PlateSourceId",
                typeof(int?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("PlateSourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<PlateSourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateSourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateTypeId = runtimeEntityType.AddProperty(
                "PlateTypeId",
                typeof(int?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("PlateTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<PlateTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(int?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trafficCode = runtimeEntityType.AddProperty(
                "TrafficCode",
                typeof(string),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("TrafficCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<TrafficCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100,
                unicode: false);
            trafficCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDamagedTypeId = runtimeEntityType.AddProperty(
                "VehicleDamagedTypeId",
                typeof(long?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("VehicleDamagedTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<VehicleDamagedTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleDamagedTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleTypeId = runtimeEntityType.AddProperty(
                "VehicleTypeId",
                typeof(int?),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("VehicleTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<VehicleTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { rspVehicleDataId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__RspVehic__9F8F0E002CB460D4");

            var index = runtimeEntityType.AddIndex(
                new[] { manufactureYearId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { plateCategoryId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { plateColorId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { plateSourceId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { plateTypeId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { reportId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { vehicleDamagedTypeId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { vehicleTypeId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ManufactureYearId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("YearId") }),
                principalEntityType);

            var manufactureYear = declaringEntityType.AddNavigation("ManufactureYear",
                runtimeForeignKey,
                onDependent: true,
                typeof(YearDim),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("ManufactureYear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<ManufactureYear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlateCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemRegistrationPlateKindId") }),
                principalEntityType);

            var plateCategory = declaringEntityType.AddNavigation("PlateCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemRegistrationPlateKindDim),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("PlateCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<PlateCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var rspVehicleData = principalEntityType.AddNavigation("RspVehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RspVehicleDatum>),
                propertyInfo: typeof(ItemRegistrationPlateKindDim).GetProperty("RspVehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemRegistrationPlateKindDim).GetField("<RspVehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RspVehicl__Plate__3E9EBED3");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlateColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemRegistrationPlateColorId") }),
                principalEntityType);

            var plateColor = declaringEntityType.AddNavigation("PlateColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemRegistrationPlateColorDim),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("PlateColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<PlateColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var rspVehicleData = principalEntityType.AddNavigation("RspVehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RspVehicleDatum>),
                propertyInfo: typeof(ItemRegistrationPlateColorDim).GetProperty("RspVehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemRegistrationPlateColorDim).GetField("<RspVehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RspVehicl__Plate__3CB67661");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlateSourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PlateSourceId") }),
                principalEntityType);

            var plateSource = declaringEntityType.AddNavigation("PlateSource",
                runtimeForeignKey,
                onDependent: true,
                typeof(PlateSourceDim),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("PlateSource", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<PlateSource>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var rspVehicleData = principalEntityType.AddNavigation("RspVehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RspVehicleDatum>),
                propertyInfo: typeof(PlateSourceDim).GetProperty("RspVehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PlateSourceDim).GetField("<RspVehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RspVehicl__Plate__3F92E30C");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlateTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemRegistrationPlateCategoryId") }),
                principalEntityType);

            var plateType = declaringEntityType.AddNavigation("PlateType",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemRegistrationPlateCategoryDim),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("PlateType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<PlateType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var rspVehicleData = principalEntityType.AddNavigation("RspVehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RspVehicleDatum>),
                propertyInfo: typeof(ItemRegistrationPlateCategoryDim).GetProperty("RspVehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemRegistrationPlateCategoryDim).GetField("<RspVehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RspVehicl__Plate__3DAA9A9A");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ReportId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ReportId") }),
                principalEntityType);

            var report = declaringEntityType.AddNavigation("Report",
                runtimeForeignKey,
                onDependent: true,
                typeof(Report),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("Report", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<Report>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var rspVehicleData = principalEntityType.AddNavigation("RspVehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RspVehicleDatum>),
                propertyInfo: typeof(Report).GetProperty("RspVehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Report).GetField("<RspVehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RspVehicl__Repor__40870745");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleDamagedTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleDamagedTypeId") }),
                principalEntityType);

            var vehicleDamagedType = declaringEntityType.AddNavigation("VehicleDamagedType",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleDamagedTypeDim),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("VehicleDamagedType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<VehicleDamagedType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var rspVehicleData = principalEntityType.AddNavigation("RspVehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RspVehicleDatum>),
                propertyInfo: typeof(VehicleDamagedTypeDim).GetProperty("RspVehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDamagedTypeDim).GetField("<RspVehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RspVehicl__Vehic__44579829");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleTypeId") }),
                principalEntityType);

            var vehicleType = declaringEntityType.AddNavigation("VehicleType",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleTypeDim),
                propertyInfo: typeof(RspVehicleDatum).GetProperty("VehicleType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RspVehicleDatum).GetField("<VehicleType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var rspVehicleData = principalEntityType.AddNavigation("RspVehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<RspVehicleDatum>),
                propertyInfo: typeof(VehicleTypeDim).GetProperty("RspVehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleTypeDim).GetField("<RspVehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__RspVehicl__Vehic__417B2B7E");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "RspVehicleData");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
