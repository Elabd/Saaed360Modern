// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PaymentOrganizationInfoEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PaymentOrganizationInfo",
                typeof(PaymentOrganizationInfo),
                baseEntityType,
                propertyCount: 16,
                navigationCount: 4,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var paymentInfoId = runtimeEntityType.AddProperty(
                "PaymentInfoId",
                typeof(long),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("PaymentInfoId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<PaymentInfoId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            paymentInfoId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var balanceLastUpdate = runtimeEntityType.AddProperty(
                "BalanceLastUpdate",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("BalanceLastUpdate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<BalanceLastUpdate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            balanceLastUpdate.AddAnnotation("Relational:ColumnType", "datetime");
            balanceLastUpdate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var companyInfoId = runtimeEntityType.AddProperty(
                "CompanyInfoId",
                typeof(long?),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("CompanyInfoId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<CompanyInfoId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            companyInfoId.AddAnnotation("Relational:ColumnName", "CompanyInfoID");
            companyInfoId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var email = runtimeEntityType.AddProperty(
                "Email",
                typeof(string),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("Email", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<Email>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            email.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identificationNo = runtimeEntityType.AddProperty(
                "IdentificationNo",
                typeof(string),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("IdentificationNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<IdentificationNo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            identificationNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var mobile = runtimeEntityType.AddProperty(
                "Mobile",
                typeof(string),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("Mobile", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<Mobile>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            mobile.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var participantCode = runtimeEntityType.AddProperty(
                "ParticipantCode",
                typeof(string),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("ParticipantCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<ParticipantCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            participantCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var participantNameAr = runtimeEntityType.AddProperty(
                "ParticipantNameAr",
                typeof(string),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("ParticipantNameAr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<ParticipantNameAr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            participantNameAr.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var participantNameEn = runtimeEntityType.AddProperty(
                "ParticipantNameEn",
                typeof(string),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("ParticipantNameEn", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<ParticipantNameEn>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            participantNameEn.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var participantType = runtimeEntityType.AddProperty(
                "ParticipantType",
                typeof(int?),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("ParticipantType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<ParticipantType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            participantType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var paymentUserAccountId = runtimeEntityType.AddProperty(
                "PaymentUserAccountId",
                typeof(int?),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("PaymentUserAccountId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<PaymentUserAccountId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            paymentUserAccountId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var registrationDate = runtimeEntityType.AddProperty(
                "RegistrationDate",
                typeof(DateTime?),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("RegistrationDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<RegistrationDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            registrationDate.AddAnnotation("Relational:ColumnType", "datetime");
            registrationDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var registrationStatus = runtimeEntityType.AddProperty(
                "RegistrationStatus",
                typeof(int?),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("RegistrationStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<RegistrationStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            registrationStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var walletBalance = runtimeEntityType.AddProperty(
                "WalletBalance",
                typeof(double?),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("WalletBalance", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<WalletBalance>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            walletBalance.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var walletNo = runtimeEntityType.AddProperty(
                "WalletNo",
                typeof(long?),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("WalletNo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<WalletNo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            walletNo.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { paymentInfoId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_OrganizationPaymentInfo");

            var index = runtimeEntityType.AddIndex(
                new[] { paymentUserAccountId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PaymentUserAccountId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var paymentUserAccount = declaringEntityType.AddNavigation("PaymentUserAccount",
                runtimeForeignKey,
                onDependent: true,
                typeof(PaymentUserAccount),
                propertyInfo: typeof(PaymentOrganizationInfo).GetProperty("PaymentUserAccount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentOrganizationInfo).GetField("<PaymentUserAccount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var paymentOrganizationInfos = principalEntityType.AddNavigation("PaymentOrganizationInfos",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PaymentOrganizationInfo>),
                propertyInfo: typeof(PaymentUserAccount).GetProperty("PaymentOrganizationInfos", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PaymentUserAccount).GetField("<PaymentOrganizationInfos>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PaymentOrganizationInfo_PaymentUserAccounts");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PaymentOrganizationInfo");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
