// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class SubjectOrganizationEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.SubjectOrganization",
                typeof(SubjectOrganization),
                baseEntityType,
                propertyCount: 24,
                navigationCount: 17,
                foreignKeyCount: 17,
                unnamedIndexCount: 16,
                keyCount: 1);

            var organizationId = runtimeEntityType.AddProperty(
                "OrganizationId",
                typeof(long),
                propertyInfo: typeof(SubjectOrganization).GetProperty("OrganizationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<OrganizationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            organizationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cautionInformationId = runtimeEntityType.AddProperty(
                "CautionInformationId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CautionInformationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CautionInformationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cautionInformationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalInvolvementId = runtimeEntityType.AddProperty(
                "CriminalInvolvementId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalInvolvementId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalInvolvementId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalInvolvementId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitActivityId = runtimeEntityType.AddProperty(
                "CriminalTraitActivityId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitActivityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitColorId = runtimeEntityType.AddProperty(
                "CriminalTraitColorId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitCommunicationId = runtimeEntityType.AddProperty(
                "CriminalTraitCommunicationId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitCommunicationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitCommunicationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitCommunicationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitDressId = runtimeEntityType.AddProperty(
                "CriminalTraitDressId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitDressId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitDressId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitDressId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitEthnicityId = runtimeEntityType.AddProperty(
                "CriminalTraitEthnicityId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitEthnicityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitEthnicityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitEthnicityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitGraffitiImageGuid = runtimeEntityType.AddProperty(
                "CriminalTraitGraffitiImageGuid",
                typeof(Guid),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitGraffitiImageGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitGraffitiImageGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            criminalTraitGraffitiImageGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitGraffitiImageId = runtimeEntityType.AddProperty(
                "CriminalTraitGraffitiImageId",
                typeof(long?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitGraffitiImageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitGraffitiImageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitGraffitiImageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitHandSignalId = runtimeEntityType.AddProperty(
                "CriminalTraitHandSignalId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitHandSignalId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitHandSignalId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitHandSignalId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitId = runtimeEntityType.AddProperty(
                "CriminalTraitId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitModusOperationId = runtimeEntityType.AddProperty(
                "CriminalTraitModusOperationId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitModusOperationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitModusOperationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitModusOperationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitTargetId = runtimeEntityType.AddProperty(
                "CriminalTraitTargetId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitTargetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitTargetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitTargetId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitTattooImageGuid = runtimeEntityType.AddProperty(
                "CriminalTraitTattooImageGuid",
                typeof(Guid),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitTattooImageGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitTattooImageGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            criminalTraitTattooImageGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitTattooImageId = runtimeEntityType.AddProperty(
                "CriminalTraitTattooImageId",
                typeof(long?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitTattooImageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitTattooImageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitTattooImageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitTurfLocaitonGuid = runtimeEntityType.AddProperty(
                "CriminalTraitTurfLocaitonGuid",
                typeof(Guid),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitTurfLocaitonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitTurfLocaitonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            criminalTraitTurfLocaitonGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitTurfLocaitonId = runtimeEntityType.AddProperty(
                "CriminalTraitTurfLocaitonId",
                typeof(long?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitTurfLocaitonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitTurfLocaitonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitTurfLocaitonId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statementDate = runtimeEntityType.AddProperty(
                "StatementDate",
                typeof(DateTime?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("StatementDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<StatementDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            statementDate.AddAnnotation("Relational:ColumnType", "datetime");
            statementDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statementGuid = runtimeEntityType.AddProperty(
                "StatementGuid",
                typeof(Guid),
                propertyInfo: typeof(SubjectOrganization).GetProperty("StatementGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<StatementGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            statementGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statementId = runtimeEntityType.AddProperty(
                "StatementId",
                typeof(long?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("StatementId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<StatementId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            statementId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statementIndicator = runtimeEntityType.AddProperty(
                "StatementIndicator",
                typeof(int),
                propertyInfo: typeof(SubjectOrganization).GetProperty("StatementIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<StatementIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore,
                sentinel: 0);
            statementIndicator.AddAnnotation("Relational:ComputedColumnSql", "(case when [StatementDate] IS NULL then (0) else (1) end)");
            statementIndicator.AddAnnotation("Relational:IsStored", false);
            statementIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statusId = runtimeEntityType.AddProperty(
                "StatusId",
                typeof(int?),
                propertyInfo: typeof(SubjectOrganization).GetProperty("StatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<StatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            statusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subjectIdentificaiton = runtimeEntityType.AddProperty(
                "SubjectIdentificaiton",
                typeof(string),
                propertyInfo: typeof(SubjectOrganization).GetProperty("SubjectIdentificaiton", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<SubjectIdentificaiton>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            subjectIdentificaiton.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { organizationId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_SubjectOrganization_1");

            var index = runtimeEntityType.AddIndex(
                new[] { cautionInformationId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { criminalInvolvementId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { criminalTraitActivityId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { criminalTraitColorId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { criminalTraitCommunicationId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { criminalTraitDressId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { criminalTraitEthnicityId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { criminalTraitGraffitiImageId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { criminalTraitHandSignalId });

            var index8 = runtimeEntityType.AddIndex(
                new[] { criminalTraitId });

            var index9 = runtimeEntityType.AddIndex(
                new[] { criminalTraitModusOperationId });

            var index10 = runtimeEntityType.AddIndex(
                new[] { criminalTraitTargetId });

            var index11 = runtimeEntityType.AddIndex(
                new[] { criminalTraitTattooImageId });

            var index12 = runtimeEntityType.AddIndex(
                new[] { criminalTraitTurfLocaitonId });

            var index13 = runtimeEntityType.AddIndex(
                new[] { statementId });

            var index14 = runtimeEntityType.AddIndex(
                new[] { statusId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CautionInformationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CautionInformationId") }),
                principalEntityType);

            var cautionInformation = declaringEntityType.AddNavigation("CautionInformation",
                runtimeForeignKey,
                onDependent: true,
                typeof(CautionInformationDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CautionInformation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CautionInformation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(CautionInformationDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CautionInformationDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_CautionInformationDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalInvolvementId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalInvolvementId") }),
                principalEntityType);

            var criminalInvolvement = declaringEntityType.AddNavigation("CriminalInvolvement",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalInvolvementDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalInvolvement", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalInvolvement>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(CriminalInvolvementDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalInvolvementDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_CriminalInvolvementDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitActivityId") }),
                principalEntityType);

            var criminalTraitActivity = declaringEntityType.AddNavigation("CriminalTraitActivity",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitActivityDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitActivity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitActivity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(CriminalTraitActivityDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitActivityDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_CriminalTraitActivityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitColorId") }),
                principalEntityType);

            var criminalTraitColor = declaringEntityType.AddNavigation("CriminalTraitColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitColorDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(CriminalTraitColorDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitColorDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_CriminalTraitColorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitCommunicationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitCommunicationId") }),
                principalEntityType);

            var criminalTraitCommunication = declaringEntityType.AddNavigation("CriminalTraitCommunication",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitCommunicationDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitCommunication", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitCommunication>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(CriminalTraitCommunicationDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitCommunicationDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_CriminalTraitCommunicationDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitDressId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitDressId") }),
                principalEntityType);

            var criminalTraitDress = declaringEntityType.AddNavigation("CriminalTraitDress",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitDressDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitDress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitDress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(CriminalTraitDressDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitDressDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_CriminalTraitDressDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitEthnicityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EthnicityId") }),
                principalEntityType);

            var criminalTraitEthnicity = declaringEntityType.AddNavigation("CriminalTraitEthnicity",
                runtimeForeignKey,
                onDependent: true,
                typeof(EthnicityDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitEthnicity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitEthnicity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(EthnicityDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EthnicityDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_EthnicityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitGraffitiImageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ImageId") }),
                principalEntityType);

            var criminalTraitGraffitiImage = declaringEntityType.AddNavigation("CriminalTraitGraffitiImage",
                runtimeForeignKey,
                onDependent: true,
                typeof(Image),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitGraffitiImage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitGraffitiImage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizationCriminalTraitGraffitiImages = principalEntityType.AddNavigation("SubjectOrganizationCriminalTraitGraffitiImages",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(Image).GetProperty("SubjectOrganizationCriminalTraitGraffitiImages", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Image).GetField("<SubjectOrganizationCriminalTraitGraffitiImages>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_Image-Graffiti");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitHandSignalId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitHandSignalId") }),
                principalEntityType);

            var criminalTraitHandSignal = declaringEntityType.AddNavigation("CriminalTraitHandSignal",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitHandSignalDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitHandSignal", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitHandSignal>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(CriminalTraitHandSignalDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitHandSignalDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_CriminalTraitHandSignalDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitId") }),
                principalEntityType);

            var criminalTrait = declaringEntityType.AddNavigation("CriminalTrait",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTrait", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTrait>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(CriminalTraitDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_CriminalTraitDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitModusOperationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitModusOperandiId") }),
                principalEntityType);

            var criminalTraitModusOperation = declaringEntityType.AddNavigation("CriminalTraitModusOperation",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitModusOperandiDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitModusOperation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitModusOperation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(CriminalTraitModusOperandiDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitModusOperandiDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_CriminalTraitModusOperandiDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey12(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitTargetId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitTargetId") }),
                principalEntityType);

            var criminalTraitTarget = declaringEntityType.AddNavigation("CriminalTraitTarget",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitTargetDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitTarget", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitTarget>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(CriminalTraitTargetDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitTargetDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_CriminalTraitTargetDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey13(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitTattooImageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ImageId") }),
                principalEntityType);

            var criminalTraitTattooImage = declaringEntityType.AddNavigation("CriminalTraitTattooImage",
                runtimeForeignKey,
                onDependent: true,
                typeof(Image),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitTattooImage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitTattooImage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizationCriminalTraitTattooImages = principalEntityType.AddNavigation("SubjectOrganizationCriminalTraitTattooImages",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(Image).GetProperty("SubjectOrganizationCriminalTraitTattooImages", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Image).GetField("<SubjectOrganizationCriminalTraitTattooImages>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_Image-Tattoo");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey14(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitTurfLocaitonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("LocationId") }),
                principalEntityType);

            var criminalTraitTurfLocaiton = declaringEntityType.AddNavigation("CriminalTraitTurfLocaiton",
                runtimeForeignKey,
                onDependent: true,
                typeof(Location),
                propertyInfo: typeof(SubjectOrganization).GetProperty("CriminalTraitTurfLocaiton", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<CriminalTraitTurfLocaiton>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(Location).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Location).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_Location");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey15(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("OrganizationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OrganizationId") }),
                principalEntityType,
                unique: true,
                required: true);

            var organization = declaringEntityType.AddNavigation("Organization",
                runtimeForeignKey,
                onDependent: true,
                typeof(Organization),
                propertyInfo: typeof(SubjectOrganization).GetProperty("Organization", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<Organization>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganization = principalEntityType.AddNavigation("SubjectOrganization",
                runtimeForeignKey,
                onDependent: false,
                typeof(SubjectOrganization),
                propertyInfo: typeof(Organization).GetProperty("SubjectOrganization", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Organization).GetField("<SubjectOrganization>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_Organization");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey16(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("StatementId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OrganizationCommentId") }),
                principalEntityType);

            var statement = declaringEntityType.AddNavigation("Statement",
                runtimeForeignKey,
                onDependent: true,
                typeof(OrganizationComment),
                propertyInfo: typeof(SubjectOrganization).GetProperty("Statement", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<Statement>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(OrganizationComment).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(OrganizationComment).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_OrganizationComment");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey17(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("StatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("StatusId") }),
                principalEntityType);

            var status = declaringEntityType.AddNavigation("Status",
                runtimeForeignKey,
                onDependent: true,
                typeof(StatusDim),
                propertyInfo: typeof(SubjectOrganization).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectOrganization).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectOrganizations = principalEntityType.AddNavigation("SubjectOrganizations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SubjectOrganization>),
                propertyInfo: typeof(StatusDim).GetProperty("SubjectOrganizations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(StatusDim).GetField("<SubjectOrganizations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_SubjectOrganization_StatusDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "SubjectOrganization");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
