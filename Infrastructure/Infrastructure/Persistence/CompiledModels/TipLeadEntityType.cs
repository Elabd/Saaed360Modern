// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class TipLeadEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.TipLead",
                typeof(TipLead),
                baseEntityType,
                propertyCount: 18,
                navigationCount: 8,
                foreignKeyCount: 8,
                unnamedIndexCount: 7,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(TipLead).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(TipLead).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            description.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var nisdateTime = runtimeEntityType.AddProperty(
                "NisdateTime",
                typeof(DateTime?),
                propertyInfo: typeof(TipLead).GetProperty("NisdateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<NisdateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nisdateTime.AddAnnotation("Relational:ColumnName", "NISDateTime");
            nisdateTime.AddAnnotation("Relational:ColumnType", "datetime");
            nisdateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var nistrackingNumber = runtimeEntityType.AddProperty(
                "NistrackingNumber",
                typeof(string),
                propertyInfo: typeof(TipLead).GetProperty("NistrackingNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<NistrackingNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            nistrackingNumber.AddAnnotation("Relational:ColumnName", "NISTrackingNumber");
            nistrackingNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var nisuri = runtimeEntityType.AddProperty(
                "Nisuri",
                typeof(string),
                propertyInfo: typeof(TipLead).GetProperty("Nisuri", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<Nisuri>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 300);
            nisuri.AddAnnotation("Relational:ColumnName", "NISURI");
            nisuri.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var policyId = runtimeEntityType.AddProperty(
                "PolicyId",
                typeof(int?),
                propertyInfo: typeof(TipLead).GetProperty("PolicyId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<PolicyId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            policyId.AddAnnotation("Relational:DefaultValue", 1);
            policyId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var priorityHighLowId = runtimeEntityType.AddProperty(
                "PriorityHighLowId",
                typeof(int?),
                propertyInfo: typeof(TipLead).GetProperty("PriorityHighLowId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<PriorityHighLowId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            priorityHighLowId.AddAnnotation("Relational:DefaultValue", 1);
            priorityHighLowId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var privacyIndicator = runtimeEntityType.AddProperty(
                "PrivacyIndicator",
                typeof(bool?),
                propertyInfo: typeof(TipLead).GetProperty("PrivacyIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<PrivacyIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            privacyIndicator.AddAnnotation("Relational:DefaultValue", true);
            privacyIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportDateTime = runtimeEntityType.AddProperty(
                "ReportDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(TipLead).GetProperty("ReportDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<ReportDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reportDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            reportDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var summary = runtimeEntityType.AddProperty(
                "Summary",
                typeof(string),
                propertyInfo: typeof(TipLead).GetProperty("Summary", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<Summary>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            summary.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var targetFileNumber = runtimeEntityType.AddProperty(
                "TargetFileNumber",
                typeof(string),
                propertyInfo: typeof(TipLead).GetProperty("TargetFileNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TargetFileNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            targetFileNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tipLeadCategoryId = runtimeEntityType.AddProperty(
                "TipLeadCategoryId",
                typeof(int?),
                propertyInfo: typeof(TipLead).GetProperty("TipLeadCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TipLeadCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            tipLeadCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            tipLeadCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tipLeadContentValidityId = runtimeEntityType.AddProperty(
                "TipLeadContentValidityId",
                typeof(int?),
                propertyInfo: typeof(TipLead).GetProperty("TipLeadContentValidityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TipLeadContentValidityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            tipLeadContentValidityId.AddAnnotation("Relational:DefaultValue", 1);
            tipLeadContentValidityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tipLeadDateTime = runtimeEntityType.AddProperty(
                "TipLeadDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(TipLead).GetProperty("TipLeadDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TipLeadDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            tipLeadDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            tipLeadDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tipLeadReliablityId = runtimeEntityType.AddProperty(
                "TipLeadReliablityId",
                typeof(int?),
                propertyInfo: typeof(TipLead).GetProperty("TipLeadReliablityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TipLeadReliablityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            tipLeadReliablityId.AddAnnotation("Relational:DefaultValue", 1);
            tipLeadReliablityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tipLeadSourceCategoryId = runtimeEntityType.AddProperty(
                "TipLeadSourceCategoryId",
                typeof(int?),
                propertyInfo: typeof(TipLead).GetProperty("TipLeadSourceCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TipLeadSourceCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            tipLeadSourceCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            tipLeadSourceCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var tipLeadSourceMethodContactId = runtimeEntityType.AddProperty(
                "TipLeadSourceMethodContactId",
                typeof(int?),
                propertyInfo: typeof(TipLead).GetProperty("TipLeadSourceMethodContactId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TipLeadSourceMethodContactId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            tipLeadSourceMethodContactId.AddAnnotation("Relational:DefaultValue", 1);
            tipLeadSourceMethodContactId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var trackingNumber = runtimeEntityType.AddProperty(
                "TrackingNumber",
                typeof(string),
                propertyInfo: typeof(TipLead).GetProperty("TrackingNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TrackingNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            trackingNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__TipLead__45F4A791EFC45DF2");

            var index = runtimeEntityType.AddIndex(
                new[] { policyId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { priorityHighLowId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { tipLeadCategoryId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { tipLeadContentValidityId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { tipLeadReliablityId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { tipLeadSourceCategoryId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { tipLeadSourceMethodContactId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(TipLead).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var tipLead = principalEntityType.AddNavigation("TipLead",
                runtimeForeignKey,
                onDependent: false,
                typeof(TipLead),
                propertyInfo: typeof(Activity).GetProperty("TipLead", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<TipLead>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TipLead_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PolicyId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PolicyId") }),
                principalEntityType);

            var policy = declaringEntityType.AddNavigation("Policy",
                runtimeForeignKey,
                onDependent: true,
                typeof(PolicyDim),
                propertyInfo: typeof(TipLead).GetProperty("Policy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<Policy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var tipLeads = principalEntityType.AddNavigation("TipLeads",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TipLead>),
                propertyInfo: typeof(PolicyDim).GetProperty("TipLeads", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PolicyDim).GetField("<TipLeads>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TipLead_PolicyDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PriorityHighLowId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("HighLowId") }),
                principalEntityType);

            var priorityHighLow = declaringEntityType.AddNavigation("PriorityHighLow",
                runtimeForeignKey,
                onDependent: true,
                typeof(HighLowDim),
                propertyInfo: typeof(TipLead).GetProperty("PriorityHighLow", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<PriorityHighLow>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var tipLeads = principalEntityType.AddNavigation("TipLeads",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TipLead>),
                propertyInfo: typeof(HighLowDim).GetProperty("TipLeads", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(HighLowDim).GetField("<TipLeads>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TipLeadCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("TipLeadCategoryId") }),
                principalEntityType);

            var tipLeadCategory = declaringEntityType.AddNavigation("TipLeadCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(TipLeadCategoryDim),
                propertyInfo: typeof(TipLead).GetProperty("TipLeadCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TipLeadCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var tipLeads = principalEntityType.AddNavigation("TipLeads",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TipLead>),
                propertyInfo: typeof(TipLeadCategoryDim).GetProperty("TipLeads", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLeadCategoryDim).GetField("<TipLeads>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TipLead_TipLeadCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TipLeadContentValidityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("TipLeadContentValidityId") }),
                principalEntityType);

            var tipLeadContentValidity = declaringEntityType.AddNavigation("TipLeadContentValidity",
                runtimeForeignKey,
                onDependent: true,
                typeof(TipLeadContentValidityDim),
                propertyInfo: typeof(TipLead).GetProperty("TipLeadContentValidity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TipLeadContentValidity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var tipLeads = principalEntityType.AddNavigation("TipLeads",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TipLead>),
                propertyInfo: typeof(TipLeadContentValidityDim).GetProperty("TipLeads", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLeadContentValidityDim).GetField("<TipLeads>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TipLead_TipLeadContentValidityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TipLeadReliablityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("TipLeadReliablityId") }),
                principalEntityType);

            var tipLeadReliablity = declaringEntityType.AddNavigation("TipLeadReliablity",
                runtimeForeignKey,
                onDependent: true,
                typeof(TipLeadReliabilityDim),
                propertyInfo: typeof(TipLead).GetProperty("TipLeadReliablity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TipLeadReliablity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var tipLeads = principalEntityType.AddNavigation("TipLeads",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TipLead>),
                propertyInfo: typeof(TipLeadReliabilityDim).GetProperty("TipLeads", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLeadReliabilityDim).GetField("<TipLeads>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TipLead_TipLeadReliabilityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TipLeadSourceCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("TipLeadSourceCategoryId") }),
                principalEntityType);

            var tipLeadSourceCategory = declaringEntityType.AddNavigation("TipLeadSourceCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(TipLeadSourceCategoryDim),
                propertyInfo: typeof(TipLead).GetProperty("TipLeadSourceCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TipLeadSourceCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var tipLeads = principalEntityType.AddNavigation("TipLeads",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TipLead>),
                propertyInfo: typeof(TipLeadSourceCategoryDim).GetProperty("TipLeads", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLeadSourceCategoryDim).GetField("<TipLeads>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TipLead_TipLeadSourceCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TipLeadSourceMethodContactId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("TipLeadSourceMethodContactId") }),
                principalEntityType);

            var tipLeadSourceMethodContact = declaringEntityType.AddNavigation("TipLeadSourceMethodContact",
                runtimeForeignKey,
                onDependent: true,
                typeof(TipLeadSourceMethodContactDim),
                propertyInfo: typeof(TipLead).GetProperty("TipLeadSourceMethodContact", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLead).GetField("<TipLeadSourceMethodContact>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var tipLeads = principalEntityType.AddNavigation("TipLeads",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TipLead>),
                propertyInfo: typeof(TipLeadSourceMethodContactDim).GetProperty("TipLeads", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TipLeadSourceMethodContactDim).GetField("<TipLeads>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_TipLead_TipLeadSourceMethodContactDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "TipLead");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
