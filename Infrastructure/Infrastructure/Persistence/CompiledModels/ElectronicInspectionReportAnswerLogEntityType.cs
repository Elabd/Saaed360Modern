// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ElectronicInspectionReportAnswerLogEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ElectronicInspectionReportAnswerLog",
                typeof(ElectronicInspectionReportAnswerLog),
                baseEntityType,
                propertyCount: 16,
                navigationCount: 3,
                foreignKeyCount: 3,
                unnamedIndexCount: 3,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var actionDateTime = runtimeEntityType.AddProperty(
                "ActionDateTime",
                typeof(DateTime),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ActionDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ActionDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            actionDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            actionDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var actionUserId = runtimeEntityType.AddProperty(
                "ActionUserId",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ActionUserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ActionUserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            actionUserId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var actionUserName = runtimeEntityType.AddProperty(
                "ActionUserName",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ActionUserName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ActionUserName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 500);
            actionUserName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comment = runtimeEntityType.AddProperty(
                "Comment",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("Comment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<Comment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 2000);
            comment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionAnswerId = runtimeEntityType.AddProperty(
                "ElectronicInspectionAnswerId",
                typeof(long?),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ElectronicInspectionAnswerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ElectronicInspectionAnswerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            electronicInspectionAnswerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionAnswerName = runtimeEntityType.AddProperty(
                "ElectronicInspectionAnswerName",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ElectronicInspectionAnswerName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ElectronicInspectionAnswerName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            electronicInspectionAnswerName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionQuestionId = runtimeEntityType.AddProperty(
                "ElectronicInspectionQuestionId",
                typeof(long?),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ElectronicInspectionQuestionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ElectronicInspectionQuestionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            electronicInspectionQuestionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionQuestionName = runtimeEntityType.AddProperty(
                "ElectronicInspectionQuestionName",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ElectronicInspectionQuestionName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ElectronicInspectionQuestionName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            electronicInspectionQuestionName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionReportAnswerStatus = runtimeEntityType.AddProperty(
                "ElectronicInspectionReportAnswerStatus",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ElectronicInspectionReportAnswerStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ElectronicInspectionReportAnswerStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            electronicInspectionReportAnswerStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionReportAnswerStatusId = runtimeEntityType.AddProperty(
                "ElectronicInspectionReportAnswerStatusId",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ElectronicInspectionReportAnswerStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ElectronicInspectionReportAnswerStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            electronicInspectionReportAnswerStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionReportId = runtimeEntityType.AddProperty(
                "ElectronicInspectionReportId",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ElectronicInspectionReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ElectronicInspectionReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            electronicInspectionReportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDamage = runtimeEntityType.AddProperty(
                "IsDamage",
                typeof(bool?),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("IsDamage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<IsDamage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isDamage.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var maintenanceComment = runtimeEntityType.AddProperty(
                "MaintenanceComment",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("MaintenanceComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<MaintenanceComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            maintenanceComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sentGroup = runtimeEntityType.AddProperty(
                "SentGroup",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("SentGroup", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<SentGroup>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            sentGroup.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var userName = runtimeEntityType.AddProperty(
                "UserName",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("UserName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<UserName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 256);
            userName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { electronicInspectionAnswerId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { electronicInspectionQuestionId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { electronicInspectionReportId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ElectronicInspectionAnswerId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var electronicInspectionAnswer = declaringEntityType.AddNavigation("ElectronicInspectionAnswer",
                runtimeForeignKey,
                onDependent: true,
                typeof(ElectronicInspectionAnswer),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ElectronicInspectionAnswer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ElectronicInspectionAnswer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionReportAnswerLogs = principalEntityType.AddNavigation("ElectronicInspectionReportAnswerLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionReportAnswerLog>),
                propertyInfo: typeof(ElectronicInspectionAnswer).GetProperty("ElectronicInspectionReportAnswerLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionAnswer).GetField("<ElectronicInspectionReportAnswerLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ElectronicInspectionReportAnswerLog_ElectronicInspectionAnswers");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ElectronicInspectionQuestionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var electronicInspectionQuestion = declaringEntityType.AddNavigation("ElectronicInspectionQuestion",
                runtimeForeignKey,
                onDependent: true,
                typeof(ElectronicInspectionQuestion),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ElectronicInspectionQuestion", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ElectronicInspectionQuestion>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionReportAnswerLogs = principalEntityType.AddNavigation("ElectronicInspectionReportAnswerLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionReportAnswerLog>),
                propertyInfo: typeof(ElectronicInspectionQuestion).GetProperty("ElectronicInspectionReportAnswerLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionQuestion).GetField("<ElectronicInspectionReportAnswerLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ElectronicInspectionReportAnswerLog_ElectronicInspectionQuestion");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ElectronicInspectionReportId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var electronicInspectionReport = declaringEntityType.AddNavigation("ElectronicInspectionReport",
                runtimeForeignKey,
                onDependent: true,
                typeof(ElectronicInspectionReport),
                propertyInfo: typeof(ElectronicInspectionReportAnswerLog).GetProperty("ElectronicInspectionReport", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswerLog).GetField("<ElectronicInspectionReport>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionReportAnswerLogs = principalEntityType.AddNavigation("ElectronicInspectionReportAnswerLogs",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionReportAnswerLog>),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ElectronicInspectionReportAnswerLogs", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ElectronicInspectionReportAnswerLogs>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ElectronicInspectionReportAnswerLog_ElectronicInspectionReport");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ElectronicInspectionReportAnswerLog");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
