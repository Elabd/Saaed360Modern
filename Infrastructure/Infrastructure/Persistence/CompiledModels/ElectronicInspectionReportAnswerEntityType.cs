// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class ElectronicInspectionReportAnswerEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.ElectronicInspectionReportAnswer",
                typeof(ElectronicInspectionReportAnswer),
                baseEntityType,
                propertyCount: 10,
                navigationCount: 4,
                foreignKeyCount: 4,
                unnamedIndexCount: 4,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var damageComment = runtimeEntityType.AddProperty(
                "DamageComment",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("DamageComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<DamageComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 4000);
            damageComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionAnswerId = runtimeEntityType.AddProperty(
                "ElectronicInspectionAnswerId",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("ElectronicInspectionAnswerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<ElectronicInspectionAnswerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            electronicInspectionAnswerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionQuestionId = runtimeEntityType.AddProperty(
                "ElectronicInspectionQuestionId",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("ElectronicInspectionQuestionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<ElectronicInspectionQuestionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            electronicInspectionQuestionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var electronicInspectionReportId = runtimeEntityType.AddProperty(
                "ElectronicInspectionReportId",
                typeof(long),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("ElectronicInspectionReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<ElectronicInspectionReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            electronicInspectionReportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDamage = runtimeEntityType.AddProperty(
                "IsDamage",
                typeof(bool),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("IsDamage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<IsDamage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isDamage.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastElectronicInspectionDamageStatusId = runtimeEntityType.AddProperty(
                "LastElectronicInspectionDamageStatusId",
                typeof(int),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("LastElectronicInspectionDamageStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<LastElectronicInspectionDamageStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            lastElectronicInspectionDamageStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastModifyDateTime = runtimeEntityType.AddProperty(
                "LastModifyDateTime",
                typeof(DateTime),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("LastModifyDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<LastModifyDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            lastModifyDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            lastModifyDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lastModifyUserId = runtimeEntityType.AddProperty(
                "LastModifyUserId",
                typeof(long?),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("LastModifyUserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<LastModifyUserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastModifyUserId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var maintenanceComment = runtimeEntityType.AddProperty(
                "MaintenanceComment",
                typeof(string),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("MaintenanceComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<MaintenanceComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            maintenanceComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { electronicInspectionAnswerId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { electronicInspectionQuestionId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { electronicInspectionReportId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { lastModifyUserId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ElectronicInspectionAnswerId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var electronicInspectionAnswer = declaringEntityType.AddNavigation("ElectronicInspectionAnswer",
                runtimeForeignKey,
                onDependent: true,
                typeof(ElectronicInspectionAnswer),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("ElectronicInspectionAnswer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<ElectronicInspectionAnswer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionReportAnswers = principalEntityType.AddNavigation("ElectronicInspectionReportAnswers",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionReportAnswer>),
                propertyInfo: typeof(ElectronicInspectionAnswer).GetProperty("ElectronicInspectionReportAnswers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionAnswer).GetField("<ElectronicInspectionReportAnswers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ElectronicInspectionReportAnswers_ElectronicInspectionAnswers");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ElectronicInspectionQuestionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var electronicInspectionQuestion = declaringEntityType.AddNavigation("ElectronicInspectionQuestion",
                runtimeForeignKey,
                onDependent: true,
                typeof(ElectronicInspectionQuestion),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("ElectronicInspectionQuestion", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<ElectronicInspectionQuestion>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionReportAnswers = principalEntityType.AddNavigation("ElectronicInspectionReportAnswers",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionReportAnswer>),
                propertyInfo: typeof(ElectronicInspectionQuestion).GetProperty("ElectronicInspectionReportAnswers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionQuestion).GetField("<ElectronicInspectionReportAnswers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ElectronicInspectionReportAnswers_ElectronicInspectionQuestion");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ElectronicInspectionReportId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var electronicInspectionReport = declaringEntityType.AddNavigation("ElectronicInspectionReport",
                runtimeForeignKey,
                onDependent: true,
                typeof(ElectronicInspectionReport),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("ElectronicInspectionReport", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<ElectronicInspectionReport>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionReportAnswers = principalEntityType.AddNavigation("ElectronicInspectionReportAnswers",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionReportAnswer>),
                propertyInfo: typeof(ElectronicInspectionReport).GetProperty("ElectronicInspectionReportAnswers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReport).GetField("<ElectronicInspectionReportAnswers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_ElectronicInspectionReportAnswers_ElectronicInspectionReport");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LastModifyUserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var lastModifyUser = declaringEntityType.AddNavigation("LastModifyUser",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(ElectronicInspectionReportAnswer).GetProperty("LastModifyUser", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ElectronicInspectionReportAnswer).GetField("<LastModifyUser>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var electronicInspectionReportAnswers = principalEntityType.AddNavigation("ElectronicInspectionReportAnswers",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<ElectronicInspectionReportAnswer>),
                propertyInfo: typeof(Person).GetProperty("ElectronicInspectionReportAnswers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<ElectronicInspectionReportAnswers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__Electroni__LastM__4E0D819A");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ElectronicInspectionReportAnswers");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
