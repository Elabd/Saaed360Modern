// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class VehicleInvolvedSerialEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.VehicleInvolvedSerial",
                typeof(VehicleInvolvedSerial),
                baseEntityType,
                propertyCount: 9,
                keyCount: 1);

            var vehicleSerialId = runtimeEntityType.AddProperty(
                "VehicleSerialId",
                typeof(int),
                propertyInfo: typeof(VehicleInvolvedSerial).GetProperty("VehicleSerialId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleInvolvedSerial).GetField("<VehicleSerialId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            vehicleSerialId.AddAnnotation("Relational:ColumnName", "VehicleSerialID");
            vehicleSerialId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var accidentCause = runtimeEntityType.AddProperty(
                "AccidentCause",
                typeof(bool?),
                propertyInfo: typeof(VehicleInvolvedSerial).GetProperty("AccidentCause", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleInvolvedSerial).GetField("<AccidentCause>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentCause.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accidentDamagedPart = runtimeEntityType.AddProperty(
                "AccidentDamagedPart",
                typeof(bool?),
                propertyInfo: typeof(VehicleInvolvedSerial).GetProperty("AccidentDamagedPart", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleInvolvedSerial).GetField("<AccidentDamagedPart>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentDamagedPart.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var accidentInvolved = runtimeEntityType.AddProperty(
                "AccidentInvolved",
                typeof(bool?),
                propertyInfo: typeof(VehicleInvolvedSerial).GetProperty("AccidentInvolved", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleInvolvedSerial).GetField("<AccidentInvolved>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            accidentInvolved.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var damagedGovProperty = runtimeEntityType.AddProperty(
                "DamagedGovProperty",
                typeof(bool?),
                propertyInfo: typeof(VehicleInvolvedSerial).GetProperty("DamagedGovProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleInvolvedSerial).GetField("<DamagedGovProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            damagedGovProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(int),
                propertyInfo: typeof(VehicleInvolvedSerial).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleInvolvedSerial).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataId = runtimeEntityType.AddProperty(
                "VehicleDataId",
                typeof(int),
                propertyInfo: typeof(VehicleInvolvedSerial).GetProperty("VehicleDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleInvolvedSerial).GetField("<VehicleDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            vehicleDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleRoleId = runtimeEntityType.AddProperty(
                "VehicleRoleId",
                typeof(int?),
                propertyInfo: typeof(VehicleInvolvedSerial).GetProperty("VehicleRoleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleInvolvedSerial).GetField("<VehicleRoleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleRoleId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleSerial = runtimeEntityType.AddProperty(
                "VehicleSerial",
                typeof(long),
                propertyInfo: typeof(VehicleInvolvedSerial).GetProperty("VehicleSerial", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleInvolvedSerial).GetField("<VehicleSerial>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            vehicleSerial.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { vehicleSerialId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "VehicleInvolvedSerial");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
