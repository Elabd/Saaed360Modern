// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class CaseEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Case",
                typeof(Case),
                baseEntityType,
                propertyCount: 29,
                navigationCount: 9,
                foreignKeyCount: 9,
                unnamedIndexCount: 8,
                keyCount: 1);

            var activityId = runtimeEntityType.AddProperty(
                "ActivityId",
                typeof(long),
                propertyInfo: typeof(Case).GetProperty("ActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<ActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            activityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseCapiasDate = runtimeEntityType.AddProperty(
                "CaseCapiasDate",
                typeof(DateTime?),
                propertyInfo: typeof(Case).GetProperty("CaseCapiasDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseCapiasDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            caseCapiasDate.AddAnnotation("Relational:ColumnType", "datetime");
            caseCapiasDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseCategoryId = runtimeEntityType.AddProperty(
                "CaseCategoryId",
                typeof(int),
                propertyInfo: typeof(Case).GetProperty("CaseCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            caseCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            caseCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseContinuanceDate = runtimeEntityType.AddProperty(
                "CaseContinuanceDate",
                typeof(DateTime?),
                propertyInfo: typeof(Case).GetProperty("CaseContinuanceDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseContinuanceDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            caseContinuanceDate.AddAnnotation("Relational:ColumnType", "datetime");
            caseContinuanceDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseDate = runtimeEntityType.AddProperty(
                "CaseDate",
                typeof(DateOnly?),
                propertyInfo: typeof(Case).GetProperty("CaseDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            caseDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseDefendantSelfRepIndicator = runtimeEntityType.AddProperty(
                "CaseDefendantSelfRepIndicator",
                typeof(bool),
                propertyInfo: typeof(Case).GetProperty("CaseDefendantSelfRepIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseDefendantSelfRepIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            caseDefendantSelfRepIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseDomesticViolenceIndicator = runtimeEntityType.AddProperty(
                "CaseDomesticViolenceIndicator",
                typeof(bool),
                propertyInfo: typeof(Case).GetProperty("CaseDomesticViolenceIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseDomesticViolenceIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            caseDomesticViolenceIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseDrivingImpairedIndicator = runtimeEntityType.AddProperty(
                "CaseDrivingImpairedIndicator",
                typeof(bool),
                propertyInfo: typeof(Case).GetProperty("CaseDrivingImpairedIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseDrivingImpairedIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            caseDrivingImpairedIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseDrivingIntoxicatedIndicator = runtimeEntityType.AddProperty(
                "CaseDrivingIntoxicatedIndicator",
                typeof(bool),
                propertyInfo: typeof(Case).GetProperty("CaseDrivingIntoxicatedIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseDrivingIntoxicatedIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            caseDrivingIntoxicatedIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseIdentification = runtimeEntityType.AddProperty(
                "CaseIdentification",
                typeof(string),
                propertyInfo: typeof(Case).GetProperty("CaseIdentification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseIdentification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            caseIdentification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseInformationAdmissibleIndicator = runtimeEntityType.AddProperty(
                "CaseInformationAdmissibleIndicator",
                typeof(bool),
                propertyInfo: typeof(Case).GetProperty("CaseInformationAdmissibleIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseInformationAdmissibleIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            caseInformationAdmissibleIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseOpenedYear = runtimeEntityType.AddProperty(
                "CaseOpenedYear",
                typeof(int?),
                propertyInfo: typeof(Case).GetProperty("CaseOpenedYear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseOpenedYear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            caseOpenedYear.AddAnnotation("Relational:ComputedColumnSql", "(datepart(year,[CaseDate]))");
            caseOpenedYear.AddAnnotation("Relational:IsStored", false);
            caseOpenedYear.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseProtectionOrderIndicator = runtimeEntityType.AddProperty(
                "CaseProtectionOrderIndicator",
                typeof(bool),
                propertyInfo: typeof(Case).GetProperty("CaseProtectionOrderIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseProtectionOrderIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            caseProtectionOrderIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseRestrictionDate = runtimeEntityType.AddProperty(
                "CaseRestrictionDate",
                typeof(DateTime?),
                propertyInfo: typeof(Case).GetProperty("CaseRestrictionDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseRestrictionDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            caseRestrictionDate.AddAnnotation("Relational:ColumnType", "datetime");
            caseRestrictionDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseRestrictionId = runtimeEntityType.AddProperty(
                "CaseRestrictionId",
                typeof(int),
                propertyInfo: typeof(Case).GetProperty("CaseRestrictionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseRestrictionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            caseRestrictionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseSecurityId = runtimeEntityType.AddProperty(
                "CaseSecurityId",
                typeof(int),
                propertyInfo: typeof(Case).GetProperty("CaseSecurityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseSecurityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            caseSecurityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseSeverityId = runtimeEntityType.AddProperty(
                "CaseSeverityId",
                typeof(int),
                propertyInfo: typeof(Case).GetProperty("CaseSeverityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseSeverityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            caseSeverityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseSolvabilityId = runtimeEntityType.AddProperty(
                "CaseSolvabilityId",
                typeof(int),
                propertyInfo: typeof(Case).GetProperty("CaseSolvabilityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseSolvabilityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            caseSolvabilityId.AddAnnotation("Relational:DefaultValue", 1);
            caseSolvabilityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseStatusId = runtimeEntityType.AddProperty(
                "CaseStatusId",
                typeof(int),
                propertyInfo: typeof(Case).GetProperty("CaseStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0);
            caseStatusId.AddAnnotation("Relational:DefaultValue", 1);
            caseStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseTerminationCategoryId = runtimeEntityType.AddProperty(
                "CaseTerminationCategoryId",
                typeof(int),
                propertyInfo: typeof(Case).GetProperty("CaseTerminationCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseTerminationCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            caseTerminationCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseTerminationStageId = runtimeEntityType.AddProperty(
                "CaseTerminationStageId",
                typeof(int),
                propertyInfo: typeof(Case).GetProperty("CaseTerminationStageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseTerminationStageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            caseTerminationStageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseTime = runtimeEntityType.AddProperty(
                "CaseTime",
                typeof(TimeOnly?),
                propertyInfo: typeof(Case).GetProperty("CaseTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            caseTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseVerdictGivenIndicator = runtimeEntityType.AddProperty(
                "CaseVerdictGivenIndicator",
                typeof(bool),
                propertyInfo: typeof(Case).GetProperty("CaseVerdictGivenIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseVerdictGivenIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            caseVerdictGivenIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var caseVictimNotProsecutingIndicator = runtimeEntityType.AddProperty(
                "CaseVictimNotProsecutingIndicator",
                typeof(bool),
                propertyInfo: typeof(Case).GetProperty("CaseVictimNotProsecutingIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseVictimNotProsecutingIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            caseVictimNotProsecutingIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var longCaseTitle = runtimeEntityType.AddProperty(
                "LongCaseTitle",
                typeof(string),
                propertyInfo: typeof(Case).GetProperty("LongCaseTitle", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<LongCaseTitle>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 500);
            longCaseTitle.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var nextReviewDate = runtimeEntityType.AddProperty(
                "NextReviewDate",
                typeof(DateOnly?),
                propertyInfo: typeof(Case).GetProperty("NextReviewDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<NextReviewDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nextReviewDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reviewDate = runtimeEntityType.AddProperty(
                "ReviewDate",
                typeof(DateOnly?),
                propertyInfo: typeof(Case).GetProperty("ReviewDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<ReviewDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reviewDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var shortCaseTitle = runtimeEntityType.AddProperty(
                "ShortCaseTitle",
                typeof(string),
                propertyInfo: typeof(Case).GetProperty("ShortCaseTitle", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<ShortCaseTitle>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            shortCaseTitle.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var solvabilityPoints = runtimeEntityType.AddProperty(
                "SolvabilityPoints",
                typeof(string),
                propertyInfo: typeof(Case).GetProperty("SolvabilityPoints", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<SolvabilityPoints>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            solvabilityPoints.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { activityId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_Case_1");

            var index = runtimeEntityType.AddIndex(
                new[] { caseCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { caseRestrictionId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { caseSecurityId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { caseSeverityId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { caseSolvabilityId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { caseStatusId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { caseTerminationCategoryId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { caseTerminationStageId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ActivityId") }),
                principalEntityType,
                unique: true,
                required: true);

            var activity = declaringEntityType.AddNavigation("Activity",
                runtimeForeignKey,
                onDependent: true,
                typeof(Activity),
                propertyInfo: typeof(Case).GetProperty("Activity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<Activity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var @case = principalEntityType.AddNavigation("Case",
                runtimeForeignKey,
                onDependent: false,
                typeof(Case),
                propertyInfo: typeof(Activity).GetProperty("Case", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Activity).GetField("<Case>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Case_Activity");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CaseCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CaseCategoryId") }),
                principalEntityType,
                required: true);

            var caseCategory = declaringEntityType.AddNavigation("CaseCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(CaseCategoryDim),
                propertyInfo: typeof(Case).GetProperty("CaseCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var cases = principalEntityType.AddNavigation("Cases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Case>),
                propertyInfo: typeof(CaseCategoryDim).GetProperty("Cases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CaseCategoryDim).GetField("<Cases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "CaseTypeDIM_Case_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CaseRestrictionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CaseRestrictionId") }),
                principalEntityType,
                required: true);

            var caseRestriction = declaringEntityType.AddNavigation("CaseRestriction",
                runtimeForeignKey,
                onDependent: true,
                typeof(CaseRestrictionDim),
                propertyInfo: typeof(Case).GetProperty("CaseRestriction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseRestriction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var cases = principalEntityType.AddNavigation("Cases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Case>),
                propertyInfo: typeof(CaseRestrictionDim).GetProperty("Cases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CaseRestrictionDim).GetField("<Cases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Case_CaseRestrictionDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CaseSecurityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CaseSecurityId") }),
                principalEntityType,
                required: true);

            var caseSecurity = declaringEntityType.AddNavigation("CaseSecurity",
                runtimeForeignKey,
                onDependent: true,
                typeof(CaseSecurityDim),
                propertyInfo: typeof(Case).GetProperty("CaseSecurity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseSecurity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var cases = principalEntityType.AddNavigation("Cases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Case>),
                propertyInfo: typeof(CaseSecurityDim).GetProperty("Cases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CaseSecurityDim).GetField("<Cases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Case_CaseSecurityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CaseSeverityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CaseSeverityId") }),
                principalEntityType,
                required: true);

            var caseSeverity = declaringEntityType.AddNavigation("CaseSeverity",
                runtimeForeignKey,
                onDependent: true,
                typeof(CaseSeverityDim),
                propertyInfo: typeof(Case).GetProperty("CaseSeverity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseSeverity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var cases = principalEntityType.AddNavigation("Cases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Case>),
                propertyInfo: typeof(CaseSeverityDim).GetProperty("Cases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CaseSeverityDim).GetField("<Cases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Case_CaseSeverityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CaseSolvabilityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CaseSolvabilityId") }),
                principalEntityType,
                required: true);

            var caseSolvability = declaringEntityType.AddNavigation("CaseSolvability",
                runtimeForeignKey,
                onDependent: true,
                typeof(CaseSolvabilityDim),
                propertyInfo: typeof(Case).GetProperty("CaseSolvability", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseSolvability>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var cases = principalEntityType.AddNavigation("Cases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Case>),
                propertyInfo: typeof(CaseSolvabilityDim).GetProperty("Cases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CaseSolvabilityDim).GetField("<Cases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "Case SolvabilityDIM_Case_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CaseStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CaseStatusId") }),
                principalEntityType,
                required: true);

            var caseStatus = declaringEntityType.AddNavigation("CaseStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(CaseStatusDim),
                propertyInfo: typeof(Case).GetProperty("CaseStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var cases = principalEntityType.AddNavigation("Cases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Case>),
                propertyInfo: typeof(CaseStatusDim).GetProperty("Cases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CaseStatusDim).GetField("<Cases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Case_CaseStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CaseTerminationCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CaseTerminationCategoryId") }),
                principalEntityType,
                required: true);

            var caseTerminationCategory = declaringEntityType.AddNavigation("CaseTerminationCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(CaseTerminationCategoryDim),
                propertyInfo: typeof(Case).GetProperty("CaseTerminationCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseTerminationCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var cases = principalEntityType.AddNavigation("Cases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Case>),
                propertyInfo: typeof(CaseTerminationCategoryDim).GetProperty("Cases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CaseTerminationCategoryDim).GetField("<Cases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Case_CaseTerminationCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CaseTerminationStageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CaseTerminationStageId") }),
                principalEntityType,
                required: true);

            var caseTerminationStage = declaringEntityType.AddNavigation("CaseTerminationStage",
                runtimeForeignKey,
                onDependent: true,
                typeof(CaseTerminationStageDim),
                propertyInfo: typeof(Case).GetProperty("CaseTerminationStage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Case).GetField("<CaseTerminationStage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var cases = principalEntityType.AddNavigation("Cases",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Case>),
                propertyInfo: typeof(CaseTerminationStageDim).GetProperty("Cases", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CaseTerminationStageDim).GetField("<Cases>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Case_CaseTerminationStageDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Case");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
