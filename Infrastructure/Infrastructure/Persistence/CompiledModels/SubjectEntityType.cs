// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class SubjectEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.Subject",
                typeof(Subject),
                baseEntityType,
                propertyCount: 39,
                navigationCount: 26,
                foreignKeyCount: 26,
                unnamedIndexCount: 25,
                keyCount: 1);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(Subject).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var armedIndicator = runtimeEntityType.AddProperty(
                "ArmedIndicator",
                typeof(bool?),
                propertyInfo: typeof(Subject).GetProperty("ArmedIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<ArmedIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            armedIndicator.AddAnnotation("Relational:DefaultValue", false);
            armedIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var cautionInformationId = runtimeEntityType.AddProperty(
                "CautionInformationId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("CautionInformationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CautionInformationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cautionInformationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalInvolvementId = runtimeEntityType.AddProperty(
                "CriminalInvolvementId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("CriminalInvolvementId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalInvolvementId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalInvolvementId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalOrganizationGuid = runtimeEntityType.AddProperty(
                "CriminalOrganizationGuid",
                typeof(Guid?),
                propertyInfo: typeof(Subject).GetProperty("CriminalOrganizationGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalOrganizationGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalOrganizationGuid.AddAnnotation("Relational:ColumnName", "CriminalOrganizationGUID");
            criminalOrganizationGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalOrganizationId = runtimeEntityType.AddProperty(
                "CriminalOrganizationId",
                typeof(long?),
                propertyInfo: typeof(Subject).GetProperty("CriminalOrganizationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalOrganizationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalOrganizationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitActivityId = runtimeEntityType.AddProperty(
                "CriminalTraitActivityId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitActivityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitActivityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitActivityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitColorId = runtimeEntityType.AddProperty(
                "CriminalTraitColorId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitCommunicationId = runtimeEntityType.AddProperty(
                "CriminalTraitCommunicationId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitCommunicationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitCommunicationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitCommunicationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitDressId = runtimeEntityType.AddProperty(
                "CriminalTraitDressId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitDressId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitDressId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitDressId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitEthnicityId = runtimeEntityType.AddProperty(
                "CriminalTraitEthnicityId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitEthnicityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitEthnicityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitEthnicityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitGraffitiImageGuid = runtimeEntityType.AddProperty(
                "CriminalTraitGraffitiImageGuid",
                typeof(Guid),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitGraffitiImageGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitGraffitiImageGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            criminalTraitGraffitiImageGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitGraffitiImageId = runtimeEntityType.AddProperty(
                "CriminalTraitGraffitiImageId",
                typeof(long?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitGraffitiImageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitGraffitiImageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitGraffitiImageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitHandSignalId = runtimeEntityType.AddProperty(
                "CriminalTraitHandSignalId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitHandSignalId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitHandSignalId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitHandSignalId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitId = runtimeEntityType.AddProperty(
                "CriminalTraitId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitModusOperationId = runtimeEntityType.AddProperty(
                "CriminalTraitModusOperationId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitModusOperationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitModusOperationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitModusOperationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitTargetId = runtimeEntityType.AddProperty(
                "CriminalTraitTargetId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitTargetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitTargetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitTargetId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitTattooImageGuid = runtimeEntityType.AddProperty(
                "CriminalTraitTattooImageGuid",
                typeof(Guid),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitTattooImageGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitTattooImageGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            criminalTraitTattooImageGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitTattooImageId = runtimeEntityType.AddProperty(
                "CriminalTraitTattooImageId",
                typeof(long?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitTattooImageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitTattooImageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitTattooImageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitTurfLocaitonGuid = runtimeEntityType.AddProperty(
                "CriminalTraitTurfLocaitonGuid",
                typeof(Guid),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitTurfLocaitonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitTurfLocaitonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            criminalTraitTurfLocaitonGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var criminalTraitTurfLocaitonId = runtimeEntityType.AddProperty(
                "CriminalTraitTurfLocaitonId",
                typeof(long?),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitTurfLocaitonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitTurfLocaitonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            criminalTraitTurfLocaitonId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dnacollectionStatusId = runtimeEntityType.AddProperty(
                "DnacollectionStatusId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("DnacollectionStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<DnacollectionStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            dnacollectionStatusId.AddAnnotation("Relational:ColumnName", "DNACollectionStatusId");
            dnacollectionStatusId.AddAnnotation("Relational:DefaultValue", 1);
            dnacollectionStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var multiSourceOffenderId = runtimeEntityType.AddProperty(
                "MultiSourceOffenderId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("MultiSourceOffenderId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<MultiSourceOffenderId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            multiSourceOffenderId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statementDate = runtimeEntityType.AddProperty(
                "StatementDate",
                typeof(DateTime?),
                propertyInfo: typeof(Subject).GetProperty("StatementDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<StatementDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            statementDate.AddAnnotation("Relational:ColumnType", "datetime");
            statementDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statementGuid = runtimeEntityType.AddProperty(
                "StatementGuid",
                typeof(Guid),
                propertyInfo: typeof(Subject).GetProperty("StatementGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<StatementGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            statementGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statementId = runtimeEntityType.AddProperty(
                "StatementId",
                typeof(long?),
                propertyInfo: typeof(Subject).GetProperty("StatementId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<StatementId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            statementId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var statementIndicator = runtimeEntityType.AddProperty(
                "StatementIndicator",
                typeof(int),
                propertyInfo: typeof(Subject).GetProperty("StatementIndicator", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<StatementIndicator>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore,
                sentinel: 0);
            statementIndicator.AddAnnotation("Relational:ComputedColumnSql", "(case when [StatementDate] IS NULL then (0) else (1) end)");
            statementIndicator.AddAnnotation("Relational:IsStored", false);
            statementIndicator.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subjectCorrectionIdentification = runtimeEntityType.AddProperty(
                "SubjectCorrectionIdentification",
                typeof(string),
                propertyInfo: typeof(Subject).GetProperty("SubjectCorrectionIdentification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectCorrectionIdentification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            subjectCorrectionIdentification.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subjectDisciplinaryActionId = runtimeEntityType.AddProperty(
                "SubjectDisciplinaryActionId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("SubjectDisciplinaryActionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectDisciplinaryActionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subjectDisciplinaryActionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subjectExtraditionId = runtimeEntityType.AddProperty(
                "SubjectExtraditionId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("SubjectExtraditionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectExtraditionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subjectExtraditionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subjectIdentificaiton = runtimeEntityType.AddProperty(
                "SubjectIdentificaiton",
                typeof(string),
                propertyInfo: typeof(Subject).GetProperty("SubjectIdentificaiton", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectIdentificaiton>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20);
            subjectIdentificaiton.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subjectJacketNumber = runtimeEntityType.AddProperty(
                "SubjectJacketNumber",
                typeof(string),
                propertyInfo: typeof(Subject).GetProperty("SubjectJacketNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectJacketNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            subjectJacketNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subjectNoticeGuid = runtimeEntityType.AddProperty(
                "SubjectNoticeGuid",
                typeof(Guid),
                propertyInfo: typeof(Subject).GetProperty("SubjectNoticeGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectNoticeGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            subjectNoticeGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subjectNoticeId = runtimeEntityType.AddProperty(
                "SubjectNoticeId",
                typeof(long?),
                propertyInfo: typeof(Subject).GetProperty("SubjectNoticeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectNoticeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subjectNoticeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subjectSpecialHandlingGuid = runtimeEntityType.AddProperty(
                "SubjectSpecialHandlingGuid",
                typeof(Guid?),
                propertyInfo: typeof(Subject).GetProperty("SubjectSpecialHandlingGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectSpecialHandlingGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subjectSpecialHandlingGuid.AddAnnotation("Relational:ColumnName", "SubjectSpecialHandlingGUID");
            subjectSpecialHandlingGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subjectSpecialHandlingId = runtimeEntityType.AddProperty(
                "SubjectSpecialHandlingId",
                typeof(long?),
                propertyInfo: typeof(Subject).GetProperty("SubjectSpecialHandlingId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectSpecialHandlingId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subjectSpecialHandlingId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var subjectStatusId = runtimeEntityType.AddProperty(
                "SubjectStatusId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("SubjectStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            subjectStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var theftCategoryId = runtimeEntityType.AddProperty(
                "TheftCategoryId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("TheftCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<TheftCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            theftCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var warrantCategoryId = runtimeEntityType.AddProperty(
                "WarrantCategoryId",
                typeof(int?),
                propertyInfo: typeof(Subject).GetProperty("WarrantCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<WarrantCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            warrantCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { personId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_Subject_1");

            var index = runtimeEntityType.AddIndex(
                new[] { cautionInformationId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { criminalInvolvementId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { criminalOrganizationId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { criminalTraitActivityId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { criminalTraitColorId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { criminalTraitCommunicationId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { criminalTraitDressId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { criminalTraitEthnicityId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { criminalTraitGraffitiImageId });

            var index8 = runtimeEntityType.AddIndex(
                new[] { criminalTraitHandSignalId });

            var index9 = runtimeEntityType.AddIndex(
                new[] { criminalTraitId });

            var index10 = runtimeEntityType.AddIndex(
                new[] { criminalTraitModusOperationId });

            var index11 = runtimeEntityType.AddIndex(
                new[] { criminalTraitTargetId });

            var index12 = runtimeEntityType.AddIndex(
                new[] { criminalTraitTattooImageId });

            var index13 = runtimeEntityType.AddIndex(
                new[] { criminalTraitTurfLocaitonId });

            var index14 = runtimeEntityType.AddIndex(
                new[] { dnacollectionStatusId });

            var index15 = runtimeEntityType.AddIndex(
                new[] { multiSourceOffenderId });

            var index16 = runtimeEntityType.AddIndex(
                new[] { statementId });

            var index17 = runtimeEntityType.AddIndex(
                new[] { subjectDisciplinaryActionId });

            var index18 = runtimeEntityType.AddIndex(
                new[] { subjectExtraditionId });

            var index19 = runtimeEntityType.AddIndex(
                new[] { subjectNoticeId });

            var index20 = runtimeEntityType.AddIndex(
                new[] { subjectSpecialHandlingId });

            var index21 = runtimeEntityType.AddIndex(
                new[] { subjectStatusId });

            var index22 = runtimeEntityType.AddIndex(
                new[] { theftCategoryId });

            var index23 = runtimeEntityType.AddIndex(
                new[] { warrantCategoryId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CautionInformationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CautionInformationId") }),
                principalEntityType);

            var cautionInformation = declaringEntityType.AddNavigation("CautionInformation",
                runtimeForeignKey,
                onDependent: true,
                typeof(CautionInformationDim),
                propertyInfo: typeof(Subject).GetProperty("CautionInformation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CautionInformation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(CautionInformationDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CautionInformationDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_CautionInformationDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalInvolvementId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalInvolvementId") }),
                principalEntityType);

            var criminalInvolvement = declaringEntityType.AddNavigation("CriminalInvolvement",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalInvolvementDim),
                propertyInfo: typeof(Subject).GetProperty("CriminalInvolvement", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalInvolvement>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(CriminalInvolvementDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalInvolvementDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_CriminalInvolvementDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalOrganizationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("OrganizationId") }),
                principalEntityType);

            var criminalOrganization = declaringEntityType.AddNavigation("CriminalOrganization",
                runtimeForeignKey,
                onDependent: true,
                typeof(Organization),
                propertyInfo: typeof(Subject).GetProperty("CriminalOrganization", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalOrganization>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(Organization).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Organization).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_Organization");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitActivityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitActivityId") }),
                principalEntityType);

            var criminalTraitActivity = declaringEntityType.AddNavigation("CriminalTraitActivity",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitActivityDim),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitActivity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitActivity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(CriminalTraitActivityDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitActivityDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_CriminalTraitActivityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitColorId") }),
                principalEntityType);

            var criminalTraitColor = declaringEntityType.AddNavigation("CriminalTraitColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitColorDim),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(CriminalTraitColorDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitColorDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_CriminalTraitColorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitCommunicationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitCommunicationId") }),
                principalEntityType);

            var criminalTraitCommunication = declaringEntityType.AddNavigation("CriminalTraitCommunication",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitCommunicationDim),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitCommunication", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitCommunication>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(CriminalTraitCommunicationDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitCommunicationDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_CriminalTraitCommunicationDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitDressId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitDressId") }),
                principalEntityType);

            var criminalTraitDress = declaringEntityType.AddNavigation("CriminalTraitDress",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitDressDim),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitDress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitDress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(CriminalTraitDressDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitDressDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_CriminalTraitDressDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitEthnicityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EthnicityId") }),
                principalEntityType);

            var criminalTraitEthnicity = declaringEntityType.AddNavigation("CriminalTraitEthnicity",
                runtimeForeignKey,
                onDependent: true,
                typeof(EthnicityDim),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitEthnicity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitEthnicity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(EthnicityDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EthnicityDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_EthnicityDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitGraffitiImageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonImageId") }),
                principalEntityType);

            var criminalTraitGraffitiImage = declaringEntityType.AddNavigation("CriminalTraitGraffitiImage",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonImage),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitGraffitiImage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitGraffitiImage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectCriminalTraitGraffitiImages = principalEntityType.AddNavigation("SubjectCriminalTraitGraffitiImages",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(PersonImage).GetProperty("SubjectCriminalTraitGraffitiImages", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonImage).GetField("<SubjectCriminalTraitGraffitiImages>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_Image-Graffiti");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitHandSignalId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitHandSignalId") }),
                principalEntityType);

            var criminalTraitHandSignal = declaringEntityType.AddNavigation("CriminalTraitHandSignal",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitHandSignalDim),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitHandSignal", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitHandSignal>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(CriminalTraitHandSignalDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitHandSignalDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_CriminalTraitHandSignalDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitId") }),
                principalEntityType);

            var criminalTrait = declaringEntityType.AddNavigation("CriminalTrait",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitDim),
                propertyInfo: typeof(Subject).GetProperty("CriminalTrait", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTrait>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(CriminalTraitDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_CriminalTraitDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey12(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitModusOperationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitModusOperandiId") }),
                principalEntityType);

            var criminalTraitModusOperation = declaringEntityType.AddNavigation("CriminalTraitModusOperation",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitModusOperandiDim),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitModusOperation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitModusOperation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(CriminalTraitModusOperandiDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitModusOperandiDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_CriminalTraitModusOperandiDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey13(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitTargetId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CriminalTraitTargetId") }),
                principalEntityType);

            var criminalTraitTarget = declaringEntityType.AddNavigation("CriminalTraitTarget",
                runtimeForeignKey,
                onDependent: true,
                typeof(CriminalTraitTargetDim),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitTarget", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitTarget>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(CriminalTraitTargetDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CriminalTraitTargetDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_CriminalTraitTargetDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey14(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitTattooImageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonImageId") }),
                principalEntityType);

            var criminalTraitTattooImage = declaringEntityType.AddNavigation("CriminalTraitTattooImage",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonImage),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitTattooImage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitTattooImage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectCriminalTraitTattooImages = principalEntityType.AddNavigation("SubjectCriminalTraitTattooImages",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(PersonImage).GetProperty("SubjectCriminalTraitTattooImages", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonImage).GetField("<SubjectCriminalTraitTattooImages>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_Image-Tattoo");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey15(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CriminalTraitTurfLocaitonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonLocationId") }),
                principalEntityType);

            var criminalTraitTurfLocaiton = declaringEntityType.AddNavigation("CriminalTraitTurfLocaiton",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonLocation),
                propertyInfo: typeof(Subject).GetProperty("CriminalTraitTurfLocaiton", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<CriminalTraitTurfLocaiton>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(PersonLocation).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonLocation).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_Location-TurffLocation");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey16(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DnacollectionStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DnacollectionStatusId") }),
                principalEntityType);

            var dnacollectionStatus = declaringEntityType.AddNavigation("DnacollectionStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(DnacollectionStatusDim),
                propertyInfo: typeof(Subject).GetProperty("DnacollectionStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<DnacollectionStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(DnacollectionStatusDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DnacollectionStatusDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_DNACollectionStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey17(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("MultiSourceOffenderId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("MultiSourceOffenderId") }),
                principalEntityType);

            var multiSourceOffender = declaringEntityType.AddNavigation("MultiSourceOffender",
                runtimeForeignKey,
                onDependent: true,
                typeof(MultiSourceOffenderDim),
                propertyInfo: typeof(Subject).GetProperty("MultiSourceOffender", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<MultiSourceOffender>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(MultiSourceOffenderDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MultiSourceOffenderDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_MultiSourceOffenderDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey18(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                unique: true,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(Subject).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subject = principalEntityType.AddNavigation("Subject",
                runtimeForeignKey,
                onDependent: false,
                typeof(Subject),
                propertyInfo: typeof(Person).GetProperty("Subject", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<Subject>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey19(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("StatementId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonCommentId") }),
                principalEntityType);

            var statement = declaringEntityType.AddNavigation("Statement",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonComment),
                propertyInfo: typeof(Subject).GetProperty("Statement", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<Statement>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectStatements = principalEntityType.AddNavigation("SubjectStatements",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(PersonComment).GetProperty("SubjectStatements", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonComment).GetField("<SubjectStatements>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_PersonComment-Statement");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey20(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SubjectDisciplinaryActionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SubjectDisciplinaryActionId") }),
                principalEntityType);

            var subjectDisciplinaryAction = declaringEntityType.AddNavigation("SubjectDisciplinaryAction",
                runtimeForeignKey,
                onDependent: true,
                typeof(SubjectDisciplinaryActionDim),
                propertyInfo: typeof(Subject).GetProperty("SubjectDisciplinaryAction", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectDisciplinaryAction>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(SubjectDisciplinaryActionDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectDisciplinaryActionDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_DisciplinaryActionDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey21(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SubjectExtraditionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SubjectExtraditionId") }),
                principalEntityType);

            var subjectExtradition = declaringEntityType.AddNavigation("SubjectExtradition",
                runtimeForeignKey,
                onDependent: true,
                typeof(SubjectExtraditionDim),
                propertyInfo: typeof(Subject).GetProperty("SubjectExtradition", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectExtradition>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(SubjectExtraditionDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectExtraditionDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_ExtraditionDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey22(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SubjectNoticeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonCommentId") }),
                principalEntityType);

            var subjectNotice = declaringEntityType.AddNavigation("SubjectNotice",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonComment),
                propertyInfo: typeof(Subject).GetProperty("SubjectNotice", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectNotice>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectSubjectNotices = principalEntityType.AddNavigation("SubjectSubjectNotices",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(PersonComment).GetProperty("SubjectSubjectNotices", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonComment).GetField("<SubjectSubjectNotices>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_PersonComment-Notice");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey23(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SubjectSpecialHandlingId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonCommentId") }),
                principalEntityType);

            var subjectSpecialHandling = declaringEntityType.AddNavigation("SubjectSpecialHandling",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonComment),
                propertyInfo: typeof(Subject).GetProperty("SubjectSpecialHandling", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectSpecialHandling>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjectSubjectSpecialHandlings = principalEntityType.AddNavigation("SubjectSubjectSpecialHandlings",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(PersonComment).GetProperty("SubjectSubjectSpecialHandlings", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonComment).GetField("<SubjectSubjectSpecialHandlings>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_PersonComment-SpecialHandling");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey24(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SubjectStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SubjectStatusId") }),
                principalEntityType);

            var subjectStatus = declaringEntityType.AddNavigation("SubjectStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(SubjectStatusDim),
                propertyInfo: typeof(Subject).GetProperty("SubjectStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<SubjectStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(SubjectStatusDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SubjectStatusDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_StatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey25(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TheftCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("TheftCategoryId") }),
                principalEntityType);

            var theftCategory = declaringEntityType.AddNavigation("TheftCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(TheftCategoryDim),
                propertyInfo: typeof(Subject).GetProperty("TheftCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<TheftCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(TheftCategoryDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TheftCategoryDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_TheftCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey26(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("WarrantCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("WarrantCategoryId") }),
                principalEntityType);

            var warrantCategory = declaringEntityType.AddNavigation("WarrantCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(WarrantCategoryDim),
                propertyInfo: typeof(Subject).GetProperty("WarrantCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Subject).GetField("<WarrantCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var subjects = principalEntityType.AddNavigation("Subjects",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Subject>),
                propertyInfo: typeof(WarrantCategoryDim).GetProperty("Subjects", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WarrantCategoryDim).GetField("<Subjects>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Subject_WarrantCategoryDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Subject");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
