// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class IncidentCategoryTypeAssociationEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.IncidentCategoryTypeAssociation",
                typeof(IncidentCategoryTypeAssociation),
                baseEntityType,
                propertyCount: 6,
                navigationCount: 2,
                foreignKeyCount: 2,
                unnamedIndexCount: 2,
                keyCount: 1);

            var incidentCategoryTypeAssociationId = runtimeEntityType.AddProperty(
                "IncidentCategoryTypeAssociationId",
                typeof(long),
                propertyInfo: typeof(IncidentCategoryTypeAssociation).GetProperty("IncidentCategoryTypeAssociationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentCategoryTypeAssociation).GetField("<IncidentCategoryTypeAssociationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            incidentCategoryTypeAssociationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(IncidentCategoryTypeAssociation).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentCategoryTypeAssociation).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedBy = runtimeEntityType.AddProperty(
                "ModifiedBy",
                typeof(long?),
                propertyInfo: typeof(IncidentCategoryTypeAssociation).GetProperty("ModifiedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentCategoryTypeAssociation).GetField("<ModifiedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallCategoryId = runtimeEntityType.AddProperty(
                "ServiceCallCategoryId",
                typeof(int),
                propertyInfo: typeof(IncidentCategoryTypeAssociation).GetProperty("ServiceCallCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentCategoryTypeAssociation).GetField("<ServiceCallCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            serviceCallCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var serviceCallIncidentTypeId = runtimeEntityType.AddProperty(
                "ServiceCallIncidentTypeId",
                typeof(int),
                propertyInfo: typeof(IncidentCategoryTypeAssociation).GetProperty("ServiceCallIncidentTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentCategoryTypeAssociation).GetField("<ServiceCallIncidentTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            serviceCallIncidentTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var timeStamp = runtimeEntityType.AddProperty(
                "TimeStamp",
                typeof(byte[]),
                propertyInfo: typeof(IncidentCategoryTypeAssociation).GetProperty("TimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentCategoryTypeAssociation).GetField("<TimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                concurrencyToken: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            timeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { incidentCategoryTypeAssociationId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { serviceCallCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { serviceCallIncidentTypeId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ServiceCallCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ServiceCallCategoryId") }),
                principalEntityType,
                required: true);

            var serviceCallCategory = declaringEntityType.AddNavigation("ServiceCallCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(ServiceCallCategoryDim),
                propertyInfo: typeof(IncidentCategoryTypeAssociation).GetProperty("ServiceCallCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentCategoryTypeAssociation).GetField("<ServiceCallCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var incidentCategoryTypeAssociations = principalEntityType.AddNavigation("IncidentCategoryTypeAssociations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<IncidentCategoryTypeAssociation>),
                propertyInfo: typeof(ServiceCallCategoryDim).GetProperty("IncidentCategoryTypeAssociations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCallCategoryDim).GetField("<IncidentCategoryTypeAssociations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_IncidentCategoryTypeAssociation_ServiceCallCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ServiceCallIncidentTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ServiceCallIncidentTypeId") }),
                principalEntityType,
                required: true);

            var serviceCallIncidentType = declaringEntityType.AddNavigation("ServiceCallIncidentType",
                runtimeForeignKey,
                onDependent: true,
                typeof(ServiceCallIncidentTypeDim),
                propertyInfo: typeof(IncidentCategoryTypeAssociation).GetProperty("ServiceCallIncidentType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IncidentCategoryTypeAssociation).GetField("<ServiceCallIncidentType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var incidentCategoryTypeAssociations = principalEntityType.AddNavigation("IncidentCategoryTypeAssociations",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<IncidentCategoryTypeAssociation>),
                propertyInfo: typeof(ServiceCallIncidentTypeDim).GetProperty("IncidentCategoryTypeAssociations", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ServiceCallIncidentTypeDim).GetField("<IncidentCategoryTypeAssociations>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_IncidentCategoryTypeAssociation_ServiceCallIncidentTypeDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "IncidentCategoryTypeAssociation");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
