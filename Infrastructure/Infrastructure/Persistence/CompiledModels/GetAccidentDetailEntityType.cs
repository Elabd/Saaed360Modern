// <auto-generated />
using System;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class GetAccidentDetailEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.GetAccidentDetail",
                typeof(GetAccidentDetail),
                baseEntityType,
                propertyCount: 27);

            var adpreportNumber = runtimeEntityType.AddProperty(
                "AdpreportNumber",
                typeof(long?),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("AdpreportNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<AdpreportNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            adpreportNumber.AddAnnotation("Relational:ColumnName", "ADPReportNumber");
            adpreportNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var chasisNumber = runtimeEntityType.AddProperty(
                "ChasisNumber",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("ChasisNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<ChasisNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            chasisNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemRegistrationPlateColorId = runtimeEntityType.AddProperty(
                "ItemRegistrationPlateColorId",
                typeof(int?),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("ItemRegistrationPlateColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<ItemRegistrationPlateColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            itemRegistrationPlateColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemRegistrationPlateKindId = runtimeEntityType.AddProperty(
                "ItemRegistrationPlateKindId",
                typeof(int?),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("ItemRegistrationPlateKindId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<ItemRegistrationPlateKindId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            itemRegistrationPlateKindId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ownerTcf = runtimeEntityType.AddProperty(
                "OwnerTcf",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("OwnerTcf", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<OwnerTcf>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            ownerTcf.AddAnnotation("Relational:ColumnName", "OwnerTCF");
            ownerTcf.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateColor = runtimeEntityType.AddProperty(
                "PlateColor",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("PlateColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<PlateColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            plateColor.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateColorEn = runtimeEntityType.AddProperty(
                "PlateColorEn",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("PlateColorEn", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<PlateColorEn>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateColorEn.AddAnnotation("Relational:ColumnName", "PlateColorEN");
            plateColorEn.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateKindEn = runtimeEntityType.AddProperty(
                "PlateKindEn",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("PlateKindEn", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<PlateKindEn>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateKindEn.AddAnnotation("Relational:ColumnName", "PlateKindEN");
            plateKindEn.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateNumber = runtimeEntityType.AddProperty(
                "PlateNumber",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("PlateNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<PlateNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            plateNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateSource = runtimeEntityType.AddProperty(
                "PlateSource",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("PlateSource", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<PlateSource>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            plateSource.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateSourceEn = runtimeEntityType.AddProperty(
                "PlateSourceEn",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("PlateSourceEn", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<PlateSourceEn>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateSourceEn.AddAnnotation("Relational:ColumnName", "PlateSourceEN");
            plateSourceEn.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateSourceId = runtimeEntityType.AddProperty(
                "PlateSourceId",
                typeof(int?),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("PlateSourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<PlateSourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateSourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateType = runtimeEntityType.AddProperty(
                "PlateType",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("PlateType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<PlateType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 200);
            plateType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportDateTime = runtimeEntityType.AddProperty(
                "ReportDateTime",
                typeof(DateTime),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("ReportDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<ReportDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            reportDateTime.AddAnnotation("Relational:ColumnType", "datetime");
            reportDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportId = runtimeEntityType.AddProperty(
                "ReportId",
                typeof(int),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("ReportId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<ReportId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            reportId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportNumber = runtimeEntityType.AddProperty(
                "ReportNumber",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("ReportNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<ReportNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            reportNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleBrand = runtimeEntityType.AddProperty(
                "VehicleBrand",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("VehicleBrand", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<VehicleBrand>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            vehicleBrand.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleBrandEn = runtimeEntityType.AddProperty(
                "VehicleBrandEn",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("VehicleBrandEn", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<VehicleBrandEn>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleBrandEn.AddAnnotation("Relational:ColumnName", "VehicleBrandEN");
            vehicleBrandEn.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleBrandId = runtimeEntityType.AddProperty(
                "VehicleBrandId",
                typeof(int?),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("VehicleBrandId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<VehicleBrandId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleBrandId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleModel = runtimeEntityType.AddProperty(
                "VehicleModel",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("VehicleModel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<VehicleModel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            vehicleModel.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleModelEn = runtimeEntityType.AddProperty(
                "VehicleModelEn",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("VehicleModelEn", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<VehicleModelEn>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleModelEn.AddAnnotation("Relational:ColumnName", "VehicleModelEN");
            vehicleModelEn.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleModelId = runtimeEntityType.AddProperty(
                "VehicleModelId",
                typeof(int?),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("VehicleModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<VehicleModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleModelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleRole = runtimeEntityType.AddProperty(
                "VehicleRole",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("VehicleRole", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<VehicleRole>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 100);
            vehicleRole.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleRoleId = runtimeEntityType.AddProperty(
                "VehicleRoleId",
                typeof(int?),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("VehicleRoleId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<VehicleRoleId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleRoleId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleType = runtimeEntityType.AddProperty(
                "VehicleType",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("VehicleType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<VehicleType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 150);
            vehicleType.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleTypeEn = runtimeEntityType.AddProperty(
                "VehicleTypeEn",
                typeof(string),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("VehicleTypeEn", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<VehicleTypeEn>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleTypeEn.AddAnnotation("Relational:ColumnName", "VehicleTypeEN");
            vehicleTypeEn.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleTypeId = runtimeEntityType.AddProperty(
                "VehicleTypeId",
                typeof(int?),
                propertyInfo: typeof(GetAccidentDetail).GetProperty("VehicleTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GetAccidentDetail).GetField("<VehicleTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleTypeId.AddAnnotation("Relational:ColumnName", "VehicleTypeID");
            vehicleTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "GetAccidentDetails");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
