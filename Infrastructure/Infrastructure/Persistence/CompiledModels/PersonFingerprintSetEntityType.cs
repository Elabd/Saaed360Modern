// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class PersonFingerprintSetEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.PersonFingerprintSet",
                typeof(PersonFingerprintSet),
                baseEntityType,
                propertyCount: 15,
                navigationCount: 7,
                foreignKeyCount: 7,
                unnamedIndexCount: 7,
                keyCount: 1);

            var personFingerprintSetId = runtimeEntityType.AddProperty(
                "PersonFingerprintSetId",
                typeof(long),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("PersonFingerprintSetId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<PersonFingerprintSetId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            personFingerprintSetId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var createDateTimeStamp = runtimeEntityType.AddProperty(
                "CreateDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("CreateDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<CreateDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            createDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            createDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fingerPrintPatternCategoryId = runtimeEntityType.AddProperty(
                "FingerPrintPatternCategoryId",
                typeof(int?),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("FingerPrintPatternCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<FingerPrintPatternCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            fingerPrintPatternCategoryId.AddAnnotation("Relational:DefaultValue", 1);
            fingerPrintPatternCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fingerPrintPatternClassificationId = runtimeEntityType.AddProperty(
                "FingerPrintPatternClassificationId",
                typeof(int?),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("FingerPrintPatternClassificationId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<FingerPrintPatternClassificationId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            fingerPrintPatternClassificationId.AddAnnotation("Relational:DefaultValue", 1);
            fingerPrintPatternClassificationId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fingerprintFingerId = runtimeEntityType.AddProperty(
                "FingerprintFingerId",
                typeof(int?),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("FingerprintFingerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<FingerprintFingerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            fingerprintFingerId.AddAnnotation("Relational:DefaultValue", 1);
            fingerprintFingerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fingerprintImageGuid = runtimeEntityType.AddProperty(
                "FingerprintImageGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("FingerprintImageGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<FingerprintImageGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            fingerprintImageGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var fingerprintImageId = runtimeEntityType.AddProperty(
                "FingerprintImageId",
                typeof(long),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("FingerprintImageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<FingerprintImageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            fingerprintImageId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isDeleted.AddAnnotation("Relational:DefaultValue", false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDateTimeStamp = runtimeEntityType.AddProperty(
                "ModifiedDateTimeStamp",
                typeof(DateTime?),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("ModifiedDateTimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<ModifiedDateTimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            modifiedDateTimeStamp.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDateTimeStamp.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            modifiedDateTimeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personFingerprintSetDescription = runtimeEntityType.AddProperty(
                "PersonFingerprintSetDescription",
                typeof(string),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("PersonFingerprintSetDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<PersonFingerprintSetDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 300);
            personFingerprintSetDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personFingerprintSetGuid = runtimeEntityType.AddProperty(
                "PersonFingerprintSetGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("PersonFingerprintSetGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<PersonFingerprintSetGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personFingerprintSetGuid.AddAnnotation("Relational:DefaultValueSql", "(newid())");
            personFingerprintSetGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personGuid = runtimeEntityType.AddProperty(
                "PersonGuid",
                typeof(Guid),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("PersonGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<PersonGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            personGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var personId = runtimeEntityType.AddProperty(
                "PersonId",
                typeof(long),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("PersonId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<PersonId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            personId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var rowStatusId = runtimeEntityType.AddProperty(
                "RowStatusId",
                typeof(int?),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("RowStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<RowStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            rowStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var sourceId = runtimeEntityType.AddProperty(
                "SourceId",
                typeof(long),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("SourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<SourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            sourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { personFingerprintSetId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { fingerPrintPatternCategoryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { fingerPrintPatternClassificationId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { fingerprintFingerId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { fingerprintImageId });

            var index3 = runtimeEntityType.AddIndex(
                new[] { personId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { rowStatusId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { sourceId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FingerPrintPatternCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FingerPrintPatternCategoryId") }),
                principalEntityType);

            var fingerPrintPatternCategory = declaringEntityType.AddNavigation("FingerPrintPatternCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(FingerPrintPatternCategoryDim),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("FingerPrintPatternCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<FingerPrintPatternCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personFingerprintSets = principalEntityType.AddNavigation("PersonFingerprintSets",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonFingerprintSet>),
                propertyInfo: typeof(FingerPrintPatternCategoryDim).GetProperty("PersonFingerprintSets", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FingerPrintPatternCategoryDim).GetField("<PersonFingerprintSets>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FingerprintClassifcationTypeDIM_PersonFingerprintSet_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FingerPrintPatternClassificationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FingerPrintPatternClassificationId") }),
                principalEntityType);

            var fingerPrintPatternClassification = declaringEntityType.AddNavigation("FingerPrintPatternClassification",
                runtimeForeignKey,
                onDependent: true,
                typeof(FingerPrintPatternClassificationDim),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("FingerPrintPatternClassification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<FingerPrintPatternClassification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personFingerprintSets = principalEntityType.AddNavigation("PersonFingerprintSets",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonFingerprintSet>),
                propertyInfo: typeof(FingerPrintPatternClassificationDim).GetProperty("PersonFingerprintSets", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FingerPrintPatternClassificationDim).GetField("<PersonFingerprintSets>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FingerprintClassificationDIM_PersonFingerprintSet_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FingerprintFingerId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("FingerPrintFingerId") }),
                principalEntityType);

            var fingerprintFinger = declaringEntityType.AddNavigation("FingerprintFinger",
                runtimeForeignKey,
                onDependent: true,
                typeof(FingerprintFingerDim),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("FingerprintFinger", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<FingerprintFinger>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personFingerprintSets = principalEntityType.AddNavigation("PersonFingerprintSets",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonFingerprintSet>),
                propertyInfo: typeof(FingerprintFingerDim).GetProperty("PersonFingerprintSets", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FingerprintFingerDim).GetField("<PersonFingerprintSets>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonFingerprintSet_FingerPrintDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("FingerprintImageId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonImageId") }),
                principalEntityType,
                required: true);

            var fingerprintImage = declaringEntityType.AddNavigation("FingerprintImage",
                runtimeForeignKey,
                onDependent: true,
                typeof(PersonImage),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("FingerprintImage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<FingerprintImage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personFingerprintSets = principalEntityType.AddNavigation("PersonFingerprintSets",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonFingerprintSet>),
                propertyInfo: typeof(PersonImage).GetProperty("PersonFingerprintSets", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonImage).GetField("<PersonFingerprintSets>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonFingerprintSet_Image");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PersonId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType,
                required: true);

            var person = declaringEntityType.AddNavigation("Person",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("Person", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<Person>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personFingerprintSets = principalEntityType.AddNavigation("PersonFingerprintSets",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonFingerprintSet>),
                propertyInfo: typeof(Person).GetProperty("PersonFingerprintSets", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<PersonFingerprintSets>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "Person_PersonFingerprintSet_FK1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RowStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("RowStatusId") }),
                principalEntityType);

            var rowStatus = declaringEntityType.AddNavigation("RowStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(RowStatusDim),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("RowStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<RowStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personFingerprintSets = principalEntityType.AddNavigation("PersonFingerprintSets",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonFingerprintSet>),
                propertyInfo: typeof(RowStatusDim).GetProperty("PersonFingerprintSets", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RowStatusDim).GetField("<PersonFingerprintSets>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonFingerprintSet_RowStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("SourceId") }),
                principalEntityType,
                required: true);

            var source = declaringEntityType.AddNavigation("Source",
                runtimeForeignKey,
                onDependent: true,
                typeof(Source),
                propertyInfo: typeof(PersonFingerprintSet).GetProperty("Source", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PersonFingerprintSet).GetField("<Source>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var personFingerprintSets = principalEntityType.AddNavigation("PersonFingerprintSets",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<PersonFingerprintSet>),
                propertyInfo: typeof(Source).GetProperty("PersonFingerprintSets", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Source).GetField("<PersonFingerprintSets>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_PersonFingerprintSet_Source");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PersonFingerprintSet");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
