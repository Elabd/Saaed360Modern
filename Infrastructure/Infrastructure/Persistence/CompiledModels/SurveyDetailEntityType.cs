// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class SurveyDetailEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.SurveyDetail",
                typeof(SurveyDetail),
                baseEntityType,
                propertyCount: 8,
                navigationCount: 3,
                foreignKeyCount: 3,
                namedIndexCount: 3,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(SurveyDetail).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyDetail).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var addedDate = runtimeEntityType.AddProperty(
                "AddedDate",
                typeof(DateTime?),
                propertyInfo: typeof(SurveyDetail).GetProperty("AddedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyDetail).GetField("<AddedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            addedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var ipaddress = runtimeEntityType.AddProperty(
                "Ipaddress",
                typeof(string),
                propertyInfo: typeof(SurveyDetail).GetProperty("Ipaddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyDetail).GetField("<Ipaddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            ipaddress.AddAnnotation("Relational:ColumnName", "IPAddress");
            ipaddress.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDate = runtimeEntityType.AddProperty(
                "ModifiedDate",
                typeof(DateTime?),
                propertyInfo: typeof(SurveyDetail).GetProperty("ModifiedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyDetail).GetField("<ModifiedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modifiedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var order = runtimeEntityType.AddProperty(
                "Order",
                typeof(long?),
                propertyInfo: typeof(SurveyDetail).GetProperty("Order", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyDetail).GetField("<Order>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            order.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var surveyAnswerId = runtimeEntityType.AddProperty(
                "SurveyAnswerId",
                typeof(long),
                propertyInfo: typeof(SurveyDetail).GetProperty("SurveyAnswerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyDetail).GetField("<SurveyAnswerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            surveyAnswerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var surveyId = runtimeEntityType.AddProperty(
                "SurveyId",
                typeof(long),
                propertyInfo: typeof(SurveyDetail).GetProperty("SurveyId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyDetail).GetField("<SurveyId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            surveyId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var surveyStatusId = runtimeEntityType.AddProperty(
                "SurveyStatusId",
                typeof(long),
                propertyInfo: typeof(SurveyDetail).GetProperty("SurveyStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyDetail).GetField("<SurveyStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            surveyStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var iX_SurveyDetails_SurveyAnswerId = runtimeEntityType.AddIndex(
                new[] { surveyAnswerId },
                name: "IX_SurveyDetails_SurveyAnswerId");

            var iX_SurveyDetails_SurveyId = runtimeEntityType.AddIndex(
                new[] { surveyId },
                name: "IX_SurveyDetails_SurveyId");

            var iX_SurveyDetails_SurveyStatusId = runtimeEntityType.AddIndex(
                new[] { surveyStatusId },
                name: "IX_SurveyDetails_SurveyStatusId");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SurveyAnswerId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var surveyAnswer = declaringEntityType.AddNavigation("SurveyAnswer",
                runtimeForeignKey,
                onDependent: true,
                typeof(SurveyAnswer),
                propertyInfo: typeof(SurveyDetail).GetProperty("SurveyAnswer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyDetail).GetField("<SurveyAnswer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var surveyDetails = principalEntityType.AddNavigation("SurveyDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SurveyDetail>),
                propertyInfo: typeof(SurveyAnswer).GetProperty("SurveyDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyAnswer).GetField("<SurveyDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SurveyId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var survey = declaringEntityType.AddNavigation("Survey",
                runtimeForeignKey,
                onDependent: true,
                typeof(Survey),
                propertyInfo: typeof(SurveyDetail).GetProperty("Survey", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyDetail).GetField("<Survey>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var surveyDetails = principalEntityType.AddNavigation("SurveyDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SurveyDetail>),
                propertyInfo: typeof(Survey).GetProperty("SurveyDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Survey).GetField("<SurveyDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SurveyStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var surveyStatus = declaringEntityType.AddNavigation("SurveyStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(SurveyStatus),
                propertyInfo: typeof(SurveyDetail).GetProperty("SurveyStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyDetail).GetField("<SurveyStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var surveyDetails = principalEntityType.AddNavigation("SurveyDetails",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<SurveyDetail>),
                propertyInfo: typeof(SurveyStatus).GetProperty("SurveyDetails", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SurveyStatus).GetField("<SurveyDetails>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "SurveyDetails");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
