// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class VehicleDatumEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.VehicleDatum",
                typeof(VehicleDatum),
                baseEntityType,
                propertyCount: 45,
                navigationCount: 36,
                foreignKeyCount: 22,
                unnamedIndexCount: 22,
                keyCount: 1);

            var vehicleDataId = runtimeEntityType.AddProperty(
                "VehicleDataId",
                typeof(int),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            vehicleDataId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var chasisNumber = runtimeEntityType.AddProperty(
                "ChasisNumber",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("ChasisNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ChasisNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            chasisNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var chemicalId = runtimeEntityType.AddProperty(
                "ChemicalId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("ChemicalId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ChemicalId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            chemicalId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var collisionId = runtimeEntityType.AddProperty(
                "CollisionId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("CollisionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<CollisionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            collisionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var combinedPlateNumber = runtimeEntityType.AddProperty(
                "CombinedPlateNumber",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("CombinedPlateNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<CombinedPlateNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            combinedPlateNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var comments = runtimeEntityType.AddProperty(
                "Comments",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("Comments", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<Comments>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            comments.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var countryOfOriginId = runtimeEntityType.AddProperty(
                "CountryOfOriginId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("CountryOfOriginId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<CountryOfOriginId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            countryOfOriginId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(long?),
                propertyInfo: typeof(VehicleDatum).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdDate = runtimeEntityType.AddProperty(
                "CreatedDate",
                typeof(DateTime?),
                propertyInfo: typeof(VehicleDatum).GetProperty("CreatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<CreatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            createdDate.AddAnnotation("Relational:ColumnType", "datetime");
            createdDate.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            createdDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var deliveryCompanyId = runtimeEntityType.AddProperty(
                "DeliveryCompanyId",
                typeof(long?),
                propertyInfo: typeof(VehicleDatum).GetProperty("DeliveryCompanyId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<DeliveryCompanyId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            deliveryCompanyId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var deliveryCompanyOthers = runtimeEntityType.AddProperty(
                "DeliveryCompanyOthers",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("DeliveryCompanyOthers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<DeliveryCompanyOthers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 150);
            deliveryCompanyOthers.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var engineNumber = runtimeEntityType.AddProperty(
                "EngineNumber",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("EngineNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<EngineNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            engineNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var expiryDate = runtimeEntityType.AddProperty(
                "ExpiryDate",
                typeof(DateTime?),
                propertyInfo: typeof(VehicleDatum).GetProperty("ExpiryDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ExpiryDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            expiryDate.AddAnnotation("Relational:ColumnType", "datetime");
            expiryDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var glassColorId = runtimeEntityType.AddProperty(
                "GlassColorId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("GlassColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<GlassColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            glassColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insuranceCompanyId = runtimeEntityType.AddProperty(
                "InsuranceCompanyId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("InsuranceCompanyId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<InsuranceCompanyId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            insuranceCompanyId.AddAnnotation("Relational:ColumnName", "InsuranceCompanyID");
            insuranceCompanyId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insurancePolicyNumber = runtimeEntityType.AddProperty(
                "InsurancePolicyNumber",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("InsurancePolicyNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<InsurancePolicyNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            insurancePolicyNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var insuranceTypeId = runtimeEntityType.AddProperty(
                "InsuranceTypeId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("InsuranceTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<InsuranceTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            insuranceTypeId.AddAnnotation("Relational:ColumnName", "InsuranceTypeID");
            insuranceTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isAirBagOpened = runtimeEntityType.AddProperty(
                "IsAirBagOpened",
                typeof(bool?),
                propertyInfo: typeof(VehicleDatum).GetProperty("IsAirBagOpened", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<IsAirBagOpened>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isAirBagOpened.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isDeleted = runtimeEntityType.AddProperty(
                "IsDeleted",
                typeof(bool?),
                propertyInfo: typeof(VehicleDatum).GetProperty("IsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<IsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isDeleted.AddAnnotation("Relational:DefaultValue", false);
            isDeleted.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isVehicleGoodAndNotRemoved = runtimeEntityType.AddProperty(
                "IsVehicleGoodAndNotRemoved",
                typeof(bool?),
                propertyInfo: typeof(VehicleDatum).GetProperty("IsVehicleGoodAndNotRemoved", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<IsVehicleGoodAndNotRemoved>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            isVehicleGoodAndNotRemoved.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var isVehicleWithoutPlateNumber = runtimeEntityType.AddProperty(
                "IsVehicleWithoutPlateNumber",
                typeof(bool?),
                propertyInfo: typeof(VehicleDatum).GetProperty("IsVehicleWithoutPlateNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<IsVehicleWithoutPlateNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            isVehicleWithoutPlateNumber.AddAnnotation("Relational:DefaultValue", false);
            isVehicleWithoutPlateNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemRegistrationPlateCategoryId = runtimeEntityType.AddProperty(
                "ItemRegistrationPlateCategoryId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("ItemRegistrationPlateCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ItemRegistrationPlateCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            itemRegistrationPlateCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemRegistrationPlateColorId = runtimeEntityType.AddProperty(
                "ItemRegistrationPlateColorId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("ItemRegistrationPlateColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ItemRegistrationPlateColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            itemRegistrationPlateColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var itemRegistrationPlateKindId = runtimeEntityType.AddProperty(
                "ItemRegistrationPlateKindId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("ItemRegistrationPlateKindId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ItemRegistrationPlateKindId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            itemRegistrationPlateKindId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var manufactureYearId = runtimeEntityType.AddProperty(
                "ManufactureYearId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("ManufactureYearId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ManufactureYearId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            manufactureYearId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var modifiedDate = runtimeEntityType.AddProperty(
                "ModifiedDate",
                typeof(DateTime?),
                propertyInfo: typeof(VehicleDatum).GetProperty("ModifiedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ModifiedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            modifiedDate.AddAnnotation("Relational:ColumnType", "datetime");
            modifiedDate.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            modifiedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateNumber = runtimeEntityType.AddProperty(
                "PlateNumber",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("PlateNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<PlateNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            plateNumber.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var plateSourceId = runtimeEntityType.AddProperty(
                "PlateSourceId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("PlateSourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<PlateSourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            plateSourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reasonCategoryDescription = runtimeEntityType.AddProperty(
                "ReasonCategoryDescription",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("ReasonCategoryDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ReasonCategoryDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reasonCategoryDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reasonCategoryId = runtimeEntityType.AddProperty(
                "ReasonCategoryId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("ReasonCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ReasonCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reasonCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var reportCode = runtimeEntityType.AddProperty(
                "ReportCode",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("ReportCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ReportCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 50);
            reportCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var selectedCausedVehicleTypeId = runtimeEntityType.AddProperty(
                "SelectedCausedVehicleTypeId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("SelectedCausedVehicleTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<SelectedCausedVehicleTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            selectedCausedVehicleTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var timeStamp = runtimeEntityType.AddProperty(
                "TimeStamp",
                typeof(byte[]),
                propertyInfo: typeof(VehicleDatum).GetProperty("TimeStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<TimeStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                concurrencyToken: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            timeStamp.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleBrandId = runtimeEntityType.AddProperty(
                "VehicleBrandId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleBrandId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleBrandId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleBrandId.AddAnnotation("Relational:ColumnName", "VehicleBrandID");
            vehicleBrandId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleCategoryId = runtimeEntityType.AddProperty(
                "VehicleCategoryId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleCategoryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleCategoryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleCategoryId.AddAnnotation("Relational:ColumnName", "VehicleCategoryID");
            vehicleCategoryId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleColorId = runtimeEntityType.AddProperty(
                "VehicleColorId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleColorId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleColorId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleColorId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDataTypeId = runtimeEntityType.AddProperty(
                "VehicleDataTypeId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleDataTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleDataTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleDataTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleDescription = runtimeEntityType.AddProperty(
                "VehicleDescription",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            vehicleDescription.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleEnergySourceId = runtimeEntityType.AddProperty(
                "VehicleEnergySourceId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleEnergySourceId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleEnergySourceId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleEnergySourceId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleModelId = runtimeEntityType.AddProperty(
                "VehicleModelId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleModelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleModelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleModelId.AddAnnotation("Relational:ColumnName", "VehicleModelID");
            vehicleModelId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleStatusComment = runtimeEntityType.AddProperty(
                "VehicleStatusComment",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleStatusComment", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleStatusComment>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleStatusComment.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleStatusId = runtimeEntityType.AddProperty(
                "VehicleStatusId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleStatusId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleStatusId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleStatusId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var vehicleTypeId = runtimeEntityType.AddProperty(
                "VehicleTypeId",
                typeof(int?),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleTypeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleTypeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            vehicleTypeId.AddAnnotation("Relational:ColumnName", "VehicleTypeID");
            vehicleTypeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weightEmpty = runtimeEntityType.AddProperty(
                "WeightEmpty",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("WeightEmpty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<WeightEmpty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            weightEmpty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var weightNonEmpty = runtimeEntityType.AddProperty(
                "WeightNonEmpty",
                typeof(string),
                propertyInfo: typeof(VehicleDatum).GetProperty("WeightNonEmpty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<WeightNonEmpty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 3000);
            weightNonEmpty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { vehicleDataId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK__VehicleD__250CE72879D42E07");

            var index = runtimeEntityType.AddIndex(
                new[] { chemicalId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { collisionId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { countryOfOriginId });

            var index2 = runtimeEntityType.AddIndex(
                new[] { createdBy });

            var index3 = runtimeEntityType.AddIndex(
                new[] { deliveryCompanyId });

            var index4 = runtimeEntityType.AddIndex(
                new[] { glassColorId });

            var index5 = runtimeEntityType.AddIndex(
                new[] { insuranceCompanyId });

            var index6 = runtimeEntityType.AddIndex(
                new[] { insuranceTypeId });

            var index7 = runtimeEntityType.AddIndex(
                new[] { itemRegistrationPlateCategoryId });

            var index8 = runtimeEntityType.AddIndex(
                new[] { itemRegistrationPlateColorId });

            var index9 = runtimeEntityType.AddIndex(
                new[] { itemRegistrationPlateKindId });

            var index10 = runtimeEntityType.AddIndex(
                new[] { manufactureYearId });

            var index11 = runtimeEntityType.AddIndex(
                new[] { plateSourceId });

            var index12 = runtimeEntityType.AddIndex(
                new[] { reasonCategoryId });

            var index13 = runtimeEntityType.AddIndex(
                new[] { selectedCausedVehicleTypeId });

            var index14 = runtimeEntityType.AddIndex(
                new[] { vehicleBrandId });

            var index15 = runtimeEntityType.AddIndex(
                new[] { vehicleCategoryId });

            var index16 = runtimeEntityType.AddIndex(
                new[] { vehicleColorId });

            var index17 = runtimeEntityType.AddIndex(
                new[] { vehicleDataTypeId });

            var index18 = runtimeEntityType.AddIndex(
                new[] { vehicleModelId });

            var index19 = runtimeEntityType.AddIndex(
                new[] { vehicleStatusId });

            var index20 = runtimeEntityType.AddIndex(
                new[] { vehicleTypeId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ChemicalId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ChemicalId") }),
                principalEntityType);

            var chemical = declaringEntityType.AddNavigation("Chemical",
                runtimeForeignKey,
                onDependent: true,
                typeof(ChemicalDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("Chemical", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<Chemical>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(ChemicalDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChemicalDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_ChemicalDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CollisionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CollisionId") }),
                principalEntityType);

            var collision = declaringEntityType.AddNavigation("Collision",
                runtimeForeignKey,
                onDependent: true,
                typeof(CollisionDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("Collision", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<Collision>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(CollisionDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CollisionDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_CollisionDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CountryOfOriginId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("GeoCountryId") }),
                principalEntityType);

            var countryOfOrigin = declaringEntityType.AddNavigation("CountryOfOrigin",
                runtimeForeignKey,
                onDependent: true,
                typeof(GeoCountryDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("CountryOfOrigin", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<CountryOfOrigin>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(GeoCountryDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GeoCountryDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleDataCountry_GeoCountryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CreatedBy") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PersonId") }),
                principalEntityType);

            var createdByNavigation = declaringEntityType.AddNavigation("CreatedByNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Person),
                propertyInfo: typeof(VehicleDatum).GetProperty("CreatedByNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<CreatedByNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(Person).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Person).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_Person");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey5(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DeliveryCompanyId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DeliveryCompanyId") }),
                principalEntityType);

            var deliveryCompany = declaringEntityType.AddNavigation("DeliveryCompany",
                runtimeForeignKey,
                onDependent: true,
                typeof(DeliveryCompanyDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("DeliveryCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<DeliveryCompany>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(DeliveryCompanyDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DeliveryCompanyDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK__VehicleDa__Deliv__53872F25");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey6(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("GlassColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("GlassColorId") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade);

            var glassColor = declaringEntityType.AddNavigation("GlassColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(GlassColorDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("GlassColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<GlassColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(GlassColorDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(GlassColorDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleDataGlassColor_ColorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey7(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InsuranceCompanyId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("InsuranceCompanyId") }),
                principalEntityType);

            var insuranceCompany = declaringEntityType.AddNavigation("InsuranceCompany",
                runtimeForeignKey,
                onDependent: true,
                typeof(InsuranceCompanyDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("InsuranceCompany", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<InsuranceCompany>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(InsuranceCompanyDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InsuranceCompanyDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_InsuranceCompanyDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey8(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("InsuranceTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("InsuranceTypeId") }),
                principalEntityType);

            var insuranceType = declaringEntityType.AddNavigation("InsuranceType",
                runtimeForeignKey,
                onDependent: true,
                typeof(InsuranceTypeDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("InsuranceType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<InsuranceType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(InsuranceTypeDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(InsuranceTypeDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_InsuranceTypeDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey9(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemRegistrationPlateCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemRegistrationPlateCategoryId") }),
                principalEntityType);

            var itemRegistrationPlateCategory = declaringEntityType.AddNavigation("ItemRegistrationPlateCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemRegistrationPlateCategoryDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("ItemRegistrationPlateCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ItemRegistrationPlateCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(ItemRegistrationPlateCategoryDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemRegistrationPlateCategoryDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_ItemRegistrationPlateCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey10(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemRegistrationPlateColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemRegistrationPlateColorId") }),
                principalEntityType);

            var itemRegistrationPlateColor = declaringEntityType.AddNavigation("ItemRegistrationPlateColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemRegistrationPlateColorDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("ItemRegistrationPlateColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ItemRegistrationPlateColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(ItemRegistrationPlateColorDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemRegistrationPlateColorDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_ItemRegistrationPlateColorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey11(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ItemRegistrationPlateKindId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ItemRegistrationPlateKindId") }),
                principalEntityType);

            var itemRegistrationPlateKind = declaringEntityType.AddNavigation("ItemRegistrationPlateKind",
                runtimeForeignKey,
                onDependent: true,
                typeof(ItemRegistrationPlateKindDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("ItemRegistrationPlateKind", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ItemRegistrationPlateKind>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(ItemRegistrationPlateKindDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ItemRegistrationPlateKindDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_ItemRegistrationPlateKindDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey12(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ManufactureYearId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("YearId") }),
                principalEntityType);

            var manufactureYear = declaringEntityType.AddNavigation("ManufactureYear",
                runtimeForeignKey,
                onDependent: true,
                typeof(YearDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("ManufactureYear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ManufactureYear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey13(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlateSourceId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("PlateSourceId") }),
                principalEntityType);

            var plateSource = declaringEntityType.AddNavigation("PlateSource",
                runtimeForeignKey,
                onDependent: true,
                typeof(PlateSourceDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("PlateSource", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<PlateSource>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(PlateSourceDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(PlateSourceDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_PlateSourceDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey14(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ReasonCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ReportReasonId") }),
                principalEntityType);

            var reasonCategory = declaringEntityType.AddNavigation("ReasonCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(ReportReasonDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("ReasonCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<ReasonCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(ReportReasonDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ReportReasonDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_ReportReasonDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey15(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SelectedCausedVehicleTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleTypeId") }),
                principalEntityType);

            var selectedCausedVehicleType = declaringEntityType.AddNavigation("SelectedCausedVehicleType",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleTypeDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("SelectedCausedVehicleType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<SelectedCausedVehicleType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleDatumSelectedCausedVehicleTypes = principalEntityType.AddNavigation("VehicleDatumSelectedCausedVehicleTypes",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(VehicleTypeDim).GetProperty("VehicleDatumSelectedCausedVehicleTypes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleTypeDim).GetField("<VehicleDatumSelectedCausedVehicleTypes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_VehicleTypeDIM1");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey16(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleBrandId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleBrandId") }),
                principalEntityType);

            var vehicleBrand = declaringEntityType.AddNavigation("VehicleBrand",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleBrandDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleBrand", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleBrand>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(VehicleBrandDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleBrandDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_VehicleBrandDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey17(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleCategoryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleCategoryId") }),
                principalEntityType);

            var vehicleCategory = declaringEntityType.AddNavigation("VehicleCategory",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleCategoryDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleCategory", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleCategory>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(VehicleCategoryDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleCategoryDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_VehicleCategoryDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey18(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleColorId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ColorId") }),
                principalEntityType);

            var vehicleColor = declaringEntityType.AddNavigation("VehicleColor",
                runtimeForeignKey,
                onDependent: true,
                typeof(ColorDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleColor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleColor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(ColorDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ColorDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleDataVehicleColor_ColorDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey19(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleDataTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleDataTypeId") }),
                principalEntityType);

            var vehicleDataType = declaringEntityType.AddNavigation("VehicleDataType",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleDataTypeDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleDataType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleDataType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(VehicleDataTypeDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDataTypeDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_VehicleDataTypeDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey20(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleModelId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleModelId") }),
                principalEntityType);

            var vehicleModel = declaringEntityType.AddNavigation("VehicleModel",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleModelDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleModel", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleModel>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(VehicleModelDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleModelDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_VehicleModelDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey21(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleStatusId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleStatusId") }),
                principalEntityType);

            var vehicleStatus = declaringEntityType.AddNavigation("VehicleStatus",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleStatusDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleData = principalEntityType.AddNavigation("VehicleData",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(VehicleStatusDim).GetProperty("VehicleData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleStatusDim).GetField("<VehicleData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_VehicleStatusDIM");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey22(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("VehicleTypeId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("VehicleTypeId") }),
                principalEntityType);

            var vehicleType = declaringEntityType.AddNavigation("VehicleType",
                runtimeForeignKey,
                onDependent: true,
                typeof(VehicleTypeDim),
                propertyInfo: typeof(VehicleDatum).GetProperty("VehicleType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleDatum).GetField("<VehicleType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vehicleDatumVehicleTypes = principalEntityType.AddNavigation("VehicleDatumVehicleTypes",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<VehicleDatum>),
                propertyInfo: typeof(VehicleTypeDim).GetProperty("VehicleDatumVehicleTypes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VehicleTypeDim).GetField("<VehicleDatumVehicleTypes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_VehicleData_VehicleTypeDIM");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "VehicleData");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
