// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Domain.Entities;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Infrastructure.Persistence.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class EsRepairPermissionDamagedPartEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Domain.Entities.EsRepairPermissionDamagedPart",
                typeof(EsRepairPermissionDamagedPart),
                baseEntityType,
                propertyCount: 3,
                navigationCount: 3,
                foreignKeyCount: 3,
                unnamedIndexCount: 2,
                keyCount: 1);

            var repairPermissionId = runtimeEntityType.AddProperty(
                "RepairPermissionId",
                typeof(long),
                propertyInfo: typeof(EsRepairPermissionDamagedPart).GetProperty("RepairPermissionId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsRepairPermissionDamagedPart).GetField("<RepairPermissionId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            repairPermissionId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var partId = runtimeEntityType.AddProperty(
                "PartId",
                typeof(int),
                propertyInfo: typeof(EsRepairPermissionDamagedPart).GetProperty("PartId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsRepairPermissionDamagedPart).GetField("<PartId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            partId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var severityId = runtimeEntityType.AddProperty(
                "SeverityId",
                typeof(int?),
                propertyInfo: typeof(EsRepairPermissionDamagedPart).GetProperty("SeverityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsRepairPermissionDamagedPart).GetField("<SeverityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            severityId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { repairPermissionId, partId });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_RepairPermissionDamagedPart");

            var index = runtimeEntityType.AddIndex(
                new[] { partId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { severityId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PartId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DamagePartId") }),
                principalEntityType,
                required: true);

            var part = declaringEntityType.AddNavigation("Part",
                runtimeForeignKey,
                onDependent: true,
                typeof(DamagePartsDim),
                propertyInfo: typeof(EsRepairPermissionDamagedPart).GetProperty("Part", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsRepairPermissionDamagedPart).GetField("<Part>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var esRepairPermissionDamagedParts = principalEntityType.AddNavigation("EsRepairPermissionDamagedParts",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EsRepairPermissionDamagedPart>),
                propertyInfo: typeof(DamagePartsDim).GetProperty("EsRepairPermissionDamagedParts", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DamagePartsDim).GetField("<EsRepairPermissionDamagedParts>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_RepairPermissionDamagedPart_Part");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("RepairPermissionId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var repairPermission = declaringEntityType.AddNavigation("RepairPermission",
                runtimeForeignKey,
                onDependent: true,
                typeof(EsRepairPermission),
                propertyInfo: typeof(EsRepairPermissionDamagedPart).GetProperty("RepairPermission", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsRepairPermissionDamagedPart).GetField("<RepairPermission>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var esRepairPermissionDamagedParts = principalEntityType.AddNavigation("EsRepairPermissionDamagedParts",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EsRepairPermissionDamagedPart>),
                propertyInfo: typeof(EsRepairPermission).GetProperty("EsRepairPermissionDamagedParts", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsRepairPermission).GetField("<EsRepairPermissionDamagedParts>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_RepairPermissionDamagedPart_RepairPermission");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SeverityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DamagedPartSeverityId") }),
                principalEntityType);

            var severity = declaringEntityType.AddNavigation("Severity",
                runtimeForeignKey,
                onDependent: true,
                typeof(DamagedPartSeverityDim),
                propertyInfo: typeof(EsRepairPermissionDamagedPart).GetProperty("Severity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EsRepairPermissionDamagedPart).GetField("<Severity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var esRepairPermissionDamagedParts = principalEntityType.AddNavigation("EsRepairPermissionDamagedParts",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<EsRepairPermissionDamagedPart>),
                propertyInfo: typeof(DamagedPartSeverityDim).GetProperty("EsRepairPermissionDamagedParts", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DamagedPartSeverityDim).GetField("<EsRepairPermissionDamagedParts>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_RepairPermissionDamagedPart_Severity");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ES_RepairPermissionDamagedPart");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
