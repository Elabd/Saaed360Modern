using Microsoft.EntityFrameworkCore;
using Domain.Entities;

namespace Infrastructure.Persistence.ModelBuilding
{
    public  class ModelConfiguration
    {
        public void Apply(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccidentAreaCategorization>(entity =>
            {
                entity.ToTable("AccidentAreaCategorization");

                entity.HasOne(d => d.City).WithMany(p => p.AccidentAreaCategorizations)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccidentAreaCategorization_CityDIM");

                entity.HasOne(d => d.Emirate).WithMany(p => p.AccidentAreaCategorizations)
                    .HasForeignKey(d => d.EmirateId)
                    .HasConstraintName("FK_AccidentAreaCategorization_EmirateDIM");
            });

            modelBuilder.Entity<AccidentDamageSizeDim>(entity =>
            {
                entity.HasKey(e => e.AccidentDamageSizeId).HasName("PK__Accident__67825AC642F73FE3");

                entity.ToTable("AccidentDamageSizeDim");

                entity.Property(e => e.AccidentDamageSizeId).ValueGeneratedNever();
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AccidentFeereminderMessage>(entity =>
            {
                entity.ToTable("AccidentFeereminderMessage");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.NotificationMessageLog).WithMany(p => p.AccidentFeereminderMessages)
                    .HasForeignKey(d => d.NotificationMessageLogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccidentFeereminderMessage_NotificationMessageLog");
            });

            modelBuilder.Entity<AccidentLocationDescriptionDim>(entity =>
            {
                entity.HasKey(e => e.AccidentLocationDescriptionId).HasName("PK__Accident__9706692FC4EA8443");

                entity.ToTable("AccidentLocationDescriptionDim");

                entity.Property(e => e.AccidentLocationDescriptionId).ValueGeneratedNever();
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AccidentTypeDim>(entity =>
            {
                entity.HasKey(e => e.AccidentTypeId)
                    .HasName("PK__Accident__DF0131AA2EF506FE")
                    .HasFillFactor(80);

                entity.ToTable("AccidentTypeDim");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AccidentTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AccidentTypeDim_RowStatusDIM");
            });

            modelBuilder.Entity<AcessTypeDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("AcessTypeDIM");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.Name).HasMaxLength(50);
            });

            //modelBuilder.Entity<Action>(entity =>
            //{
            //    entity.ToTable("Action");

            //    entity.HasIndex(e => e.Timestamp, "IX_ActionTimestampe");

            //    entity.Property(e => e.Id).ValueGeneratedNever();
            //    entity.Property(e => e.ActionName).HasMaxLength(50);
            //    entity.Property(e => e.Ipaddress)
            //        .HasMaxLength(50)
            //        .HasColumnName("IPAddress");
            //    entity.Property(e => e.Reference).HasMaxLength(50);
            //    entity.Property(e => e.Source).HasMaxLength(50);
            //    entity.Property(e => e.Username).HasMaxLength(50);

            //    entity.HasOne(d => d.DeviceType).WithMany(p => p.Actions)
            //        .HasForeignKey(d => d.DeviceTypeId)
            //        .OnDelete(DeleteBehavior.ClientSetNull)
            //        .HasConstraintName("FK_Action_DeviceType");

            //    entity.HasOne(d => d.ReferenceType).WithMany(p => p.Actions)
            //        .HasForeignKey(d => d.ReferenceTypeId)
            //        .OnDelete(DeleteBehavior.ClientSetNull)
            //        .HasConstraintName("FK_Action_ReferenceType");
            //});

            modelBuilder.Entity<ActionTakenDim>(entity =>
            {
                entity.HasKey(e => e.ActionTakenId)
                    .HasName("PK_ReportActionTakenDIM")
                    .HasFillFactor(80);

                entity.ToTable("ActionTakenDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Activity>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__Activity__45F4A7917F72A05C")
                    .HasFillFactor(80);

                entity.ToTable("Activity", tb => tb.HasTrigger("Activity_BISync"));

                entity.HasIndex(e => e.StatusId, "ActivityStatusIndex").HasFillFactor(80);

                entity.HasIndex(e => e.WorkFlowGuid, "ActivityWorkFlow");

                entity.HasIndex(e => e.WorkFlowGuid, "ActivityWorkFlowGuid").HasFillFactor(80);

                entity.HasIndex(e => e.WorkFlowGuid, "ActivityWorkFlowGuid1").HasFillFactor(80);

                entity.HasIndex(e => e.ActivityDate, "IX_Activity").HasFillFactor(80);

                entity.HasIndex(e => e.ActivityCategoryId, "IX_Activity_ActivityCategory").HasFillFactor(80);

                entity.Property(e => e.ActivityCategoryId).HasDefaultValue(1);
                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.ActivityDueDate).HasColumnType("datetime");
                entity.Property(e => e.ActivityEndDate).HasColumnType("datetime");
                entity.Property(e => e.ActivityExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.ActivityGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ActivityName).HasMaxLength(255);
                entity.Property(e => e.ActivityReasonId).HasDefaultValue(1);
                entity.Property(e => e.ActivityStartDate).HasColumnType("datetime");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsCompleted).HasDefaultValue(true);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.StatusId).HasDefaultValue(1);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ActivityCategory).WithMany(p => p.Activities)
                    .HasForeignKey(d => d.ActivityCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Activity_ActivityCategoryDIM");

                entity.HasOne(d => d.ActivityReason).WithMany(p => p.Activities)
                    .HasForeignKey(d => d.ActivityReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Activity_ActivityReasonDIM");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.Activities)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Activity_Person1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Activities)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Activity_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Activities)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Activity_SourceDetail");

                entity.HasOne(d => d.Status).WithMany(p => p.Activities)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Activity_StatusDIM");
            });

            modelBuilder.Entity<ActivityAgencyContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAgencyContainerGuidView");

                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityAgencyGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAgencyGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.AgencyCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Identifier).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Ori)
                    .HasMaxLength(50)
                    .HasColumnName("ORI");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityAgencyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAgencyView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.AgencyCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AgencyCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Identifier).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Ori)
                    .HasMaxLength(50)
                    .HasColumnName("ORI");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityAircraftContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAircraftContainerGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityAircraftGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAircraftGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.AircraftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FuselageColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TailIndentification).HasMaxLength(10);
                entity.Property(e => e.WingColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityAircraftView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAircraftView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.AircraftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FuselageColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FuselageColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TailIndentification).HasMaxLength(10);
                entity.Property(e => e.WingColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WingColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityArea>(entity =>
            {
                entity.HasKey(e => e.ActivityAreaId)
                    .HasName("PK__Activity__3C6698BAE046F58A")
                    .HasFillFactor(80);

                entity.ToTable("ActivityArea");

                entity.HasIndex(e => e.AreaId, "ActivityAreaArea").HasFillFactor(80);

                entity.HasIndex(e => e.ActivityId, "IX_ActivityArea_Activity").HasFillFactor(80);

                entity.HasIndex(e => e.AreaId, "IX_ActivityArea_AreaID").HasFillFactor(80);

                entity.HasIndex(e => e.AreaId, "IX_AreaId");

                entity.HasIndex(e => e.AreaInvolvementId, "IX_AreaInvolvementId");

                entity.Property(e => e.ActivityAreaDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityAreas)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityArea_Activity");

                entity.HasOne(d => d.Area).WithMany(p => p.ActivityAreas)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityArea_Area");

                entity.HasOne(d => d.AreaInvolvement).WithMany(p => p.ActivityAreas)
                    .HasForeignKey(d => d.AreaInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityArea_AreaInvolvement");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ActivityAreaCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ActivityArea_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ActivityAreaModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ActivityArea_Person1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityAreas)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityArea_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ActivityAreas)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityArea_Source");
            });

            modelBuilder.Entity<ActivityAreaContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAreaContainerGuidView");

                entity.Property(e => e.ActivityAreaDescription).HasMaxLength(300);
                entity.Property(e => e.AreaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityAreaContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAreaContainerView");

                entity.Property(e => e.ActivityAreaDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityAreaId).ValueGeneratedOnAdd();
                entity.Property(e => e.AreaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityAreaGroup>(entity =>
            {
                entity.ToTable("ActivityAreaGroup");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.LastRetryDate).HasColumnType("datetime");
                entity.Property(e => e.SendDate).HasColumnType("datetime");
                entity.Property(e => e.ServiceResponse).HasMaxLength(500);
            });

            modelBuilder.Entity<ActivityAreaGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAreaGuidView");

                entity.Property(e => e.ActivityAreaDescription).HasMaxLength(300);
                entity.Property(e => e.AreaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityAreaView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAreaView");

                entity.Property(e => e.ActivityAreaDescription).HasMaxLength(300);
                entity.Property(e => e.AreaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityArticleContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityArticleContainerGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityArticleGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityArticleGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.ArticleCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleTypeCode).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityArticleView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityArticleView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.ArticleCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleTypeCategoryCode).HasMaxLength(50);
                entity.Property(e => e.ArticleTypeCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.ArticleTypeCode).HasMaxLength(20);
                entity.Property(e => e.ArticleTypeDescription).HasMaxLength(250);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityAssociation>(entity =>
            {
                entity.HasKey(e => e.ActivityAssociationId)
                    .HasName("PK__Activity__81FC51F8BDF5B8C4")
                    .HasFillFactor(80);

                entity.ToTable("ActivityAssociation");

                entity.HasIndex(e => e.ActivityId, "ActivityAssocationActivityID").HasFillFactor(80);

                entity.HasIndex(e => e.CreateDateTimeStamp, "ActivityAssocationCreationTime").HasFillFactor(80);

                entity.HasIndex(e => e.RelatedActivityId, "ActivityAssocationRelatedActivityID").HasFillFactor(80);

                entity.HasIndex(e => e.ActivityId, "ActivityAssocationTypes").HasFillFactor(80);

                entity.HasIndex(e => e.ActivityRelationshipTypeId, "ActivityAssociationActivityRelationshipTypeId");

                entity.HasIndex(e => e.RelatedActivityId, "ActivityAssociationIndex").HasFillFactor(80);

                entity.HasIndex(e => e.ActivityRelationshipTypeId, "IndexActivityAssociation").HasFillFactor(80);

                entity.Property(e => e.ActivityAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityAssociationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ActivityRelationShipCategoryId).HasDefaultValue(1);
                entity.Property(e => e.ActivityRelationshipTypeId).HasDefaultValue(1);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityAssociationActivities)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityAssociation_Activity");

                entity.HasOne(d => d.ActivityRelationShipCategory).WithMany(p => p.ActivityAssociations)
                    .HasForeignKey(d => d.ActivityRelationShipCategoryId)
                    .HasConstraintName("ActivityRelationshipCategoryDIM_RelatedActivities_FK1");

                entity.HasOne(d => d.ActivityRelationshipType).WithMany(p => p.ActivityAssociations)
                    .HasForeignKey(d => d.ActivityRelationshipTypeId)
                    .HasConstraintName("ActivityRelationshipTypeDIM_RelatedActivities_FK1");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ActivityAssociationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ActivityAssociation_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ActivityAssociationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ActivityAssociation_Person1");

                entity.HasOne(d => d.RelatedActivity).WithMany(p => p.ActivityAssociationRelatedActivities)
                    .HasForeignKey(d => d.RelatedActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityAssociation_Activity1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityAssociations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityAssociation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ActivityAssociations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityAssociation_Source");
            });

            modelBuilder.Entity<ActivityAssociationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAssociationGuidView");

                entity.Property(e => e.ActivityAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityRelationShipCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ActivityRelationshipTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityAssociationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityAssociationView");

                entity.Property(e => e.ActivityAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityAssociationId).ValueGeneratedOnAdd();
                entity.Property(e => e.ActivityRelationShipCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ActivityRelationShipCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ActivityRelationshipTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ActivityRelationshipTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityAutoDispatch>(entity =>
            {
                entity.ToTable("ActivityAutoDispatch");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.DispatchDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ActivityCategoryId)
                    .HasName("PK__Activity__71C78C655C3DDDA6")
                    .HasFillFactor(80);

                entity.ToTable("ActivityCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ActivityCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityCategoryDIMCodeView");

                entity.Property(e => e.ActivityCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ActivityCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityComment>(entity =>
            {
                entity.HasKey(e => e.ActivityCommentId)
                    .HasName("PK__Activity__F56973CD72AC6389")
                    .HasFillFactor(80);

                entity.ToTable("ActivityComment");

                entity.Property(e => e.ActivityCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityCommentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityComments)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityComment_Activity");

                entity.HasOne(d => d.Comment).WithMany(p => p.ActivityComments)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityComment_Comment");

                entity.HasOne(d => d.CommentInvolvement).WithMany(p => p.ActivityComments)
                    .HasForeignKey(d => d.CommentInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityComment_CommentInvolvementDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ActivityCommentCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ActivityComment_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ActivityCommentModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ActivityComment_Person1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityComments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityComment_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ActivityComments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityComment_Source");
            });

            modelBuilder.Entity<ActivityCommentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityCommentContainerGuidView");

                entity.Property(e => e.ActivityCommentDescription).HasMaxLength(300);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityCommentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityCommentContainerView");

                entity.Property(e => e.ActivityCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityCommentId).ValueGeneratedOnAdd();
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityCommentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityCommentGuidView");

                entity.Property(e => e.ActivityCommentDescription).HasMaxLength(300);
                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityCommentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityCommentView");

                entity.Property(e => e.ActivityCommentDescription).HasMaxLength(300);
                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImportanceHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PriorityHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityContact>(entity =>
            {
                entity.HasKey(e => e.ActivityContactId)
                    .HasName("PK__Activity__375E18EC070DAD83")
                    .HasFillFactor(80);

                entity.ToTable("ActivityContact");

                entity.Property(e => e.ActivityContactDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityContactGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ContactInvolvementId).HasDefaultValue(1);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityContacts)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityContact_Activity");

                entity.HasOne(d => d.Contact).WithMany(p => p.ActivityContacts)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityContact_Contact");

                entity.HasOne(d => d.ContactInvolvement).WithMany(p => p.ActivityContacts)
                    .HasForeignKey(d => d.ContactInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityContact_InvolvementCategory");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityContacts)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityContact_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ActivityContacts)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityContact_Source");
            });

            modelBuilder.Entity<ActivityContactContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityContactContainerGuidView");

                entity.Property(e => e.ActivityContactDescription).HasMaxLength(300);
                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityContactContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityContactContainerView");

                entity.Property(e => e.ActivityContactDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityContactId).ValueGeneratedOnAdd();
                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityContactGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityContactGuidView");

                entity.Property(e => e.ActivityContactDescription).HasMaxLength(300);
                entity.Property(e => e.ContactCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityContactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityContactView");

                entity.Property(e => e.ActivityContactDescription).HasMaxLength(300);
                entity.Property(e => e.ContactCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityConvertToStation>(entity =>
            {
                entity.ToTable("ActivityConvertToStation");

                entity.Property(e => e.Createdtime).HasColumnType("datetime");
                entity.Property(e => e.TransferStatusId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityConvertToStations)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityConvertToStation_Activity");

                entity.HasOne(d => d.ActivityReason).WithMany(p => p.ActivityConvertToStations)
                    .HasForeignKey(d => d.ActivityReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityConvertToStation_ActivityReasonDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ActivityConvertToStations)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityConvertToStation_Person");

                entity.HasOne(d => d.Organization).WithMany(p => p.ActivityConvertToStations)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityConvertToStation_Organization");

                entity.HasOne(d => d.Status).WithMany(p => p.ActivityConvertToStations)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityConvertToStation_StatusDIM");
            });

            modelBuilder.Entity<ActivityConvertToStationArc>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Activity__3214EC07654B4D79");

                entity.ToTable("ActivityConvertToStationARC");

                entity.Property(e => e.Createdtime).HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityConvertToStationArcs)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("FK__ActivityC__Activ__517594D8");

                entity.HasOne(d => d.ActivityReason).WithMany(p => p.ActivityConvertToStationArcs)
                    .HasForeignKey(d => d.ActivityReasonId)
                    .HasConstraintName("FK__ActivityC__Activ__4F8D4C66");

                entity.HasOne(d => d.Organization).WithMany(p => p.ActivityConvertToStationArcs)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("FK__ActivityC__Organ__5081709F");

                entity.HasOne(d => d.Report).WithMany(p => p.ActivityConvertToStationArcs)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK__ActivityC__Repor__5269B911");
            });

            modelBuilder.Entity<ActivityCourtContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityCourtContainerGuidView");

                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityCourtGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityCourtGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CourtCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityCourtView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityCourtView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CourtCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CourtCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityDocument>(entity =>
            {
                entity.HasKey(e => e.ActivityDocumentId)
                    .HasName("PK__Activity__2156E700E462075C")
                    .HasFillFactor(80);

                entity.ToTable("ActivityDocument");

                entity.Property(e => e.ActivityDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityDocumentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DocumentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityDocuments)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityDocument_Activity");

                entity.HasOne(d => d.Document).WithMany(p => p.ActivityDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityDocument_Document");

                entity.HasOne(d => d.DocumentInvolvement).WithMany(p => p.ActivityDocuments)
                    .HasForeignKey(d => d.DocumentInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityDocument_DocumentInvolvementDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityDocuments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityDocument_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ActivityDocuments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityDocument_Source");
            });

            modelBuilder.Entity<ActivityDocumentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityDocumentContainerGuidView");

                entity.Property(e => e.ActivityDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityDocumentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityDocumentContainerView");

                entity.Property(e => e.ActivityDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityDocumentId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityDocumentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityDocumentGuidView");

                entity.Property(e => e.ActivityDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<ActivityDocumentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityDocumentView");

                entity.Property(e => e.ActivityDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<ActivityDrugContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityDrugContainerGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityDrugGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityDrugGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DrugCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityDrugView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityDrugView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DrugCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityEnforcementOfficialContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityEnforcementOfficialContainerGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityEnforcementOfficialGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityEnforcementOfficialGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EnforcementOfficialAsnCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialBadgeIdentification).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialPostLicenseIdent).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialUnit).HasMaxLength(50);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityEnforcementOfficialView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityEnforcementOfficialView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EnforcementOfficialAsnCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialAsnCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialBadgeIdentification).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialPostLicenseIdent).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialUnit).HasMaxLength(50);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityEvidenceContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityEvidenceContainerGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityEvidenceGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityEvidenceGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.EvidenceAmount).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityEvidenceView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityEvidenceView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.EvidenceAmount).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityFacilityContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityFacilityContainerGuidView");

                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityFacilityGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityFacilityGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.FacilityCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityMemberCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilitySecurityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityFacilityView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityFacilityView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.FacilityCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityMemberCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityMemberCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilitySecurityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilitySecurityLevelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityFirearmContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityFirearmContainerGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityFirearmGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityFirearmGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FirearmActionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityFirearmView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityFirearmView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FirearmActionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmActionCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityImage>(entity =>
            {
                entity.HasKey(e => e.ActivityImageId)
                    .HasName("PK__Activity__F511D3C5E56632A0")
                    .HasFillFactor(80);

                entity.ToTable("ActivityImage");

                entity.Property(e => e.ActivityImageDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityImageGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityImages)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityImage_Activity");

                entity.HasOne(d => d.Image).WithMany(p => p.ActivityImages)
                    .HasForeignKey(d => d.ImageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityImage_Image");

                entity.HasOne(d => d.ImageInvolvement).WithMany(p => p.ActivityImages)
                    .HasForeignKey(d => d.ImageInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityImage_ImageInvolvementDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityImages)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityImage_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ActivityImages)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityImage_Source");
            });

            modelBuilder.Entity<ActivityImageContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityImageContainerGuidView");

                entity.Property(e => e.ActivityImageDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityImageContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityImageContainerView");

                entity.Property(e => e.ActivityImageDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityImageId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityImageGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityImageGuidView");

                entity.Property(e => e.ActivityImageDescription).HasMaxLength(300);
                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityImageView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityImageView");

                entity.Property(e => e.ActivityImageDescription).HasMaxLength(300);
                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityInstanceEventsTable>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_ActivityInstanceEventsTable_Id");

                entity.ToTable("ActivityInstanceEventsTable", "Microsoft.Samples.Tracking");

                entity.Property(e => e.ActivityId).HasMaxLength(256);
                entity.Property(e => e.ActivityInstanceId).HasMaxLength(256);
                entity.Property(e => e.ActivityName).HasMaxLength(1024);
                entity.Property(e => e.ActivityRecordType).HasMaxLength(128);
                entity.Property(e => e.ActivityType).HasMaxLength(2048);
                entity.Property(e => e.State).HasMaxLength(128);
                entity.Property(e => e.TimeCreated).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityItem>(entity =>
            {
                entity.HasKey(e => e.ActivityItemId)
                    .HasName("PK__Activity__C7273DAB102C51FF")
                    .HasFillFactor(80);

                entity.ToTable("ActivityItem");

                entity.HasIndex(e => e.WorkFlowGuid, "<Name of Missing Index, sysname,>").HasFillFactor(80);

                entity.HasIndex(e => e.ActivityId, "ActivityItemActivityIdIndex").HasFillFactor(80);

                entity.HasIndex(e => e.CreateDateTimeStamp, "ActivityItemCreationTime").HasFillFactor(80);

                entity.HasIndex(e => e.ItemInvolvementId, "ActivityItemInvolvement").HasFillFactor(80);

                entity.HasIndex(e => e.ItemId, "ActivityItemItemIdIndex").HasFillFactor(80);

                entity.HasIndex(e => e.ModifiedDateTimeStamp, "ActivityItemModifiedDate").HasFillFactor(80);

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityItemGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityItems)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityItem_Activity");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ActivityItemCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ActivityItem_Person");

                entity.HasOne(d => d.CurrentStatus).WithMany(p => p.ActivityItems)
                    .HasForeignKey(d => d.CurrentStatusId)
                    .HasConstraintName("FK_ActivityItem_ActivityItemStatusDIM");

                entity.HasOne(d => d.Item).WithMany(p => p.ActivityItems)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityItem_Item");

                entity.HasOne(d => d.ItemInvolvement).WithMany(p => p.ActivityItems)
                    .HasForeignKey(d => d.ItemInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityItem_ItemInvolvementDIM");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ActivityItemModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ActivityItem_Person1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityItems)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityItem_RowStatusDIM");
            });

            modelBuilder.Entity<ActivityItemContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityItemContainerGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityItemContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityItemContainerView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityItemId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityItemGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityItemGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityItemStatusDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("ActivityItemStatusDIM");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityItemStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityItemStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ActivityItemStatusLocation>(entity =>
            {
                entity.HasKey(e => e.ActivityItemStatusLocationId).HasFillFactor(80);

                entity.ToTable("ActivityItemStatusLocation");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.HasOne(d => d.ActivityItem).WithMany(p => p.ActivityItemStatusLocations)
                    .HasForeignKey(d => d.ActivityItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityItemStatusLocation_ActivityItem");

                entity.HasOne(d => d.ActivityItemStatus).WithMany(p => p.ActivityItemStatusLocations)
                    .HasForeignKey(d => d.ActivityItemStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityItemStatusLocation_ActivityItemStatusDIM");

                entity.HasOne(d => d.ChangedByNavigation).WithMany(p => p.ActivityItemStatusLocations)
                    .HasForeignKey(d => d.ChangedBy)
                    .HasConstraintName("FK_ActivityItemStatusLocation_Person");

                entity.HasOne(d => d.Location).WithMany(p => p.ActivityItemStatusLocations)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityItemStatusLocation_Location");
            });

            modelBuilder.Entity<ActivityItemView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityItemView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityJewelryContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityJewelryContainerGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityJewelryGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityJewelryGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityJewelryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityJewelryView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityJudicialOfficialContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityJudicialOfficialContainerGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityJudicialOfficialGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityJudicialOfficialGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IdentificationJurisdiction).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarIdentification).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialRegIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityJudicialOfficialView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityJudicialOfficialView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IdentificationJurisdiction).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarIdentification).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialBarStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialRegIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityJurorContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityJurorContainerGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityJurorGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityJurorGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.JurorDismissedDate).HasColumnType("datetime");
                entity.Property(e => e.JurorDismissedReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorIdentification).HasMaxLength(50);
                entity.Property(e => e.JurorPanelIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityJurorView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityJurorView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.JurorDismissedDate).HasColumnType("datetime");
                entity.Property(e => e.JurorDismissedReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorDismissedReasonDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorIdentification).HasMaxLength(50);
                entity.Property(e => e.JurorPanelIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityLicensePlateContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityLicensePlateContainerGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityLicensePlateGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityLicensePlateGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DateEntered).HasColumnType("datetime");
                entity.Property(e => e.DateOfTheft).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ExpireDate).HasColumnType("datetime");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Ncicnumber)
                    .HasMaxLength(50)
                    .HasColumnName("NCICNumber");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityLicensePlateView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityLicensePlateView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DateEntered).HasColumnType("datetime");
                entity.Property(e => e.DateOfTheft).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ExpireDate).HasColumnType("datetime");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Ncicnumber)
                    .HasMaxLength(50)
                    .HasColumnName("NCICNumber");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityLocation>(entity =>
            {
                entity.HasKey(e => e.ActivityLocationId)
                    .HasName("PK__Activity__4C9CFC2D6DB0E6C6")
                    .HasFillFactor(80);

                entity.ToTable("ActivityLocation");

                entity.HasIndex(e => e.ActivityId, "ActivityLocationIndex").HasFillFactor(80);

                entity.Property(e => e.ActivityLocationDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityLocationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.LocationInvolvementId).HasDefaultValue(1);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityLocations)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityLocation_Activity");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ActivityLocationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ActivityLocation_Person");

                entity.HasOne(d => d.Location).WithMany(p => p.ActivityLocations)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityLocation_Location");

                entity.HasOne(d => d.LocationInvolvement).WithMany(p => p.ActivityLocations)
                    .HasForeignKey(d => d.LocationInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityLocation_LocationInvolvementDIM");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ActivityLocationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ActivityLocation_Person1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityLocations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityLocation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ActivityLocations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityLocation_Source");
            });

            modelBuilder.Entity<ActivityLocationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityLocationContainerGuidView");

                entity.Property(e => e.ActivityLocationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityLocationContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityLocationContainerView");

                entity.Property(e => e.ActivityLocationDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityLocationId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityLog>(entity =>
            {
                entity.HasKey(e => e.ActivityLogId).HasFillFactor(80);

                entity.ToTable("ActivityLog");

                entity.Property(e => e.ActivityLogId).ValueGeneratedNever();
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.FromDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToDateTimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityLogs)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityLog_Activity");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ActivityLogCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ActivityLog_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ActivityLogModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ActivityLog_Person1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityLogs)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityLog_RowStatusDIM");
            });

            modelBuilder.Entity<ActivityMissingPersonContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityMissingPersonContainerGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityMissingPersonGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityMissingPersonGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DeclarationDate).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.FoundDate).HasColumnType("datetime");
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.LastSeenDate).HasColumnType("datetime");
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.MissingPersonCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityMissingPersonView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityMissingPersonView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DeclarationDate).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.FoundDate).HasColumnType("datetime");
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.LastSeenDate).HasColumnType("datetime");
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.MissingPersonCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityOrganization>(entity =>
            {
                entity.HasKey(e => e.ActivityOrganizationId)
                    .HasName("PK__Activity__1AAE13448E066E75")
                    .HasFillFactor(80);

                entity.ToTable("ActivityOrganization");

                entity.HasIndex(e => e.ActivityId, "<Name of Missing Index, sysname,>").HasFillFactor(80);

                entity.HasIndex(e => e.ActivityId, "IX_ActivityOrganizationActivity").HasFillFactor(80);

                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityOrganizationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsOwner).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationInvolvementId).HasDefaultValue(1);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityOrganizations)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationActivity_Activity");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ActivityOrganizationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ActivityOrganization_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ActivityOrganizationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ActivityOrganization_Person1");

                entity.HasOne(d => d.OrganizationInvolvement).WithMany(p => p.ActivityOrganizations)
                    .HasForeignKey(d => d.OrganizationInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationActivity_OrganizationActivityInvolvementDIM");

                entity.HasOne(d => d.Organization).WithMany(p => p.ActivityOrganizations)
                    .HasForeignKey(d => d.Organizationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationActivity_Organization");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityOrganizations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityOrganization_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ActivityOrganizations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityOrganization_Source");
            });

            modelBuilder.Entity<ActivityOrganizationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityOrganizationContainerGuidView");

                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityOrganizationContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityOrganizationContainerView");

                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityOrganizationId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityOrganizationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityOrganizationGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityOrganizationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityOrganizationView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityPerson>(entity =>
            {
                entity.HasKey(e => e.ActivityPersonId)
                    .HasName("PK__Activity__C60909D2C9933F6C")
                    .HasFillFactor(80);

                entity.ToTable("ActivityPerson");

                entity.HasIndex(e => e.ActivityId, "ActivityPersonIndex").HasFillFactor(80);

                entity.HasIndex(e => e.PersonInvolvementId, "IX_ActivityPerson_PersonInvolvementId").HasFillFactor(80);

                entity.HasIndex(e => e.PersonInvolvementId, "indxPersonInvolvmentPersonIdAndActivityId").HasFillFactor(80);

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityPersonGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementId).HasDefaultValue(1);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityPeople)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonActivity_Activity");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ActivityPersonCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ActivityPerson_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ActivityPersonModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ActivityPerson_Person1");

                entity.HasOne(d => d.Person).WithMany(p => p.ActivityPersonPeople)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonActivity_Person");

                entity.HasOne(d => d.PersonInvolvement).WithMany(p => p.ActivityPeople)
                    .HasForeignKey(d => d.PersonInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("PersonInvolvementDIM_PersonActivity_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityPeople)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityPerson_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ActivityPeople)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityPerson_Source");
            });

            modelBuilder.Entity<ActivityPersonContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityPersonContainerGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityPersonContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityPersonContainerView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.ActivityPersonId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityPersonGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityPersonGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityPersonView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityPersonView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityProviderContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityProviderContainerGuidView");

                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityProviderGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityProviderGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.ProviderCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityProviderView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityProviderView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.ProviderCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivityQuestionnaireContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityQuestionnaireContainerGuidView");

                entity.Property(e => e.ActivityDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityQuestionnaireGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityQuestionnaireGuidView");

                entity.Property(e => e.ActivityDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<ActivityQuestionnaireView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityQuestionnaireView");

                entity.Property(e => e.ActivityDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.QuestionnaireCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<ActivityRealestateContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityRealestateContainerGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityRealestateGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityRealestateGuidView");

                entity.Property(e => e.Acreage).HasMaxLength(50);
                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.Boundry).HasMaxLength(400);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RealestateAttachedFacilityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityRealestateView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityRealestateView");

                entity.Property(e => e.Acreage).HasMaxLength(50);
                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.Boundry).HasMaxLength(400);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RealestateAttachedFacilityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateAttachedFacilityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityReasonDim>(entity =>
            {
                entity.HasKey(e => e.ActivityReasonId)
                    .HasName("PK__Activity__50DC3343F8683A46")
                    .HasFillFactor(80);

                entity.ToTable("ActivityReasonDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ReasonCategory).WithMany(p => p.ActivityReasonDims)
                    .HasForeignKey(d => d.ReasonCategoryId)
                    .HasConstraintName("FK_ActivityReasonDIM_ReasonCategoryDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityReasonDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityReasonDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ActivityReasonDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityReasonDIMCodeView");

                entity.Property(e => e.ActivityReasonCode).HasMaxLength(20);
                entity.Property(e => e.ActivityReasonDescription).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityRelationshipCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ActivityRelationshipCategoryId)
                    .HasName("PK__Activity__105F9E05ECBA1761")
                    .HasFillFactor(80);

                entity.ToTable("ActivityRelationshipCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Niem)
                    .HasMaxLength(20)
                    .HasColumnName("NIEM");
                entity.Property(e => e.NiemtypeName)
                    .HasMaxLength(100)
                    .HasColumnName("NIEMTypeName");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityRelationshipCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityRelationshipCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ActivityRelationshipCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityRelationshipCategoryDIMCodeView");

                entity.Property(e => e.ActivityRelationshipCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ActivityRelationshipCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityRelationshipTypeDim>(entity =>
            {
                entity.HasKey(e => e.ActivityRelationshipTypeId)
                    .HasName("PK__Activity__B286E84E1342C487")
                    .HasFillFactor(80);

                entity.ToTable("ActivityRelationshipTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivityRelationshipTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivityRelationshipTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ActivityRelationshipTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityRelationshipTypeDIMCodeView");

                entity.Property(e => e.ActivityRelationshipTypeCode).HasMaxLength(20);
                entity.Property(e => e.ActivityRelationshipTypeDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityReport>(entity =>
            {
                entity.HasKey(e => e.ActivityReportId)
                    .HasName("PK__Activity__7D7B6D50D2D756D7")
                    .HasFillFactor(80);

                entity.ToTable("ActivityReport");

                entity.HasIndex(e => e.ActivityId, "IX_ActivityReport_ActivityID");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ReportImageCount).HasDefaultValue(0);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityReports)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("FK_ActivityReport_Activity");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ActivityReports)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ActivityReport_Person");

                entity.HasOne(d => d.Report).WithMany(p => p.ActivityReports)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_ActivityReport_Report");
            });

            modelBuilder.Entity<ActivitySocialMediaContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySocialMediaContainerGuidView");

                entity.Property(e => e.ActivitySocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivitySocialMediaContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySocialMediaContainerView");

                entity.Property(e => e.ActivitySocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.ActivitySocialMediaId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivitySocialMediaGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySocialMediaGuidView");

                entity.Property(e => e.Account).HasMaxLength(50);
                entity.Property(e => e.ActivitySocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
                entity.Property(e => e.Uri)
                    .HasMaxLength(500)
                    .HasColumnName("URI");
            });

            modelBuilder.Entity<ActivitySocialMediaView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySocialMediaView");

                entity.Property(e => e.Account).HasMaxLength(50);
                entity.Property(e => e.ActivitySocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
                entity.Property(e => e.Uri)
                    .HasMaxLength(500)
                    .HasColumnName("URI");
            });

            modelBuilder.Entity<ActivitySocialMedium>(entity =>
            {
                entity.HasKey(e => e.ActivitySocialMediaId)
                    .HasName("PK__Activity__5338BFC76C6E1ED1")
                    .HasFillFactor(80);

                entity.Property(e => e.ActivitySocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.ActivitySocialMediaGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SocialMediaInvolvementId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivitySocialMedia)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivitySocialMedia_Activity");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivitySocialMedia)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivitySocialMedia_RowStatusDIM");

                entity.HasOne(d => d.SocialMedia).WithMany(p => p.ActivitySocialMedia)
                    .HasForeignKey(d => d.SocialMediaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivitySocialMedia_SocialMedia");

                entity.HasOne(d => d.SocialMediaInvolvement).WithMany(p => p.ActivitySocialMedia)
                    .HasForeignKey(d => d.SocialMediaInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivitySocialMedia_InvolvementCategory");

                entity.HasOne(d => d.Source).WithMany(p => p.ActivitySocialMedia)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivitySocialMedia_Source");
            });

            modelBuilder.Entity<ActivitySubjectContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySubjectContainerGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivitySubjectGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySubjectGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalOrganizationGuid).HasColumnName("CriminalOrganizationGUID");
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DnacollectionStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusCode");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.MultiSourceOffenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.SubjectCorrectionIdentification).HasMaxLength(50);
                entity.Property(e => e.SubjectDisciplinaryActionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(20);
                entity.Property(e => e.SubjectJacketNumber).HasMaxLength(50);
                entity.Property(e => e.SubjectSpecialHandlingGuid).HasColumnName("SubjectSpecialHandlingGUID");
                entity.Property(e => e.SubjectStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.TheftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivitySubjectOrganizationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySubjectOrganizationContainerGuidView");

                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivitySubjectOrganizationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySubjectOrganizationGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.StatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(50);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivitySubjectOrganizationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySubjectOrganizationView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.ActivityOrganizationDescription).HasMaxLength(300);
                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CautionInformationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.StatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.StatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(50);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ActivitySubjectView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySubjectView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CautionInformationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DnacollectionStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusCode");
                entity.Property(e => e.DnacollectionStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusDescription");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.MultiSourceOffenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MultiSourceOffenderDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.SubjectCorrectionIdentification).HasMaxLength(50);
                entity.Property(e => e.SubjectDisciplinaryActionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectDisciplinaryActionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(20);
                entity.Property(e => e.SubjectJacketNumber).HasMaxLength(50);
                entity.Property(e => e.SubjectStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.TheftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.TheftCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivitySubscription>(entity =>
            {
                entity.HasKey(e => e.ActivitySubscriptionId)
                    .HasName("PK__Activity__FE0DA2EC93CF78E5")
                    .HasFillFactor(80);

                entity.ToTable("ActivitySubscription");

                entity.Property(e => e.ActivitySubscriptionDescription).HasMaxLength(300);
                entity.Property(e => e.ActivitySubscriptionGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivitySubscriptions)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivitySubscription_Activity");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ActivitySubscriptions)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ActivitySubscription_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ActivitySubscriptions)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivitySubscription_Source");

                entity.HasOne(d => d.Subscription).WithMany(p => p.ActivitySubscriptions)
                    .HasForeignKey(d => d.SubscriptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivitySubscription_Subscription");

                entity.HasOne(d => d.SubscriptionInvolvement).WithMany(p => p.ActivitySubscriptions)
                    .HasForeignKey(d => d.SubscriptionInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivitySubscription_InvolvmentCategoryDIM");
            });

            modelBuilder.Entity<ActivitySubscriptionContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySubscriptionContainerGuidView");

                entity.Property(e => e.ActivitySubscriptionDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivitySubscriptionContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySubscriptionContainerView");

                entity.Property(e => e.ActivitySubscriptionDescription).HasMaxLength(300);
                entity.Property(e => e.ActivitySubscriptionId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivitySubscriptionGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySubscriptionGuidView");

                entity.Property(e => e.ActivitySubscriptionDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivitySubscriptionView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivitySubscriptionView");

                entity.Property(e => e.ActivitySubscriptionDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityTask>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("ActivityTask");

                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityTasks)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("FK_ActivityTask_Activity");

                entity.HasOne(d => d.Task).WithMany(p => p.ActivityTasks)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_ActivityTask_Task");

                entity.HasOne(d => d.TaskInvolvement).WithMany(p => p.ActivityTasks)
                    .HasForeignKey(d => d.TaskInvolvementId)
                    .HasConstraintName("FK_ActivityTask_TaskInvolvementDIM");
            });

            modelBuilder.Entity<ActivityTransaction>(entity =>
            {
                entity.HasKey(e => e.TransationId).HasFillFactor(80);

                entity.ToTable("ActivityTransaction");

                entity.HasIndex(e => e.CreationDateTime, "IX_CreationDateTime");

                entity.HasIndex(e => e.CreationDateTime, "IX_CreationDateTime1");

                entity.HasIndex(e => e.StatusId, "IX_StatusId");

                entity.HasIndex(e => e.StatusId, "IX_StatusId1");

                entity.HasIndex(e => e.TransationTypeId, "IX_TransationTypeId");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.Teid).HasColumnName("TEID");
                entity.Property(e => e.Temp).HasMaxLength(50);

                entity.HasOne(d => d.Activity).WithMany(p => p.ActivityTransactions)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityTransaction_Activity");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ActivityTransactionCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityTransaction_Person");

                entity.HasOne(d => d.Item).WithMany(p => p.ActivityTransactions)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_ActivityTransaction_Item");

                entity.HasOne(d => d.Organization).WithMany(p => p.ActivityTransactions)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("FK_ActivityTransaction_Organization");

                entity.HasOne(d => d.Status).WithMany(p => p.ActivityTransactions)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityTransaction_StatusDIM");

                entity.HasOne(d => d.Te).WithMany(p => p.ActivityTransactionTes)
                    .HasForeignKey(d => d.Teid)
                    .HasConstraintName("FK_ActivityTransaction_Person1");

                entity.HasOne(d => d.TransationType).WithMany(p => p.ActivityTransactions)
                    .HasForeignKey(d => d.TransationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActivityTransaction_TransationType");
            });

            modelBuilder.Entity<ActivityUserContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityUserContainerGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityUserGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityUserGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DirectoryDomain).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceDirectoryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityUserView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityUserView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DirectoryDomain).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceDirectoryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceDirectoryCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityVehicleContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityVehicleContainerGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityVehicleDatum>(entity =>
            {
                entity.HasKey(e => e.ActivityVehicleDataId).HasFillFactor(80);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ActivityVehicleGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityVehicleGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.Identification).HasMaxLength(20);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.MotorCarrierIdentification).HasMaxLength(20);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityVehicleView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityVehicleView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.Identification).HasMaxLength(20);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.MotorCarrierIdentification).HasMaxLength(20);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityVesselContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityVesselContainerGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityVesselGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityVesselGuidView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.GeoCountryCode).HasMaxLength(50);
                entity.Property(e => e.HullIdentification).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.InternationalRadioCallSign).HasMaxLength(50);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicenseNumber).HasMaxLength(50);
                entity.Property(e => e.Mmsinumber)
                    .HasMaxLength(20)
                    .HasColumnName("MMSINumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OfficalCoastGuardNumber).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PortOfRegistry).HasMaxLength(50);
                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SailNumber).HasMaxLength(50);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselRegistrationNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityVesselView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityVesselView");

                entity.Property(e => e.ActivityItemDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.GeoCountryCode).HasMaxLength(50);
                entity.Property(e => e.GeoCountryCountryName).HasMaxLength(50);
                entity.Property(e => e.HullIdentification).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.InternationalRadioCallSign).HasMaxLength(50);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicenseNumber).HasMaxLength(50);
                entity.Property(e => e.Mmsinumber)
                    .HasMaxLength(20)
                    .HasColumnName("MMSINumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OfficalCoastGuardNumber).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PortOfRegistry).HasMaxLength(50);
                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SailNumber).HasMaxLength(50);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselRegistrationNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityVictimContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityVictimContainerGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityVictimGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityVictimGuidView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.VictimCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityVictimView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ActivityVictimView");

                entity.Property(e => e.ActivityPersonDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.VictimCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AdpemirateResponseRate>(entity =>
            {
                entity.ToTable("ADPEmirateResponseRate");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AdpemirateResponseRateMonthly>(entity =>
            {
                entity.ToTable("ADPEmirateResponseRateMonthly");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<AdpresponseCalculationRequest>(entity =>
            {
                entity.ToTable("ADPResponseCalculationRequests");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.DateTimeToCalculate).HasColumnType("datetime");
            });

            modelBuilder.Entity<AdpresponseCalculationRequestsMonthly>(entity =>
            {
                entity.ToTable("ADPResponseCalculationRequestsMonthly");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<AffectedLaneDim>(entity =>
            {
                entity.HasKey(e => e.AffectedLaneId)
                    .HasName("PK__Affected__A5E9D0F3C955AB0C")
                    .HasFillFactor(80);

                entity.ToTable("AffectedLaneDim");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
            });

            modelBuilder.Entity<Agency>(entity =>
            {
                entity.HasKey(e => e.OrganizationId).HasFillFactor(80);

                entity.ToTable("Agency");

                entity.Property(e => e.OrganizationId).ValueGeneratedNever();
                entity.Property(e => e.AgencyCategoryId).HasDefaultValue(1);
                entity.Property(e => e.Identifier).HasMaxLength(50);
                entity.Property(e => e.Ori)
                    .HasMaxLength(50)
                    .HasColumnName("ORI");

                entity.HasOne(d => d.AgencyCategory).WithMany(p => p.Agencies)
                    .HasForeignKey(d => d.AgencyCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Agency_AgencyCategory");

                entity.HasOne(d => d.Organization).WithOne(p => p.Agency)
                    .HasForeignKey<Agency>(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Agency_Organization1");
            });

            modelBuilder.Entity<AgencyCategoryDim>(entity =>
            {
                entity.HasKey(e => e.AgencyCategoryId)
                    .HasName("PK__AgencyCa__B72C42EF28E31B71")
                    .HasFillFactor(80);

                entity.ToTable("AgencyCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AgencyCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AgencyCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AgencyCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AgencyCategoryDIMCodeView");

                entity.Property(e => e.AgencyCategoryCode).HasMaxLength(20);
                entity.Property(e => e.AgencyCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AgencyGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AgencyGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.AgencyCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Identifier).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Ori)
                    .HasMaxLength(50)
                    .HasColumnName("ORI");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AgencyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AgencyView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.AgencyCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AgencyCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Identifier).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Ori)
                    .HasMaxLength(50)
                    .HasColumnName("ORI");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AggregatedCounter>(entity =>
            {
                entity.HasKey(e => e.Key).HasName("PK_HangFire_CounterAggregated");

                entity.ToTable("AggregatedCounter", "HangFire");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_AggregatedCounter_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

                entity.Property(e => e.Key).HasMaxLength(100);
                entity.Property(e => e.ExpireAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<Aircraft>(entity =>
            {
                entity.HasKey(e => e.ItemId).HasFillFactor(80);

                entity.Property(e => e.ItemId).ValueGeneratedNever();
                entity.Property(e => e.AircraftCategoryId).HasDefaultValue(1);
                entity.Property(e => e.AircraftUsageId).HasDefaultValue(1);
                entity.Property(e => e.EngineCylinderQuantity).HasDefaultValue(0);
                entity.Property(e => e.EngineQuantity).HasDefaultValue(0);
                entity.Property(e => e.FuselageColorId).HasDefaultValue(1);
                entity.Property(e => e.TailIndentification).HasMaxLength(10);
                entity.Property(e => e.WingColorId).HasDefaultValue(1);

                entity.HasOne(d => d.AircraftCategory).WithMany(p => p.Aircraft)
                    .HasForeignKey(d => d.AircraftCategoryId)
                    .HasConstraintName("AircraftTypeDIM_Aircraft_FK1");

                entity.HasOne(d => d.AircraftUsage).WithMany(p => p.Aircraft)
                    .HasForeignKey(d => d.AircraftUsageId)
                    .HasConstraintName("FK_Aircraft_AircraftUsageDIM");

                entity.HasOne(d => d.BaseAirportLocation).WithMany(p => p.Aircraft)
                    .HasForeignKey(d => d.BaseAirportLocationId)
                    .HasConstraintName("FK_Aircraft_Location");

                entity.HasOne(d => d.FuselageColor).WithMany(p => p.AircraftFuselageColors)
                    .HasForeignKey(d => d.FuselageColorId)
                    .HasConstraintName("FK_Aircraft_ItemColorDIM");

                entity.HasOne(d => d.Item).WithOne(p => p.Aircraft)
                    .HasForeignKey<Aircraft>(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Aircraft_Item");

                entity.HasOne(d => d.WingColor).WithMany(p => p.AircraftWingColors)
                    .HasForeignKey(d => d.WingColorId)
                    .HasConstraintName("ItemColorDIM_Aircraft_FK1");
            });

            modelBuilder.Entity<AircraftCategoryDim>(entity =>
            {
                entity.HasKey(e => e.AircraftCategoryId)
                    .HasName("PK__Aircraft__9E3F4DCEB03B0377")
                    .HasFillFactor(80);

                entity.ToTable("AircraftCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AircraftCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AircraftCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AircraftCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AircraftCategoryDIMCodeView");

                entity.Property(e => e.AircraftCategoryCode).HasMaxLength(20);
                entity.Property(e => e.AircraftCategoryDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AircraftGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AircraftGuidView");

                entity.Property(e => e.AircraftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FuselageColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TailIndentification).HasMaxLength(10);
                entity.Property(e => e.WingColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AircraftUsageDim>(entity =>
            {
                entity.HasKey(e => e.AircraftUsageId)
                    .HasName("PK__Aircraft__93DD2CF1214FF479")
                    .HasFillFactor(80);

                entity.ToTable("AircraftUsageDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AircraftUsageDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AircraftUsageDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AircraftUsageDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AircraftUsageDIMCodeView");

                entity.Property(e => e.AircraftUsageCode).HasMaxLength(20);
                entity.Property(e => e.AircraftUsageDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AircraftView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AircraftView");

                entity.Property(e => e.AircraftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FuselageColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FuselageColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TailIndentification).HasMaxLength(10);
                entity.Property(e => e.WingColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WingColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Alert>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("Alert");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.AlertAudienceId).HasDefaultValue(1);
                entity.Property(e => e.AlertCategoryId).HasDefaultValue(1);
                entity.Property(e => e.AlertCertaintyId).HasDefaultValue(1);
                entity.Property(e => e.AlertEventId).HasDefaultValue(1);
                entity.Property(e => e.AlertHandlingId).HasDefaultValue(1);
                entity.Property(e => e.AlertInstructionId).HasDefaultValue(1);
                entity.Property(e => e.AlertReasonId).HasDefaultValue(1);
                entity.Property(e => e.AlertSenderId).HasDefaultValue(1);
                entity.Property(e => e.AlertSeverityId).HasDefaultValue(1);
                entity.Property(e => e.AlertTargetId).HasDefaultValue(1);
                entity.Property(e => e.AlertUrgencyId).HasDefaultValue(1);
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.Headline).HasMaxLength(200);

                entity.HasOne(d => d.Activity).WithOne(p => p.Alert)
                    .HasForeignKey<Alert>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Alert_Activity");

                entity.HasOne(d => d.AlertAudience).WithMany(p => p.Alerts)
                    .HasForeignKey(d => d.AlertAudienceId)
                    .HasConstraintName("AlertAudienceDIM_Alert_FK1");

                entity.HasOne(d => d.AlertCategory).WithMany(p => p.Alerts)
                    .HasForeignKey(d => d.AlertCategoryId)
                    .HasConstraintName("FK_Alert_AlertCategoryDIM");

                entity.HasOne(d => d.AlertCertainty).WithMany(p => p.Alerts)
                    .HasForeignKey(d => d.AlertCertaintyId)
                    .HasConstraintName("AlertCertantyDIM_Alert_FK1");

                entity.HasOne(d => d.AlertEvent).WithMany(p => p.Alerts)
                    .HasForeignKey(d => d.AlertEventId)
                    .HasConstraintName("AlertEventDIM_Alert_FK1");

                entity.HasOne(d => d.AlertHandling).WithMany(p => p.Alerts)
                    .HasForeignKey(d => d.AlertHandlingId)
                    .HasConstraintName("FK_Alert_AlertHandlingDIM");

                entity.HasOne(d => d.AlertInstruction).WithMany(p => p.Alerts)
                    .HasForeignKey(d => d.AlertInstructionId)
                    .HasConstraintName("AlertInstructionDIM_Alert_FK1");

                entity.HasOne(d => d.AlertReason).WithMany(p => p.Alerts)
                    .HasForeignKey(d => d.AlertReasonId)
                    .HasConstraintName("FK_Alert_AlertReasonDIM");

                entity.HasOne(d => d.AlertSender).WithMany(p => p.Alerts)
                    .HasForeignKey(d => d.AlertSenderId)
                    .HasConstraintName("AlertSenderDIM_Alert_FK1");

                entity.HasOne(d => d.AlertSeverity).WithMany(p => p.Alerts)
                    .HasForeignKey(d => d.AlertSeverityId)
                    .HasConstraintName("AlertSeverityDIM_Alert_FK1");

                entity.HasOne(d => d.AlertTarget).WithMany(p => p.Alerts)
                    .HasForeignKey(d => d.AlertTargetId)
                    .HasConstraintName("AlertTargetDIM_Alert_FK1");

                entity.HasOne(d => d.AlertUrgency).WithMany(p => p.Alerts)
                    .HasForeignKey(d => d.AlertUrgencyId)
                    .HasConstraintName("AlertUrgencyDIM_Alert_FK1");
            });

            modelBuilder.Entity<AlertAudienceDim>(entity =>
            {
                entity.HasKey(e => e.AlertAudienceId)
                    .HasName("AlertAudienceDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("AlertAudienceDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AlertAudienceDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AlertAudienceDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AlertAudienceDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AlertAudienceDIMCodeView");

                entity.Property(e => e.AlertAudienceCode).HasMaxLength(20);
                entity.Property(e => e.AlertAudienceDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AlertCategoryDim>(entity =>
            {
                entity.HasKey(e => e.AlertCategoryId)
                    .HasName("AlertCategoryDMM_PK")
                    .HasFillFactor(80);

                entity.ToTable("AlertCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AlertCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AlertCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AlertCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AlertCategoryDIMCodeView");

                entity.Property(e => e.AlertCategoryCode).HasMaxLength(20);
                entity.Property(e => e.AlertCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AlertCertaintyDim>(entity =>
            {
                entity.HasKey(e => e.AlertCertaintyId)
                    .HasName("AlertCertantyDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("AlertCertaintyDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AlertCertaintyDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AlertCertaintyDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AlertCertaintyDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AlertCertaintyDIMCodeView");

                entity.Property(e => e.AlertCertaintyCode).HasMaxLength(20);
                entity.Property(e => e.AlertCertaintyDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AlertEventDim>(entity =>
            {
                entity.HasKey(e => e.AlertEventId)
                    .HasName("AlertEventDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("AlertEventDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AlertEventDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AlertEventDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AlertEventDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AlertEventDIMCodeView");

                entity.Property(e => e.AlertEventCode).HasMaxLength(20);
                entity.Property(e => e.AlertEventDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AlertHandlingDim>(entity =>
            {
                entity.HasKey(e => e.AlertHandlingId).HasFillFactor(80);

                entity.ToTable("AlertHandlingDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AlertHandlingDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AlertHandlingDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AlertHandlingDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AlertHandlingDIMCodeView");

                entity.Property(e => e.AlertHandlingCode).HasMaxLength(20);
                entity.Property(e => e.AlertHandlingDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AlertInstructionDim>(entity =>
            {
                entity.HasKey(e => e.AlertInstructionId)
                    .HasName("AlertInstructionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("AlertInstructionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AlertInstructionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AlertInstructionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AlertInstructionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AlertInstructionDIMCodeView");

                entity.Property(e => e.AlertInstructionCode).HasMaxLength(20);
                entity.Property(e => e.AlertInstructionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AlertReasonDim>(entity =>
            {
                entity.HasKey(e => e.AlertReasonId).HasFillFactor(80);

                entity.ToTable("AlertReasonDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AlertReasonDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AlertReasonDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AlertReasonDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AlertReasonDIMCodeView");

                entity.Property(e => e.AlertReasonCode).HasMaxLength(20);
                entity.Property(e => e.AlertReasonDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AlertSenderDim>(entity =>
            {
                entity.HasKey(e => e.AlertSenderId)
                    .HasName("AlertSenderDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("AlertSenderDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AlertSenderDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AlertSenderDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AlertSenderDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AlertSenderDIMCodeView");

                entity.Property(e => e.AlertSenderCode).HasMaxLength(20);
                entity.Property(e => e.AlertSenderDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AlertSeverityDim>(entity =>
            {
                entity.HasKey(e => e.AlertSeverityId)
                    .HasName("AlertSeverityDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("AlertSeverityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AlertSeverityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AlertSeverityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AlertSeverityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AlertSeverityDIMCodeView");

                entity.Property(e => e.AlertSeverityCode).HasMaxLength(20);
                entity.Property(e => e.AlertSeverityDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AlertTargetDim>(entity =>
            {
                entity.HasKey(e => e.AlertTargetId)
                    .HasName("AlertTargetDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("AlertTargetDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AlertTargetDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AlertTargetDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AlertTargetDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AlertTargetDIMCodeView");

                entity.Property(e => e.AlertTargetCode).HasMaxLength(20);
                entity.Property(e => e.AlertTargetDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AlertUrgencyDim>(entity =>
            {
                entity.HasKey(e => e.AlertUrgencyId)
                    .HasName("AlertUrgencyDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("AlertUrgencyDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AlertUrgencyDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AlertUrgencyDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AlertUrgencyDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AlertUrgencyDIMCodeView");

                entity.Property(e => e.AlertUrgencyCode).HasMaxLength(20);
                entity.Property(e => e.AlertUrgencyDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AndroidException>(entity =>
            {
                entity.Property(e => e.ClassName).HasMaxLength(100);
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ExceptionDate).HasColumnType("datetime");
                entity.Property(e => e.MethodName).HasMaxLength(100);
            });

            modelBuilder.Entity<AndroidVersion>(entity =>
            {
                entity.HasKey(e => e.VersionNumber);

                entity.Property(e => e.VersionNumber).ValueGeneratedNever();
                entity.Property(e => e.VersionUrl).HasColumnName("VersionURL");
            });

            modelBuilder.Entity<AppVersion>(entity =>
            {
                entity.HasKey(e => e.AppVersionId).HasName("PK__AppVersi__A4BF52EACCFC239B");

                entity.ToTable("AppVersion");

                entity.Property(e => e.AppVersion1)
                    .HasMaxLength(50)
                    .HasColumnName("AppVersion");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            });

            //modelBuilder.Entity<Application>(entity =>
            //{
            //    entity.HasKey(e => e.ApplicationId)
            //        .HasName("PK__Applicat__C93A4C996BDC47F9")
            //        .HasFillFactor(80);

            //    entity.Property(e => e.ApplicationId).ValueGeneratedNever();
            //    entity.Property(e => e.ApplicationName).HasMaxLength(235);
            //    entity.Property(e => e.Description).HasMaxLength(256);
            //});

            modelBuilder.Entity<ApplicationPage>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_Table_1")
                    .HasFillFactor(80);

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.IconPath)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Name).HasMaxLength(100);
                entity.Property(e => e.PageName).HasMaxLength(100);
                entity.Property(e => e.Url).HasColumnName("URL");
                entity.Property(e => e.ViewModelName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.ApplicationPagesCategory).WithMany(p => p.ApplicationPages)
                    .HasForeignKey(d => d.ApplicationPagesCategoryId)
                    .HasConstraintName("FK_ApplicationPages_ApplicationPagesCategoryDIM");
            });

            modelBuilder.Entity<ApplicationPagesCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ApplicationPagesCategoryId).HasFillFactor(80);

                entity.ToTable("ApplicationPagesCategoryDIM");

                entity.Property(e => e.CategoryName).HasMaxLength(100);
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CultureDescriptionXml).HasColumnName("CultureDescriptionXML");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ApprovalCycle>(entity =>
            {
                entity.HasKey(e => e.ApprovalCycleId).HasFillFactor(80);

                entity.ToTable("ApprovalCycle");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ApprovalCycleCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ApprovalCycle_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ApprovalCycleModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ApprovalCycle_Person1");

                entity.HasOne(d => d.RequestType).WithMany(p => p.ApprovalCycles)
                    .HasForeignKey(d => d.RequestTypeId)
                    .HasConstraintName("FK_ApprovalCycle_ReportRequestTypeDIM");
            });

            modelBuilder.Entity<ArcaverageTime>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ARCAverageTime");

                entity.Property(e => e.Average).HasColumnType("decimal(16, 2)");
                entity.Property(e => e.AverageReportsWithin15).HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<ArcaverageTime15>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ARCAverageTime15");

                entity.Property(e => e.Average).HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<ArcaverageTimeOld>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ARCAverageTimeOld");

                entity.Property(e => e.Average).HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<ArcproActionLog>(entity =>
            {
                entity.ToTable("ARCProActionLog");

                entity.Property(e => e.ArcproActionLogTypeId).HasColumnName("ARCProActionLogTypeId");
                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.HasOne(d => d.ArcproActionLogType).WithMany(p => p.ArcproActionLogs)
                    .HasForeignKey(d => d.ArcproActionLogTypeId)
                    .HasConstraintName("FK_ARCProActionLogTypeDim_ARCProActionLogTypeId");
            });

            modelBuilder.Entity<ArcproActionLogTypeDim>(entity =>
            {
                entity.ToTable("ARCProActionLogTypeDim");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<Area>(entity =>
            {
                entity.HasKey(e => e.AreaId)
                    .HasName("PK__Area__70B820487679778E")
                    .HasFillFactor(80);

                entity.ToTable("Area");

                entity.Property(e => e.AreaGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AreaCategory).WithMany(p => p.Areas)
                    .HasForeignKey(d => d.AreaCategoryId)
                    .HasConstraintName("FK_GeoAreaofInterestDIM_GeoAreaofInterestCategoryDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AreaCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Area_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AreaModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Area_Person1");

                entity.HasOne(d => d.Organization).WithMany(p => p.Areas)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GeoAreaofInterestDIM_Organization");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Areas)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Area_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Areas)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GeoAreaofInterestDIM_Source");
            });

            modelBuilder.Entity<AreaAllowedMobileNumber>(entity =>
            {
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<AreaAssociation>(entity =>
            {
                entity.HasKey(e => e.AreaAssociationId).HasFillFactor(80);

                entity.ToTable("AreaAssociation");

                entity.Property(e => e.AreaAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.AreaAssociationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.AreaRelationShipCategoryId).HasDefaultValue(1);
                entity.Property(e => e.AreaRelationshipTypeId).HasDefaultValue(1);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FromDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToDateTimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.Area).WithMany(p => p.AreaAssociationAreas)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AreaAssociation_Area");

                entity.HasOne(d => d.AreaRelationShipCategory).WithMany(p => p.AreaAssociations)
                    .HasForeignKey(d => d.AreaRelationShipCategoryId)
                    .HasConstraintName("FK_AreaAssociation_AreaRelationshipCategoryDIM");

                entity.HasOne(d => d.AreaRelationshipType).WithMany(p => p.AreaAssociations)
                    .HasForeignKey(d => d.AreaRelationshipTypeId)
                    .HasConstraintName("FK_AreaAssociation_AreaRelationshipTypeDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AreaAssociationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_AreaAssociation_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.AreaAssociationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_AreaAssociation_Person1");

                entity.HasOne(d => d.RelatedArea).WithMany(p => p.AreaAssociationRelatedAreas)
                    .HasForeignKey(d => d.RelatedAreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AreaAssociation_Area1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AreaAssociations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AreaAssociation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.AreaAssociations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AreaAssociation_Source");
            });

            modelBuilder.Entity<AreaCategoryDim>(entity =>
            {
                entity.HasKey(e => e.AreaCategoryId)
                    .HasName("PK__AreaCate__2BF79A81511ABB7A")
                    .HasFillFactor(80);

                entity.ToTable("AreaCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AreaCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AreaCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AreaCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AreaCategoryDIMCodeView");

                entity.Property(e => e.AreaCategoryCode).HasMaxLength(20);
                entity.Property(e => e.AreaCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AreaGroupDim>(entity =>
            {
                entity.HasKey(e => e.GroupId);

                entity.ToTable("AreaGroupDim");

                entity.Property(e => e.GroupId).ValueGeneratedNever();
                entity.Property(e => e.GroupCode).HasMaxLength(50);
                entity.Property(e => e.GroupName).HasMaxLength(500);
                entity.Property(e => e.MaxResponseTimeInSecs).HasDefaultValue(900);
            });

            modelBuilder.Entity<AreaGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AreaGuidView");

                entity.Property(e => e.AreaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AreaInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.AreaInvolvementId).HasFillFactor(80);

                entity.ToTable("AreaInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AreaInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AreaInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AreaInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AreaInvolvementDIMCodeView");

                entity.Property(e => e.AreaInvolvementCode).HasMaxLength(50);
                entity.Property(e => e.AreaInvolvementDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AreaItem>(entity =>
            {
                entity.HasKey(e => e.AreaItemId).HasFillFactor(80);

                entity.ToTable("AreaItem");

                entity.HasIndex(e => e.ItemId, "NonClusteredIndex-20200604-191340");

                entity.HasIndex(e => new { e.ItemId, e.AreaId }, "NonClusteredIndex-20200604-191353");

                entity.Property(e => e.IsAttended).HasDefaultValue(false);

                entity.HasOne(d => d.Area).WithMany(p => p.AreaItems)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AreaItem_Area");

                entity.HasOne(d => d.Item).WithMany(p => p.AreaItems)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AreaItem_Item");
            });

            modelBuilder.Entity<AreaItem1>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("AreaItems");

                entity.HasIndex(e => e.AreaId, "NonClusteredIndex-20200531-151459");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.HasOne(d => d.Area).WithMany(p => p.AreaItem1s)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_AreaItems_Area");

                entity.HasOne(d => d.Item).WithMany(p => p.AreaItem1s)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_AreaItems_Item");
            });

            modelBuilder.Entity<AreaRelationshipCategoryDim>(entity =>
            {
                entity.HasKey(e => e.AreaRelationshipCategoryId).HasFillFactor(80);

                entity.ToTable("AreaRelationshipCategoryDIM");

                entity.Property(e => e.AreaRelationshipCategoryId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Niem)
                    .HasMaxLength(20)
                    .HasColumnName("NIEM");
                entity.Property(e => e.NiemtypeName)
                    .HasMaxLength(100)
                    .HasColumnName("NIEMTypeName");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AreaRelationshipCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AreaRelationshipCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AreaRelationshipTypeDim>(entity =>
            {
                entity.HasKey(e => e.AreaRelationshipTypeId).HasFillFactor(80);

                entity.ToTable("AreaRelationshipTypeDIM");

                entity.Property(e => e.AreaRelationshipTypeId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AreaRelationshipTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AreaRelationshipTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AreaSupportNumber>(entity =>
            {
                entity.ToTable("AreaSupportNumber");

                entity.Property(e => e.SupportNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<AreaView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AreaView");

                entity.Property(e => e.AreaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaId).ValueGeneratedOnAdd();
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArmyNotificationLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("ArmyNotificationLog");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.Email).HasMaxLength(500);

                entity.HasOne(d => d.VehicleData).WithMany(p => p.ArmyNotificationLogs)
                    .HasForeignKey(d => d.VehicleDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArmyNotificationLog_ArmyNotificationLog");
            });

            modelBuilder.Entity<Arrest>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_Arrest_1")
                    .HasFillFactor(80);

                entity.ToTable("Arrest");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.ArrestCategoryId).HasDefaultValue(1);
                entity.Property(e => e.ArrestProbableCauseId).HasDefaultValue(1);
                entity.Property(e => e.ArrestRightsReadResponseId).HasDefaultValue(1);
                entity.Property(e => e.IntoxicantInvolvedIndicator).HasDefaultValue(false);
                entity.Property(e => e.RecordIdenification).HasMaxLength(50);
                entity.Property(e => e.ResistedIndicator).HasDefaultValue(false);
                entity.Property(e => e.RightsReadIndicator).HasDefaultValue(false);

                entity.HasOne(d => d.Activity).WithOne(p => p.Arrest)
                    .HasForeignKey<Arrest>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Arrest_Activity");

                entity.HasOne(d => d.ArrestCategory).WithMany(p => p.Arrests)
                    .HasForeignKey(d => d.ArrestCategoryId)
                    .HasConstraintName("ArrestType_Arrests_FK1");

                entity.HasOne(d => d.ArrestProbableCause).WithMany(p => p.Arrests)
                    .HasForeignKey(d => d.ArrestProbableCauseId)
                    .HasConstraintName("FK_Arrest_ArrestProbableCauseDIM");

                entity.HasOne(d => d.ArrestRightsReadResponse).WithMany(p => p.Arrests)
                    .HasForeignKey(d => d.ArrestRightsReadResponseId)
                    .HasConstraintName("FK_Arrest_ArrestRightsReadResponseDIM");
            });

            modelBuilder.Entity<ArrestCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ArrestCategoryId)
                    .HasName("ArrestType_PK")
                    .HasFillFactor(80);

                entity.ToTable("ArrestCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ArrestCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ArrestCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ArrestCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArrestCategoryDIMCodeView");

                entity.Property(e => e.ArrestCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ArrestCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ArrestCharge>(entity =>
            {
                entity.HasKey(e => e.ArrestChargeId).HasFillFactor(80);

                entity.ToTable("ArrestCharge");

                entity.Property(e => e.ArrestChargeDescription).HasMaxLength(300);
                entity.Property(e => e.ArrestChargeGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.ArrestCharges)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArrestCharge_Activity");

                entity.HasOne(d => d.Charge).WithMany(p => p.ArrestCharges)
                    .HasForeignKey(d => d.ChargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArrestCharge_Charge");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ArrestCharges)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ArrestCharge_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ArrestCharges)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArrestCharge_Source");
            });

            modelBuilder.Entity<ArrestChargeContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArrestChargeContainerGuidView");

                entity.Property(e => e.ArrestChargeDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArrestChargeContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArrestChargeContainerView");

                entity.Property(e => e.ArrestChargeDescription).HasMaxLength(300);
                entity.Property(e => e.ArrestChargeId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArrestChargeGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArrestChargeGuidView");

                entity.Property(e => e.ArrestChargeDescription).HasMaxLength(300);
                entity.Property(e => e.ChargeDegreeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDescription).HasMaxLength(100);
                entity.Property(e => e.ChargeSeverityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FillingDate).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
            });

            modelBuilder.Entity<ArrestChargeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArrestChargeView");

                entity.Property(e => e.ArrestChargeDescription).HasMaxLength(300);
                entity.Property(e => e.ChargeDegreeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDegreeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDescription).HasMaxLength(100);
                entity.Property(e => e.ChargeSeverityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeSeverityLevelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FillingDate).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
                entity.Property(e => e.StatuteDescription).HasMaxLength(100);
                entity.Property(e => e.StatuteStatuteDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<ArrestProbableCauseDim>(entity =>
            {
                entity.HasKey(e => e.ArrestProbableCauseId)
                    .HasName("ArrestProbableCause_PK")
                    .HasFillFactor(80);

                entity.ToTable("ArrestProbableCauseDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ArrestProbableCauseDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ArrestProbableCauseDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ArrestProbableCauseDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArrestProbableCauseDIMCodeView");

                entity.Property(e => e.ArrestProbableCauseCode).HasMaxLength(20);
                entity.Property(e => e.ArrestProbableCauseDescription).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ArrestRightsReadResponseDim>(entity =>
            {
                entity.HasKey(e => e.ArrestRightsReadResponseId)
                    .HasName("ArrestRightsReadResponse_PK")
                    .HasFillFactor(80);

                entity.ToTable("ArrestRightsReadResponseDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ArrestRightsReadResponseDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ArrestRightsReadResponseDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ArrestRightsReadResponseDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArrestRightsReadResponseDIMCodeView");

                entity.Property(e => e.ArrestRightsReadResponseCode).HasMaxLength(20);
                entity.Property(e => e.ArrestRightsReadResponseDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ArrestWarrant>(entity =>
            {
                entity.HasKey(e => e.ArrestWarrantId).HasFillFactor(80);

                entity.ToTable("ArrestWarrant");

                entity.Property(e => e.ArrestWarrantDescription).HasMaxLength(300);
                entity.Property(e => e.ArrestWarrantGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.ArrestWarrants)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArrestWarrant_Activity");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ArrestWarrants)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ArrestWarrant_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ArrestWarrants)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArrestWarrant_Source");
            });

            modelBuilder.Entity<ArrestWarrantContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArrestWarrantContainerGuidView");

                entity.Property(e => e.ArrestWarrantDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArrestWarrantContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArrestWarrantContainerView");

                entity.Property(e => e.ArrestWarrantDescription).HasMaxLength(300);
                entity.Property(e => e.ArrestWarrantId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Article>(entity =>
            {
                entity.HasKey(e => e.ItemId).HasFillFactor(80);

                entity.ToTable("Article");

                entity.Property(e => e.ItemId).ValueGeneratedNever();
                entity.Property(e => e.ArticleCategoryId).HasDefaultValue(1);
                entity.Property(e => e.ArticleTypeId).HasDefaultValue(1);

                entity.HasOne(d => d.ArticleCategory).WithMany(p => p.Articles)
                    .HasForeignKey(d => d.ArticleCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Articles_ArticleCategoryDIM");

                entity.HasOne(d => d.ArticleType).WithMany(p => p.Articles)
                    .HasForeignKey(d => d.ArticleTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ElectronicsTypeDIM_Electronics_FK1");

                entity.HasOne(d => d.Item).WithOne(p => p.Article)
                    .HasForeignKey<Article>(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Article_Item");
            });

            modelBuilder.Entity<ArticleCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ArticleCategoryId).HasFillFactor(80);

                entity.ToTable("ArticleCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ArticleCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ArticleCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ArticleCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArticleCategoryDIMCodeView");

                entity.Property(e => e.ArticleCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ArticleCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ArticleGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArticleGuidView");

                entity.Property(e => e.ArticleCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleTypeCode).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArticleTypeDim>(entity =>
            {
                entity.HasKey(e => e.ArticleTypeId)
                    .HasName("ArticleTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ArticleTypeDIM");

                entity.Property(e => e.CategoryCode).HasMaxLength(50);
                entity.Property(e => e.CategoryDescription).HasMaxLength(100);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ArticleTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ArticleTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ArticleTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArticleTypeDIMCodeView");

                entity.Property(e => e.ArticleTypeCategoryCode).HasMaxLength(50);
                entity.Property(e => e.ArticleTypeCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.ArticleTypeCode).HasMaxLength(20);
                entity.Property(e => e.ArticleTypeDescription).HasMaxLength(250);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ArticleView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ArticleView");

                entity.Property(e => e.ArticleCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleTypeCategoryCode).HasMaxLength(50);
                entity.Property(e => e.ArticleTypeCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.ArticleTypeCode).HasMaxLength(20);
                entity.Property(e => e.ArticleTypeDescription).HasMaxLength(250);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AspnetApplication>(entity =>
            {
                entity.HasKey(e => e.ApplicationId)
                    .HasName("PK__aspnet_A__C93A4C9874B37944")
                    .IsClustered(false)
                    .HasFillFactor(80);

                entity.ToTable("aspnet_Applications");

                entity.HasIndex(e => e.LoweredApplicationName, "UQ__aspnet_A__17477DE43E14DA57")
                    .IsUnique()
                    .HasFillFactor(80);

                entity.HasIndex(e => e.ApplicationName, "UQ__aspnet_A__30910331F6B4F8C3")
                    .IsUnique()
                    .HasFillFactor(80);

                entity.HasIndex(e => e.LoweredApplicationName, "aspnet_Applications_Index")
                    .IsClustered()
                    .HasFillFactor(80);

                entity.Property(e => e.ApplicationId).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ApplicationName).HasMaxLength(256);
                entity.Property(e => e.Description).HasMaxLength(256);
                entity.Property(e => e.LoweredApplicationName).HasMaxLength(256);
            });

            modelBuilder.Entity<AspnetMembership>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__aspnet_M__1788CC4D333390C4")
                    .IsClustered(false)
                    .HasFillFactor(80);

                entity.ToTable("aspnet_Membership");

                entity.HasIndex(e => new { e.ApplicationId, e.LoweredEmail }, "aspnet_Membership_index")
                    .IsClustered()
                    .HasFillFactor(80);

                entity.Property(e => e.UserId).ValueGeneratedNever();
                entity.Property(e => e.Comment).HasColumnType("ntext");
                entity.Property(e => e.CreateDate).HasColumnType("datetime");
                entity.Property(e => e.Email).HasMaxLength(256);
                entity.Property(e => e.EnforcePasswordChange).HasDefaultValue(true);
                entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");
                entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");
                entity.Property(e => e.HistoricalTrackingHashedPassword)
                    .HasMaxLength(150)
                    .IsUnicode(false);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");
                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");
                entity.Property(e => e.LockOutExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.LoweredEmail).HasMaxLength(256);
                entity.Property(e => e.MobilePin)
                    .HasMaxLength(16)
                    .HasColumnName("MobilePIN");
                entity.Property(e => e.Password).HasMaxLength(128);
                entity.Property(e => e.PasswordAnswer).HasMaxLength(128);
                entity.Property(e => e.PasswordExpirationDate)
                    .HasDefaultValueSql("(dateadd(day,(90),getdate()))")
                    .HasColumnType("datetime");
                entity.Property(e => e.PasswordQuestion).HasMaxLength(256);
                entity.Property(e => e.PasswordSalt).HasMaxLength(128);

                entity.HasOne(d => d.Application).WithMany(p => p.AspnetMemberships)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Me__Appli__7B71F792");

                entity.HasOne(d => d.User).WithOne(p => p.AspnetMembership)
                    .HasForeignKey<AspnetMembership>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Me__UserI__7C661BCB");
            });

            modelBuilder.Entity<AspnetPath>(entity =>
            {
                entity.HasKey(e => e.PathId)
                    .HasName("PK__aspnet_P__CD67DC587BBC38AA")
                    .IsClustered(false)
                    .HasFillFactor(80);

                entity.ToTable("aspnet_Paths");

                entity.HasIndex(e => new { e.ApplicationId, e.LoweredPath }, "aspnet_Paths_index")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(80);

                entity.Property(e => e.PathId).HasDefaultValueSql("(newid())");
                entity.Property(e => e.LoweredPath).HasMaxLength(256);
                entity.Property(e => e.Path).HasMaxLength(256);

                entity.HasOne(d => d.Application).WithMany(p => p.AspnetPaths)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Pa__Appli__7D5A4004");
            });

            modelBuilder.Entity<AspnetPersonalizationAllUser>(entity =>
            {
                entity.HasKey(e => e.PathId)
                    .HasName("PK__aspnet_P__CD67DC5949654647")
                    .HasFillFactor(80);

                entity.ToTable("aspnet_PersonalizationAllUsers");

                entity.Property(e => e.PathId).ValueGeneratedNever();
                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
                entity.Property(e => e.PageSettings).HasColumnType("image");

                entity.HasOne(d => d.Path).WithOne(p => p.AspnetPersonalizationAllUser)
                    .HasForeignKey<AspnetPersonalizationAllUser>(d => d.PathId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Pe__PathI__7E4E643D");
            });

            modelBuilder.Entity<AspnetPersonalizationPerUser>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__aspnet_P__3214EC0682A55493")
                    .IsClustered(false)
                    .HasFillFactor(80);

                entity.ToTable("aspnet_PersonalizationPerUser");

                entity.HasIndex(e => new { e.PathId, e.UserId }, "aspnet_PersonalizationPerUser_index1")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(80);

                entity.HasIndex(e => new { e.UserId, e.PathId }, "aspnet_PersonalizationPerUser_ncindex2")
                    .IsUnique()
                    .HasFillFactor(80);

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
                entity.Property(e => e.PageSettings).HasColumnType("image");

                entity.HasOne(d => d.Path).WithMany(p => p.AspnetPersonalizationPerUsers)
                    .HasForeignKey(d => d.PathId)
                    .HasConstraintName("FK__aspnet_Pe__PathI__7F428876");

                entity.HasOne(d => d.User).WithMany(p => p.AspnetPersonalizationPerUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__aspnet_Pe__UserI__0036ACAF");
            });

            modelBuilder.Entity<AspnetProfile>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__aspnet_P__1788CC4C75B782A8")
                    .HasFillFactor(80);

                entity.ToTable("aspnet_Profile");

                entity.Property(e => e.UserId).ValueGeneratedNever();
                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
                entity.Property(e => e.PropertyNames).HasColumnType("ntext");
                entity.Property(e => e.PropertyValuesBinary).HasColumnType("image");
                entity.Property(e => e.PropertyValuesString).HasColumnType("ntext");

                entity.HasOne(d => d.User).WithOne(p => p.AspnetProfile)
                    .HasForeignKey<AspnetProfile>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Pr__UserI__012AD0E8");
            });

            modelBuilder.Entity<AspnetRole>(entity =>
            {
                entity.HasKey(e => e.RoleId)
                    .HasName("PK__aspnet_R__8AFACE1B3E9EBED5")
                    .IsClustered(false)
                    .HasFillFactor(80);

                entity.ToTable("aspnet_Roles");

                entity.HasIndex(e => new { e.ApplicationId, e.LoweredRoleName }, "aspnet_Roles_index1")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(80);

                entity.Property(e => e.RoleId).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(256);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.LoweredRoleName).HasMaxLength(256);
                entity.Property(e => e.RoleName).HasMaxLength(256);

                entity.HasOne(d => d.Application).WithMany(p => p.AspnetRoles)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Ro__Appli__021EF521");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AspnetRoles)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_aspnet_Roles_aspnet_Users");

                entity.HasOne(d => d.DefaultPage).WithMany(p => p.AspnetRoles)
                    .HasForeignKey(d => d.DefaultPageId)
                    .HasConstraintName("FK_aspnet_Roles_ApplicationPages");

                entity.HasOne(d => d.ParentRole).WithMany(p => p.InverseParentRole)
                    .HasForeignKey(d => d.ParentRoleId)
                    .HasConstraintName("FK_aspnet_Roles_aspnet_Roles");
            });

            modelBuilder.Entity<AspnetSchemaVersion>(entity =>
            {
                entity.HasKey(e => new { e.Feature, e.CompatibleSchemaVersion })
                    .HasName("PK__aspnet_S__5A1E6BC1F0464FA5")
                    .HasFillFactor(80);

                entity.ToTable("aspnet_SchemaVersions");

                entity.Property(e => e.Feature).HasMaxLength(128);
                entity.Property(e => e.CompatibleSchemaVersion).HasMaxLength(128);
            });

            modelBuilder.Entity<AspnetUser>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__aspnet_U__1788CC4D47EE53FA")
                    .IsClustered(false)
                    .HasFillFactor(80);

                entity.ToTable("aspnet_Users");

                entity.HasIndex(e => new { e.ApplicationId, e.LoweredUserName }, "aspnet_Users_Index")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(80);

                entity.HasIndex(e => new { e.ApplicationId, e.LastActivityDate }, "aspnet_Users_Index2").HasFillFactor(80);

                entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.IsFromActiveDirectory)
                    .HasDefaultValue(false)
                    .HasColumnName("isFromActiveDirectory");
                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.LoweredUserName).HasMaxLength(256);
                entity.Property(e => e.MobileAlias)
                    .HasMaxLength(16)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.UserName).HasMaxLength(256);

                entity.HasOne(d => d.Application).WithMany(p => p.AspnetUsers)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Us__Appli__0313195A");
            });

            modelBuilder.Entity<AspnetUsersInRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PK__aspnet_U__AF2760ADDEB55383")
                    .HasFillFactor(80);

                entity.ToTable("aspnet_UsersInRoles");

                entity.HasIndex(e => e.RoleId, "aspnet_UsersInRoles_index").HasFillFactor(80);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.UserRoles)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.HasOne(d => d.Role).WithMany(p => p.AspnetUsersInRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Us__RoleI__25882CEF");

                entity.HasOne(d => d.User).WithMany(p => p.AspnetUsersInRoles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__aspnet_Us__UserI__267C5128");
            });

            modelBuilder.Entity<AspnetWebEventEvent>(entity =>
            {
                entity.HasKey(e => e.EventId)
                    .HasName("PK__aspnet_W__7944C8106B4DCC3E")
                    .HasFillFactor(80);

                entity.ToTable("aspnet_WebEvent_Events");

                entity.Property(e => e.EventId)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength();
                entity.Property(e => e.ApplicationPath).HasMaxLength(256);
                entity.Property(e => e.ApplicationVirtualPath).HasMaxLength(256);
                entity.Property(e => e.Details).HasColumnType("ntext");
                entity.Property(e => e.EventOccurrence).HasColumnType("decimal(19, 0)");
                entity.Property(e => e.EventSequence).HasColumnType("decimal(19, 0)");
                entity.Property(e => e.EventTime).HasColumnType("datetime");
                entity.Property(e => e.EventTimeUtc).HasColumnType("datetime");
                entity.Property(e => e.EventType).HasMaxLength(256);
                entity.Property(e => e.ExceptionType).HasMaxLength(256);
                entity.Property(e => e.MachineName).HasMaxLength(256);
                entity.Property(e => e.Message).HasMaxLength(1024);
                entity.Property(e => e.RequestUrl).HasMaxLength(1024);
            });

            modelBuilder.Entity<Assessment>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__Assessme__45F4A791D64F8C96")
                    .HasFillFactor(80);

                entity.ToTable("Assessment");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.EstablishedDate).HasColumnType("datetime");
                entity.Property(e => e.ExpireDate).HasColumnType("datetime");
                entity.Property(e => e.ScoreText).HasMaxLength(128);

                entity.HasOne(d => d.Activity).WithOne(p => p.Assessment)
                    .HasForeignKey<Assessment>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Assessment_Activity");
            });

            modelBuilder.Entity<AssessmentResponse>(entity =>
            {
                entity.HasKey(e => e.AssessmentResponseId)
                    .HasName("PK__Assessme__8395752B405F399B")
                    .HasFillFactor(80);

                entity.ToTable("AssessmentResponse");

                entity.Property(e => e.AssessmentResponseGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);

                entity.HasOne(d => d.Activity).WithMany(p => p.AssessmentResponses)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssessmentResponse_Activity");

                entity.HasOne(d => d.QuestionChoice).WithMany(p => p.AssessmentResponses)
                    .HasForeignKey(d => d.QuestionChoiceId)
                    .HasConstraintName("FK_AssessmentResponse_QuestionChoice");

                entity.HasOne(d => d.Question).WithMany(p => p.AssessmentResponses)
                    .HasForeignKey(d => d.QuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssessmentResponse_Question");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AssessmentResponses)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AssessmentResponse_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.AssessmentResponses)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AssessmentResponse_Source");
            });

            modelBuilder.Entity<AssessmentResponseGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssessmentResponseGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AssessmentResponseView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AssessmentResponseView");

                entity.Property(e => e.AssessmentResponseId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AssignmentPushRetry>(entity =>
            {
                entity.ToTable("AssignmentPushRetry");

                entity.HasIndex(e => e.NotificationId, "NonClusteredIndex-20200721-181700");

                entity.HasIndex(e => new { e.IsConfirmed, e.RetryCount }, "NonClusteredIndex-20200721-181714");

                entity.Property(e => e.ConfirmedTime).HasColumnType("datetime");
                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.LastRetryTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Audit>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("Audit");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.AuditCategoryId).HasDefaultValue(1);
                entity.Property(e => e.AuditDateTime).HasColumnType("datetime");
                entity.Property(e => e.AuditXml)
                    .HasColumnType("xml")
                    .HasColumnName("AuditXML");
                entity.Property(e => e.AuthorizationTypeId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.Audit)
                    .HasForeignKey<Audit>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Audit_Activity");

                entity.HasOne(d => d.AuditCategory).WithMany(p => p.Audits)
                    .HasForeignKey(d => d.AuditCategoryId)
                    .HasConstraintName("FK_Audit_AuditCategoryDIM");

                entity.HasOne(d => d.AuthorizationType).WithMany(p => p.Audits)
                    .HasForeignKey(d => d.AuthorizationTypeId)
                    .HasConstraintName("FK_Audit_AuthorizationTypeDIM");
            });

            modelBuilder.Entity<AuditCategoryDim>(entity =>
            {
                entity.HasKey(e => e.AuditCategoryId)
                    .HasName("PK__AuditCat__56F2834AF4F7E8F4")
                    .HasFillFactor(80);

                entity.ToTable("AuditCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AuditCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AuditCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AuditCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AuditCategoryDIMCodeView");

                entity.Property(e => e.AuditCategoryCode).HasMaxLength(20);
                entity.Property(e => e.AuditCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AuditDetail>(entity =>
            {
                entity.HasKey(e => e.AuditDetailId)
                    .HasName("PK__AuditDet__1E1C701D50D45B68")
                    .HasFillFactor(80);

                entity.ToTable("AuditDetail");

                entity.Property(e => e.AuditCategoryId).HasDefaultValue(1);
                entity.Property(e => e.AuditDateTime).HasColumnType("datetime");
                entity.Property(e => e.AuditDetailDescription).HasMaxLength(300);
                entity.Property(e => e.AuditXml)
                    .HasColumnType("xml")
                    .HasColumnName("AuditXML");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.AuditDetails)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuditDetail_Audit");

                entity.HasOne(d => d.AuditCategory).WithMany(p => p.AuditDetails)
                    .HasForeignKey(d => d.AuditCategoryId)
                    .HasConstraintName("FK_AuditDetail_AuditCategoryDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AuditDetails)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AuditDetail_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.AuditDetails)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AuditDetail_Source");
            });

            modelBuilder.Entity<AuditDetailGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AuditDetailGuidView");

                entity.Property(e => e.AuditCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AuditDateTime).HasColumnType("datetime");
                entity.Property(e => e.AuditDetailDescription).HasMaxLength(300);
                entity.Property(e => e.AuditXml)
                    .HasColumnType("xml")
                    .HasColumnName("AuditXML");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AuditDetailView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AuditDetailView");

                entity.Property(e => e.AuditCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AuditCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AuditDateTime).HasColumnType("datetime");
                entity.Property(e => e.AuditDetailDescription).HasMaxLength(300);
                entity.Property(e => e.AuditDetailId).ValueGeneratedOnAdd();
                entity.Property(e => e.AuditXml)
                    .HasColumnType("xml")
                    .HasColumnName("AuditXML");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AuditTrailTable>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("AuditTrailTable");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.FieldIdNumber).HasMaxLength(150);
                entity.Property(e => e.FieldName).HasMaxLength(150);
                entity.Property(e => e.TableName).HasMaxLength(150);
                entity.Property(e => e.TimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.UserName).HasMaxLength(150);
            });

            modelBuilder.Entity<AuthorizationTypeDim>(entity =>
            {
                entity.HasKey(e => e.AuthorizationTypeId)
                    .HasName("PK__Authoriz__8B3F4CE8EEBA8069")
                    .HasFillFactor(80);

                entity.ToTable("AuthorizationTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Niem)
                    .HasMaxLength(20)
                    .HasColumnName("NIEM");
                entity.Property(e => e.NiemtypeName)
                    .HasMaxLength(100)
                    .HasColumnName("NIEMTypeName");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.AuthorizationTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_AuthorizationTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<AuthorizationTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AuthorizationTypeDIMCodeView");

                entity.Property(e => e.AuthorizationTypeCode).HasMaxLength(20);
                entity.Property(e => e.AuthorizationTypeDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<AutoDispatchConfiguration>(entity =>
            {
                entity.ToTable("AutoDispatchConfiguration");
            });

            modelBuilder.Entity<AutoDispatchLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_AutoDipatchLog");

                entity.ToTable("AutoDispatchLog");

                entity.Property(e => e.DispatchTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AutomationReportsTable>(entity =>
            {
                entity.ToTable("AutomationReportsTable");

                entity.Property(e => e.FilterRelations).HasMaxLength(500);
                entity.Property(e => e.HasCrfilter).HasColumnName("HasCRFilter");
                entity.Property(e => e.ReportDescription).HasMaxLength(500);
                entity.Property(e => e.ReportName).HasMaxLength(200);
                entity.Property(e => e.Roles).HasMaxLength(500);
            });

            modelBuilder.Entity<AutomationReportsType>(entity =>
            {
                entity.ToTable("AutomationReportsType");

                entity.Property(e => e.Description).HasMaxLength(200);
            });

            modelBuilder.Entity<AverageReconstructionTimePerMonth>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AverageReconstructionTimePerMonth");

                entity.Property(e => e.Month).HasMaxLength(30);
            });

            modelBuilder.Entity<AverageResponseTimeByMonth>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("AverageResponseTimeByMonth");

                entity.Property(e => e.AverageResponseTime).HasColumnName("averageResponseTime");
                entity.Property(e => e.Month).HasMaxLength(30);
            });

            modelBuilder.Entity<Bail>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_Bail_1")
                    .HasFillFactor(80);

                entity.ToTable("Bail");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.BailConditionId).HasDefaultValue(1);
                entity.Property(e => e.BailHearingDate).HasColumnType("datetime");
                entity.Property(e => e.BailPostedDate).HasColumnType("datetime");
                entity.Property(e => e.BailRequirementId).HasDefaultValue(1);
                entity.Property(e => e.BailRevokedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithOne(p => p.Bail)
                    .HasForeignKey<Bail>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bail_Activity");

                entity.HasOne(d => d.BailCondition).WithMany(p => p.Bails)
                    .HasForeignKey(d => d.BailConditionId)
                    .HasConstraintName("FK_Bail_BailConditionDIM");

                entity.HasOne(d => d.BailRequirement).WithMany(p => p.Bails)
                    .HasForeignKey(d => d.BailRequirementId)
                    .HasConstraintName("BailRequirements_Bail_FK1");
            });

            modelBuilder.Entity<BailConditionDim>(entity =>
            {
                entity.HasKey(e => e.BailConditionId)
                    .HasName("BailConditionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("BailConditionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.BailConditionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_BailConditionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<BailConditionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BailConditionDIMCodeView");

                entity.Property(e => e.BailConditionCode).HasMaxLength(20);
                entity.Property(e => e.BailConditionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<BailRequirementDim>(entity =>
            {
                entity.HasKey(e => e.BailRequirementId)
                    .HasName("BailRequirements_PK")
                    .HasFillFactor(80);

                entity.ToTable("BailRequirementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.BailRequirementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_BailRequirementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<BailRequirementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BailRequirementDIMCodeView");

                entity.Property(e => e.BailRequirementCode).HasMaxLength(20);
                entity.Property(e => e.BailRequirementDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<BestCallReceiverForWeekView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BestCallReceiverForWeekView");

                entity.Property(e => e.AverageResponeseTime).HasPrecision(0);
                entity.Property(e => e.CallReceiver).HasMaxLength(152);
                entity.Property(e => e.CallReceiverCode).HasMaxLength(100);
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.Image).HasColumnName("image");
            });

            modelBuilder.Entity<BestCallReceiverForYearView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BestCallReceiverForYearView");

                entity.Property(e => e.AverageResponeseTime).HasPrecision(0);
                entity.Property(e => e.CallReceiver).HasMaxLength(152);
                entity.Property(e => e.CallReceiverCode).HasMaxLength(100);
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.Image).HasColumnName("image");
            });

            modelBuilder.Entity<BestDispatcherForWeekView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BestDispatcherForWeekView");

                entity.Property(e => e.AverageResponeseTime).HasPrecision(0);
                entity.Property(e => e.CallDispatcher).HasMaxLength(152);
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.DispatcherCode).HasMaxLength(100);
                entity.Property(e => e.Image).HasColumnName("image");
            });

            modelBuilder.Entity<BestDispatcherForYearView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BestDispatcherForYearView");

                entity.Property(e => e.AverageResponeseTime).HasPrecision(0);
                entity.Property(e => e.CallDispatcher).HasMaxLength(152);
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.DispatcherCode).HasMaxLength(100);
                entity.Property(e => e.Image).HasColumnName("image");
            });

            modelBuilder.Entity<BestTrafficExpertForYearView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BestTrafficExpertForYearView");

                entity.Property(e => e.AverageReconstructionTime).HasPrecision(0);
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.Image).HasColumnName("image");
                entity.Property(e => e.TrafficExpert).HasMaxLength(152);
                entity.Property(e => e.TrafficExpertCode).HasMaxLength(100);
            });

            modelBuilder.Entity<BireportsTable>(entity =>
            {
                entity.ToTable("BIReportsTable");

                entity.Property(e => e.BireportTypeId).HasColumnName("BIReportTypeId");
                entity.Property(e => e.FilterRelations).HasMaxLength(500);
                entity.Property(e => e.HasCrfilter).HasColumnName("HasCRFilter");
                entity.Property(e => e.ReportDescription).HasMaxLength(500);
                entity.Property(e => e.ReportName).HasMaxLength(200);
                entity.Property(e => e.Roles).HasMaxLength(500);

                entity.HasOne(d => d.BireportType).WithMany(p => p.BireportsTables)
                    .HasForeignKey(d => d.BireportTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BIReportsTable_BIReportsType");
            });

            modelBuilder.Entity<BireportsType>(entity =>
            {
                entity.ToTable("BIReportsType");

                entity.Property(e => e.Description).HasMaxLength(200);
            });

            modelBuilder.Entity<Bolo>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__Bolo__45F4A791FE100E39")
                    .HasFillFactor(80);

                entity.ToTable("Bolo");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.BoloCategoryId).HasDefaultValue(1);
                entity.Property(e => e.EnteredDateTime).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDateTime).HasColumnType("datetime");
                entity.Property(e => e.PriorityHighLowId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.Bolo)
                    .HasForeignKey<Bolo>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bolo_Activity");

                entity.HasOne(d => d.BoloCategory).WithMany(p => p.Bolos)
                    .HasForeignKey(d => d.BoloCategoryId)
                    .HasConstraintName("FK_Bolo_BoloCategoryDIM");

                entity.HasOne(d => d.PriorityHighLow).WithMany(p => p.Bolos)
                    .HasForeignKey(d => d.PriorityHighLowId)
                    .HasConstraintName("FK_Bolo_HighLowDIM");
            });

            modelBuilder.Entity<BoloCategoryDim>(entity =>
            {
                entity.HasKey(e => e.BoloCategoryId)
                    .HasName("PK__BoloCate__8993C7ECD12AE453")
                    .HasFillFactor(80);

                entity.ToTable("BoloCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.BoloCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_BoloCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<BoloCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BoloCategoryDIMCodeView");

                entity.Property(e => e.BoloCategoryCode).HasMaxLength(20);
                entity.Property(e => e.BoloCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Bond>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_Bond_1")
                    .HasFillFactor(80);

                entity.ToTable("Bond");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.BondConditionId).HasDefaultValue(1);
                entity.Property(e => e.BondPaymentId).HasDefaultValue(1);
                entity.Property(e => e.BondRevolkeDate).HasColumnType("datetime");
                entity.Property(e => e.BondTerminationCategoryId).HasDefaultValue(1);
                entity.Property(e => e.BondTerminationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithOne(p => p.Bond)
                    .HasForeignKey<Bond>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bond_Activity");

                entity.HasOne(d => d.BondCondition).WithMany(p => p.Bonds)
                    .HasForeignKey(d => d.BondConditionId)
                    .HasConstraintName("BondConditionDIM_Bonds_FK1");

                entity.HasOne(d => d.BondPayment).WithMany(p => p.Bonds)
                    .HasForeignKey(d => d.BondPaymentId)
                    .HasConstraintName("BondPaymentDIM_Bonds_FK1");

                entity.HasOne(d => d.BondTerminationCategory).WithMany(p => p.Bonds)
                    .HasForeignKey(d => d.BondTerminationCategoryId)
                    .HasConstraintName("BondTerminationTypeDIM_Bonds_FK1");
            });

            modelBuilder.Entity<BondConditionDim>(entity =>
            {
                entity.HasKey(e => e.BondConditionId)
                    .HasName("BondConditionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("BondConditionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.BondConditionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_BondConditionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<BondConditionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BondConditionDIMCodeView");

                entity.Property(e => e.BondConditionCode).HasMaxLength(20);
                entity.Property(e => e.BondConditionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<BondPaymentDim>(entity =>
            {
                entity.HasKey(e => e.BondPaymentId)
                    .HasName("BondPaymentDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("BondPaymentDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.BondPaymentDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_BondPaymentDIM_RowStatusDIM");
            });

            modelBuilder.Entity<BondPaymentDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BondPaymentDIMCodeView");

                entity.Property(e => e.BondPaymentCode).HasMaxLength(20);
                entity.Property(e => e.BondPaymentDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<BondTerminationCategoryDim>(entity =>
            {
                entity.HasKey(e => e.BondTerminationCategoryId)
                    .HasName("BondTerminationTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("BondTerminationCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.BondTerminationCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_BondTerminationCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<BondTerminationCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("BondTerminationCategoryDIMCodeView");

                entity.Property(e => e.BondTerminationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.BondTerminationCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Booking>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_Booking_1")
                    .HasFillFactor(80);

                entity.ToTable("Booking");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.AgencyRecordIdentification).HasMaxLength(50);
                entity.Property(e => e.ArraignmentDate).HasColumnType("datetime");
                entity.Property(e => e.DocumentControlIdentification).HasMaxLength(100);
                entity.Property(e => e.FileIdentification).HasMaxLength(50);
                entity.Property(e => e.TelephoneCallDate).HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithOne(p => p.Booking)
                    .HasForeignKey<Booking>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Booking_Activity");
            });

            modelBuilder.Entity<BookmarkResumptionEventsTable>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_BookmarkResumptionkEventsTable_Id");

                entity.ToTable("BookmarkResumptionEventsTable", "Microsoft.Samples.Tracking");

                entity.Property(e => e.BookmarkName).HasMaxLength(1024);
                entity.Property(e => e.OwnerActivityId).HasMaxLength(256);
                entity.Property(e => e.OwnerActivityInstanceId).HasMaxLength(256);
                entity.Property(e => e.OwnerActivityName).HasMaxLength(256);
                entity.Property(e => e.OwnerActivityType).HasMaxLength(256);
                entity.Property(e => e.TimeCreated).HasColumnType("datetime");
            });

            modelBuilder.Entity<CancelDispatchDeatilsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CancelDispatchDeatilsView");

                entity.Property(e => e.CancelReasonDescription).HasMaxLength(100);
                entity.Property(e => e.CancelTime).HasColumnType("datetime");
                entity.Property(e => e.CanceledByName).HasMaxLength(101);
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.OldPatrolName).HasMaxLength(50);
            });

            modelBuilder.Entity<CancelReasonDim>(entity =>
            {
                entity.ToTable("CancelReasonDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Desc).HasMaxLength(2000);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeSamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CancelledIncidentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CancelledIncidentView");

                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.Sector).HasMaxLength(200);
            });

            modelBuilder.Entity<CareerDim>(entity =>
            {
                entity.HasKey(e => e.CareerId)
                    .HasName("PK__CareerDi__A4D2D7F7D1F64670")
                    .HasFillFactor(80);

                entity.ToTable("CareerDim");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CareerDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CareerDim_RowStatusDIM");
            });

            modelBuilder.Entity<Case>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasName("PK_Case_1");

                entity.ToTable("Case");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.CaseCapiasDate).HasColumnType("datetime");
                entity.Property(e => e.CaseCategoryId).HasDefaultValue(1);
                entity.Property(e => e.CaseContinuanceDate).HasColumnType("datetime");
                entity.Property(e => e.CaseIdentification).HasMaxLength(20);
                entity.Property(e => e.CaseOpenedYear).HasComputedColumnSql("(datepart(year,[CaseDate]))", false);
                entity.Property(e => e.CaseRestrictionDate).HasColumnType("datetime");
                entity.Property(e => e.CaseSolvabilityId).HasDefaultValue(1);
                entity.Property(e => e.CaseStatusId).HasDefaultValue(1);
                entity.Property(e => e.LongCaseTitle).HasMaxLength(500);
                entity.Property(e => e.ShortCaseTitle).HasMaxLength(200);
                entity.Property(e => e.SolvabilityPoints).HasMaxLength(50);

                entity.HasOne(d => d.Activity).WithOne(p => p.Case)
                    .HasForeignKey<Case>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Case_Activity");

                entity.HasOne(d => d.CaseCategory).WithMany(p => p.Cases)
                    .HasForeignKey(d => d.CaseCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("CaseTypeDIM_Case_FK1");

                entity.HasOne(d => d.CaseRestriction).WithMany(p => p.Cases)
                    .HasForeignKey(d => d.CaseRestrictionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Case_CaseRestrictionDIM");

                entity.HasOne(d => d.CaseSecurity).WithMany(p => p.Cases)
                    .HasForeignKey(d => d.CaseSecurityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Case_CaseSecurityDIM");

                entity.HasOne(d => d.CaseSeverity).WithMany(p => p.Cases)
                    .HasForeignKey(d => d.CaseSeverityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Case_CaseSeverityDIM");

                entity.HasOne(d => d.CaseSolvability).WithMany(p => p.Cases)
                    .HasForeignKey(d => d.CaseSolvabilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Case SolvabilityDIM_Case_FK1");

                entity.HasOne(d => d.CaseStatus).WithMany(p => p.Cases)
                    .HasForeignKey(d => d.CaseStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Case_CaseStatusDIM");

                entity.HasOne(d => d.CaseTerminationCategory).WithMany(p => p.Cases)
                    .HasForeignKey(d => d.CaseTerminationCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Case_CaseTerminationCategoryDIM");

                entity.HasOne(d => d.CaseTerminationStage).WithMany(p => p.Cases)
                    .HasForeignKey(d => d.CaseTerminationStageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Case_CaseTerminationStageDIM");
            });

            modelBuilder.Entity<CaseCategoryDim>(entity =>
            {
                entity.HasKey(e => e.CaseCategoryId)
                    .HasName("CaseTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("CaseCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CaseCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CaseCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CaseCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseCategoryDIMCodeView");

                entity.Property(e => e.CaseCategoryCode).HasMaxLength(20);
                entity.Property(e => e.CaseCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CaseCharge>(entity =>
            {
                entity.HasKey(e => e.CaseChargeId)
                    .HasName("PK__CaseChar__A97098A16573445C")
                    .HasFillFactor(80);

                entity.ToTable("CaseCharge");

                entity.Property(e => e.CaseChargeGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SourceId).HasDefaultValue(1L);

                entity.HasOne(d => d.Activity).WithMany(p => p.CaseCharges)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaseCharge_Activity");

                entity.HasOne(d => d.Charge).WithMany(p => p.CaseCharges)
                    .HasForeignKey(d => d.ChargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaseCharge_Charge");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CaseCharges)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CaseCharge_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.CaseCharges)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaseCharge_Source");
            });

            modelBuilder.Entity<CaseChargeContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseChargeContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CaseChargeContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseChargeContainerView");

                entity.Property(e => e.CaseChargeId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CaseChargeGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseChargeGuidView");

                entity.Property(e => e.ChargeDegreeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDescription).HasMaxLength(100);
                entity.Property(e => e.ChargeSeverityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.FillingDate).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
            });

            modelBuilder.Entity<CaseChargeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseChargeView");

                entity.Property(e => e.ChargeDegreeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDegreeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDescription).HasMaxLength(100);
                entity.Property(e => e.ChargeSeverityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeSeverityLevelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.FillingDate).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
                entity.Property(e => e.StatuteDescription).HasMaxLength(100);
                entity.Property(e => e.StatuteStatuteDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<CaseExhibit>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("CaseExhibit");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.CaseExhibitStatusId).HasDefaultValue(1);
                entity.Property(e => e.Description).HasMaxLength(100);

                entity.HasOne(d => d.Activity).WithOne(p => p.CaseExhibit)
                    .HasForeignKey<CaseExhibit>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaseExhibit_Activity");

                entity.HasOne(d => d.CaseExhibitStatus).WithMany(p => p.CaseExhibits)
                    .HasForeignKey(d => d.CaseExhibitStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaseExhibit_CaseExhibitStatusDIM");

                entity.HasOne(d => d.ExhibitAcceptingOrganization).WithMany(p => p.CaseExhibits)
                    .HasForeignKey(d => d.ExhibitAcceptingOrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaseExhibit_Organization");
            });

            modelBuilder.Entity<CaseExhibitEvidence>(entity =>
            {
                entity.HasKey(e => e.CaseExhibitEvidenceId)
                    .HasName("PK__CaseExhi__485CDE9FC9E07E3F")
                    .HasFillFactor(80);

                entity.ToTable("CaseExhibitEvidence");

                entity.Property(e => e.CaseExhibitEvidenceId).ValueGeneratedNever();
                entity.Property(e => e.CaseExhibitEvidenceDescription).HasMaxLength(300);
                entity.Property(e => e.CaseExhibitEvidenceGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.CaseExhibitEvidences)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaseExhibitEvidence_Activity");

                entity.HasOne(d => d.Item).WithMany(p => p.CaseExhibitEvidences)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaseExhibitEvidence_Item");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CaseExhibitEvidences)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CaseExhibitEvidence_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.CaseExhibitEvidences)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaseExhibitEvidence_Source");
            });

            modelBuilder.Entity<CaseExhibitEvidenceContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseExhibitEvidenceContainerGuidView");

                entity.Property(e => e.CaseExhibitEvidenceDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CaseExhibitEvidenceContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseExhibitEvidenceContainerView");

                entity.Property(e => e.CaseExhibitEvidenceDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CaseExhibitStatusDim>(entity =>
            {
                entity.HasKey(e => e.CaseExhibitStatusId)
                    .HasName("PK__CaseExhi__E506668170EAD897")
                    .HasFillFactor(80);

                entity.ToTable("CaseExhibitStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CaseExhibitStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CaseExhibitStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CaseExhibitStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseExhibitStatusDIMCodeView");

                entity.Property(e => e.CaseExhibitStatusCode).HasMaxLength(50);
                entity.Property(e => e.CaseExhibitStatusDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CaseRestrictionDim>(entity =>
            {
                entity.HasKey(e => e.CaseRestrictionId)
                    .HasName("PK__CaseRest__2FFC19F3067D591B")
                    .HasFillFactor(80);

                entity.ToTable("CaseRestrictionDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CaseRestrictionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CaseRestrictionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CaseRestrictionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseRestrictionDIMCodeView");

                entity.Property(e => e.CaseRestrictionCode).HasMaxLength(50);
                entity.Property(e => e.CaseRestrictionDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CaseSecurityDim>(entity =>
            {
                entity.HasKey(e => e.CaseSecurityId)
                    .HasName("PK__CaseSecu__1FE1FFB41DBA2A04")
                    .HasFillFactor(80);

                entity.ToTable("CaseSecurityDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CaseSecurityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CaseSecurityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CaseSecurityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseSecurityDIMCodeView");

                entity.Property(e => e.CaseSecurityCode).HasMaxLength(50);
                entity.Property(e => e.CaseSecurityDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CaseSeverityDim>(entity =>
            {
                entity.HasKey(e => e.CaseSeverityId)
                    .HasName("PK__CaseSeve__B96ACC3347FF7E2A")
                    .HasFillFactor(80);

                entity.ToTable("CaseSeverityDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CaseSeverityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CaseSeverityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CaseSeverityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseSeverityDIMCodeView");

                entity.Property(e => e.CaseSeverityCode).HasMaxLength(50);
                entity.Property(e => e.CaseSeverityDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CaseSolvabilityDim>(entity =>
            {
                entity.HasKey(e => e.CaseSolvabilityId)
                    .HasName("Case SolvabilityDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("CaseSolvabilityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CaseSolvabilityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CaseSolvabilityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CaseSolvabilityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseSolvabilityDIMCodeView");

                entity.Property(e => e.CaseSolvabilityCode).HasMaxLength(20);
                entity.Property(e => e.CaseSolvabilityDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CaseStatusDim>(entity =>
            {
                entity.HasKey(e => e.CaseStatusId)
                    .HasName("PK__CaseStat__9C43D4F2A382ED43")
                    .HasFillFactor(80);

                entity.ToTable("CaseStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CaseStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CaseStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CaseStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseStatusDIMCodeView");

                entity.Property(e => e.CaseStatusCode).HasMaxLength(50);
                entity.Property(e => e.CaseStatusDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CaseTerminationCategoryDim>(entity =>
            {
                entity.HasKey(e => e.CaseTerminationCategoryId)
                    .HasName("PK__CaseTerm__3E00A898E0D10640")
                    .HasFillFactor(80);

                entity.ToTable("CaseTerminationCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CaseTerminationCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CaseTerminationCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CaseTerminationCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseTerminationCategoryDIMCodeView");

                entity.Property(e => e.CaseTerminationCategoryCode).HasMaxLength(50);
                entity.Property(e => e.CaseTerminationCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CaseTerminationStageDim>(entity =>
            {
                entity.HasKey(e => e.CaseTerminationStageId)
                    .HasName("PK__CaseTerm__18CBEEBEA46DF3E9")
                    .HasFillFactor(80);

                entity.ToTable("CaseTerminationStageDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CaseTerminationStageDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CaseTerminationStageDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CaseTerminationStageDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CaseTerminationStageDIMCodeView");

                entity.Property(e => e.CaseTerminationStageCode).HasMaxLength(50);
                entity.Property(e => e.CaseTerminationStageDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CautionInformationDim>(entity =>
            {
                entity.HasKey(e => e.CautionInformationId)
                    .HasName("PK__CautionI__0F4D76172D01B36A")
                    .HasFillFactor(80);

                entity.ToTable("CautionInformationDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CautionInformationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CautionInformationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CautionInformationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CautionInformationDIMCodeView");

                entity.Property(e => e.CautionInformationCode).HasMaxLength(20);
                entity.Property(e => e.CautionInformationDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ChangePasswordSession>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ChangePa__3214EC0788AEDE28");

                entity.ToTable("ChangePasswordSession");

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Email).HasMaxLength(50);
                entity.Property(e => e.LastAttemptDate)
                    .HasDefaultValueSql("(NULL)")
                    .HasColumnType("datetime");
                entity.Property(e => e.ReturnUrl).HasMaxLength(1000);

                entity.HasOne(d => d.ClientApplication).WithMany(p => p.ChangePasswordSessions)
                    .HasForeignKey(d => d.ClientApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChangePasswordSession_ClientApplication");
            });

            modelBuilder.Entity<Charge>(entity =>
            {
                entity.HasKey(e => e.ChargeId).HasFillFactor(80);

                entity.ToTable("Charge");

                entity.Property(e => e.ChargeDegreeId).HasDefaultValue(1);
                entity.Property(e => e.ChargeDescription).HasMaxLength(100);
                entity.Property(e => e.ChargeGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ChargeSequenceNumber).HasDefaultValue(1);
                entity.Property(e => e.ChargeSeverityLevelId).HasDefaultValue(1);
                entity.Property(e => e.ChargeStatusId).HasDefaultValue(1);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.FelonyIndicator).HasDefaultValue(false);
                entity.Property(e => e.FillingDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.SeriousViolentIndicator).HasDefaultValue(false);
                entity.Property(e => e.StatuteId).HasDefaultValue(1);

                entity.HasOne(d => d.ChargeDegree).WithMany(p => p.Charges)
                    .HasForeignKey(d => d.ChargeDegreeId)
                    .HasConstraintName("FK_Charge_ChargeDegreeDIM");

                entity.HasOne(d => d.ChargeSeverityLevel).WithMany(p => p.Charges)
                    .HasForeignKey(d => d.ChargeSeverityLevelId)
                    .HasConstraintName("FK_Charge_ChargeSeverityLevelDIM");

                entity.HasOne(d => d.ChargeStatus).WithMany(p => p.Charges)
                    .HasForeignKey(d => d.ChargeStatusId)
                    .HasConstraintName("FK_Charge_ChargeStatusDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Charges)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Charge_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Charges)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Charge_Source");

                entity.HasOne(d => d.Statute).WithMany(p => p.Charges)
                    .HasForeignKey(d => d.StatuteId)
                    .HasConstraintName("FK_Charge_ChargeCodeDIM");
            });

            modelBuilder.Entity<ChargeComment>(entity =>
            {
                entity.HasKey(e => e.ChargeCommentId).HasFillFactor(80);

                entity.ToTable("ChargeComment");

                entity.Property(e => e.ChargeCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ChargeCommentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Charge).WithMany(p => p.ChargeComments)
                    .HasForeignKey(d => d.ChargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChargeComment_Charge");

                entity.HasOne(d => d.Comment).WithMany(p => p.ChargeComments)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChargeComment_Comment");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ChargeComments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ChargeComment_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ChargeComments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChargeComment_Source");
            });

            modelBuilder.Entity<ChargeCommentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ChargeCommentContainerGuidView");

                entity.Property(e => e.ChargeCommentDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChargeCommentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ChargeCommentContainerView");

                entity.Property(e => e.ChargeCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ChargeCommentId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChargeCommentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ChargeCommentGuidView");

                entity.Property(e => e.ChargeCommentDescription).HasMaxLength(300);
                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChargeCommentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ChargeCommentView");

                entity.Property(e => e.ChargeCommentDescription).HasMaxLength(300);
                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImportanceHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PriorityHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChargeDegreeDim>(entity =>
            {
                entity.HasKey(e => e.ChargeDegreeId).HasFillFactor(80);

                entity.ToTable("ChargeDegreeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ChargeDegreeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ChargeDegreeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ChargeDegreeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ChargeDegreeDIMCodeView");

                entity.Property(e => e.ChargeDegreeCode).HasMaxLength(20);
                entity.Property(e => e.ChargeDegreeDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ChargeDisposition>(entity =>
            {
                entity.HasKey(e => e.ChargeDispositionId).HasFillFactor(80);

                entity.ToTable("ChargeDisposition");

                entity.Property(e => e.ChargeDispositionDescription).HasMaxLength(300);
                entity.Property(e => e.ChargeDispositionGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.ChargeDispositions)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChargeDisposition_Activity");

                entity.HasOne(d => d.Charge).WithMany(p => p.ChargeDispositions)
                    .HasForeignKey(d => d.ChargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChargeDisposition_Charge");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ChargeDispositions)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ChargeDisposition_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ChargeDispositions)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChargeDisposition_Source");
            });

            modelBuilder.Entity<ChargeDispositionContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ChargeDispositionContainerGuidView");

                entity.Property(e => e.ChargeDispositionDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChargeDispositionContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ChargeDispositionContainerView");

                entity.Property(e => e.ChargeDispositionDescription).HasMaxLength(300);
                entity.Property(e => e.ChargeDispositionId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChargeGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ChargeGuidView");

                entity.Property(e => e.ChargeDegreeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDescription).HasMaxLength(100);
                entity.Property(e => e.ChargeSeverityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FillingDate).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
            });

            modelBuilder.Entity<ChargeSeverityLevelDim>(entity =>
            {
                entity.HasKey(e => e.ChargeSeverityLevelId)
                    .HasName("PK_ChargeSeverityLevelId")
                    .HasFillFactor(80);

                entity.ToTable("ChargeSeverityLevelDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ChargeSeverityLevelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ChargeSeverityLevelDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ChargeSeverityLevelDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ChargeSeverityLevelDIMCodeView");

                entity.Property(e => e.ChargeSeverityLevelCode).HasMaxLength(20);
                entity.Property(e => e.ChargeSeverityLevelDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ChargeStatusDim>(entity =>
            {
                entity.HasKey(e => e.ChargeStatusId).HasFillFactor(80);

                entity.ToTable("ChargeStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ChargeStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ChargeStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ChargeStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ChargeStatusDIMCodeView");

                entity.Property(e => e.ChargeStatusCode).HasMaxLength(20);
                entity.Property(e => e.ChargeStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ChargeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ChargeView");

                entity.Property(e => e.ChargeDegreeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDegreeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDescription).HasMaxLength(100);
                entity.Property(e => e.ChargeId).ValueGeneratedOnAdd();
                entity.Property(e => e.ChargeSeverityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeSeverityLevelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FillingDate).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
                entity.Property(e => e.StatuteDescription).HasMaxLength(100);
                entity.Property(e => e.StatuteStatuteDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<ChemicalDim>(entity =>
            {
                entity.HasKey(e => e.ChemicalId)
                    .HasName("PK__Chemical__9F29A0D69B68C0CF")
                    .HasFillFactor(80);

                entity.ToTable("ChemicalDim");

                entity.HasIndex(e => e.IsDefaultForReportConstruction, "UNQ_ChemicalDIM_IsDefaultForReportConstruction")
                    .IsUnique()
                    .HasFilter("([IsDefaultForReportConstruction]=(1))");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ChemicalDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ChemicalDim_RowStatusDIM");
            });

            modelBuilder.Entity<Citation>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_Citation_1")
                    .HasFillFactor(80);

                entity.ToTable("Citation");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.CitationDateTime).HasColumnType("datetime");
                entity.Property(e => e.CitationDismissalConditionId).HasDefaultValue(1);
                entity.Property(e => e.CitationStatusId).HasDefaultValue(1);
                entity.Property(e => e.DismissalDateTime).HasColumnType("datetime");
                entity.Property(e => e.RadarNumber).HasMaxLength(20);

                entity.HasOne(d => d.Activity).WithOne(p => p.Citation)
                    .HasForeignKey<Citation>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Citation_Activity");

                entity.HasOne(d => d.CitationDismissalCondition).WithMany(p => p.Citations)
                    .HasForeignKey(d => d.CitationDismissalConditionId)
                    .HasConstraintName("CitationDismissalConditionDIM_Citations_FK1");

                entity.HasOne(d => d.CitationStatus).WithMany(p => p.Citations)
                    .HasForeignKey(d => d.CitationStatusId)
                    .HasConstraintName("CitationStatusDIM_Citations_FK1");
            });

            modelBuilder.Entity<CitationDismissalConditionDim>(entity =>
            {
                entity.HasKey(e => e.CitationDismissalConditionId)
                    .HasName("CitationDismissalConditionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("CitationDismissalConditionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CitationDismissalConditionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CitationDismissalConditionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CitationDismissalConditionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CitationDismissalConditionDIMCodeView");

                entity.Property(e => e.CitationDismissalConditionCode).HasMaxLength(20);
                entity.Property(e => e.CitationDismissalConditionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CitationStatusDim>(entity =>
            {
                entity.HasKey(e => e.CitationStatusId)
                    .HasName("CitationStatusDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("CitationStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CitationStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CitationStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CitationStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CitationStatusDIMCodeView");

                entity.Property(e => e.CitationStatusCode).HasMaxLength(20);
                entity.Property(e => e.CitationStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CitationViolation>(entity =>
            {
                entity.HasKey(e => e.CitationViolationId).HasFillFactor(80);

                entity.ToTable("CitationViolation");

                entity.Property(e => e.CitationViolationDescription).HasMaxLength(300);
                entity.Property(e => e.CitationViolationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Observation).HasMaxLength(555);
                entity.Property(e => e.ViolationDateTimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.CitationViolations)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Citations_CitationOffenses_FK1");

                entity.HasOne(d => d.Comment).WithMany(p => p.CitationViolations)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Citations_ActivityComment_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CitationViolations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CitationViolation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.CitationViolations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Citations_Source_FK1");
            });

            modelBuilder.Entity<CitationViolationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CitationViolationGuidView");

                entity.Property(e => e.CitationViolationDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Observation).HasMaxLength(555);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ViolationDateTimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<CitationViolationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CitationViolationView");

                entity.Property(e => e.CitationViolationDescription).HasMaxLength(300);
                entity.Property(e => e.CitationViolationId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Observation).HasMaxLength(555);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ViolationDateTimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<CityDim>(entity =>
            {
                entity.HasKey(e => e.CityId).HasFillFactor(80);

                entity.ToTable("CityDIM");

                entity.Property(e => e.CityId).ValueGeneratedNever();
                entity.Property(e => e.CityCode).HasMaxLength(50);
                entity.Property(e => e.CityName).HasMaxLength(200);
                entity.Property(e => e.EmirateId).HasColumnName("EmirateID");

                entity.HasOne(d => d.Emirate).WithMany(p => p.CityDims)
                    .HasForeignKey(d => d.EmirateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CityDIM_EmirateDIM");
            });

            modelBuilder.Entity<ClassificationDim>(entity =>
            {
                entity.HasKey(e => e.ClassificationId)
                    .HasName("PK__Classifi__DA747D11C0FF532D")
                    .HasFillFactor(80);

                entity.ToTable("ClassificationDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ClassificationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ClassificationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ClassificationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ClassificationDIMCodeView");

                entity.Property(e => e.ClassificationCode).HasMaxLength(20);
                entity.Property(e => e.ClassificationDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ClientApplication>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ClientAp__3214EC0725F4431F");

                entity.ToTable("ClientApplication");

                entity.HasIndex(e => e.Name, "UQ__ClientAp__737584F6B830CB95").IsUnique();

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.Name).HasMaxLength(255);

                entity.HasOne(d => d.UserType).WithMany(p => p.ClientApplications)
                    .HasForeignKey(d => d.UserTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientApplication_UserType");
            });

            modelBuilder.Entity<CloseIncReasaon>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CloseIncReasaons");

                entity.Property(e => e.ClosingDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
            });

            modelBuilder.Entity<CollisionDim>(entity =>
            {
                entity.HasKey(e => e.CollisionId)
                    .HasName("PK__Collisio__C121766C98ABCE75")
                    .HasFillFactor(80);

                entity.ToTable("CollisionDim");

                entity.Property(e => e.CollisionId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CollisionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CollisionDim_RowStatusDIM");
            });

            modelBuilder.Entity<CollisionTypeDim>(entity =>
            {
                entity.HasKey(e => e.CollisionTypeId).HasName("PK__Collisio__B13F64DEA4F38D8B");

                entity.ToTable("CollisionTypeDim");

                entity.Property(e => e.CollisionTypeId).ValueGeneratedNever();
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ColorDim>(entity =>
            {
                entity.HasKey(e => e.ColorId)
                    .HasName("PK__ColorDim__8DA7674D1C7D145B")
                    .HasFillFactor(80);

                entity.ToTable("ColorDim");

                entity.Property(e => e.ColorId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ColorDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ColorDim_RowStatusDIM");
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.HasKey(e => e.CommentId)
                    .HasName("PK__Comment__C3B4DFCAF40F394E")
                    .HasFillFactor(80);

                entity.ToTable("Comment");

                entity.Property(e => e.ActiveIndicator).HasDefaultValue(true);
                entity.Property(e => e.CommentCategoryId).HasDefaultValue(1);
                entity.Property(e => e.CommentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowId).HasDefaultValue(1);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowId).HasDefaultValue(1);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CommentCategory).WithMany(p => p.Comments)
                    .HasForeignKey(d => d.CommentCategoryId)
                    .HasConstraintName("FK_Comment_CommentTypeDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CommentCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Comment_Person");

                entity.HasOne(d => d.ImportanceHighLow).WithMany(p => p.CommentImportanceHighLows)
                    .HasForeignKey(d => d.ImportanceHighLowId)
                    .HasConstraintName("FK_Comments_HighLowDIM");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.CommentModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Comment_Person1");

                entity.HasOne(d => d.PriorityHighLow).WithMany(p => p.CommentPriorityHighLows)
                    .HasForeignKey(d => d.PriorityHighLowId)
                    .HasConstraintName("FK_Comments_HighLowDIM1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Comments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Comment_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Comments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comment_Source");
            });

            modelBuilder.Entity<CommentCategoryDim>(entity =>
            {
                entity.HasKey(e => e.CommentCategoryId)
                    .HasName("PK__CommentC__7D29C12176FD3EB1")
                    .HasFillFactor(80);

                entity.ToTable("CommentCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CommentCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CommentCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CommentCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CommentCategoryDIMCodeView");

                entity.Property(e => e.CommentCategoryCode).HasMaxLength(20);
                entity.Property(e => e.CommentCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CommentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CommentGuidView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CommentInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.CommentInvolvementId)
                    .HasName("PK__CommentI__30C9D7B0EB06B27B")
                    .HasFillFactor(80);

                entity.ToTable("CommentInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CommentInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CommentInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CommentInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CommentInvolvementDIMCodeView");

                entity.Property(e => e.CommentInvolvementCode).HasMaxLength(20);
                entity.Property(e => e.CommentInvolvementDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CommentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CommentView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentId).ValueGeneratedOnAdd();
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImportanceHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PriorityHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CommissionArea>(entity =>
            {
                entity.ToTable("CommissionArea");

                entity.HasOne(d => d.City).WithMany(p => p.CommissionAreas)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CommissionArea_CityDIM");

                entity.HasOne(d => d.Emirate).WithMany(p => p.CommissionAreas)
                    .HasForeignKey(d => d.EmirateId)
                    .HasConstraintName("FK_CommissionArea_EmirateDIM");
            });

            modelBuilder.Entity<CommissionReportFact>(entity =>
            {
                entity.ToTable("CommissionReportFact");

                entity.Property(e => e.ActivationDateTime).HasColumnType("datetime");
                entity.Property(e => e.CommissionDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(500);
            });

            modelBuilder.Entity<CommissionThresholdDim>(entity =>
            {
                entity.HasKey(e => e.CommissionThresholdId).HasName("PK_TEThresholdDim");

                entity.ToTable("CommissionThresholdDim");

                entity.Property(e => e.CommissionThresholdId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(500);
            });

            modelBuilder.Entity<CommissionTypeDim>(entity =>
            {
                entity.HasKey(e => e.CommissionTypeId).HasName("PK_TECommssionTypeDim");

                entity.ToTable("CommissionTypeDim");

                entity.Property(e => e.CommissionTypeId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(255);

                entity.HasOne(d => d.UserNationalityCategory).WithMany(p => p.CommissionTypeDims)
                    .HasForeignKey(d => d.UserNationalityCategoryId)
                    .HasConstraintName("FK_TECommissionTypeDim_UserNationalityCategoryDim");
            });

            modelBuilder.Entity<CommonErrorMessage>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__CommonEr__3214EC27D709D2E4");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.ErrorDescription).HasColumnType("text");
                entity.Property(e => e.ErrorMessage).HasMaxLength(255);
            });

            modelBuilder.Entity<CommunicationMethodsDim>(entity =>
            {
                entity.HasKey(e => e.CommunicationMethodId).HasName("PK__Communic__A5E0AC66595C5F1E");

                entity.ToTable("CommunicationMethodsDim");

                entity.Property(e => e.Code).HasMaxLength(225);
                entity.Property(e => e.NameAr)
                    .HasMaxLength(250)
                    .HasColumnName("NameAR");
                entity.Property(e => e.NameEn)
                    .HasMaxLength(250)
                    .HasColumnName("NameEN");
            });

            modelBuilder.Entity<CommunityService>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__Communit__45F4A791788A13C3")
                    .HasFillFactor(80);

                entity.ToTable("CommunityService");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.CommunityServiceCategoryId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.CommunityService)
                    .HasForeignKey<CommunityService>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CommunityService_Activity");

                entity.HasOne(d => d.CommunityServiceCategory).WithMany(p => p.CommunityServices)
                    .HasForeignKey(d => d.CommunityServiceCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CommunityService_CommunityServiceCategoryDIM");
            });

            modelBuilder.Entity<CommunityServiceCategoryDim>(entity =>
            {
                entity.HasKey(e => e.CommunityServiceCategoryId)
                    .HasName("PK__Communit__1D8A28ADC9134409")
                    .HasFillFactor(80);

                entity.ToTable("CommunityServiceCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CommunityServiceCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CommunityServiceCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CommunityServiceCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CommunityServiceCategoryDIMCodeView");

                entity.Property(e => e.CommunityServiceCategoryCode).HasMaxLength(50);
                entity.Property(e => e.CommunityServiceCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.ToTable("Company");

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
                entity.Property(e => e.Address).HasMaxLength(200);
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.Email).HasMaxLength(100);
                entity.Property(e => e.ModifictionDateTime).HasColumnType("datetime");
                entity.Property(e => e.NameAr).HasMaxLength(150);
                entity.Property(e => e.NameEn).HasMaxLength(150);
                entity.Property(e => e.RepresentativeEmail).HasMaxLength(100);
                entity.Property(e => e.RepresentativeName).HasMaxLength(100);
                entity.Property(e => e.RepresentativePhone).HasMaxLength(100);
                entity.Property(e => e.TaxRegistrationNumber).HasMaxLength(100);
                entity.Property(e => e.Tcn)
                    .HasMaxLength(100)
                    .HasColumnName("TCN");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<CompanyAttachment>(entity =>
            {
                entity.HasKey(e => e.CompanyAttachmentId).HasName("PK_CompanyAttachments");

                entity.ToTable("CompanyAttachment");

                entity.Property(e => e.CompanyAttachmentId).HasColumnName("CompanyAttachmentID");
                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.Path).HasMaxLength(250);

                entity.HasOne(d => d.Company).WithMany(p => p.CompanyAttachments)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_CompanyAttachments_Companies");
            });

            modelBuilder.Entity<CompanyPatrolsBalance>(entity =>
            {
                entity.ToTable("CompanyPatrolsBalance");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.LastModifictionDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.IdNavigation).WithOne(p => p.CompanyPatrolsBalance)
                    .HasForeignKey<CompanyPatrolsBalance>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompanyPatrolsBalance_Company");
            });

            modelBuilder.Entity<CompanyPatrolsBalanceLog>(entity =>
            {
                entity.ToTable("CompanyPatrolsBalanceLog");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Company).WithMany(p => p.CompanyPatrolsBalanceLogs)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompanyPatrolsBalanceLog_Company");

                entity.HasOne(d => d.CompanyPatrolsBalance).WithMany(p => p.CompanyPatrolsBalanceLogs)
                    .HasForeignKey(d => d.CompanyPatrolsBalanceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompanyPatrolsBalanceLog_CompanyPatrolsBalance");

                entity.HasOne(d => d.Escort).WithMany(p => p.CompanyPatrolsBalanceLogs)
                    .HasForeignKey(d => d.EscortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompanyPatrolsBalanceLog_CompanyPatrolsBalanceLog");
            });

            modelBuilder.Entity<CompanyUser>(entity =>
            {
                entity.HasKey(e => e.CompanyUserId).HasName("PK_CompanyUsers");

                entity.ToTable("CompanyUser");

                entity.Property(e => e.CompanyUserId).HasColumnName("CompanyUserID");
                entity.Property(e => e.ActivationCode).HasMaxLength(100);
                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
                entity.Property(e => e.Password).HasMaxLength(4000);
                entity.Property(e => e.ResetPasswordCode).HasMaxLength(50);
                entity.Property(e => e.SaltPassword).HasMaxLength(4000);
                entity.Property(e => e.UserName).HasMaxLength(100);

                entity.HasOne(d => d.Company).WithMany(p => p.CompanyUsers)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_CompanyUsers_Companies");
            });

            modelBuilder.Entity<CompanyVehicle>(entity =>
            {
                entity.HasKey(e => e.CompanyVehicleId).HasName("PK_CompanyVehicles");

                entity.ToTable("CompanyVehicle");

                entity.Property(e => e.CompanyVehicleId)
                    .ValueGeneratedNever()
                    .HasColumnName("CompanyVehicleID");
                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
                entity.Property(e => e.OwnerName).HasMaxLength(150);
                entity.Property(e => e.PlateNumber).HasMaxLength(50);
                entity.Property(e => e.PlateSourceId).HasColumnName("PlateSourceID");
                entity.Property(e => e.PlateTypeId).HasColumnName("PlateTypeID");
                entity.Property(e => e.VehicleBrandId).HasColumnName("VehicleBrandID");
                entity.Property(e => e.VehicleCategoryId).HasColumnName("VehicleCategoryID");
                entity.Property(e => e.VehicleModelId).HasColumnName("VehicleModelID");
                entity.Property(e => e.VehicleType).HasMaxLength(250);

                entity.HasOne(d => d.Company).WithMany(p => p.CompanyVehicles)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_CompanyVehicles_Companies");
            });

            modelBuilder.Entity<Condition>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("Condition");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.ConditionGroupId).HasDefaultValue(1);
                entity.Property(e => e.ConditionViolationId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.Condition)
                    .HasForeignKey<Condition>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Condition_Activity");

                entity.HasOne(d => d.ConditionGroup).WithMany(p => p.Conditions)
                    .HasForeignKey(d => d.ConditionGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Condition_ConditionGroupDIM");

                entity.HasOne(d => d.ConditionViolation).WithMany(p => p.Conditions)
                    .HasForeignKey(d => d.ConditionViolationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Condition_ConditionViolationDIM");
            });

            modelBuilder.Entity<ConditionGroupDim>(entity =>
            {
                entity.HasKey(e => e.ConditionGroupId)
                    .HasName("PK__Conditio__2D055CA0B853D44C")
                    .HasFillFactor(80);

                entity.ToTable("ConditionGroupDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ConditionGroupDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ConditionGroupDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ConditionGroupDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ConditionGroupDIMCodeView");

                entity.Property(e => e.ConditionGroupCode).HasMaxLength(50);
                entity.Property(e => e.ConditionGroupDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ConditionViolationDim>(entity =>
            {
                entity.HasKey(e => e.ConditionViolationId)
                    .HasName("PK__Conditio__681C6A882506A090")
                    .HasFillFactor(80);

                entity.ToTable("ConditionViolationDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ConditionViolationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ConditionViolationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ConditionViolationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ConditionViolationDIMCodeView");

                entity.Property(e => e.ConditionViolationCode).HasMaxLength(50);
                entity.Property(e => e.ConditionViolationDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfWfAction>(entity =>
            {
                entity.HasKey(e => e.ActionId).HasFillFactor(80);

                entity.ToTable("ConfWF_Action");

                entity.Property(e => e.ActionId).HasColumnName("ActionID");
                entity.Property(e => e.ActionName).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfWfLevel>(entity =>
            {
                entity.HasKey(e => e.LevelId)
                    .HasName("PK_ConfWF_Level0")
                    .HasFillFactor(80);

                entity.ToTable("ConfWF_Level");

                entity.Property(e => e.LevelId).HasColumnName("LevelID");
                entity.Property(e => e.AssociatedActionId).HasColumnName("AssociatedActionID");
                entity.Property(e => e.LevelName).HasMaxLength(50);
                entity.Property(e => e.TransId).HasColumnName("TransID");

                entity.HasOne(d => d.AssociatedAction).WithMany(p => p.ConfWfLevels)
                    .HasForeignKey(d => d.AssociatedActionId)
                    .HasConstraintName("FK_ConfWF_Level_ConfWF_Action");

                entity.HasOne(d => d.Trans).WithMany(p => p.ConfWfLevels)
                    .HasForeignKey(d => d.TransId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConfWF_Level_ConfWF_Transaction");
            });

            modelBuilder.Entity<ConfWfTransaction>(entity =>
            {
                entity.HasKey(e => e.TransactionId).HasFillFactor(80);

                entity.ToTable("ConfWF_Transaction");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
                entity.Property(e => e.TransactionName).HasMaxLength(50);
                entity.Property(e => e.WorkFlowId).HasColumnName("WorkFlowID");

                entity.HasOne(d => d.WorkFlow).WithMany(p => p.ConfWfTransactions)
                    .HasForeignKey(d => d.WorkFlowId)
                    .HasConstraintName("FK_ConfWF_Transaction_ConfWF_WorkFlow");
            });

            modelBuilder.Entity<ConfWfWorkFlow>(entity =>
            {
                entity.HasKey(e => e.WorkFlowId).HasFillFactor(80);

                entity.ToTable("ConfWF_WorkFlow");

                entity.Property(e => e.WorkFlowId).HasColumnName("WorkFlowID");
                entity.Property(e => e.WorkFlowName).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfiscationDocumentTypeDim>(entity =>
            {
                entity.HasKey(e => e.ConfiscationDocumentTypeId)
                    .HasName("PK__Confisca__C7FEA2C2FC058A38")
                    .HasFillFactor(80);

                entity.ToTable("ConfiscationDocumentTypeDim");

                entity.HasIndex(e => e.IsDefaultForReportConstruction, "UNQ_ConfiscationDocumentTypeDIM_IsDefaultForReportConstruction")
                    .IsUnique()
                    .HasFilter("([IsDefaultForReportConstruction]=(1))");

                entity.Property(e => e.ConfiscationDocumentTypeId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ConfiscationDocumentTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ConfiscationDocumentTypeDim_RowStatusDIM");
            });

            modelBuilder.Entity<ConfiscationLocationDim>(entity =>
            {
                entity.HasKey(e => e.ConfiscationLocationId)
                    .HasName("PK__Confisca__A783A544D815B615")
                    .HasFillFactor(80);

                entity.ToTable("ConfiscationLocationDim");

                entity.Property(e => e.ConfiscationLocationId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ConfiscationLocationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ConfiscationLocationDim_RowStatusDIM");
            });

            modelBuilder.Entity<ConfiscationStatusDim>(entity =>
            {
                entity.HasKey(e => e.ConfiscationStatusId).HasFillFactor(80);

                entity.ToTable("ConfiscationStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Contact>(entity =>
            {
                entity.HasKey(e => e.ContactId)
                    .HasName("PK__Contact__5C66259B2B45C9FC")
                    .HasFillFactor(80);

                entity.ToTable("Contact");

                entity.Property(e => e.ContactCategoryId).HasDefaultValue(1);
                entity.Property(e => e.ContactEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.ContactGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ContactCategory).WithMany(p => p.Contacts)
                    .HasForeignKey(d => d.ContactCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contact_ContactTypeId");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Contacts)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Contact_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Contacts)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contact_Source");
            });

            modelBuilder.Entity<ContactCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ContactCategoryId)
                    .HasName("PK__ContactC__1895FD51145FB86C")
                    .HasFillFactor(80);

                entity.ToTable("ContactCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ContactCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ContactCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ContactCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ContactCategoryDIMCodeView");

                entity.Property(e => e.ContactCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ContactCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ContactComment>(entity =>
            {
                entity.HasKey(e => e.ContactCommentId)
                    .HasName("PK__ContactC__B459C44C704672D1")
                    .HasFillFactor(80);

                entity.ToTable("ContactComment");

                entity.Property(e => e.ContactCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ContactCommentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Comment).WithMany(p => p.ContactComments)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContactComment_Comment");

                entity.HasOne(d => d.CommentInvolvement).WithMany(p => p.ContactComments)
                    .HasForeignKey(d => d.CommentInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContactComment_CommentInvolvementDIM");

                entity.HasOne(d => d.Contact).WithMany(p => p.ContactComments)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContactComment_Contact");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ContactComments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ContactComment_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ContactComments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContactComment_Source");
            });

            modelBuilder.Entity<ContactCommentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ContactCommentContainerGuidView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactCommentDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContactCommentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ContactCommentContainerView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ContactCommentId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContactCommentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ContactCommentGuidView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.ContactCommentDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContactCommentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ContactCommentView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.ContactCommentDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImportanceHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PriorityHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContactGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ContactGuidView");

                entity.Property(e => e.ContactCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContactInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.ContactInvolvementId)
                    .HasName("PK__ContactI__57091215405D8DB3")
                    .HasFillFactor(80);

                entity.ToTable("ContactInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ContactInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ContactInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ContactInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ContactInvolvementDIMCodeView");

                entity.Property(e => e.ContactInvolvementCode).HasMaxLength(20);
                entity.Property(e => e.ContactInvolvementDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ContactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ContactView");

                entity.Property(e => e.ContactCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactId).ValueGeneratedOnAdd();
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CopartSmslog>(entity =>
            {
                entity.HasKey(e => e.CopartLogId);

                entity.ToTable("CopartSMSLog");

                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.SendDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Correction>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("Correction");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();

                entity.HasOne(d => d.Activity).WithOne(p => p.Correction)
                    .HasForeignKey<Correction>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Correction_Activity");

                entity.HasOne(d => d.SupervisionCustodyStatus).WithMany(p => p.Corrections)
                    .HasForeignKey(d => d.SupervisionCustodyStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Correction_SupervisionCustodyStatusDIM");

                entity.HasOne(d => d.SupervisionStatus).WithMany(p => p.Corrections)
                    .HasForeignKey(d => d.SupervisionStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Correction_SupervisionStatusDIM");
            });

            modelBuilder.Entity<Counseling>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("Counseling");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.CounselingCategoryId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.Counseling)
                    .HasForeignKey<Counseling>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Counseling_Activity");

                entity.HasOne(d => d.CounselingCategory).WithMany(p => p.Counselings)
                    .HasForeignKey(d => d.CounselingCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Counseling_CounselingCategoryDIM");
            });

            modelBuilder.Entity<CounselingCategoryDim>(entity =>
            {
                entity.HasKey(e => e.CounselingCategoryId)
                    .HasName("PK__Counseli__E75B5EFAD546450B")
                    .HasFillFactor(80);

                entity.ToTable("CounselingCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CounselingCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CounselingCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CounselingCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CounselingCategoryDIMCodeView");

                entity.Property(e => e.CounselingCategoryCode).HasMaxLength(50);
                entity.Property(e => e.CounselingCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Counter>(entity =>
            {
                entity.HasKey(e => new { e.Key, e.Id }).HasName("PK_HangFire_Counter");

                entity.ToTable("Counter", "HangFire");

                entity.Property(e => e.Key).HasMaxLength(100);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.ExpireAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<Court>(entity =>
            {
                entity.HasKey(e => e.OrganizationId).HasFillFactor(80);

                entity.ToTable("Court");

                entity.Property(e => e.OrganizationId).ValueGeneratedNever();
                entity.Property(e => e.CourtCategoryId).HasDefaultValue(1);

                entity.HasOne(d => d.CourtCategory).WithMany(p => p.Courts)
                    .HasForeignKey(d => d.CourtCategoryId)
                    .HasConstraintName("FK_Court_CourtCategoryDIM");

                entity.HasOne(d => d.Organization).WithOne(p => p.Court)
                    .HasForeignKey<Court>(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Court_Organization");
            });

            modelBuilder.Entity<CourtAction>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("CourtAction");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.CourtActionCategoryId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.CourtAction)
                    .HasForeignKey<CourtAction>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CourtAction_Activity");

                entity.HasOne(d => d.CourtActionCategory).WithMany(p => p.CourtActions)
                    .HasForeignKey(d => d.CourtActionCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CourtAction_CourtActionCategoryDIM");
            });

            modelBuilder.Entity<CourtActionCategoryDim>(entity =>
            {
                entity.HasKey(e => e.CourtActionCategoryId)
                    .HasName("PK__CourtAct__9FD3D86BBEE6BDED")
                    .HasFillFactor(80);

                entity.ToTable("CourtActionCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CourtActionCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CourtActionCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CourtActionCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtActionCategoryDIMCodeView");

                entity.Property(e => e.CourtActionCategoryCode).HasMaxLength(50);
                entity.Property(e => e.CourtActionCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CourtCategoryDim>(entity =>
            {
                entity.HasKey(e => e.CourtCategoryId)
                    .HasName("PK__CourtCat__AC05727044A12C66")
                    .HasFillFactor(80);

                entity.ToTable("CourtCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CourtCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CourtCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CourtCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtCategoryDIMCodeView");

                entity.Property(e => e.CourtCategoryCode).HasMaxLength(50);
                entity.Property(e => e.CourtCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CourtEvent>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("CourtEvent");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.CourtEventCategoryId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.CourtEvent)
                    .HasForeignKey<CourtEvent>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CourtEvent_Activity");

                entity.HasOne(d => d.CourtEventCategory).WithMany(p => p.CourtEvents)
                    .HasForeignKey(d => d.CourtEventCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CourtEvent_CourtEventCategoryDIM");
            });

            modelBuilder.Entity<CourtEventCategoryDim>(entity =>
            {
                entity.HasKey(e => e.CourtEventCategoryId)
                    .HasName("PK__CourtEve__6F401C7DE63AB42F")
                    .HasFillFactor(80);

                entity.ToTable("CourtEventCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CourtEventCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CourtEventCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CourtEventCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtEventCategoryDIMCodeView");

                entity.Property(e => e.CourtEventCategoryCode).HasMaxLength(50);
                entity.Property(e => e.CourtEventCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CourtGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CourtCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CourtOrder>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_CourtOrder_1")
                    .HasFillFactor(80);

                entity.ToTable("CourtOrder");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.AttemptedDate).HasColumnType("datetime");
                entity.Property(e => e.CourtOrderCategoryId).HasDefaultValue(1);
                entity.Property(e => e.CourtOrderProtectionConditionId).HasDefaultValue(1);
                entity.Property(e => e.CourtOrderRecallReasonId).HasDefaultValue(1);
                entity.Property(e => e.CourtOrderServiceCautionId).HasDefaultValue(1);
                entity.Property(e => e.CourtOrderSignatureMethodId).HasDefaultValue(1);
                entity.Property(e => e.CourtOrderSpecialInstructionId).HasDefaultValue(1);
                entity.Property(e => e.CourtOrderStatusId).HasDefaultValue(1);
                entity.Property(e => e.DocketNumber).HasMaxLength(20);
                entity.Property(e => e.IssuingDate).HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonId).HasDefaultValue(1L);
                entity.Property(e => e.RecallDate).HasColumnType("datetime");
                entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
                entity.Property(e => e.RequestDate).HasColumnType("datetime");
                entity.Property(e => e.ServedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithOne(p => p.CourtOrder)
                    .HasForeignKey<CourtOrder>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CourtOrders_Activity");

                entity.HasOne(d => d.CourtOrderCategory).WithMany(p => p.CourtOrders)
                    .HasForeignKey(d => d.CourtOrderCategoryId)
                    .HasConstraintName("FK_CourtOrders_CourtOrderTypeDIM");

                entity.HasOne(d => d.CourtOrderProtectionCondition).WithMany(p => p.CourtOrders)
                    .HasForeignKey(d => d.CourtOrderProtectionConditionId)
                    .HasConstraintName("FK_CourtOrders_CourtOrderProtectionConditionDIM");

                entity.HasOne(d => d.CourtOrderRecallReason).WithMany(p => p.CourtOrders)
                    .HasForeignKey(d => d.CourtOrderRecallReasonId)
                    .HasConstraintName("CourtOrderRecallReasonDIM_CourtOrders_FK1");

                entity.HasOne(d => d.CourtOrderServiceCaution).WithMany(p => p.CourtOrders)
                    .HasForeignKey(d => d.CourtOrderServiceCautionId)
                    .HasConstraintName("CourtOrderServiceCautionDIM_CourtOrders_FK1");

                entity.HasOne(d => d.CourtOrderSignatureMethod).WithMany(p => p.CourtOrders)
                    .HasForeignKey(d => d.CourtOrderSignatureMethodId)
                    .HasConstraintName("FK_CourtOrder_CourtOrderSignatureMethodDIM");

                entity.HasOne(d => d.CourtOrderSpecialInstruction).WithMany(p => p.CourtOrders)
                    .HasForeignKey(d => d.CourtOrderSpecialInstructionId)
                    .HasConstraintName("CourtOrderSpecialInstructionDIM_CourtOrders_FK1");

                entity.HasOne(d => d.CourtOrderStatus).WithMany(p => p.CourtOrders)
                    .HasForeignKey(d => d.CourtOrderStatusId)
                    .HasConstraintName("FK_CourtOrder_CourtOrderStatusDIM");

                entity.HasOne(d => d.OrganizationPerson).WithMany(p => p.CourtOrders)
                    .HasForeignKey(d => d.OrganizationPersonId)
                    .HasConstraintName("FK_CourtOrder_OrganizaitonPerson");
            });

            modelBuilder.Entity<CourtOrderCategoryDim>(entity =>
            {
                entity.HasKey(e => e.CourtOrderCategoryId)
                    .HasName("PK_CourtOrderTypeDIM")
                    .HasFillFactor(80);

                entity.ToTable("CourtOrderCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CourtOrderCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CourtOrderCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CourtOrderCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtOrderCategoryDIMCodeView");

                entity.Property(e => e.CourtOrderCategoryCode).HasMaxLength(20);
                entity.Property(e => e.CourtOrderCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CourtOrderProtectionConditionDim>(entity =>
            {
                entity.HasKey(e => e.CourtOrderProtectionConditionId).HasFillFactor(80);

                entity.ToTable("CourtOrderProtectionConditionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CourtOrderProtectionConditionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CourtOrderProtectionConditionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CourtOrderProtectionConditionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtOrderProtectionConditionDIMCodeView");

                entity.Property(e => e.CourtOrderProtectionConditionCode).HasMaxLength(20);
                entity.Property(e => e.CourtOrderProtectionConditionDescription).HasMaxLength(500);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CourtOrderRecallReasonDim>(entity =>
            {
                entity.HasKey(e => e.CourtOrderRecallReasonId)
                    .HasName("CourtOrderRecallReasonDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("CourtOrderRecallReasonDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CourtOrderRecallReasonDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CourtOrderRecallReasonDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CourtOrderRecallReasonDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtOrderRecallReasonDIMCodeView");

                entity.Property(e => e.CourtOrderRecallReasonCode).HasMaxLength(20);
                entity.Property(e => e.CourtOrderRecallReasonDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CourtOrderServiceCautionDim>(entity =>
            {
                entity.HasKey(e => e.CourtOrderServiceCautionId)
                    .HasName("CourtOrderServiceCautionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("CourtOrderServiceCautionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CourtOrderServiceCautionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CourtOrderServiceCautionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CourtOrderServiceCautionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtOrderServiceCautionDIMCodeView");

                entity.Property(e => e.CourtOrderServiceCautionCode).HasMaxLength(20);
                entity.Property(e => e.CourtOrderServiceCautionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CourtOrderSignatureMethodDim>(entity =>
            {
                entity.HasKey(e => e.CourtOrderSignatureMethodId).HasFillFactor(80);

                entity.ToTable("CourtOrderSignatureMethodDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CourtOrderSignatureMethodDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CourtOrderSignatureMethodDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CourtOrderSignatureMethodDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtOrderSignatureMethodDIMCodeView");

                entity.Property(e => e.CourtOrderSignatureMethodCode).HasMaxLength(20);
                entity.Property(e => e.CourtOrderSignatureMethodDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CourtOrderSpecialInstructionDim>(entity =>
            {
                entity.HasKey(e => e.CourtOrderSpecialInstructionId)
                    .HasName("CourtOrderSpecialInstructionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("CourtOrderSpecialInstructionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CourtOrderSpecialInstructionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CourtOrderSpecialInstructionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CourtOrderSpecialInstructionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtOrderSpecialInstructionDIMCodeView");

                entity.Property(e => e.CourtOrderSpecialInstructionCode).HasMaxLength(20);
                entity.Property(e => e.CourtOrderSpecialInstructionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CourtOrderStatusDim>(entity =>
            {
                entity.HasKey(e => e.CourtOrderStatusId).HasFillFactor(80);

                entity.ToTable("CourtOrderStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CourtOrderStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CourtOrderStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CourtOrderStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtOrderStatusDIMCodeView");

                entity.Property(e => e.CourtOrderStatusCode).HasMaxLength(20);
                entity.Property(e => e.CourtOrderStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CourtOrderWarrant>(entity =>
            {
                entity.HasKey(e => e.CourtOrderWarrantId).HasFillFactor(80);

                entity.ToTable("CourtOrderWarrant");

                entity.Property(e => e.CourtOrderWarrantDescription).HasMaxLength(300);
                entity.Property(e => e.CourtOrderWarrantGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.CourtOrderWarrants)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CourtOrderWarrant_Activity");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CourtOrderWarrants)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CourtOrderWarrant_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.CourtOrderWarrants)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CourtOrderWarrant_Source");
            });

            modelBuilder.Entity<CourtOrderWarrantContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtOrderWarrantContainerGuidView");

                entity.Property(e => e.CourtOrderWarrantDescription).HasMaxLength(300);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CourtOrderWarrantContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtOrderWarrantContainerView");

                entity.Property(e => e.CourtOrderWarrantDescription).HasMaxLength(300);
                entity.Property(e => e.CourtOrderWarrantId).ValueGeneratedOnAdd();
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CourtView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CourtView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CourtCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CourtCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CriminalInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.CriminalInvolvementId).HasFillFactor(80);

                entity.ToTable("CriminalInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CriminalInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CriminalInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CriminalInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CriminalInvolvementDIMCodeView");

                entity.Property(e => e.CriminalInvolvementCode).HasMaxLength(20);
                entity.Property(e => e.CriminalInvolvementDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CriminalTraitActivityDim>(entity =>
            {
                entity.HasKey(e => e.CriminalTraitActivityId)
                    .HasName("PK_CommonCriminalTraitDIM")
                    .HasFillFactor(80);

                entity.ToTable("CriminalTraitActivityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CriminalTraitActivityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CriminalTraitActivityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CriminalTraitActivityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CriminalTraitActivityDIMCodeView");

                entity.Property(e => e.CriminalTraitActivityCode).HasMaxLength(20);
                entity.Property(e => e.CriminalTraitActivityDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CriminalTraitColorDim>(entity =>
            {
                entity.HasKey(e => e.CriminalTraitColorId)
                    .HasName("PK_CommonCriminalTraitColorDIM")
                    .HasFillFactor(80);

                entity.ToTable("CriminalTraitColorDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CriminalTraitColorDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CriminalTraitColorDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CriminalTraitColorDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CriminalTraitColorDIMCodeView");

                entity.Property(e => e.CriminalTraitColorCode).HasMaxLength(20);
                entity.Property(e => e.CriminalTraitColorDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CriminalTraitCommunicationDim>(entity =>
            {
                entity.HasKey(e => e.CriminalTraitCommunicationId)
                    .HasName("PK_CommonCriminalTraitCommunicationDIM")
                    .HasFillFactor(80);

                entity.ToTable("CriminalTraitCommunicationDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CriminalTraitCommunicationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CriminalTraitCommunicationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CriminalTraitCommunicationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CriminalTraitCommunicationDIMCodeView");

                entity.Property(e => e.CriminalTraitCommunicationCode).HasMaxLength(20);
                entity.Property(e => e.CriminalTraitCommunicationDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CriminalTraitDim>(entity =>
            {
                entity.HasKey(e => e.CriminalTraitId)
                    .HasName("PK_CommonCriminalTraitDescDIM")
                    .HasFillFactor(80);

                entity.ToTable("CriminalTraitDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CriminalTraitDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CriminalTraitDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CriminalTraitDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CriminalTraitDIMCodeView");

                entity.Property(e => e.CriminalTraitCode).HasMaxLength(20);
                entity.Property(e => e.CriminalTraitDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CriminalTraitDressDim>(entity =>
            {
                entity.HasKey(e => e.CriminalTraitDressId)
                    .HasName("PK_CommonCriminalTraitDressDIM")
                    .HasFillFactor(80);

                entity.ToTable("CriminalTraitDressDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CriminalTraitDressDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CriminalTraitDressDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CriminalTraitDressDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CriminalTraitDressDIMCodeView");

                entity.Property(e => e.CriminalTraitDressCode).HasMaxLength(20);
                entity.Property(e => e.CriminalTraitDressDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CriminalTraitHandSignalDim>(entity =>
            {
                entity.HasKey(e => e.CriminalTraitHandSignalId).HasFillFactor(80);

                entity.ToTable("CriminalTraitHandSignalDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CriminalTraitHandSignalDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CriminalTraitHandSignalDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CriminalTraitHandSignalDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CriminalTraitHandSignalDIMCodeView");

                entity.Property(e => e.CriminalTraitHandSignalCode).HasMaxLength(20);
                entity.Property(e => e.CriminalTraitHandSignalDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CriminalTraitModusOperandiDim>(entity =>
            {
                entity.HasKey(e => e.CriminalTraitModusOperandiId).HasFillFactor(80);

                entity.ToTable("CriminalTraitModusOperandiDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CriminalTraitModusOperandiDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CriminalTraitModusOperandiDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CriminalTraitModusOperandiDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CriminalTraitModusOperandiDIMCodeView");

                entity.Property(e => e.CriminalTraitModusOperandiCode).HasMaxLength(20);
                entity.Property(e => e.CriminalTraitModusOperandiDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CriminalTraitTargetDim>(entity =>
            {
                entity.HasKey(e => e.CriminalTraitTargetId).HasFillFactor(80);

                entity.ToTable("CriminalTraitTargetDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CriminalTraitTargetDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CriminalTraitTargetDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CriminalTraitTargetDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CriminalTraitTargetDIMCodeView");

                entity.Property(e => e.CriminalTraitTargetCode).HasMaxLength(20);
                entity.Property(e => e.CriminalTraitTargetDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CrossStreetDim>(entity =>
            {
                entity.HasKey(e => e.CrossStreetId).HasFillFactor(80);

                entity.ToTable("CrossStreetDIM");

                entity.Property(e => e.CrossStreetId)
                    .ValueGeneratedNever()
                    .HasColumnName("CrossStreetID");
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<CustodyTransfer>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("CustodyTransfer");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();

                entity.HasOne(d => d.Activity).WithOne(p => p.CustodyTransfer)
                    .HasForeignKey<CustodyTransfer>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustodyTransfer_Activity");

                entity.HasOne(d => d.CustodyTransferAction).WithMany(p => p.CustodyTransfers)
                    .HasForeignKey(d => d.CustodyTransferActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustodyTransfer_CustodyTransferActionDIM");
            });

            modelBuilder.Entity<CustodyTransferActionDim>(entity =>
            {
                entity.HasKey(e => e.CustodyTransferActionId)
                    .HasName("PK__CustodyT__D8A88BEDE8C37A0C")
                    .HasFillFactor(80);

                entity.ToTable("CustodyTransferActionDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CustodyTransferActionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CustodyTransferActionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<CustodyTransferActionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("CustodyTransferActionDIMCodeView");

                entity.Property(e => e.CustodyTransferActionCode).HasMaxLength(50);
                entity.Property(e => e.CustodyTransferActionDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CustomLookup>(entity =>
            {
                entity.HasKey(e => e.CustomLookupId)
                    .HasName("PK__CustomLo__68B708019EBB7112")
                    .HasFillFactor(80);

                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.IsShown).HasDefaultValue(true);
                entity.Property(e => e.TableName).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("Time_Stamp");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.CustomLookups)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_CustomLookups_RowStatusDIM");
            });

            modelBuilder.Entity<CustomTrackingEventsTable>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_CustomTrackingEventsTable_Id");

                entity.ToTable("CustomTrackingEventsTable", "Microsoft.Samples.Tracking");

                entity.Property(e => e.ActivityId).HasMaxLength(256);
                entity.Property(e => e.ActivityInstanceId).HasMaxLength(256);
                entity.Property(e => e.ActivityName).HasMaxLength(2048);
                entity.Property(e => e.ActivityType).HasMaxLength(256);
                entity.Property(e => e.CustomRecordName).HasMaxLength(2048);
                entity.Property(e => e.TimeCreated).HasColumnType("datetime");
            });

            modelBuilder.Entity<CustomerNotAnswerReason>(entity =>
            {
                entity.Property(e => e.Description).HasMaxLength(100);
            });

            modelBuilder.Entity<DailyTrafficStatisticsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DailyTrafficStatisticsView");

                entity.Property(e => e.EmirateName).HasMaxLength(200);
            });

            modelBuilder.Entity<DamagePartsDim>(entity =>
            {
                entity.HasKey(e => e.DamagePartId).HasFillFactor(80);

                entity.ToTable("DamagePartsDIM");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.DamagePart).HasMaxLength(50);
                entity.Property(e => e.Fmscode).HasColumnName("FMSCode");
                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DamagedPartSeverityDim>(entity =>
            {
                entity.HasKey(e => e.DamagedPartSeverityId);

                entity.ToTable("DamagedPartSeverityDim");

                entity.Property(e => e.DamagedPartSeverityId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DamagedProperty>(entity =>
            {
                entity.HasKey(e => e.DamagedPropertyId)
                    .HasName("PK__DamagedP__D98A0E652EA220DC")
                    .HasFillFactor(80);

                entity.ToTable("DamagedProperty");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Note)
                    .HasMaxLength(3000)
                    .HasColumnName("NOTE");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.DamagedProperties)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_DamagedProperty_Person");

                entity.HasOne(d => d.ImpactLevel).WithMany(p => p.DamagedProperties)
                    .HasForeignKey(d => d.ImpactLevelId)
                    .HasConstraintName("FK_DamagedProperty_ImpactLevelDIM");

                entity.HasOne(d => d.ImpactType).WithMany(p => p.DamagedProperties)
                    .HasForeignKey(d => d.ImpactTypeId)
                    .HasConstraintName("FK_DamagedProperty_ImpactTypeDIM");

                entity.HasOne(d => d.Item).WithMany(p => p.DamagedProperties)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_DamagedProperty_Item");

                entity.HasOne(d => d.PropertyType).WithMany(p => p.DamagedProperties)
                    .HasForeignKey(d => d.PropertyTypeId)
                    .HasConstraintName("FK_DamagedProperty_PropertyTypeDIM");
            });

            modelBuilder.Entity<DamagedVehiclePart>(entity =>
            {
                entity.HasKey(e => e.DamagedVehiclePartsId)
                    .HasName("PK__DamagedV__F24A4C7491F71D22")
                    .HasFillFactor(80);

                entity.HasIndex(e => e.VehicleDataId, "IX_VehicleDataId");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AccidentDamageSize).WithMany(p => p.DamagedVehicleParts)
                    .HasForeignKey(d => d.AccidentDamageSizeId)
                    .HasConstraintName("FK__DamagedVe__Accid__52930AEC");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.DamagedVehicleParts)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_DamagedVehicleParts_Person");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.DamagedVehicleParts)
                    .HasForeignKey(d => d.VehicleDataId)
                    .HasConstraintName("FK_DamagedVehicleParts_VehicleData");
            });

            modelBuilder.Entity<DamagedVehiclePartsDim>(entity =>
            {
                entity.HasKey(e => e.DamagedPartsId)
                    .HasName("PK__DamagedV__24A2C3EC918F21B5")
                    .HasFillFactor(80);

                entity.ToTable("DamagedVehiclePartsDim");

                entity.Property(e => e.Code).HasMaxLength(100);
                entity.Property(e => e.IsActive).HasDefaultValue(true);
                entity.Property(e => e.PartName).HasMaxLength(200);
            });

            modelBuilder.Entity<DataInsightHubIntegrationTokenLog>(entity =>
            {
                entity.ToTable("DataInsightHubIntegrationTokenLog");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<DataInsightHubReport>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_DataInsightHubReport");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.Code).HasMaxLength(400);
                entity.Property(e => e.DescriptionAr).HasMaxLength(2000);
                entity.Property(e => e.DescriptionEn).HasMaxLength(2000);
                entity.Property(e => e.NameAr).HasMaxLength(200);
                entity.Property(e => e.NameEn).HasMaxLength(200);
                entity.Property(e => e.ReportCategoryId).HasColumnName("ReportCategoryID");

                entity.HasOne(d => d.ReportCategory).WithMany(p => p.DataInsightHubReports)
                    .HasForeignKey(d => d.ReportCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DataInsightHubReport_DataInsightHubReportCategory");
            });

            modelBuilder.Entity<DataInsightHubReportCategory>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_DataInsightHubReportCategory");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.NameAr).HasMaxLength(200);
                entity.Property(e => e.NameEn).HasMaxLength(200);
                entity.Property(e => e.ParentCategoryId).HasColumnName("ParentCategoryID");
            });

            modelBuilder.Entity<DataInsightHubReportDisplayColumn>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_DataInsightHubReportDisplayColumn");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.ColumnDisplayNameAr).HasMaxLength(200);
                entity.Property(e => e.ColumnDisplayNameEn).HasMaxLength(200);
                entity.Property(e => e.ReportId).HasColumnName("ReportID");
                entity.Property(e => e.SpsColumnName)
                    .HasMaxLength(200)
                    .HasColumnName("SPsColumnName");

                entity.HasOne(d => d.Report).WithMany(p => p.DataInsightHubReportDisplayColumns)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_DataInsightHubReportDisplayColumn_DataInsightHubReport");
            });

            modelBuilder.Entity<DataMaskingDemo>(entity =>
            {
                entity.ToTable("DataMaskingDemo");

                entity.Property(e => e.Email).HasMaxLength(50);
                entity.Property(e => e.Username).HasMaxLength(50);
            });

            modelBuilder.Entity<DateDim>(entity =>
            {
                entity.HasKey(e => e.DateId)
                    .HasName("PK__DateDIM__A426F25334782433")
                    .HasFillFactor(80);

                entity.ToTable("DateDIM");

                entity.Property(e => e.DateId).HasColumnName("DateID");
                entity.Property(e => e.CalendarMonthName).HasMaxLength(50);
                entity.Property(e => e.FiscalMonthName).HasMaxLength(50);
                entity.Property(e => e.IsHoliday).HasDefaultValue(false);
                entity.Property(e => e.Season).HasMaxLength(50);

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DateDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DateDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DateTimeDim>(entity =>
            {
                entity.HasKey(e => e.DateTimeId)
                    .HasName("PK__DateTime__59ED9C21C35267DF")
                    .HasFillFactor(80);

                entity.ToTable("DateTimeDIM");

                entity.Property(e => e.DateTimeId).HasColumnName("DateTimeID");
                entity.Property(e => e.CalendarMonthName).HasMaxLength(50);
                entity.Property(e => e.DayDateTime).HasColumnType("datetime");
                entity.Property(e => e.DayName).HasMaxLength(50);
                entity.Property(e => e.DayNight).HasMaxLength(2);
                entity.Property(e => e.DayTime).HasPrecision(0);
                entity.Property(e => e.FiscalMonthName).HasMaxLength(50);
                entity.Property(e => e.IsHoliday).HasDefaultValue(false);
                entity.Property(e => e.IsWeekend).HasDefaultValue(false);
                entity.Property(e => e.Season).HasMaxLength(50);
                entity.Property(e => e.TimePeriod).HasMaxLength(50);

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DateTimeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DateTimeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DelayedOpenedIncidentsByStatusView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DelayedOpenedIncidentsByStatusView");

                entity.Property(e => e.Status)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("status");
            });

            modelBuilder.Entity<DeliveryCompanyDim>(entity =>
            {
                entity.HasKey(e => e.DeliveryCompanyId).HasName("PK__Delivery__7E263FABA87964E9");

                entity.ToTable("DeliveryCompanyDim");

                entity.Property(e => e.DeliveryCompanyId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DentalCharacteristicDim>(entity =>
            {
                entity.HasKey(e => e.DentalCharacteristicId)
                    .HasName("PK__DentalCh__696C8088AFB23A09")
                    .HasFillFactor(80);

                entity.ToTable("DentalCharacteristicDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DentalCharacteristicDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DentalCharacteristicDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DentalCharacteristicDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DentalCharacteristicDIMCodeView");

                entity.Property(e => e.DentalCharacteristicCode).HasMaxLength(20);
                entity.Property(e => e.DentalCharacteristicDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DentalCharacteristicRestorationDim>(entity =>
            {
                entity.HasKey(e => e.DentalCharacteristicRestorationId)
                    .HasName("PK__DentalCh__9357C1A5215A7C2C")
                    .HasFillFactor(80);

                entity.ToTable("DentalCharacteristicRestorationDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DentalCharacteristicRestorationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DentalCharacteristicRestorationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DentalCharacteristicRestorationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DentalCharacteristicRestorationDIMCodeView");

                entity.Property(e => e.DentalCharacteristicRestorationCode).HasMaxLength(20);
                entity.Property(e => e.DentalCharacteristicRestorationDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DentalStatusDim>(entity =>
            {
                entity.HasKey(e => e.DentalStatusId)
                    .HasName("PK__DentalSt__1A4A5DF112680331")
                    .HasFillFactor(80);

                entity.ToTable("DentalStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DentalStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DentalStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DentalStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DentalStatusDIMCodeView");

                entity.Property(e => e.DentalStatusCode).HasMaxLength(20);
                entity.Property(e => e.DentalStatusDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DentalToothPositionDim>(entity =>
            {
                entity.HasKey(e => e.DentalToothPositionId)
                    .HasName("PK__DentalTo__529D6764A21AD5FE")
                    .HasFillFactor(80);

                entity.ToTable("DentalToothPositionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DentalToothPositionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DentalToothPositionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DentalToothPositionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DentalToothPositionDIMCodeView");

                entity.Property(e => e.DentalToothPositionCode).HasMaxLength(20);
                entity.Property(e => e.DentalToothPositionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DetectLocationConfiguration>(entity =>
            {
                entity.ToTable("DetectLocationConfiguration");
            });

            modelBuilder.Entity<DetectLocationLog>(entity =>
            {
                entity.ToTable("DetectLocationLog");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.CustomerMobileNumber).HasMaxLength(50);
                entity.Property(e => e.CustomerReplyTime).HasColumnType("datetime");
                entity.Property(e => e.IcccrequestId).HasColumnName("ICCCRequestId");
                entity.Property(e => e.SendToCustomerTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DeviceInformation>(entity =>
            {
                entity.HasKey(e => e.DeviceInfoId).HasName("PK__DeviceIn__B757D1A715996809");

                entity.ToTable("DeviceInformation");

                entity.Property(e => e.DeviceInfoId).ValueGeneratedNever();
                entity.Property(e => e.CurrentSaaedversion)
                    .HasMaxLength(50)
                    .HasColumnName("CurrentSAAEDVersion");
                entity.Property(e => e.DeviceCode).HasMaxLength(250);
                entity.Property(e => e.DeviceName).HasMaxLength(50);
                entity.Property(e => e.Osversion)
                    .HasMaxLength(50)
                    .HasColumnName("OSVersion");
            });

            modelBuilder.Entity<DeviceType>(entity =>
            {
                entity.ToTable("DeviceType");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(100)
                    .HasColumnName("DescriptionAR");
            });

            modelBuilder.Entity<DimVehiclesModificationDate>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("Dim_VehiclesModificationDate");

                entity.Property(e => e.Key).ValueGeneratedOnAdd();
                entity.Property(e => e.Value).HasColumnType("datetime");
            });

            modelBuilder.Entity<DirectPaymentReasonDim>(entity =>
            {
                entity.HasKey(e => e.DirectPaymentReasonId).HasName("PK_DirectPaymentReasonsDim");

                entity.ToTable("DirectPaymentReasonDim");

                entity.Property(e => e.DirectPaymentReasonId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<DirectPaymentSourceDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_DirectPaymentSource");

                entity.ToTable("DirectPaymentSourceDim");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<DirectPaymentStatusDim>(entity =>
            {
                entity.ToTable("DirectPaymentStatusDim");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.Name).HasMaxLength(150);
            });

            modelBuilder.Entity<DirectPaymentTransaction>(entity =>
            {
                entity.ToTable("DirectPaymentTransaction");

                entity.Property(e => e.DirectPaymentTransactionId).HasColumnName("DirectPaymentTransactionID");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.DirectPaymentReasonId).HasColumnName("DirectPaymentReasonID");
                entity.Property(e => e.DirectPaymentSourceId).HasColumnName("DirectPaymentSourceID");
                entity.Property(e => e.LatestDirectPaymentStatusId).HasColumnName("LatestDirectPaymentStatusID");
                entity.Property(e => e.StrReason).HasMaxLength(250);
                entity.Property(e => e.VehicleDataId).HasColumnName("VehicleDataID");

                entity.HasOne(d => d.DirectPaymentReason).WithMany(p => p.DirectPaymentTransactions)
                    .HasForeignKey(d => d.DirectPaymentReasonId)
                    .HasConstraintName("FK_DirectPaymentTransaction_DirectPaymentReasonsDim");
            });

            modelBuilder.Entity<DirectPaymentTransactionLog>(entity =>
            {
                entity.ToTable("DirectPaymentTransactionLog");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.DirectPaymentStatusId).HasColumnName("DirectPaymentStatusID");
                entity.Property(e => e.DirectPaymentTransactionId).HasColumnName("DirectPaymentTransactionID");
                entity.Property(e => e.Message).HasMaxLength(200);
            });

            modelBuilder.Entity<DisciplinaryAction>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("DisciplinaryAction");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.DisciplinaryActionFee).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Activity).WithOne(p => p.DisciplinaryAction)
                    .HasForeignKey<DisciplinaryAction>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DisciplinaryAction_Activity");
            });

            modelBuilder.Entity<Disposition>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_Disposition_1")
                    .HasFillFactor(80);

                entity.ToTable("Disposition");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(555);
                entity.Property(e => e.DispositionCategoryId).HasDefaultValue(1);
                entity.Property(e => e.DispositionDate).HasColumnType("datetime");
                entity.Property(e => e.DispositionReasonId).HasDefaultValue(1);
                entity.Property(e => e.ResultDescription).HasMaxLength(555);

                entity.HasOne(d => d.Activity).WithOne(p => p.Disposition)
                    .HasForeignKey<Disposition>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Disposition_Activity");

                entity.HasOne(d => d.DispositionCategory).WithMany(p => p.Dispositions)
                    .HasForeignKey(d => d.DispositionCategoryId)
                    .HasConstraintName("FK_Disposition_DispositionCategoryDIM");

                entity.HasOne(d => d.DispositionReason).WithMany(p => p.Dispositions)
                    .HasForeignKey(d => d.DispositionReasonId)
                    .HasConstraintName("FK_Disposition_DispositionReasonDIM");
            });

            modelBuilder.Entity<DispositionCategoryDim>(entity =>
            {
                entity.HasKey(e => e.DispositionCategoryId).HasFillFactor(80);

                entity.ToTable("DispositionCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DispositionCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DispositionCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DispositionCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DispositionCategoryDIMCodeView");

                entity.Property(e => e.DispositionCategoryCode).HasMaxLength(20);
                entity.Property(e => e.DispositionCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DispositionReasonDim>(entity =>
            {
                entity.HasKey(e => e.DispositionReasonId).HasFillFactor(80);

                entity.ToTable("DispositionReasonDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DispositionReasonDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DispositionReasonDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DispositionReasonDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DispositionReasonDIMCodeView");

                entity.Property(e => e.DispositionReasonCode).HasMaxLength(20);
                entity.Property(e => e.DispositionReasonDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Dissemination>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__Dissemin__45F4A79164DA50C2")
                    .HasFillFactor(80);

                entity.ToTable("Dissemination");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.DisseminationMethodId).HasDefaultValue(1);
                entity.Property(e => e.DissemintatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithOne(p => p.Dissemination)
                    .HasForeignKey<Dissemination>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Dissemination_Activity");

                entity.HasOne(d => d.DisseminationMethod).WithMany(p => p.Disseminations)
                    .HasForeignKey(d => d.DisseminationMethodId)
                    .HasConstraintName("FK_Dissemination_DisseminationMethodDIM");
            });

            modelBuilder.Entity<DisseminationMethodDim>(entity =>
            {
                entity.HasKey(e => e.DisseminationMethodId)
                    .HasName("PK__Dissemin__7C76B977C5A70080")
                    .HasFillFactor(80);

                entity.ToTable("DisseminationMethodDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DisseminationMethodDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DisseminationMethodDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DisseminationMethodDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DisseminationMethodDIMCodeView");

                entity.Property(e => e.DisseminationMethodCode).HasMaxLength(20);
                entity.Property(e => e.DisseminationMethodDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DnacollectionStatusDim>(entity =>
            {
                entity.HasKey(e => e.DnacollectionStatusId)
                    .HasName("PK__DNAColle__F578C8E8F396C082")
                    .HasFillFactor(80);

                entity.ToTable("DNACollectionStatusDIM");

                entity.Property(e => e.DnacollectionStatusId).HasColumnName("DNACollectionStatusId");
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DnacollectionStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DNACollectionStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DnacollectionStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DNACollectionStatusDIMCodeView");

                entity.Property(e => e.DnacollectionStatusCode)
                    .HasMaxLength(20)
                    .HasColumnName("DNACollectionStatusCode");
                entity.Property(e => e.DnacollectionStatusDescription)
                    .HasMaxLength(100)
                    .HasColumnName("DNACollectionStatusDescription");
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Docket>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("Docket");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();

                entity.HasOne(d => d.Activity).WithOne(p => p.Docket)
                    .HasForeignKey<Docket>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Docket_Activity");

                entity.HasOne(d => d.DocketCategory).WithMany(p => p.Dockets)
                    .HasForeignKey(d => d.DocketCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Docket_DocketCategoryDIM");
            });

            modelBuilder.Entity<DocketCategoryDim>(entity =>
            {
                entity.HasKey(e => e.DocketCategoryId)
                    .HasName("PK__DocketCa__7D5961624A2F4269")
                    .HasFillFactor(80);

                entity.ToTable("DocketCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DocketCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DocketCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DocketCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DocketCategoryDIMCodeView");

                entity.Property(e => e.DocketCategoryCode).HasMaxLength(50);
                entity.Property(e => e.DocketCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.HasKey(e => e.DocumentId)
                    .HasName("PK__Document__1ABEEF0F50D7BFB6")
                    .HasFillFactor(80);

                entity.ToTable("Document");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryId).HasDefaultValue(1);
                entity.Property(e => e.DocumentFormatId).HasDefaultValue(1);
                entity.Property(e => e.DocumentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.DocumentStatusId).HasDefaultValue(1);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PermanentRecordIndicator).HasDefaultValue(true);
                entity.Property(e => e.PrivacyActIndicator).HasDefaultValue(false);
                entity.Property(e => e.Title).HasMaxLength(200);

                entity.HasOne(d => d.DocumentCategory).WithMany(p => p.Documents)
                    .HasForeignKey(d => d.DocumentCategoryId)
                    .HasConstraintName("DocumentTypeDIM_Documents_FK1");

                entity.HasOne(d => d.DocumentFormat).WithMany(p => p.Documents)
                    .HasForeignKey(d => d.DocumentFormatId)
                    .HasConstraintName("DocumentFormatDIM_Documents_FK1");

                entity.HasOne(d => d.DocumentStatus).WithMany(p => p.Documents)
                    .HasForeignKey(d => d.DocumentStatusId)
                    .HasConstraintName("FK_Document_DocumentStatusDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Documents)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Document_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Documents)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Source");
            });

            modelBuilder.Entity<DocumentCategoryDim>(entity =>
            {
                entity.HasKey(e => e.DocumentCategoryId)
                    .HasName("PK__Document__3996B1FA1595A7BA")
                    .HasFillFactor(80);

                entity.ToTable("DocumentCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(150);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DocumentCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DocumentCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DocumentCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DocumentCategoryDIMCodeView");

                entity.Property(e => e.DocumentCategoryCode).HasMaxLength(20);
                entity.Property(e => e.DocumentCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DocumentFormatDim>(entity =>
            {
                entity.HasKey(e => e.DocumentFormatId)
                    .HasName("PK__Document__E893FEFBFBB30007")
                    .HasFillFactor(80);

                entity.ToTable("DocumentFormatDIM");

                entity.Property(e => e.Code).HasMaxLength(150);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DocumentFormatDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DocumentFormatDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DocumentFormatDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DocumentFormatDIMCodeView");

                entity.Property(e => e.DocumentFormatCode).HasMaxLength(20);
                entity.Property(e => e.DocumentFormatDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DocumentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DocumentGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<DocumentInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.DocumentInvolvementId)
                    .HasName("PK__Document__47B42A33C13C1C64")
                    .HasFillFactor(80);

                entity.ToTable("DocumentInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DocumentInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DocumentInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DocumentInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DocumentInvolvementDIMCodeView");

                entity.Property(e => e.DocumentInvolvementCode).HasMaxLength(20);
                entity.Property(e => e.DocumentInvolvementDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DocumentStatusDim>(entity =>
            {
                entity.HasKey(e => e.DocumentStatusId)
                    .HasName("PK__Document__AFDCAF5D846B347A")
                    .HasFillFactor(80);

                entity.ToTable("DocumentStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DocumentStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DocumentStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DocumentStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DocumentStatusDIMCodeView");

                entity.Property(e => e.DocumentStatusCode).HasMaxLength(20);
                entity.Property(e => e.DocumentStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DocumentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DocumentView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentId).ValueGeneratedOnAdd();
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<DriverDataConfiscationLog>(entity =>
            {
                entity.HasKey(e => e.DriverDataConfiscationLogId).HasFillFactor(80);

                entity.ToTable("DriverDataConfiscationLog");

                entity.Property(e => e.CreationDatetime).HasColumnType("datetime");
                entity.Property(e => e.ModificationDatetime).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ConfiscationStatus).WithMany(p => p.DriverDataConfiscationLogs)
                    .HasForeignKey(d => d.ConfiscationStatusId)
                    .HasConstraintName("FK_DriverDataConfiscationLog_ConfiscationStatusDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.DriverDataConfiscationLogCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_DriverDataConfiscationLog_Person");

                entity.HasOne(d => d.DriverData).WithMany(p => p.DriverDataConfiscationLogs)
                    .HasForeignKey(d => d.DriverDataId)
                    .HasConstraintName("FK_DriverDataConfiscationLog_DriverData");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.DriverDataConfiscationLogModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_DriverDataConfiscationLog_Person1");
            });

            modelBuilder.Entity<DriverDatum>(entity =>
            {
                entity.HasKey(e => e.DriverDataId)
                    .HasName("PK__DriverDa__97BA9ADF8BB33E05")
                    .HasFillFactor(80);

                entity.Property(e => e.Address).HasMaxLength(3000);
                entity.Property(e => e.BirthDate).HasColumnType("datetime");
                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IssueDate).HasColumnType("datetime");
                entity.Property(e => e.LicenseNumber).HasMaxLength(3000);
                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(3000);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);

                entity.HasOne(d => d.Career).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.CareerId)
                    .HasConstraintName("FK_DriverData_CareerDIM");

                entity.HasOne(d => d.ConfiscationDocumentType).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.ConfiscationDocumentTypeId)
                    .HasConstraintName("FK_DriverData_ConfiscationDocumentTypeDIM");

                entity.HasOne(d => d.ConfiscationLocation).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.ConfiscationLocationId)
                    .HasConstraintName("FK_DriverData_ConfiscationLocationDIM");

                entity.HasOne(d => d.ConfiscationStatus).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.ConfiscationStatusId)
                    .HasConstraintName("FK_DriverData_ConfiscationStatusDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_DriverData_Person");

                entity.HasOne(d => d.DriverDrinkingStatus).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.DriverDrinkingStatusId)
                    .HasConstraintName("FK_DriverData_DriverDrinkingStatusDIM");

                entity.HasOne(d => d.DriverStatus).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.DriverStatusId)
                    .HasConstraintName("FK_DriverData_DriverStatusDIM");

                entity.HasOne(d => d.EducationStatus).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.EducationStatusId)
                    .HasConstraintName("FK_DriverData_EducationStatusDIM");

                entity.HasOne(d => d.EscapedStatus).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.EscapedStatusId)
                    .HasConstraintName("FK_DriverData_EscapedStatusDIM");

                entity.HasOne(d => d.Gender).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.GenderId)
                    .HasConstraintName("FK_DriverData_GenderDIM");

                entity.HasOne(d => d.LicenseCategory).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.LicenseCategoryId)
                    .HasConstraintName("FK_DriverData_LicenseCategoryDIM");

                entity.HasOne(d => d.LicensePlateListSource).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.LicensePlateListSourceId)
                    .HasConstraintName("FK_DriverData_LicensePlateListSourceDIM");

                entity.HasOne(d => d.Nationality).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.NationalityId)
                    .HasConstraintName("FK_DriverData_NationalityDIM");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.DriverData)
                    .HasForeignKey(d => d.VehicleDataId)
                    .HasConstraintName("FK_DriverData_VehicleData");
            });

            modelBuilder.Entity<DriverDrinkingStatusDim>(entity =>
            {
                entity.HasKey(e => e.DriverDrinkingStatusId)
                    .HasName("PK__DriverDr__AEC0A7D77A5AEDAB")
                    .HasFillFactor(80);

                entity.ToTable("DriverDrinkingStatusDim");

                entity.HasIndex(e => e.IsDefaultForReportConstruction, "UNQ_DriverDrinkingStatusDIM_IsDefaultForReportConstruction")
                    .IsUnique()
                    .HasFilter("([IsDefaultForReportConstruction]=(1))");

                entity.Property(e => e.DriverDrinkingStatusId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DriverDrinkingStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DriverDrinkingStatusDim_RowStatusDIM");
            });

            modelBuilder.Entity<DriverLicenseCivilianClassDim>(entity =>
            {
                entity.HasKey(e => e.DriverLicenseCivilianClassId)
                    .HasName("PK__DriverLi__898D463BF30BCEF8")
                    .HasFillFactor(80);

                entity.ToTable("DriverLicenseCivilianClassDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DriverLicenseCivilianClassDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DriverLicenseCivilianClassDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DriverLicenseCivilianClassDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DriverLicenseCivilianClassDIMCodeView");

                entity.Property(e => e.DriverLicenseCivilianClassCode).HasMaxLength(20);
                entity.Property(e => e.DriverLicenseCivilianClassDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DriverLicenseCommericalClassDim>(entity =>
            {
                entity.HasKey(e => e.DriverLicenseCommericalClassId)
                    .HasName("PK__DriverLi__88417C5FA40CA4ED")
                    .HasFillFactor(80);

                entity.ToTable("DriverLicenseCommericalClassDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DriverLicenseCommericalClassDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DriverLicenseCommericalClassDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DriverLicenseCommericalClassDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DriverLicenseCommericalClassDIMCodeView");

                entity.Property(e => e.DriverLicenseCommericalClassCode).HasMaxLength(20);
                entity.Property(e => e.DriverLicenseCommericalClassDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DriverLicensePermitStatusDim>(entity =>
            {
                entity.HasKey(e => e.DriverLicensePermitStatusId)
                    .HasName("PK__DriverLi__3276E4B478C1F6E1")
                    .HasFillFactor(80);

                entity.ToTable("DriverLicensePermitStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DriverLicensePermitStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DriverLicensePermitStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DriverLicensePermitStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DriverLicensePermitStatusDIMCodeView");

                entity.Property(e => e.DriverLicensePermitStatusCode).HasMaxLength(20);
                entity.Property(e => e.DriverLicensePermitStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DriverStatusDim>(entity =>
            {
                entity.HasKey(e => e.DriverStatusId)
                    .HasName("PK__DriverSt__0D0C2D2CBF0DA5F6")
                    .HasFillFactor(80);

                entity.ToTable("DriverStatusDim");

                entity.HasIndex(e => e.IsDefaultForReportConstruction, "UNQ_DriverStatusDIM_IsDefaultForReportConstruction")
                    .IsUnique()
                    .HasFilter("([IsDefaultForReportConstruction]=(1))");

                entity.Property(e => e.DriverStatusId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DriverStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DriverStatusDim_RowStatusDIM");
            });

            modelBuilder.Entity<DrivingAccidentSeverityDim>(entity =>
            {
                entity.HasKey(e => e.DrivingAccidentSeverityId)
                    .HasName("DrivingSeverityDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("DrivingAccidentSeverityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Niem)
                    .HasMaxLength(20)
                    .HasColumnName("NIEM");
                entity.Property(e => e.NiemtypeName)
                    .HasMaxLength(100)
                    .HasColumnName("NIEMTypeName");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrivingAccidentSeverityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrivingAccidentSeverityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrivingAccidentSeverityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrivingAccidentSeverityDIMCodeView");

                entity.Property(e => e.DrivingAccidentSeverityCode).HasMaxLength(20);
                entity.Property(e => e.DrivingAccidentSeverityDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DrivingCmvdim>(entity =>
            {
                entity.HasKey(e => e.DrivingCmvid)
                    .HasName("DrivingCMVDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("DrivingCMVDIM");

                entity.Property(e => e.DrivingCmvid).HasColumnName("DrivingCMVId");
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrivingCmvdims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrivingCMVDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrivingCmvdimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrivingCMVDIMCodeView");

                entity.Property(e => e.DrivingCmvcode)
                    .HasMaxLength(20)
                    .HasColumnName("DrivingCMVCode");
                entity.Property(e => e.DrivingCmvdescription)
                    .HasMaxLength(50)
                    .HasColumnName("DrivingCMVDescription");
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DrivingHazMatDim>(entity =>
            {
                entity.HasKey(e => e.DrivingHazMatId)
                    .HasName("DrivingHazMatDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("DrivingHazMatDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrivingHazMatDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrivingHazMatDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrivingHazMatDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrivingHazMatDIMCodeView");

                entity.Property(e => e.DrivingHazMatCode).HasMaxLength(20);
                entity.Property(e => e.DrivingHazMatDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DrivingIncident>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_DrivingIncident_1")
                    .HasFillFactor(80);

                entity.ToTable("DrivingIncident");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.CollisionIndicator).HasDefaultValue(false);
                entity.Property(e => e.DriverOwnershipIndicator).HasDefaultValue(false);
                entity.Property(e => e.DrivingAccidentSeverityId).HasDefaultValue(1);
                entity.Property(e => e.DrivingCmvid).HasColumnName("DrivingCMVId");
                entity.Property(e => e.DrivingHazMatId).HasDefaultValue(1);
                entity.Property(e => e.DrivingRoadCategoryId).HasDefaultValue(1);
                entity.Property(e => e.DrivingRoadConditionId).HasDefaultValue(1);
                entity.Property(e => e.DrivingTrafficConditionId).HasDefaultValue(1);
                entity.Property(e => e.DrivingWeatherConditionId).HasDefaultValue(1);
                entity.Property(e => e.MobilePhoneIndicator).HasDefaultValue(false);
                entity.Property(e => e.NumberPedestrianInvolved).HasDefaultValue(0);
                entity.Property(e => e.PassengerDescrption).HasMaxLength(555);
                entity.Property(e => e.PassengerQuantity).HasDefaultValue(0);
                entity.Property(e => e.SeatbeltUsedIndicator).HasDefaultValue(false);

                entity.HasOne(d => d.Activity).WithOne(p => p.DrivingIncident)
                    .HasForeignKey<DrivingIncident>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DrivingIncident_DrivingIncident");

                entity.HasOne(d => d.DrivingAccidentSeverity).WithMany(p => p.DrivingIncidents)
                    .HasForeignKey(d => d.DrivingAccidentSeverityId)
                    .HasConstraintName("FK_DrivingIncident_DrivingAccidentSeverityDIM");

                entity.HasOne(d => d.DrivingCmv).WithMany(p => p.DrivingIncidents)
                    .HasForeignKey(d => d.DrivingCmvid)
                    .HasConstraintName("FK_DrivingIncident_DrivingCMVDIM");

                entity.HasOne(d => d.DrivingHazMat).WithMany(p => p.DrivingIncidents)
                    .HasForeignKey(d => d.DrivingHazMatId)
                    .HasConstraintName("FK_DrivingIncident_DrivingHazMatDIM");

                entity.HasOne(d => d.DrivingRoadCategory).WithMany(p => p.DrivingIncidents)
                    .HasForeignKey(d => d.DrivingRoadCategoryId)
                    .HasConstraintName("FK_DrivingIncident_DrivingRoadCategoryDIM");

                entity.HasOne(d => d.DrivingRoadCondition).WithMany(p => p.DrivingIncidents)
                    .HasForeignKey(d => d.DrivingRoadConditionId)
                    .HasConstraintName("FK_DrivingIncident_DrivingRoadConditionDIM");

                entity.HasOne(d => d.DrivingTrafficCondition).WithMany(p => p.DrivingIncidents)
                    .HasForeignKey(d => d.DrivingTrafficConditionId)
                    .HasConstraintName("FK_DrivingIncident_DrivingTrafficConditionDIM");

                entity.HasOne(d => d.DrivingWeatherCondition).WithMany(p => p.DrivingIncidents)
                    .HasForeignKey(d => d.DrivingWeatherConditionId)
                    .HasConstraintName("FK_DrivingIncident_DrivingWeatherConditionDIM");
            });

            modelBuilder.Entity<DrivingRoadCategoryDim>(entity =>
            {
                entity.HasKey(e => e.DrivingRoadCategoryId)
                    .HasName("DrivingRoadTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("DrivingRoadCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrivingRoadCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrivingRoadCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrivingRoadCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrivingRoadCategoryDIMCodeView");

                entity.Property(e => e.DrivingRoadCategoryCode).HasMaxLength(20);
                entity.Property(e => e.DrivingRoadCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DrivingRoadConditionDim>(entity =>
            {
                entity.HasKey(e => e.DrivingRoadConditionId)
                    .HasName("DrivingRoadDescriptionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("DrivingRoadConditionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrivingRoadConditionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrivingRoadConditionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrivingRoadConditionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrivingRoadConditionDIMCodeView");

                entity.Property(e => e.DrivingRoadConditionCode).HasMaxLength(20);
                entity.Property(e => e.DrivingRoadConditionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DrivingTrafficConditionDim>(entity =>
            {
                entity.HasKey(e => e.DrivingTrafficConditionId)
                    .HasName("DrivingTrafficDescriptionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("DrivingTrafficConditionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrivingTrafficConditionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrivingTrafficConditionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrivingTrafficConditionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrivingTrafficConditionDIMCodeView");

                entity.Property(e => e.DrivingTrafficConditionCode).HasMaxLength(20);
                entity.Property(e => e.DrivingTrafficConditionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DrivingWeatherConditionDim>(entity =>
            {
                entity.HasKey(e => e.DrivingWeatherConditionId)
                    .HasName("DrivingWeatherDescriptionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("DrivingWeatherConditionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrivingWeatherConditionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrivingWeatherConditionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrivingWeatherConditionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrivingWeatherConditionDIMCodeView");

                entity.Property(e => e.DrivingWeatherConditionCode).HasMaxLength(20);
                entity.Property(e => e.DrivingWeatherConditionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Drug>(entity =>
            {
                entity.HasKey(e => e.ItemId).HasFillFactor(80);

                entity.ToTable("Drug");

                entity.Property(e => e.ItemId).ValueGeneratedNever();
                entity.Property(e => e.DrugCategoryId).HasDefaultValue(1);
                entity.Property(e => e.DrugCompositionId).HasDefaultValue(1);
                entity.Property(e => e.DrugContainerId).HasDefaultValue(1);
                entity.Property(e => e.DrugFoundId).HasDefaultValue(1);
                entity.Property(e => e.DrugSubstanceFormId).HasDefaultValue(1);

                entity.HasOne(d => d.DrugCategory).WithMany(p => p.Drugs)
                    .HasForeignKey(d => d.DrugCategoryId)
                    .HasConstraintName("DrugTypeDIM_Drug_FK1");

                entity.HasOne(d => d.DrugComposition).WithMany(p => p.Drugs)
                    .HasForeignKey(d => d.DrugCompositionId)
                    .HasConstraintName("DrugComposition_Drug_FK1");

                entity.HasOne(d => d.DrugContainer).WithMany(p => p.Drugs)
                    .HasForeignKey(d => d.DrugContainerId)
                    .HasConstraintName("DrugContainerDIM_Drug_FK1");

                entity.HasOne(d => d.DrugFound).WithMany(p => p.Drugs)
                    .HasForeignKey(d => d.DrugFoundId)
                    .HasConstraintName("DrugFoundDIM_Drug_FK1");

                entity.HasOne(d => d.DrugSubstanceForm).WithMany(p => p.Drugs)
                    .HasForeignKey(d => d.DrugSubstanceFormId)
                    .HasConstraintName("DrugSubstanceFormDIM_Drug_FK1");

                entity.HasOne(d => d.Item).WithOne(p => p.Drug)
                    .HasForeignKey<Drug>(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Drug_FK1");
            });

            modelBuilder.Entity<DrugCategoryDim>(entity =>
            {
                entity.HasKey(e => e.DrugCategoryId)
                    .HasName("PK__DrugCate__2D7C43BEC02F2F84")
                    .HasFillFactor(80);

                entity.ToTable("DrugCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrugCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrugCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrugCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrugCategoryDIMCodeView");

                entity.Property(e => e.DrugCategoryCode).HasMaxLength(20);
                entity.Property(e => e.DrugCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DrugCompositionDim>(entity =>
            {
                entity.HasKey(e => e.DrugCompositionId)
                    .HasName("PK__DrugComp__A61F84FE739D3A81")
                    .HasFillFactor(80);

                entity.ToTable("DrugCompositionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrugCompositionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrugCompositionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrugCompositionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrugCompositionDIMCodeView");

                entity.Property(e => e.DrugCompositionCode).HasMaxLength(20);
                entity.Property(e => e.DrugCompositionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DrugContainerDim>(entity =>
            {
                entity.HasKey(e => e.DrugContainerId)
                    .HasName("PK__DrugCont__5264E20CE725D582")
                    .HasFillFactor(80);

                entity.ToTable("DrugContainerDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrugContainerDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrugContainerDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrugContainerDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrugContainerDIMCodeView");

                entity.Property(e => e.DrugContainerCode).HasMaxLength(20);
                entity.Property(e => e.DrugContainerDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DrugFoundDim>(entity =>
            {
                entity.HasKey(e => e.DrugFoundId)
                    .HasName("PK__DrugFoun__77757DC5E831A499")
                    .HasFillFactor(80);

                entity.ToTable("DrugFoundDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrugFoundDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrugFoundDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrugFoundDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrugFoundDIMCodeView");

                entity.Property(e => e.DrugFoundCode).HasMaxLength(20);
                entity.Property(e => e.DrugFoundDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DrugGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrugGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DrugCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DrugSubstanceFormDim>(entity =>
            {
                entity.HasKey(e => e.DrugSubstanceFormId)
                    .HasName("PK__DrugSubs__B3251273A1D3905D")
                    .HasFillFactor(80);

                entity.ToTable("DrugSubstanceFormDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.DrugSubstanceFormDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_DrugSubstanceFormDIM_RowStatusDIM");
            });

            modelBuilder.Entity<DrugSubstanceFormDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrugSubstanceFormDIMCodeView");

                entity.Property(e => e.DrugSubstanceFormCode).HasMaxLength(20);
                entity.Property(e => e.DrugSubstanceFormDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<DrugView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("DrugView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DrugCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DtoTypeDim>(entity =>
            {
                entity.HasKey(e => e.DtoTypeId)
                    .HasName("PK__DtoTypeD__E687AA641ECB8494")
                    .HasFillFactor(80);

                entity.ToTable("DtoTypeDim");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
            });

            modelBuilder.Entity<EducationCategoryDim>(entity =>
            {
                entity.HasKey(e => e.EducationCategoryId)
                    .HasName("PK__Educatio__981554969564BCBF")
                    .HasFillFactor(80);

                entity.ToTable("EducationCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EducationCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EducationCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EducationCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EducationCategoryDIMCodeView");

                entity.Property(e => e.EducationCategoryCode).HasMaxLength(50);
                entity.Property(e => e.EducationCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EducationDegreeDim>(entity =>
            {
                entity.HasKey(e => e.EducationDegreeId)
                    .HasName("PK__Educatio__2FD79ECEF85E45E7")
                    .HasFillFactor(80);

                entity.ToTable("EducationDegreeDIM");

                entity.Property(e => e.EducationDegreeId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EducationDegreeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EducationDegreeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EducationDegreeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EducationDegreeDIMCodeView");

                entity.Property(e => e.EducationDegreeCode).HasMaxLength(50);
                entity.Property(e => e.EducationDegreeDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EducationSchedule>(entity =>
            {
                entity.HasKey(e => e.EducationScheduleId)
                    .HasName("PK__Educatio__EE648308762CC715")
                    .HasFillFactor(80);

                entity.ToTable("EducationSchedule");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.EducationScheduleDayId).HasDefaultValue(1);
                entity.Property(e => e.EducationScheduleGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ScheduleName).HasMaxLength(100);

                entity.HasOne(d => d.EducationScheduleDay).WithMany(p => p.EducationSchedules)
                    .HasForeignKey(d => d.EducationScheduleDayId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EducationSchedule_EducationScheduleDay");

                entity.HasOne(d => d.PersonEducation).WithMany(p => p.EducationSchedules)
                    .HasForeignKey(d => d.PersonEducationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EducationSchedule_PersonEducation");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EducationSchedules)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EducationSchedule_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.EducationSchedules)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EducationSchedule_Source");
            });

            modelBuilder.Entity<EducationScheduleDayDim>(entity =>
            {
                entity.HasKey(e => e.EducationScheduleDayId)
                    .HasName("PK__Educatio__D8B78829C35BC95C")
                    .HasFillFactor(80);

                entity.ToTable("EducationScheduleDayDIM");

                entity.Property(e => e.EducationScheduleDayId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EducationScheduleDayDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EducationScheduleDayDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EducationScheduleDayDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EducationScheduleDayDIMCodeView");

                entity.Property(e => e.EducationScheduleDayCode).HasMaxLength(20);
                entity.Property(e => e.EducationScheduleDayDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EducationScheduleGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EducationScheduleGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EducationScheduleDayCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ScheduleName).HasMaxLength(100);
            });

            modelBuilder.Entity<EducationScheduleView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EducationScheduleView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EducationScheduleDayCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EducationScheduleDayDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EducationScheduleId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ScheduleName).HasMaxLength(100);
            });

            modelBuilder.Entity<EducationStatusDim>(entity =>
            {
                entity.HasKey(e => e.EducationStatusId)
                    .HasName("PK__Educatio__17BB003301ECAB31")
                    .HasFillFactor(80);

                entity.ToTable("EducationStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EducationStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EducationStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EducationStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EducationStatusDIMCodeView");

                entity.Property(e => e.EducationStatusCode).HasMaxLength(50);
                entity.Property(e => e.EducationStatusDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ElectronicInspectionAnswer>(entity =>
            {
                entity.Property(e => e.ArName).HasMaxLength(500);
                entity.Property(e => e.EnName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Fmscode).HasColumnName("FMSCode");

                entity.HasOne(d => d.ElectronicInspectionQuestion).WithMany(p => p.ElectronicInspectionAnswers)
                    .HasForeignKey(d => d.ElectronicInspectionQuestionId)
                    .HasConstraintName("FK_ElectronicInspectionAnswers_ElectronicInspectionQuestion");
            });

            modelBuilder.Entity<ElectronicInspectionPatrolAttendance>(entity =>
            {
                entity.ToTable("ElectronicInspectionPatrolAttendance");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");
                entity.Property(e => e.ExpectedEndDate).HasColumnType("datetime");
                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.ElectronicInspectionReport).WithMany(p => p.ElectronicInspectionPatrolAttendances)
                    .HasForeignKey(d => d.ElectronicInspectionReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionPatrolAttendance_ElectronicInspectionReport");

                entity.HasOne(d => d.User).WithMany(p => p.ElectronicInspectionPatrolAttendances)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionPatrolAttendance_Person");
            });

            modelBuilder.Entity<ElectronicInspectionQuestion>(entity =>
            {
                entity.ToTable("ElectronicInspectionQuestion");

                entity.Property(e => e.ArName).HasMaxLength(500);
                entity.Property(e => e.EnName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ElectronicInspectionReport>(entity =>
            {
                entity.ToTable("ElectronicInspectionReport");

                entity.Property(e => e.Code).HasMaxLength(500);
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ElectronicInspectionReportStatusId).HasDefaultValue(1L);
                entity.Property(e => e.FmsreportStatusId).HasColumnName("FMSReportStatusId");
                entity.Property(e => e.FullDateFrom).HasColumnType("datetime");
                entity.Property(e => e.FullDateTo)
                    .HasColumnType("datetime")
                    .HasColumnName("FullDateTO");
                entity.Property(e => e.ParentBranchName).HasMaxLength(500);
                entity.Property(e => e.ReplacedCommunicationMachine).HasMaxLength(500);
                entity.Property(e => e.ReplacedComputer).HasMaxLength(500);
                entity.Property(e => e.ReplacedPrinter).HasMaxLength(500);
                entity.Property(e => e.SubBranchName).HasMaxLength(500);
                entity.Property(e => e.TransporterCode).HasMaxLength(500);
                entity.Property(e => e.TransporterColor).HasMaxLength(500);
                entity.Property(e => e.TransporterMileage).HasMaxLength(500);
                entity.Property(e => e.TransporterName).HasMaxLength(500);
                entity.Property(e => e.TransporterNumber).HasMaxLength(500);
                entity.Property(e => e.TransporterType).HasMaxLength(2000);

                entity.HasOne(d => d.ElectronicInspectionReportStatus).WithMany(p => p.ElectronicInspectionReports)
                    .HasForeignKey(d => d.ElectronicInspectionReportStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReport_ElectronicInspectionReportStatus");
            });

            modelBuilder.Entity<ElectronicInspectionReportAnswer>(entity =>
            {
                entity.Property(e => e.DamageComment).HasMaxLength(4000);
                entity.Property(e => e.LastModifyDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.ElectronicInspectionAnswer).WithMany(p => p.ElectronicInspectionReportAnswers)
                    .HasForeignKey(d => d.ElectronicInspectionAnswerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReportAnswers_ElectronicInspectionAnswers");

                entity.HasOne(d => d.ElectronicInspectionQuestion).WithMany(p => p.ElectronicInspectionReportAnswers)
                    .HasForeignKey(d => d.ElectronicInspectionQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReportAnswers_ElectronicInspectionQuestion");

                entity.HasOne(d => d.ElectronicInspectionReport).WithMany(p => p.ElectronicInspectionReportAnswers)
                    .HasForeignKey(d => d.ElectronicInspectionReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReportAnswers_ElectronicInspectionReport");

                entity.HasOne(d => d.LastModifyUser).WithMany(p => p.ElectronicInspectionReportAnswers)
                    .HasForeignKey(d => d.LastModifyUserId)
                    .HasConstraintName("FK__Electroni__LastM__4E0D819A");
            });

            modelBuilder.Entity<ElectronicInspectionReportAnswerLog>(entity =>
            {
                entity.ToTable("ElectronicInspectionReportAnswerLog");

                entity.Property(e => e.ActionDateTime).HasColumnType("datetime");
                entity.Property(e => e.ActionUserName).HasMaxLength(500);
                entity.Property(e => e.Comment).HasMaxLength(2000);
                entity.Property(e => e.ElectronicInspectionAnswerName).HasMaxLength(500);
                entity.Property(e => e.ElectronicInspectionQuestionName).HasMaxLength(500);
                entity.Property(e => e.ElectronicInspectionReportAnswerStatus).HasMaxLength(500);
                entity.Property(e => e.SentGroup).HasMaxLength(500);
                entity.Property(e => e.UserName).HasMaxLength(256);

                entity.HasOne(d => d.ElectronicInspectionAnswer).WithMany(p => p.ElectronicInspectionReportAnswerLogs)
                    .HasForeignKey(d => d.ElectronicInspectionAnswerId)
                    .HasConstraintName("FK_ElectronicInspectionReportAnswerLog_ElectronicInspectionAnswers");

                entity.HasOne(d => d.ElectronicInspectionQuestion).WithMany(p => p.ElectronicInspectionReportAnswerLogs)
                    .HasForeignKey(d => d.ElectronicInspectionQuestionId)
                    .HasConstraintName("FK_ElectronicInspectionReportAnswerLog_ElectronicInspectionQuestion");

                entity.HasOne(d => d.ElectronicInspectionReport).WithMany(p => p.ElectronicInspectionReportAnswerLogs)
                    .HasForeignKey(d => d.ElectronicInspectionReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReportAnswerLog_ElectronicInspectionReport");
            });

            modelBuilder.Entity<ElectronicInspectionReportAnswerStatus>(entity =>
            {
                entity.ToTable("ElectronicInspectionReportAnswerStatus");

                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<ElectronicInspectionReportDamagePart>(entity =>
            {
                entity.HasOne(d => d.DamagePart).WithMany(p => p.ElectronicInspectionReportDamageParts)
                    .HasForeignKey(d => d.DamagePartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReportDamageParts_DamagePartsDIM");

                entity.HasOne(d => d.ElectronicInspectionReport).WithMany(p => p.ElectronicInspectionReportDamageParts)
                    .HasForeignKey(d => d.ElectronicInspectionReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReportDamageParts_ElectronicInspectionReport");

                entity.HasOne(d => d.LastModifyUser).WithMany(p => p.ElectronicInspectionReportDamageParts)
                    .HasForeignKey(d => d.LastModifyUserId)
                    .HasConstraintName("FK__Electroni__LastM__4F01A5D3");
            });

            modelBuilder.Entity<ElectronicInspectionReportDamagePartslog>(entity =>
            {
                entity.ToTable("ElectronicInspectionReportDamagePartslog");

                entity.Property(e => e.ActionDateTime).HasColumnType("datetime");
                entity.Property(e => e.ActionUserName).HasMaxLength(500);
                entity.Property(e => e.DamagePartName).HasMaxLength(500);
                entity.Property(e => e.SentGroup).HasMaxLength(500);
                entity.Property(e => e.StatusName).HasMaxLength(500);
                entity.Property(e => e.UserName).HasMaxLength(256);

                entity.HasOne(d => d.DamagePart).WithMany(p => p.ElectronicInspectionReportDamagePartslogs)
                    .HasForeignKey(d => d.DamagePartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReportDamagePartslog_DamagePartsDIM");

                entity.HasOne(d => d.ElectronicInspectionReport).WithMany(p => p.ElectronicInspectionReportDamagePartslogs)
                    .HasForeignKey(d => d.ElectronicInspectionReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReportDamagePartslog_ElectronicInspectionReport");
            });

            modelBuilder.Entity<ElectronicInspectionReportDocument>(entity =>
            {
                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.DocName).HasMaxLength(500);

                entity.HasOne(d => d.Report).WithMany(p => p.ElectronicInspectionReportDocuments)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReportDocuments_ElectronicInspectionReport");
            });

            modelBuilder.Entity<ElectronicInspectionReportFmsrequest>(entity =>
            {
                entity.ToTable("ElectronicInspectionReportFMSRequest");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ElectronicInspectionReportGroup>(entity =>
            {
                entity.ToTable("ElectronicInspectionReportGroup");

                entity.Property(e => e.Name).HasMaxLength(500);
            });

            modelBuilder.Entity<ElectronicInspectionReportLog>(entity =>
            {
                entity.ToTable("ElectronicInspectionReportLog");

                entity.Property(e => e.ActionDateTime).HasColumnType("datetime");
                entity.Property(e => e.ActionUserName).HasMaxLength(500);
                entity.Property(e => e.Comment).HasMaxLength(2000);
                entity.Property(e => e.ElectronicInspectionReportStatus).HasMaxLength(500);
                entity.Property(e => e.UserName).HasMaxLength(256);

                entity.HasOne(d => d.ElectronicInspectionReport).WithMany(p => p.ElectronicInspectionReportLogs)
                    .HasForeignKey(d => d.ElectronicInspectionReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReportLog_ElectronicInspectionReport");

                entity.HasOne(d => d.ElectronicInspectionReportStatusNavigation).WithMany(p => p.ElectronicInspectionReportLogs)
                    .HasForeignKey(d => d.ElectronicInspectionReportStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ElectronicInspectionReportLog_ElectronicInspectionReportStatus");
            });

            modelBuilder.Entity<ElectronicInspectionReportSentToFmsrequest>(entity =>
            {
                entity.ToTable("ElectronicInspectionReportSentToFMSRequest");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ElectronicInspectionReportStatus>(entity =>
            {
                entity.ToTable("ElectronicInspectionReportStatus");

                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<ElectronicInspectionReportUser>(entity =>
            {
                entity.ToTable("ElectronicInspectionReportUser");

                entity.Property(e => e.Email)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.Name).HasMaxLength(500);
                entity.Property(e => e.RoleName).HasMaxLength(500);

                entity.HasMany(d => d.ElectronicInspectionReportGroups).WithMany(p => p.ElectronicInspectionReportUsers)
                    .UsingEntity<Dictionary<string, object>>(
                        "ElectronicInspectionReportGroupUser",
                        r => r.HasOne<ElectronicInspectionReportGroup>().WithMany()
                            .HasForeignKey("ElectronicInspectionReportGroupId")
                            .OnDelete(DeleteBehavior.ClientSetNull)
                            .HasConstraintName("FK_ElectronicInspectionReportGroupUsers_ElectronicInspectionReportGroup"),
                        l => l.HasOne<ElectronicInspectionReportUser>().WithMany()
                            .HasForeignKey("ElectronicInspectionReportUserId")
                            .OnDelete(DeleteBehavior.ClientSetNull)
                            .HasConstraintName("FK_ElectronicInspectionReportGroupUsers_ElectronicInspectionReportUser"),
                        j =>
                        {
                            j.HasKey("ElectronicInspectionReportUserId", "ElectronicInspectionReportGroupId");
                            j.ToTable("ElectronicInspectionReportGroupUsers");
                        });
            });

            modelBuilder.Entity<ElectronicInspectionRole>(entity =>
            {
                entity.HasKey(e => e.RoleId);

                entity.ToTable("ElectronicInspectionRole");

                entity.Property(e => e.RoleId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ElectronicInspectionUserView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ElectronicInspectionUserView");

                entity.Property(e => e.UserName).HasMaxLength(409);
            });

            modelBuilder.Entity<ElectronicSignature>(entity =>
            {
                entity.HasKey(e => e.ElectronicSignatureId).HasFillFactor(80);

                entity.ToTable("ElectronicSignature");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Report).WithMany(p => p.ElectronicSignatures)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_ElectronicSignature_Report");
            });

            modelBuilder.Entity<EmirateArea>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__EmirateA__3214EC076DA3F5C3");

                entity.ToTable("EmirateArea");

                entity.HasOne(d => d.Area).WithMany(p => p.EmirateAreas)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmirateArea_Area");

                entity.HasOne(d => d.Emirate).WithMany(p => p.EmirateAreas)
                    .HasForeignKey(d => d.EmirateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmirateArea_EmirateDIM");
            });

            modelBuilder.Entity<EmirateDim>(entity =>
            {
                entity.HasKey(e => e.EmirateId).HasFillFactor(80);

                entity.ToTable("EmirateDIM");

                entity.HasIndex(e => e.IsDefaultForReportConstruction, "UNQ_EmirateDIM_IsDefaultForReportConstruction")
                    .IsUnique()
                    .HasFilter("([IsDefaultForReportConstruction]=(1))");

                entity.Property(e => e.EmirateId)
                    .ValueGeneratedNever()
                    .HasColumnName("EmirateID");
                entity.Property(e => e.EmirateCode).HasMaxLength(50);
                entity.Property(e => e.EmirateEnglishName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.GoogleMappingName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmirateDimToAreaMapping>(entity =>
            {
                entity.ToTable("EmirateDimToAreaMapping");
            });

            modelBuilder.Entity<EmirateView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmirateView");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<EmploymentDepartmentDim>(entity =>
            {
                entity.HasKey(e => e.EmploymentDepartmentId)
                    .HasName("PK__Employme__4231F11B1DED965E")
                    .HasFillFactor(80);

                entity.ToTable("EmploymentDepartmentDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EmploymentDepartmentDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EmploymentDepartmentDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EmploymentDepartmentDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmploymentDepartmentDIMCodeView");

                entity.Property(e => e.EmploymentDepartmentCode).HasMaxLength(20);
                entity.Property(e => e.EmploymentDepartmentDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EmploymentOccupationDim>(entity =>
            {
                entity.HasKey(e => e.EmploymentOccupationId)
                    .HasName("PK__Employme__B56D096450527E91")
                    .HasFillFactor(80);

                entity.ToTable("EmploymentOccupationDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EmploymentOccupationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EmploymentOccupationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EmploymentOccupationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmploymentOccupationDIMCodeView");

                entity.Property(e => e.EmploymentOccupationCode).HasMaxLength(20);
                entity.Property(e => e.EmploymentOccupationDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EmploymentPositionDim>(entity =>
            {
                entity.HasKey(e => e.EmploymentPositionId)
                    .HasName("PK__Employme__72EEFCD3CF065480")
                    .HasFillFactor(80);

                entity.ToTable("EmploymentPositionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EmploymentPositionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EmploymentPositionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EmploymentPositionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmploymentPositionDIMCodeView");

                entity.Property(e => e.EmploymentPositionCode).HasMaxLength(20);
                entity.Property(e => e.EmploymentPositionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EmploymentRankDim>(entity =>
            {
                entity.HasKey(e => e.EmploymentRankId)
                    .HasName("PK__Employme__7555EB57E9840B8A")
                    .HasFillFactor(80);

                entity.ToTable("EmploymentRankDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EmploymentRankDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EmploymentRankDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EmploymentRankDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmploymentRankDIMCodeView");

                entity.Property(e => e.EmploymentRankCode).HasMaxLength(20);
                entity.Property(e => e.EmploymentRankDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EmploymentStatusDim>(entity =>
            {
                entity.HasKey(e => e.EmploymentStatusId)
                    .HasName("PK__Employme__CF794B2F24DB7105")
                    .HasFillFactor(80);

                entity.ToTable("EmploymentStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EmploymentStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EmploymentStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EmploymentStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmploymentStatusDIMCodeView");

                entity.Property(e => e.EmploymentStatusCode).HasMaxLength(20);
                entity.Property(e => e.EmploymentStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EmploymentWorkShiftDim>(entity =>
            {
                entity.HasKey(e => e.EmploymentWorkShiftId)
                    .HasName("PK__Employme__B66636E332196979")
                    .HasFillFactor(80);

                entity.ToTable("EmploymentWorkShiftDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EmploymentWorkShiftDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EmploymentWorkShiftDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EmploymentWorkShiftDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EmploymentWorkShiftDIMCodeView");

                entity.Property(e => e.EmploymentWorkShiftCode).HasMaxLength(20);
                entity.Property(e => e.EmploymentWorkShiftDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EnforcementOfficial>(entity =>
            {
                entity.HasKey(e => e.PersonId).HasFillFactor(80);

                entity.ToTable("EnforcementOfficial");

                entity.Property(e => e.PersonId).ValueGeneratedNever();
                entity.Property(e => e.EnforcementOfficialBadgeIdentification).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialPostLicenseIdent).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialUnit).HasMaxLength(50);

                entity.HasOne(d => d.EnforcementOfficialAsnCategory).WithMany(p => p.EnforcementOfficials)
                    .HasForeignKey(d => d.EnforcementOfficialAsnCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EnforcementOffical_EnforcementOfficalAssignmentCategoryDIM");

                entity.HasOne(d => d.EnforcementOfficialCategory).WithMany(p => p.EnforcementOfficials)
                    .HasForeignKey(d => d.EnforcementOfficialCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EnforcementOffical_EnforcementOfficalCategoryDIM");

                entity.HasOne(d => d.Person).WithOne(p => p.EnforcementOfficial)
                    .HasForeignKey<EnforcementOfficial>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EnforcementOffical_Person");
            });

            modelBuilder.Entity<EnforcementOfficialAsnCategoryDim>(entity =>
            {
                entity.HasKey(e => e.EnforcementOfficialAsnCategoryId)
                    .HasName("PK__Enforcem__4F7EFDADDAFD0468")
                    .HasFillFactor(80);

                entity.ToTable("EnforcementOfficialAsnCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EnforcementOfficialAsnCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EnforcementOfficialAsnCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EnforcementOfficialAsnCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EnforcementOfficialAsnCategoryDIMCodeView");

                entity.Property(e => e.EnforcementOfficialAsnCategoryCode).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialAsnCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EnforcementOfficialCategoryDim>(entity =>
            {
                entity.HasKey(e => e.EnforcementOfficialCategoryId)
                    .HasName("PK__Enforcem__C1A3230F4EBBB437")
                    .HasFillFactor(80);

                entity.ToTable("EnforcementOfficialCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EnforcementOfficialCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EnforcementOfficialCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EnforcementOfficialCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EnforcementOfficialCategoryDIMCodeView");

                entity.Property(e => e.EnforcementOfficialCategoryCode).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<EnforcementOfficialGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EnforcementOfficialGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EnforcementOfficialAsnCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialBadgeIdentification).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialPostLicenseIdent).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialUnit).HasMaxLength(50);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<EnforcementOfficialView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EnforcementOfficialView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EnforcementOfficialAsnCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialAsnCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialBadgeIdentification).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialPostLicenseIdent).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialUnit).HasMaxLength(50);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<Entity>(entity =>
            {
                entity.HasKey(e => e.EntityId)
                    .HasName("Entity_PK")
                    .HasFillFactor(80);

                entity.ToTable("Entity");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Entities)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Entity_RowStatusDIM");
            });

            modelBuilder.Entity<ErrEnvolvedLog>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("ERR_ENVOLVED_LOG");

                entity.Property(e => e.AccId)
                    .HasMaxLength(14)
                    .HasColumnName("ACC_ID");
                entity.Property(e => e.CrDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime")
                    .HasColumnName("CR_DATE");
                entity.Property(e => e.ErrCode).HasColumnName("ERR_CODE");
                entity.Property(e => e.ErrDesc)
                    .HasMaxLength(200)
                    .HasColumnName("ERR_DESC");
                entity.Property(e => e.ErrDescEn)
                    .HasMaxLength(200)
                    .HasColumnName("ERR_DESC_EN");
                entity.Property(e => e.TId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("T_ID");
                entity.Property(e => e.VecId)
                    .HasMaxLength(12)
                    .HasColumnName("VEC_ID");
            });

            modelBuilder.Entity<EsAttachment>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Attac__3214EC07E5CB47A7");

                entity.ToTable("ES_Attachment");

                entity.HasIndex(e => new { e.ServiceId, e.Index }, "UK_StepId_AttachmentIndex").IsUnique();

                entity.HasIndex(e => new { e.ServiceId, e.NameArabic }, "UK_StepId_Attachment_NameArabic").IsUnique();

                entity.HasIndex(e => new { e.ServiceId, e.NameEnglish }, "UK_StepId_Attachment_NameEnglish").IsUnique();

                entity.HasIndex(e => new { e.ServiceId, e.NameUrdu }, "UK_StepId_Attachment_NameUrdu").IsUnique();

                entity.Property(e => e.ConditionValue).HasMaxLength(100);
                entity.Property(e => e.CreatedAt)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsRequired).HasDefaultValue(true);
                entity.Property(e => e.IsRequiredAfterDays).HasDefaultValueSql("(NULL)");
                entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
                entity.Property(e => e.NameArabic).HasMaxLength(255);
                entity.Property(e => e.NameEnglish).HasMaxLength(255);
                entity.Property(e => e.NameUrdu).HasMaxLength(255);

                entity.HasOne(d => d.Condition).WithMany(p => p.EsAttachments)
                    .HasForeignKey(d => d.ConditionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Attachment_Condition");

                entity.HasOne(d => d.DocumentType).WithMany(p => p.EsAttachments)
                    .HasForeignKey(d => d.DocumentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Attachment_DocumentType");

                entity.HasOne(d => d.Service).WithMany(p => p.EsAttachments)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Attachment_Service");
            });

            modelBuilder.Entity<EsConditionDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Condi__3214EC0753682CDE");

                entity.ToTable("ES_ConditionDIM");

                entity.HasIndex(e => e.Code, "UK_Conditions_Code").IsUnique();

                entity.Property(e => e.Code).HasMaxLength(255);
                entity.Property(e => e.NameArabic).HasMaxLength(255);
                entity.Property(e => e.NameEnglish).HasMaxLength(255);
                entity.Property(e => e.NameUrdu).HasMaxLength(255);
            });

            modelBuilder.Entity<EsInput>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Input__3214EC07DC7DD184");

                entity.ToTable("ES_Input");

                entity.HasIndex(e => e.Code, "UQ__ES_Input__A25C5AA742ECC5E3").IsUnique();

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.ConditionValue).HasMaxLength(50);
                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.InputGroup)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.LastModificationDate)
                    .HasDefaultValueSql("(NULL)")
                    .HasColumnType("datetime");
                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.NameArabic).HasMaxLength(100);
                entity.Property(e => e.NameEnglish).HasMaxLength(100);
                entity.Property(e => e.NameUrdu).HasMaxLength(100);
                entity.Property(e => e.Placeholder)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.RequestDataBind).HasMaxLength(50);
                entity.Property(e => e.SelectorConditionId).HasDefaultValueSql("(NULL)");
                entity.Property(e => e.ValidationMaxLength).HasDefaultValueSql("(NULL)");
                entity.Property(e => e.ValidationMinLength).HasDefaultValueSql("(NULL)");
                entity.Property(e => e.ValidationPattern).HasMaxLength(100);

                entity.HasOne(d => d.Condition).WithMany(p => p.EsInputConditions)
                    .HasForeignKey(d => d.ConditionId)
                    .HasConstraintName("FK_Input_Condition");

                entity.HasOne(d => d.SelectorCondition).WithMany(p => p.EsInputSelectorConditions)
                    .HasForeignKey(d => d.SelectorConditionId)
                    .HasConstraintName("FK_ConditionSelector_Condition");

                entity.HasOne(d => d.Service).WithMany(p => p.EsInputs)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Input_Service");

                entity.HasOne(d => d.Type).WithMany(p => p.EsInputs)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Input_InputType");
            });

            modelBuilder.Entity<EsInputTypeDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Input__3214EC07816A29F6");

                entity.ToTable("ES_InputTypeDIM");

                entity.HasIndex(e => e.Code, "UQ__ES_Input__A25C5AA77980223B").IsUnique();

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.LastModificationDate)
                    .HasDefaultValueSql("(NULL)")
                    .HasColumnType("datetime");
                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(NULL)");
            });

            modelBuilder.Entity<EsInsuranceInquiryResult>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Insur__3214EC071FAAEB21");

                entity.ToTable("ES_InsuranceInquiryResult");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.InsuranceCompanyNameAr).HasMaxLength(150);
                entity.Property(e => e.InsuranceTypeName).HasMaxLength(50);
                entity.Property(e => e.PolicyNumber).HasMaxLength(100);

                entity.HasOne(d => d.VehicleInquiry).WithMany(p => p.EsInsuranceInquiryResults)
                    .HasForeignKey(d => d.VehicleInquiryId)
                    .HasConstraintName("FK_InsuranceInquiryResult_VehicleInquiry");
            });

            modelBuilder.Entity<EsMobileVerification>(entity =>
            {
                entity.HasKey(e => e.SessionId).HasName("PK__ES_Mobil__C9F49290ABABCC87");

                entity.ToTable("ES_MobileVerification");

                entity.Property(e => e.SessionId).ValueGeneratedNever();
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.LastRetryDate)
                    .HasDefaultValueSql("(NULL)")
                    .HasColumnType("datetime");
                entity.Property(e => e.Mobile).HasMaxLength(20);
                entity.Property(e => e.VerificationCode).HasMaxLength(10);
            });

            modelBuilder.Entity<EsRepairPermission>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Repai__3214EC077C9F262B");

                entity.ToTable("ES_RepairPermission");

                entity.HasIndex(e => e.ObjectionId, "UQ__ES_Repai__279E062A657BB383").IsUnique();

                entity.Property(e => e.AccidentDate).HasColumnType("datetime");
                entity.Property(e => e.ChassisNumber).HasMaxLength(100);
                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DamagesDescription).HasMaxLength(2000);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IssuanceDate).HasColumnType("datetime");
                entity.Property(e => e.LastModificationDate)
                    .HasDefaultValueSql("(NULL)")
                    .HasColumnType("datetime");
                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.PlateNumber).HasMaxLength(50);
                entity.Property(e => e.RepairGarageName).HasMaxLength(100);
                entity.Property(e => e.StatusId).HasDefaultValue(1);
                entity.Property(e => e.VehicleModel).HasMaxLength(100);
                entity.Property(e => e.VehicleType).HasMaxLength(100);

                entity.HasOne(d => d.AccidentCountry).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.AccidentCountryId)
                    .HasConstraintName("FK_RepairPermission_RepairPermissionCountries");

                entity.HasOne(d => d.CustomerData).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.CustomerDataId)
                    .HasConstraintName("FK_RepairPermission_Customer");

                entity.HasOne(d => d.Inquiry).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.InquiryId)
                    .HasConstraintName("FK_RepairPermission_VehicleInquiry");

                entity.HasOne(d => d.MobileUser).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.MobileUserId)
                    .HasConstraintName("FK_RepairPermission_MobileUser");

                entity.HasOne(d => d.Objection).WithOne(p => p.EsRepairPermission)
                    .HasForeignKey<EsRepairPermission>(d => d.ObjectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairPermission_Objection");

                entity.HasOne(d => d.PlateCategory).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.PlateCategoryId)
                    .HasConstraintName("FK_RepairPermission_PlateCategory");

                entity.HasOne(d => d.PlateColor).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.PlateColorId)
                    .HasConstraintName("FK_RepairPermission_PlateColor");

                entity.HasOne(d => d.PlateSource).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.PlateSourceId)
                    .HasConstraintName("FK_RepairPermission_PlateSource");

                entity.HasOne(d => d.RepairPermissionType).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.RepairPermissionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairPermission_RepairPermissionType");

                entity.HasOne(d => d.Status).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairPermission_Status");

                entity.HasOne(d => d.VehicleColor).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.VehicleColorId)
                    .HasConstraintName("FK_RepairPermission_Color");

                entity.HasOne(d => d.VehicleModelNavigation).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.VehicleModelId)
                    .HasConstraintName("FK_RepairPermission_Model");

                entity.HasOne(d => d.VehicleTypeNavigation).WithMany(p => p.EsRepairPermissions)
                    .HasForeignKey(d => d.VehicleTypeId)
                    .HasConstraintName("FK_RepairPermission_Brand");
            });

            modelBuilder.Entity<EsRepairPermissionCountriesDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Repai__3214EC0715E5AD08");

                entity.ToTable("ES_RepairPermissionCountriesDIM");

                entity.HasIndex(e => e.Code, "UQ__ES_Repai__A25C5AA76E7B7C2A").IsUnique();

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DisplayOrder).HasDefaultValueSql("(NULL)");
                entity.Property(e => e.LastModificationDate)
                    .HasDefaultValueSql("(NULL)")
                    .HasColumnType("datetime");
                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.NameArabic).HasMaxLength(100);
                entity.Property(e => e.NameEnglish).HasMaxLength(100);
                entity.Property(e => e.NameUrdu).HasMaxLength(100);
            });

            modelBuilder.Entity<EsRepairPermissionDamagedPart>(entity =>
            {
                entity.HasKey(e => new { e.RepairPermissionId, e.PartId }).HasName("PK_RepairPermissionDamagedPart");

                entity.ToTable("ES_RepairPermissionDamagedPart");

                entity.HasOne(d => d.Part).WithMany(p => p.EsRepairPermissionDamagedParts)
                    .HasForeignKey(d => d.PartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairPermissionDamagedPart_Part");

                entity.HasOne(d => d.RepairPermission).WithMany(p => p.EsRepairPermissionDamagedParts)
                    .HasForeignKey(d => d.RepairPermissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairPermissionDamagedPart_RepairPermission");

                entity.HasOne(d => d.Severity).WithMany(p => p.EsRepairPermissionDamagedParts)
                    .HasForeignKey(d => d.SeverityId)
                    .HasConstraintName("FK_RepairPermissionDamagedPart_Severity");
            });

            modelBuilder.Entity<EsRepairPermissionStatus>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Repai__3214EC272904B7A9");

                entity.ToTable("ES_RepairPermissionStatus");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<EsRepairPermissionTypeDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Repai__3214EC07A342CD72");

                entity.ToTable("ES_RepairPermissionTypeDIM");

                entity.HasIndex(e => e.Code, "UQ__ES_Repai__A25C5AA73ABF72FD").IsUnique();

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.LastModificationDate)
                    .HasDefaultValueSql("(NULL)")
                    .HasColumnType("datetime");
                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.NameArabic).HasMaxLength(100);
                entity.Property(e => e.NameEnglish).HasMaxLength(100);
                entity.Property(e => e.NameUrdu).HasMaxLength(100);
            });

            modelBuilder.Entity<EsService>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Servi__3214EC07ACAF31FE");

                entity.ToTable("ES_Service");

                entity.HasIndex(e => e.NameArabic, "UK_Service_NameArabic").IsUnique();

                entity.HasIndex(e => e.NameEnglish, "UK_Service_NameEnglish").IsUnique();

                entity.HasIndex(e => e.NameUrdu, "UK_Service_NameUrdu").IsUnique();

                entity.Property(e => e.CreatedAt)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.FeesArabic).HasMaxLength(150);
                entity.Property(e => e.FeesEnglish).HasMaxLength(150);
                entity.Property(e => e.FeesUrdu).HasMaxLength(150);
                entity.Property(e => e.FeesValue).HasColumnType("decimal(9, 2)");
                entity.Property(e => e.Icon).HasMaxLength(255);
                entity.Property(e => e.IsListedInDashboard).HasDefaultValue(true);
                entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
                entity.Property(e => e.NameArabic).HasMaxLength(255);
                entity.Property(e => e.NameEnglish).HasMaxLength(255);
                entity.Property(e => e.NameUrdu).HasMaxLength(255);
                entity.Property(e => e.PaymentRequestId).HasDefaultValueSql("(NULL)");
                entity.Property(e => e.ProcessingTimeArabic).HasMaxLength(150);
                entity.Property(e => e.ProcessingTimeEnglish).HasMaxLength(150);
                entity.Property(e => e.ProcessingTimeUrdu).HasMaxLength(150);

                entity.HasOne(d => d.ObjectionRequestType).WithMany(p => p.EsServices)
                    .HasForeignKey(d => d.ObjectionRequestTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_ObjectionRequestType");

                entity.HasOne(d => d.PaymentRequest).WithMany(p => p.EsServices)
                    .HasForeignKey(d => d.PaymentRequestId)
                    .HasConstraintName("FK_Service_Payment");
            });

            modelBuilder.Entity<EsStep>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Step__3214EC0740308F38");

                entity.ToTable("ES_Step");

                entity.HasIndex(e => new { e.ServiceId, e.Index }, "UK_Step_ServiceId_StepIndex").IsUnique();

                entity.HasIndex(e => new { e.ServiceId, e.NameArabic }, "UK_Step_ServiceId_Step_NameArabic").IsUnique();

                entity.HasIndex(e => new { e.ServiceId, e.NameEnglish }, "UK_Step_ServiceId_Step_NameEnglish").IsUnique();

                entity.HasIndex(e => new { e.ServiceId, e.NameUrdu }, "UK_Step_ServiceId_Step_NameUrdu").IsUnique();

                entity.Property(e => e.CreatedAt)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedAt).HasColumnType("datetime");
                entity.Property(e => e.NameArabic).HasMaxLength(255);
                entity.Property(e => e.NameEnglish).HasMaxLength(255);
                entity.Property(e => e.NameUrdu).HasMaxLength(255);

                entity.HasOne(d => d.Service).WithMany(p => p.EsSteps)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Step_Service");

                entity.HasOne(d => d.UserControl).WithMany(p => p.EsSteps)
                    .HasForeignKey(d => d.UserControlId)
                    .HasConstraintName("FK_Step_UserControl");
            });

            modelBuilder.Entity<EsUserControlDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_UserC__3214EC070ED7211F");

                entity.ToTable("ES_UserControlDIM");

                entity.HasIndex(e => e.Code, "UK_UserControl_Code").IsUnique();

                entity.HasIndex(e => e.Code, "UQ__ES_UserC__A25C5AA7C7F7C036").IsUnique();

                entity.Property(e => e.Code).HasMaxLength(255);
            });

            modelBuilder.Entity<EsVehicleInquiry>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Vehic__3214EC07AC1F0940");

                entity.ToTable("ES_VehicleInquiry");

                entity.Property(e => e.InquiryDate).HasColumnType("datetime");
                entity.Property(e => e.PlateNumber).HasMaxLength(20);

                entity.HasOne(d => d.PlateCategory).WithMany(p => p.EsVehicleInquiries)
                    .HasForeignKey(d => d.PlateCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehicleInquiry_PlateCategory");

                entity.HasOne(d => d.PlateColor).WithMany(p => p.EsVehicleInquiries)
                    .HasForeignKey(d => d.PlateColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehicleInquiry_PlateColor");

                entity.HasOne(d => d.PlateKind).WithMany(p => p.EsVehicleInquiries)
                    .HasForeignKey(d => d.PlateKindId)
                    .HasConstraintName("FK_VehicleInquiry_PlateKind");

                entity.HasOne(d => d.PlateSource).WithMany(p => p.EsVehicleInquiries)
                    .HasForeignKey(d => d.PlateSourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehicleInquiry_PlateSource");
            });

            modelBuilder.Entity<EsVehicleInquiryResult>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ES_Vehic__3214EC0752EA94CF");

                entity.ToTable("ES_VehicleInquiryResult");

                entity.Property(e => e.Address).HasMaxLength(250);
                entity.Property(e => e.ChasisNumber).HasMaxLength(20);
                entity.Property(e => e.CountryOfOrigin).HasMaxLength(50);
                entity.Property(e => e.EngineNumber).HasMaxLength(20);
                entity.Property(e => e.ManufactureYear).HasMaxLength(20);
                entity.Property(e => e.Nationality).HasMaxLength(50);
                entity.Property(e => e.OwnerName).HasMaxLength(50);
                entity.Property(e => e.TrafficCode).HasMaxLength(20);
                entity.Property(e => e.VehicleBrand).HasMaxLength(50);
                entity.Property(e => e.VehicleClass).HasMaxLength(50);
                entity.Property(e => e.VehicleColor).HasMaxLength(50);
                entity.Property(e => e.VehicleDesc).HasMaxLength(1000);
                entity.Property(e => e.VehicleModel).HasMaxLength(50);
                entity.Property(e => e.VehicleType).HasMaxLength(50);
                entity.Property(e => e.WeightEmpty).HasMaxLength(20);
                entity.Property(e => e.WeightNonEmpty).HasMaxLength(20);

                entity.HasOne(d => d.VehicleInquiry).WithMany(p => p.EsVehicleInquiryResults)
                    .HasForeignKey(d => d.VehicleInquiryId)
                    .HasConstraintName("FK_VehicleInquiryResult_VehicleInquiry");
            });

            modelBuilder.Entity<EscapedStatusDim>(entity =>
            {
                entity.HasKey(e => e.EscapedStatusId)
                    .HasName("PK__EscapedS__1B0F863B650D0F2B")
                    .HasFillFactor(80);

                entity.ToTable("EscapedStatusDim");

                entity.HasIndex(e => e.IsDefaultForReportConstruction, "UNQ_EscapedStatusDIM_IsDefaultForReportConstruction")
                    .IsUnique()
                    .HasFilter("([IsDefaultForReportConstruction]=(1))");

                entity.Property(e => e.EscapedStatusId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EscapedStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EscapedStatusDim_RowStatusDIM");
            });

            modelBuilder.Entity<Escort>(entity =>
            {
                entity.HasKey(e => e.EscortId).HasName("PK_Escorts");

                entity.ToTable("Escort");

                entity.Property(e => e.EscortId).HasColumnName("EscortID");
                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.CurrentRequestStepId).HasColumnName("CurrentRequestStepID");
                entity.Property(e => e.EscortTypeId).HasColumnName("EscortTypeID");
                entity.Property(e => e.ModifictionDateTime).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Company).WithMany(p => p.Escorts)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Escorts_Companies");

                entity.HasOne(d => d.EscortType).WithMany(p => p.Escorts)
                    .HasForeignKey(d => d.EscortTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escort_EscortTypeDim");
            });

            modelBuilder.Entity<EscortAttachment>(entity =>
            {
                entity.HasKey(e => e.EscortAttachmentId).HasName("PK_EscortAttachments");

                entity.ToTable("EscortAttachment");

                entity.Property(e => e.EscortAttachmentId).HasColumnName("EscortAttachmentID");
                entity.Property(e => e.EscortAttachmentTypeId).HasColumnName("EscortAttachmentTypeID");
                entity.Property(e => e.EscortId).HasColumnName("EscortID");
                entity.Property(e => e.Name).HasMaxLength(150);
                entity.Property(e => e.Path).HasMaxLength(150);

                entity.HasOne(d => d.EscortAttachmentType).WithMany(p => p.EscortAttachments)
                    .HasForeignKey(d => d.EscortAttachmentTypeId)
                    .HasConstraintName("FK_EscortAttachment_EscortAttachmentTypeDim");

                entity.HasOne(d => d.Escort).WithMany(p => p.EscortAttachments)
                    .HasForeignKey(d => d.EscortId)
                    .HasConstraintName("FK_EscortAttachments_Escorts");
            });

            modelBuilder.Entity<EscortAttachmentTypeDim>(entity =>
            {
                entity.HasKey(e => e.EscortAttachmentTypeId);

                entity.ToTable("EscortAttachmentTypeDim");

                entity.Property(e => e.EscortAttachmentTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("EscortAttachmentTypeID");
                entity.Property(e => e.DescriptionAr).HasMaxLength(100);
                entity.Property(e => e.DescriptionEn).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<EscortCancelationConfirmationReasonDim>(entity =>
            {
                entity.HasKey(e => e.EscortCancelationConfirmationReasonId);

                entity.ToTable("EscortCancelationConfirmationReasonDim");

                entity.Property(e => e.EscortCancelationConfirmationReasonId).ValueGeneratedNever();
                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(50)
                    .HasColumnName("DescriptionAR");
                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(50)
                    .HasColumnName("DescriptionEN");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EscortEmailTemplate>(entity =>
            {
                entity.ToTable("EscortEmailTemplate");

                entity.Property(e => e.EscortEmailTemplateId)
                    .ValueGeneratedNever()
                    .HasColumnName("EscortEmailTemplateID");
                entity.Property(e => e.EmailTitle).HasMaxLength(250);
                entity.Property(e => e.Name).HasMaxLength(250);
            });

            modelBuilder.Entity<EscortInfo>(entity =>
            {
                entity.ToTable("EscortInfo");

                entity.Property(e => e.EscortInfoId).HasColumnName("EscortInfoID");
                entity.Property(e => e.AmountAfterDiscountWithoutVat).HasColumnName("AmountAfterDiscountWithoutVAT");
                entity.Property(e => e.CancelReason).HasMaxLength(250);
                entity.Property(e => e.ContactNumber).HasMaxLength(150);
                entity.Property(e => e.EscortDateFrom).HasColumnType("datetime");
                entity.Property(e => e.EscortDateTo).HasColumnType("datetime");
                entity.Property(e => e.EscortId).HasColumnName("EscortID");
                entity.Property(e => e.LoadType).HasMaxLength(150);
                entity.Property(e => e.LocationFrom).HasMaxLength(150);
                entity.Property(e => e.LocationTo).HasMaxLength(150);
                entity.Property(e => e.PolicePermitEndDate).HasColumnType("datetime");
                entity.Property(e => e.PolicePermitNumber).HasMaxLength(100);
                entity.Property(e => e.PolicePermitStartDate).HasColumnType("datetime");
                entity.Property(e => e.RepresentativeName).HasMaxLength(150);
                entity.Property(e => e.ReservationSerial).HasMaxLength(50);
                entity.Property(e => e.ReturnReason).HasMaxLength(250);
                entity.Property(e => e.VatafterDiscount).HasColumnName("VATAfterDiscount");

                entity.HasOne(d => d.Escort).WithMany(p => p.EscortInfos)
                    .HasForeignKey(d => d.EscortId)
                    .HasConstraintName("FK_EscortInfo_Escorts");
            });

            modelBuilder.Entity<EscortMission>(entity =>
            {
                entity.HasKey(e => e.EscortMissionId).HasName("PK_EscortMissions");

                entity.ToTable("EscortMission");

                entity.Property(e => e.EscortMissionId).HasColumnName("EscortMissionID");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.CurrentMissionStepId).HasColumnName("CurrentMissionStepID");
                entity.Property(e => e.EscortId).HasColumnName("EscortID");
                entity.Property(e => e.IsPatrolUsed).HasDefaultValue(true);
                entity.Property(e => e.LocationFrom).HasMaxLength(150);
                entity.Property(e => e.LocationTo).HasMaxLength(150);
                entity.Property(e => e.MissionDate).HasColumnType("datetime");
                entity.Property(e => e.ModifictionDateTime).HasColumnType("datetime");
                entity.Property(e => e.Notes).HasMaxLength(4000);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Escort).WithMany(p => p.EscortMissions)
                    .HasForeignKey(d => d.EscortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortMissions_Escorts");
            });

            modelBuilder.Entity<EscortMissionCancelationLog>(entity =>
            {
                entity.ToTable("EscortMissionCancelationLog");

                entity.Property(e => e.CancelationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ConfirmationDateTime).HasColumnType("datetime");
                entity.Property(e => e.EscortMissionId).HasColumnName("EscortMissionID");
                entity.Property(e => e.EscortRejectionReasonId).HasColumnName("EscortRejectionReasonID");

                entity.HasOne(d => d.EscortMissionCanclationConfirmationReason).WithMany(p => p.EscortMissionCancelationLogs)
                    .HasForeignKey(d => d.EscortMissionCanclationConfirmationReasonId)
                    .HasConstraintName("FK_EscortMissionCancelationLog_EscortCancelationConfirmationReasonDim");

                entity.HasOne(d => d.EscortMissionPatrol).WithMany(p => p.EscortMissionCancelationLogs)
                    .HasForeignKey(d => d.EscortMissionPatrolId)
                    .HasConstraintName("FK_EscortMissionCancelationLog_EscortMissionPatrol");

                entity.HasOne(d => d.EscortRejectionReason).WithMany(p => p.EscortMissionCancelationLogs)
                    .HasForeignKey(d => d.EscortRejectionReasonId)
                    .HasConstraintName("FK_EscortMissionCancelationLog_EscortRejectionReasonDim");
            });

            modelBuilder.Entity<EscortMissionEmployee>(entity =>
            {
                entity.HasKey(e => e.EscortMissionEmployeeId).HasName("PK_EscortMissionEmployees");

                entity.ToTable("EscortMissionEmployee");

                entity.Property(e => e.EscortMissionEmployeeId).HasColumnName("EscortMissionEmployeeID");
                entity.Property(e => e.EmployeeWorkType).HasDefaultValue(1);
                entity.Property(e => e.EscortMissionId).HasColumnName("EscortMissionID");
                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.HasOne(d => d.EscortMission).WithMany(p => p.EscortMissionEmployees)
                    .HasForeignKey(d => d.EscortMissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortMissionEmployees_EscortMissions");

                entity.HasOne(d => d.Person).WithMany(p => p.EscortMissionEmployees)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortMissionEmployee_Person");
            });

            modelBuilder.Entity<EscortMissionPatrol>(entity =>
            {
                entity.HasKey(e => e.EscortMissionPatrolId).HasName("PK_EscortPatrols");

                entity.ToTable("EscortMissionPatrol");

                entity.Property(e => e.EscortMissionPatrolId).HasColumnName("EscortMissionPatrolID");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.CurrentMissionPatrolStepId).HasColumnName("CurrentMissionPatrolStepID");
                entity.Property(e => e.EscortMissionId).HasColumnName("EscortMissionID");
                entity.Property(e => e.IsPatrolUsed).HasDefaultValue(true);
                entity.Property(e => e.ModifictionDateTime).HasColumnType("datetime");
                entity.Property(e => e.Notes).HasMaxLength(4000);
                entity.Property(e => e.PatrolId).HasColumnName("PatrolID");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.EscortMission).WithMany(p => p.EscortMissionPatrols)
                    .HasForeignKey(d => d.EscortMissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortMissionPatrols_EscortMissions");

                entity.HasOne(d => d.Patrol).WithMany(p => p.EscortMissionPatrols)
                    .HasForeignKey(d => d.PatrolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortMissionPatrol_Item");
            });

            modelBuilder.Entity<EscortMissionPatrolEmployee>(entity =>
            {
                entity.ToTable("EscortMissionPatrolEmployee");

                entity.Property(e => e.EscortMissionPatrolEmployeeId).HasColumnName("EscortMissionPatrolEmployeeID");
                entity.Property(e => e.EscortMissionPatrolId).HasColumnName("EscortMissionPatrolID");
                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.HasOne(d => d.EscortMissionPatrol).WithMany(p => p.EscortMissionPatrolEmployees)
                    .HasForeignKey(d => d.EscortMissionPatrolId)
                    .HasConstraintName("FK_EscortMissionPatrolEmployee_EscortMissionPatrol");

                entity.HasOne(d => d.Person).WithMany(p => p.EscortMissionPatrolEmployees)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_EscortMissionPatrolEmployee_Person");
            });

            modelBuilder.Entity<EscortMissionPatrolStep>(entity =>
            {
                entity.HasKey(e => e.EscortMissionPatrolStepId).HasName("PK_EscortMissionLines");

                entity.ToTable("EscortMissionPatrolStep");

                entity.Property(e => e.EscortMissionPatrolStepId).HasColumnName("EscortMissionPatrolStepID");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.EscortMissionPatrolId).HasColumnName("EscortMissionPatrolID");
                entity.Property(e => e.EscortRejectionReasonId).HasColumnName("EscortRejectionReasonID");
                entity.Property(e => e.MissionPatrolStepId).HasColumnName("MissionPatrolStepID");
                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.HasOne(d => d.EscortMissionPatrol).WithMany(p => p.EscortMissionPatrolSteps)
                    .HasForeignKey(d => d.EscortMissionPatrolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortMissionPatrolSteps_EscortMissionPatrols");

                entity.HasOne(d => d.EscortRejectionReason).WithMany(p => p.EscortMissionPatrolSteps)
                    .HasForeignKey(d => d.EscortRejectionReasonId)
                    .HasConstraintName("FK_EscortMissionPatrolStep_EscortRejectionReasonDim");

                entity.HasOne(d => d.MissionPatrolStep).WithMany(p => p.EscortMissionPatrolSteps)
                    .HasForeignKey(d => d.MissionPatrolStepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortMissionPatrolStep_MissionPatrolStepDim");
            });

            modelBuilder.Entity<EscortMissionStep>(entity =>
            {
                entity.HasKey(e => e.EscortMissionStepId).HasName("PK_EscortMissionSteps");

                entity.ToTable("EscortMissionStep");

                entity.Property(e => e.EscortMissionStepId).HasColumnName("EscortMissionStepID");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.EscortMissionId).HasColumnName("EscortMissionID");
                entity.Property(e => e.MissionStepId).HasColumnName("MissionStepID");
                entity.Property(e => e.Notes).HasMaxLength(4000);

                entity.HasOne(d => d.EscortMission).WithMany(p => p.EscortMissionSteps)
                    .HasForeignKey(d => d.EscortMissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortMissionSteps_EscortMissions");

                entity.HasOne(d => d.MissionStep).WithMany(p => p.EscortMissionSteps)
                    .HasForeignKey(d => d.MissionStepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortMissionStep_MissionStepDim");
            });

            modelBuilder.Entity<EscortRejectionReasonDim>(entity =>
            {
                entity.HasKey(e => e.EscortRejectionReasonId);

                entity.ToTable("EscortRejectionReasonDim");

                entity.Property(e => e.EscortRejectionReasonId)
                    .ValueGeneratedNever()
                    .HasColumnName("EscortRejectionReasonID");
                entity.Property(e => e.DescriptionAr).HasMaxLength(100);
                entity.Property(e => e.DescriptionEn).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<EscortRequestStep>(entity =>
            {
                entity.HasKey(e => e.EscortRequestStepId).HasName("PK_EscortSteps");

                entity.ToTable("EscortRequestStep");

                entity.Property(e => e.EscortRequestStepId).HasColumnName("EscortRequestStepID");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
                entity.Property(e => e.EscortId).HasColumnName("EscortID");
                entity.Property(e => e.Notes).HasMaxLength(4000);
                entity.Property(e => e.RequestStepId).HasColumnName("RequestStepID");

                entity.HasOne(d => d.Escort).WithMany(p => p.EscortRequestSteps)
                    .HasForeignKey(d => d.EscortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escortsteps_Escorts");

                entity.HasOne(d => d.RequestStep).WithMany(p => p.EscortRequestSteps)
                    .HasForeignKey(d => d.RequestStepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortRequestStep_RequestStepDim");
            });

            modelBuilder.Entity<EscortTypeDim>(entity =>
            {
                entity.HasKey(e => e.EscortTypeId);

                entity.ToTable("EscortTypeDim");

                entity.Property(e => e.EscortTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("EscortTypeID");
                entity.Property(e => e.DescriptionAr).HasMaxLength(100);
                entity.Property(e => e.DescriptionEn).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<EscortVehicle>(entity =>
            {
                entity.HasKey(e => e.EscortVehicleId).HasName("PK_EscortVehicles");

                entity.ToTable("EscortVehicle");

                entity.Property(e => e.EscortVehicleId).HasColumnName("EscortVehicleID");
                entity.Property(e => e.CompanyVehicleId).HasColumnName("CompanyVehicleID");
                entity.Property(e => e.EscortId).HasColumnName("EscortID");

                entity.HasOne(d => d.CompanyVehicle).WithMany(p => p.EscortVehicles)
                    .HasForeignKey(d => d.CompanyVehicleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortVehicles_CompanyVehicles");

                entity.HasOne(d => d.Escort).WithMany(p => p.EscortVehicles)
                    .HasForeignKey(d => d.EscortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EscortVehicles_Escorts");
            });

            modelBuilder.Entity<EscortingIntegrationTokenLog>(entity =>
            {
                entity.ToTable("EscortingIntegrationTokenLog");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<EscortingReportBasicDetail>(entity =>
            {
                entity.HasKey(e => e.EscortingReportBasicDetailsId)
                    .HasName("PK__Escortin__11642D607582E8CB")
                    .HasFillFactor(80);

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.ReportDescription).HasMaxLength(3000);

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EscortingReportBasicDetails)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__Escorting__Creat__26481255");

                entity.HasOne(d => d.Report).WithMany(p => p.EscortingReportBasicDetails)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK__Escorting__Repor__273C368E");
            });

            modelBuilder.Entity<EservicesSupervisor>(entity =>
            {
                entity.ToTable("EservicesSupervisor");
            });

            modelBuilder.Entity<EthnicityDim>(entity =>
            {
                entity.HasKey(e => e.EthnicityId)
                    .HasName("PK__Ethnicit__A243EC8054F55746")
                    .HasFillFactor(80);

                entity.ToTable("EthnicityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.LongDescription).HasMaxLength(255);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EthnicityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EthnicityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<EthnicityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EthnicityDIMCodeView");

                entity.Property(e => e.EthnicityCode).HasMaxLength(20);
                entity.Property(e => e.EthnicityDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Event>(entity =>
            {
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.EndDate).HasColumnType("datetime");
                entity.Property(e => e.EventName).HasMaxLength(100);
                entity.Property(e => e.EventNumber).HasMaxLength(50);
                entity.Property(e => e.ModificationDateTime).HasColumnType("datetime");
                entity.Property(e => e.OrganizerName).HasMaxLength(100);
                entity.Property(e => e.OrganizerPhone).HasMaxLength(50);
                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Events)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Events_Person");

                entity.HasOne(d => d.CurrentStatus).WithMany(p => p.Events)
                    .HasForeignKey(d => d.CurrentStatusId)
                    .HasConstraintName("FK_Events_EventsStatusDim");

                entity.HasOne(d => d.Emirate).WithMany(p => p.Events)
                    .HasForeignKey(d => d.EmirateId)
                    .HasConstraintName("FK_Events_EmirateDIM");

                entity.HasOne(d => d.EventSource).WithMany(p => p.Events)
                    .HasForeignKey(d => d.EventSourceId)
                    .HasConstraintName("FK_Events_EventsSourceDim");
            });

            modelBuilder.Entity<EventIncident>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__EventInc__3214EC07EDE821B6");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentEndTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentStartTime).HasColumnType("datetime");
                entity.Property(e => e.IsFinished).HasDefaultValue(false);
                entity.Property(e => e.Latitude).HasColumnType("decimal(18, 15)");
                entity.Property(e => e.Longitude).HasColumnType("decimal(18, 15)");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.HasOne(d => d.CriticalityLevel).WithMany(p => p.EventIncidents)
                    .HasForeignKey(d => d.CriticalityLevelId)
                    .HasConstraintName("FK_EventIncidents_EventIncidentCriticalityLevelDim");

                entity.HasOne(d => d.Event).WithMany(p => p.EventIncidents)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Incidents_Events");

                entity.HasOne(d => d.IncidentLocation).WithMany(p => p.EventIncidents)
                    .HasForeignKey(d => d.IncidentLocationId)
                    .HasConstraintName("FK_EventIncidents_EventsAreas");

                entity.HasOne(d => d.IncidentSubType).WithMany(p => p.EventIncidents)
                    .HasForeignKey(d => d.IncidentSubTypeId)
                    .HasConstraintName("FK_EventIncidents_EventIncidentSubTypeDim");

                entity.HasOne(d => d.IncidentType).WithMany(p => p.EventIncidents)
                    .HasForeignKey(d => d.IncidentTypeId)
                    .HasConstraintName("FK_EventIncidents_EventIncidentTypeDim");

                entity.HasOne(d => d.Mission).WithMany(p => p.EventIncidents)
                    .HasForeignKey(d => d.MissionId)
                    .HasConstraintName("FK_EventIncidents_EventsMissions");

                entity.HasOne(d => d.ModificationByNavigation).WithMany(p => p.EventIncidentModificationByNavigations)
                    .HasForeignKey(d => d.ModificationBy)
                    .HasConstraintName("FK_EventIncidents_PersonModification");

                entity.HasOne(d => d.Person).WithMany(p => p.EventIncidentPeople)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_Incidents_Person");

                entity.HasOne(d => d.Status).WithMany(p => p.EventIncidents)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_EventIncidents_EventIncidentStatusDim");
            });

            modelBuilder.Entity<EventIncidentAction>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__EventInc__3214EC070728A4E4");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Action).WithMany(p => p.EventIncidentActions)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EventInci__Actio__12E5C787");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventIncidentActionCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__EventInci__Creat__13D9EBC0");

                entity.HasOne(d => d.Incident).WithMany(p => p.EventIncidentActions)
                    .HasForeignKey(d => d.IncidentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EventInci__Incid__14CE0FF9");

                entity.HasOne(d => d.ModificationByNavigation).WithMany(p => p.EventIncidentActionModificationByNavigations)
                    .HasForeignKey(d => d.ModificationBy)
                    .HasConstraintName("FK__EventInci__Modif__15C23432");
            });

            modelBuilder.Entity<EventIncidentActionDim>(entity =>
            {
                entity.ToTable("EventIncidentActionDim");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.EventIncidentSubType).WithMany(p => p.EventIncidentActionDims)
                    .HasForeignKey(d => d.EventIncidentSubTypeId)
                    .HasConstraintName("FK_EventIncidentActionDim_EventIncidentSubTypeDim");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EventIncidentActionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EventIncidentActionDim_RowStatusDIM");
            });

            modelBuilder.Entity<EventIncidentComment>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__EventInc__3214EC071E6C75C3");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsInternal).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventIncidentCommentCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__EventInci__Creat__01BB3B85");

                entity.HasOne(d => d.Incident).WithMany(p => p.EventIncidentComments)
                    .HasForeignKey(d => d.IncidentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EventInci__Incid__02AF5FBE");

                entity.HasOne(d => d.ModificationByNavigation).WithMany(p => p.EventIncidentCommentModificationByNavigations)
                    .HasForeignKey(d => d.ModificationBy)
                    .HasConstraintName("FK__EventInci__Modif__03A383F7");
            });

            modelBuilder.Entity<EventIncidentCriticalityLevelDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_EventCriticalityLevelDim");

                entity.ToTable("EventIncidentCriticalityLevelDim");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EventIncidentCriticalityLevelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EventCriticalityLevel_RowStatusDIM");
            });

            modelBuilder.Entity<EventIncidentImage>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__EventInc__3214EC07D855198B");

                entity.Property(e => e.CreateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ImgType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventIncidentImageCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_EventIncidentImages_Person");

                entity.HasOne(d => d.IncidentComment).WithMany(p => p.EventIncidentImages)
                    .HasForeignKey(d => d.IncidentCommentId)
                    .HasConstraintName("FK_EventIncidentImages_EventIncidentComments");

                entity.HasOne(d => d.Incident).WithMany(p => p.EventIncidentImages)
                    .HasForeignKey(d => d.IncidentId)
                    .HasConstraintName("FK_IncidentImages_Incident");

                entity.HasOne(d => d.IncidentPerson).WithMany(p => p.EventIncidentImages)
                    .HasForeignKey(d => d.IncidentPersonId)
                    .HasConstraintName("FK__EventInci__Incid__08683914");

                entity.HasOne(d => d.IncidentVehicle).WithMany(p => p.EventIncidentImages)
                    .HasForeignKey(d => d.IncidentVehicleId)
                    .HasConstraintName("FK__EventInci__Incid__077414DB");

                entity.HasOne(d => d.ModificationByNavigation).WithMany(p => p.EventIncidentImageModificationByNavigations)
                    .HasForeignKey(d => d.ModificationBy)
                    .HasConstraintName("FK_EventIncidentImages_PersonModification");
            });

            modelBuilder.Entity<EventIncidentPerson>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__EventInc__3214EC07374A9C73");

                entity.ToTable("EventIncidentPerson");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.DriverName).HasMaxLength(100);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.NationalId)
                    .HasMaxLength(50)
                    .HasColumnName("NationalID");
                entity.Property(e => e.NationalityId).HasColumnName("NationalityID");
                entity.Property(e => e.PhoneNumber).HasMaxLength(50);

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventIncidentPersonCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__EventInci__Creat__5936B231");

                entity.HasOne(d => d.Incident).WithMany(p => p.EventIncidentPeople)
                    .HasForeignKey(d => d.IncidentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EventInci__Incid__565A4586");

                entity.HasOne(d => d.IncidentVehicle).WithMany(p => p.EventIncidentPeople)
                    .HasForeignKey(d => d.IncidentVehicleId)
                    .HasConstraintName("FK__EventInci__Incid__574E69BF");

                entity.HasOne(d => d.ModificationByNavigation).WithMany(p => p.EventIncidentPersonModificationByNavigations)
                    .HasForeignKey(d => d.ModificationBy)
                    .HasConstraintName("FK__EventInci__Modif__5A2AD66A");

                entity.HasOne(d => d.Nationality).WithMany(p => p.EventIncidentPeople)
                    .HasForeignKey(d => d.NationalityId)
                    .HasConstraintName("FK__EventInci__Natio__58428DF8");
            });

            modelBuilder.Entity<EventIncidentStatusDim>(entity =>
            {
                entity.ToTable("EventIncidentStatusDim");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<EventIncidentSubTypeDim>(entity =>
            {
                entity.ToTable("EventIncidentSubTypeDim");

                entity.Property(e => e.Code).HasMaxLength(100);
                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(200)
                    .HasColumnName("DescriptionAR");
                entity.Property(e => e.DescriptionEn).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CriticalityLevel).WithMany(p => p.EventIncidentSubTypeDims)
                    .HasForeignKey(d => d.CriticalityLevelId)
                    .HasConstraintName("FK_EventIncidentSubTypeDim_EventIncidentCriticalityLevelDim");

                entity.HasOne(d => d.IncidentType).WithMany(p => p.EventIncidentSubTypeDims)
                    .HasForeignKey(d => d.IncidentTypeId)
                    .HasConstraintName("FK_EventIncidentSubTypeDim_EventIncidentTypeDim");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EventIncidentSubTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EventIncidentSubTypeDim_RowStatusDIM");
            });

            modelBuilder.Entity<EventIncidentTypeDim>(entity =>
            {
                entity.ToTable("EventIncidentTypeDim");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.EventIncidentTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_EventIncidentType_RowStatusDIM");
            });

            modelBuilder.Entity<EventIncidentVehicle>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__EventInc__3214EC07FDB16096");

                entity.ToTable("EventIncidentVehicle");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.PlateNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<EventIncidentsLog>(entity =>
            {
                entity.ToTable("EventIncidentsLog");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<EventIncidentsStatusLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_EventsIncidentsStatusLogs");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventIncidentsStatusLogs)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__EventInci__Creat__1A86E94F");

                entity.HasOne(d => d.EventIncident).WithMany(p => p.EventIncidentsStatusLogs)
                    .HasForeignKey(d => d.EventIncidentId)
                    .HasConstraintName("FK_EventIncidentsStatusLogs_Incidents");

                entity.HasOne(d => d.Status).WithMany(p => p.EventIncidentsStatusLogs)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_EventIncidentsStatusLogs_EventIncidentStatusDim");
            });

            modelBuilder.Entity<EventMissionAcceptanceStatusDim>(entity =>
            {
                entity.HasKey(e => e.EventMissionAcceptanceStatusId).HasName("PK_EventsMissionAcceptanceStatusDim");

                entity.ToTable("EventMissionAcceptanceStatusDim");

                entity.Property(e => e.ArabicDescription).HasMaxLength(200);
                entity.Property(e => e.EnglishDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<EventMissionAssignmentLog>(entity =>
            {
                entity.ToTable("EventMissionAssignmentLog");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedbyNavigation).WithMany(p => p.EventMissionAssignmentLogs)
                    .HasForeignKey(d => d.Createdby)
                    .HasConstraintName("FK_EventMissionAssignmentLog_Person");

                entity.HasOne(d => d.MissionAssign).WithMany(p => p.EventMissionAssignmentLogs)
                    .HasForeignKey(d => d.MissionAssignId)
                    .HasConstraintName("FK_EventMissionAssignmentLog_EventsMissionAssignment");

                entity.HasOne(d => d.Status).WithMany(p => p.EventMissionAssignmentLogs)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_EventMissionAssignmentLog_EventMissionAssignmentStatusDim");
            });

            modelBuilder.Entity<EventMissionAssignmentStatusDim>(entity =>
            {
                entity.HasKey(e => e.MissionAssignmentStatusId).HasName("PK_MissionAssignmentStatusDim");

                entity.ToTable("EventMissionAssignmentStatusDim");

                entity.Property(e => e.MissionAssignmentStatusId).ValueGeneratedNever();
                entity.Property(e => e.ArabicDescription).HasMaxLength(50);
                entity.Property(e => e.EnglishDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<EventSourcePerson>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__EventSou__3214EC07CF93ED9D");

                entity.Property(e => e.IsDeleted).HasDefaultValue(false);

                entity.HasOne(d => d.EventSource).WithMany(p => p.EventSourcePeople)
                    .HasForeignKey(d => d.EventSourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EventSour__Event__25F89BFB");

                entity.HasOne(d => d.Person).WithMany(p => p.EventSourcePeople)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EventSour__Perso__26ECC034");
            });

            modelBuilder.Entity<EventTypeDim>(entity =>
            {
                entity.HasKey(e => e.EventTypeId)
                    .HasName("PK__EventTyp__A9216B3FA41FD2E8")
                    .HasFillFactor(80);

                entity.ToTable("EventTypeDim");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
            });

            modelBuilder.Entity<EventsArea>(entity =>
            {
                entity.HasKey(e => e.EventAreaId);

                entity.Property(e => e.AreaName).HasMaxLength(50);
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ModificationDateTime).HasColumnType("datetime");
                entity.Property(e => e.SectorName).HasMaxLength(50);

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventsAreas)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__EventsAre__Creat__1B4DC2FA");

                entity.HasOne(d => d.Event).WithMany(p => p.EventsAreas)
                    .HasForeignKey(d => d.EventId)
                    .HasConstraintName("FK_EventsAreas_Events");
            });

            modelBuilder.Entity<EventsAttendanceLogStatusDim>(entity =>
            {
                entity.HasKey(e => e.EventAttandaceLogStatusId).HasName("PK_AttandaceLogTypeDim");

                entity.ToTable("EventsAttendanceLogStatusDim");

                entity.Property(e => e.EventAttandaceLogStatusId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.NavigatePath).HasMaxLength(100);

                entity.HasOne(d => d.EventAttandaceType).WithMany(p => p.EventsAttendanceLogStatusDims)
                    .HasForeignKey(d => d.EventAttandaceTypeId)
                    .HasConstraintName("FK_EventsAttendanceLogStatusDim_EventsAttendanceTypeDim");
            });

            modelBuilder.Entity<EventsAttendanceTypeDim>(entity =>
            {
                entity.HasKey(e => e.AttandaceTypId).HasName("PK_AttandaceTypeDim");

                entity.ToTable("EventsAttendanceTypeDim");

                entity.Property(e => e.AttandaceTypId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
            });

            modelBuilder.Entity<EventsEmployeeTypeDim>(entity =>
            {
                entity.HasKey(e => e.EventEmployeeTypeId).HasName("PK_EventsEmployeeType");

                entity.ToTable("EventsEmployeeTypeDim");

                entity.Property(e => e.EventEmployeeTypeId).ValueGeneratedNever();
                entity.Property(e => e.DescriptionAr).HasMaxLength(100);
                entity.Property(e => e.DescriptionEn).HasMaxLength(100);
            });

            modelBuilder.Entity<EventsEmployeesAttendance>(entity =>
            {
                entity.HasKey(e => e.EventsEmployeesAttandaceId).HasName("PK_EventAttandace");

                entity.ToTable("EventsEmployeesAttendance");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.FirstCheckinDate).HasColumnType("datetime");
                entity.Property(e => e.LastCheckoutDate).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.HasOne(d => d.AttandaceType).WithMany(p => p.EventsEmployeesAttendances)
                    .HasForeignKey(d => d.AttandaceTypeId)
                    .HasConstraintName("FK_EventAttandace_AttandaceTypeDim");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventsEmployeesAttendanceCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_EventAttandace_Person1");

                entity.HasOne(d => d.CurrentStatus).WithMany(p => p.EventsEmployeesAttendances)
                    .HasForeignKey(d => d.CurrentStatusId)
                    .HasConstraintName("FK_EventsEmployeesAttendance_EventsAttendanceLogStatusDim");

                entity.HasOne(d => d.Employee).WithMany(p => p.EventsEmployeesAttendanceEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_EventAttandace_Person");

                entity.HasOne(d => d.Event).WithMany(p => p.EventsEmployeesAttendances)
                    .HasForeignKey(d => d.EventId)
                    .HasConstraintName("FK_EventAttandace_Events");

                entity.HasOne(d => d.EventPatrol).WithMany(p => p.EventsEmployeesAttendances)
                    .HasForeignKey(d => d.EventPatrolId)
                    .HasConstraintName("FK_EventsEmployeesAttendance_EventsPatrol");
            });

            modelBuilder.Entity<EventsEmployeesAttendanceLog>(entity =>
            {
                entity.HasKey(e => e.EventAttendanceLogId).HasName("PK_EventsAttendanceLog");

                entity.ToTable("EventsEmployeesAttendanceLog");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ModificationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.EventAttendance).WithMany(p => p.EventsEmployeesAttendanceLogs)
                    .HasForeignKey(d => d.EventAttendanceId)
                    .HasConstraintName("FK_EventsAttendanceLog_EventAttendance");

                entity.HasOne(d => d.EventAttendanceLogStatus).WithMany(p => p.EventsEmployeesAttendanceLogs)
                    .HasForeignKey(d => d.EventAttendanceLogStatusId)
                    .HasConstraintName("FK_EventsEmployeesAttendanceLog_EventsAttendanceLogStatusDim");
            });

            modelBuilder.Entity<EventsIntegrationTokenLog>(entity =>
            {
                entity.ToTable("EventsIntegrationTokenLog");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<EventsMission>(entity =>
            {
                entity.HasKey(e => e.MissionId);

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.EventMissionAcceptanceDateTime).HasColumnType("datetime");
                entity.Property(e => e.GroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissionEndDate).HasColumnType("datetime");
                entity.Property(e => e.MissionName).HasMaxLength(70);
                entity.Property(e => e.MissionNumber).HasMaxLength(50);
                entity.Property(e => e.MissionStartDate).HasColumnType("datetime");
                entity.Property(e => e.MissionTypeDescription).HasMaxLength(100);
                entity.Property(e => e.ModificationDateTime).HasColumnType("datetime");
                entity.Property(e => e.SubGroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventsMissionCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__EventsMis__Creat__1D360B6C");

                entity.HasOne(d => d.CurrentStatus).WithMany(p => p.EventsMissions)
                    .HasForeignKey(d => d.CurrentStatusId)
                    .HasConstraintName("FK_EventsMissions_EventsMissionStatusDim");

                entity.HasOne(d => d.Event).WithMany(p => p.EventsMissions)
                    .HasForeignKey(d => d.EventId)
                    .HasConstraintName("FK_EventsMissions_Events");

                entity.HasOne(d => d.EventMissionAcceptanceStatus).WithMany(p => p.EventsMissions)
                    .HasForeignKey(d => d.EventMissionAcceptanceStatusId)
                    .HasConstraintName("FK_EventsMissions_EventMissionAcceptanceStatusDim");

                entity.HasOne(d => d.MissionCategory).WithMany(p => p.EventsMissions)
                    .HasForeignKey(d => d.MissionCategoryId)
                    .HasConstraintName("FK__EventsMis__Missi__1E2A2FA5");

                entity.HasOne(d => d.MissonLevel).WithMany(p => p.EventsMissions)
                    .HasForeignKey(d => d.MissonLevelId)
                    .HasConstraintName("FK_EventsMissions_EventsMissionLevelDim");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.EventsMissionModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__EventsMis__Modif__54864056");
            });

            modelBuilder.Entity<EventsMissionAssignment>(entity =>
            {
                entity.HasKey(e => e.MissionAssignId).HasName("PK_EventMissonAssignment");

                entity.ToTable("EventsMissionAssignment");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ModificationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventsMissionAssignmentCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__EventsMis__Creat__1C41E733");

                entity.HasOne(d => d.EventArea).WithMany(p => p.EventsMissionAssignments)
                    .HasForeignKey(d => d.EventAreaId)
                    .HasConstraintName("FK_EventMissionAssignment_EventsAreas");

                entity.HasOne(d => d.EventPerson).WithMany(p => p.EventsMissionAssignments)
                    .HasForeignKey(d => d.EventPersonId)
                    .HasConstraintName("FK__EventsMis__Event__529DF7E4");

                entity.HasOne(d => d.MissionAssignmentStatus).WithMany(p => p.EventsMissionAssignments)
                    .HasForeignKey(d => d.MissionAssignmentStatusId)
                    .HasConstraintName("FK_EventsMissionAssignment_EventMissionAssignmentStatusDim");

                entity.HasOne(d => d.Mission).WithMany(p => p.EventsMissionAssignments)
                    .HasForeignKey(d => d.MissionId)
                    .HasConstraintName("FK_EventMissionAssignment_EventsMissions");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.EventsMissionAssignmentModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__EventsMis__Modif__53921C1D");

                entity.HasOne(d => d.Person).WithMany(p => p.EventsMissionAssignmentPeople)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_EventMissionAssignment_Person");
            });

            modelBuilder.Entity<EventsMissionAssignmentNotification>(entity =>
            {
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.NotificationStatus).HasMaxLength(50);
                entity.Property(e => e.NotificationType).HasMaxLength(200);

                entity.HasOne(d => d.EventsMissionAssignment).WithMany(p => p.EventsMissionAssignmentNotifications)
                    .HasForeignKey(d => d.EventsMissionAssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventsMissionAssignmentNotifications_EventsMissionAssignment");
            });

            modelBuilder.Entity<EventsMissionLevelDim>(entity =>
            {
                entity.HasKey(e => e.EventMissionLevelId).HasName("PK_EventMissionLevelDim");

                entity.ToTable("EventsMissionLevelDim");

                entity.Property(e => e.Description).HasMaxLength(60);
                entity.Property(e => e.EnDescription).HasMaxLength(60);
            });

            modelBuilder.Entity<EventsMissionStatusDim>(entity =>
            {
                entity.HasKey(e => e.EventsMissionStatusId);

                entity.ToTable("EventsMissionStatusDim");

                entity.Property(e => e.EventsMissionStatusId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.EnglishDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<EventsMissionTypeDim>(entity =>
            {
                entity.HasKey(e => e.EventMissionTypeId).HasName("PK_EventMissionTypeDim");

                entity.ToTable("EventsMissionTypeDim");

                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.Endescription)
                    .HasMaxLength(50)
                    .HasColumnName("ENDescription");
            });

            modelBuilder.Entity<EventsMissionsStatusLog>(entity =>
            {
                entity.HasKey(e => e.EventStatusLogId);

                entity.ToTable("EventsMissionsStatusLog");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventsMissionsStatusLogs)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__EventsMis__Creat__1F1E53DE");

                entity.HasOne(d => d.EventMissionStatus).WithMany(p => p.EventsMissionsStatusLogs)
                    .HasForeignKey(d => d.EventMissionStatusId)
                    .HasConstraintName("FK_EventsMissionsStatusLog_EventsMissionStatusDim");

                entity.HasOne(d => d.Mission).WithMany(p => p.EventsMissionsStatusLogs)
                    .HasForeignKey(d => d.MissionId)
                    .HasConstraintName("FK_EventsMissionsStatusLog_EventsMissions");
            });

            modelBuilder.Entity<EventsMissionsType>(entity =>
            {
                entity.HasKey(e => e.EventsMissionsTypesId).HasName("PK_EventsMissionTypeRel");

                entity.HasOne(d => d.EventsMission).WithMany(p => p.EventsMissionsTypes)
                    .HasForeignKey(d => d.EventsMissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventsMissionTypeRel_EventsMissions");

                entity.HasOne(d => d.EventsMissionTypeDim).WithMany(p => p.EventsMissionsTypes)
                    .HasForeignKey(d => d.EventsMissionTypeDimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventsMissionTypeRel_EventsMissionTypeDim");
            });

            modelBuilder.Entity<EventsOvertimeReport>(entity =>
            {
                entity.ToTable("EventsOvertimeReport");

                entity.Property(e => e.AttendanceInHours).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.AttendanceInMinutes).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.EventName).HasMaxLength(100);
                entity.Property(e => e.JobType).HasMaxLength(200);
                entity.Property(e => e.OvertimeAllowance).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.OvertimeDate).HasColumnType("datetime");
                entity.Property(e => e.PersonName).HasMaxLength(200);
                entity.Property(e => e.PersonUserName).HasMaxLength(256);
                entity.Property(e => e.TotalAllowance).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.VehicleAllowance).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.EventsOvertimeReportConfigurations).WithMany(p => p.EventsOvertimeReports)
                    .HasForeignKey(d => d.EventsOvertimeReportConfigurationsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventsOvertimeReport_EventsOvertimeReportConfigurations");
            });

            modelBuilder.Entity<EventsOvertimeReportBackup>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("EventsOvertimeReportBackup");

                entity.Property(e => e.AttendanceInHours).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.AttendanceInMinutes).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.EventName).HasMaxLength(100);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.JobType).HasMaxLength(200);
                entity.Property(e => e.OvertimeAllowance).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.OvertimeDate).HasColumnType("datetime");
                entity.Property(e => e.PersonName).HasMaxLength(200);
                entity.Property(e => e.PersonUserName).HasMaxLength(256);
                entity.Property(e => e.TotalAllowance).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.VehicleAllowance).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<EventsOvertimeReportConfiguration>(entity =>
            {
                entity.Property(e => e.DailyAllowanceForCalledPerson).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.OvertimeAllowancePerHour).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.VehicleAllowanceAmount).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<EventsPatrol>(entity =>
            {
                entity.HasKey(e => e.EventPatrolId).HasName("PK_EventAttandacePatrol");

                entity.ToTable("EventsPatrol");

                entity.Property(e => e.DelivaryDateTime).HasColumnType("datetime");
                entity.Property(e => e.RecivedDatetime).HasColumnType("datetime");

                entity.HasOne(d => d.Area).WithMany(p => p.EventsPatrolAreas)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_EventAttandacePatrol_Area");

                entity.HasOne(d => d.Patrol).WithMany(p => p.EventsPatrols)
                    .HasForeignKey(d => d.PatrolId)
                    .HasConstraintName("FK_EventAttandacePatrol_Item");

                entity.HasOne(d => d.RecivedByNavigation).WithMany(p => p.EventsPatrols)
                    .HasForeignKey(d => d.RecivedBy)
                    .HasConstraintName("FK_EventAttandacePatrol_Person");

                entity.HasOne(d => d.Sector).WithMany(p => p.EventsPatrolSectors)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_EventAttandacePatrol_SectorDIM");
            });

            modelBuilder.Entity<EventsPerson>(entity =>
            {
                entity.HasKey(e => e.EventPersonId);

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ModificationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventsPersonCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__EventsPer__Creat__018DF0F7");

                entity.HasOne(d => d.Event).WithMany(p => p.EventsPeople)
                    .HasForeignKey(d => d.EventId)
                    .HasConstraintName("FK_EventsPersons_Events");

                entity.HasOne(d => d.EventsEmployeeType).WithMany(p => p.EventsPeople)
                    .HasForeignKey(d => d.EventsEmployeeTypeId)
                    .HasConstraintName("FK_EventsPersons_EventsEmployeeType");

                entity.HasOne(d => d.EventsPersonJobType).WithMany(p => p.EventsPeople)
                    .HasForeignKey(d => d.EventsPersonJobTypeId)
                    .HasConstraintName("FK_EventsPersons_EventsPersonJobType");

                entity.HasOne(d => d.Person).WithMany(p => p.EventsPersonPeople)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_EventsPersons_Person");
            });

            modelBuilder.Entity<EventsPersonJobTypeDim>(entity =>
            {
                entity.HasKey(e => e.EventsPersonJobTypeId).HasName("PK_EventsPersonJobType");

                entity.ToTable("EventsPersonJobTypeDim");

                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(200)
                    .HasColumnName("Description_Ar");
                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(200)
                    .HasColumnName("Description_En");
            });

            modelBuilder.Entity<EventsSourceDim>(entity =>
            {
                entity.HasKey(e => e.EventSourceId).HasName("PK_EventSourceDim");

                entity.ToTable("EventsSourceDim");

                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.EnDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<EventsStatusDim>(entity =>
            {
                entity.HasKey(e => e.EventsStatusId);

                entity.ToTable("EventsStatusDim");

                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<EventsStatusLog>(entity =>
            {
                entity.HasKey(e => e.EventStatusLogId);

                entity.ToTable("EventsStatusLog");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventsStatusLogs)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__EventsSta__Creat__046A5DA2");

                entity.HasOne(d => d.Event).WithMany(p => p.EventsStatusLogs)
                    .HasForeignKey(d => d.EventId)
                    .HasConstraintName("FK_EventsStatusLog_Events");

                entity.HasOne(d => d.EventStatus).WithMany(p => p.EventsStatusLogs)
                    .HasForeignKey(d => d.EventStatusId)
                    .HasConstraintName("FK_EventsStatusLog_EventsStatusDim");
            });

            modelBuilder.Entity<EventsSupervisor>(entity =>
            {
                entity.HasKey(e => e.EventSupervisorId);

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ModificationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.EventsSupervisorCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__EventsSup__Creat__1F4B9E6C");

                entity.HasOne(d => d.Event).WithMany(p => p.EventsSupervisors)
                    .HasForeignKey(d => d.EventId)
                    .HasConstraintName("FK_EventsSupervisors_Events");

                entity.HasOne(d => d.Person).WithMany(p => p.EventsSupervisorPeople)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_EventsSupervisors_Person");
            });

            modelBuilder.Entity<EvgPaymentStatusDim>(entity =>
            {
                entity.HasKey(e => e.EvgPaymentStatusId);

                entity.ToTable("EvgPaymentStatusDim");

                entity.Property(e => e.EvgPaymentStatusId).ValueGeneratedNever();
                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<Evidence>(entity =>
            {
                entity.HasKey(e => e.ItemId).HasFillFactor(80);

                entity.ToTable("Evidence");

                entity.Property(e => e.ItemId).ValueGeneratedNever();
                entity.Property(e => e.EvidenceAmount).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.EvidenceCollector).WithMany(p => p.Evidences)
                    .HasForeignKey(d => d.EvidenceCollectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Evidence_Person");

                entity.HasOne(d => d.Item).WithOne(p => p.Evidence)
                    .HasForeignKey<Evidence>(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Evidence_Item");
            });

            modelBuilder.Entity<EvidenceGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EvidenceGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.EvidenceAmount).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EvidenceView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("EvidenceView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.EvidenceAmount).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ExtendedActivityEventsTable>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_ExtendedActivityInstanceEventsTable_Id");

                entity.ToTable("ExtendedActivityEventsTable", "Microsoft.Samples.Tracking");

                entity.Property(e => e.ActivityId).HasMaxLength(256);
                entity.Property(e => e.ActivityInstanceId).HasMaxLength(256);
                entity.Property(e => e.ActivityName).HasMaxLength(1024);
                entity.Property(e => e.ActivityRecordType).HasMaxLength(128);
                entity.Property(e => e.ActivityType).HasMaxLength(2048);
                entity.Property(e => e.ChildActivityId).HasMaxLength(256);
                entity.Property(e => e.ChildActivityInstanceId).HasMaxLength(256);
                entity.Property(e => e.ChildActivityName).HasMaxLength(1024);
                entity.Property(e => e.ChildActivityType).HasMaxLength(2048);
                entity.Property(e => e.FaultHandlerActivityId).HasMaxLength(256);
                entity.Property(e => e.FaultHandlerActivityInstanceId).HasMaxLength(256);
                entity.Property(e => e.FaultHandlerActivityName).HasMaxLength(1024);
                entity.Property(e => e.FaultHandlerActivityType).HasMaxLength(2048);
                entity.Property(e => e.TimeCreated).HasColumnType("datetime");
            });

            modelBuilder.Entity<ExternalUserPasswordChangeHistory>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__External__3214EC075EE38C60");

                entity.ToTable("ExternalUserPasswordChangeHistory");

                entity.Property(e => e.ChangeDate).HasColumnType("datetime");
                entity.Property(e => e.PasswordHash)
                    .HasMaxLength(150)
                    .IsUnicode(false);
                entity.Property(e => e.Salt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.User).WithMany(p => p.ExternalUserPasswordChangeHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExternalUserPasswordChangeHistory_MobileUser");
            });

            modelBuilder.Entity<Facility>(entity =>
            {
                entity.HasKey(e => e.OrganizationId).HasFillFactor(80);

                entity.ToTable("Facility");

                entity.Property(e => e.OrganizationId).ValueGeneratedNever();
                entity.Property(e => e.FacilityCapacity).HasDefaultValue(1);

                entity.HasOne(d => d.FacilityCategory).WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.FacilityCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Facility_FacilityCategoryDIM");

                entity.HasOne(d => d.FacilityMemberCategory).WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.FacilityMemberCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Facility_FacilityMemberCategoryDIM");

                entity.HasOne(d => d.FacilitySecurityLevel).WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.FacilitySecurityLevelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Facility_FacilitySecurityLevelDIM");

                entity.HasOne(d => d.Organization).WithOne(p => p.Facility)
                    .HasForeignKey<Facility>(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Facility_Organization");
            });

            modelBuilder.Entity<FacilityBedAssignmentDim>(entity =>
            {
                entity.HasKey(e => e.FacilityBedAssignmentId)
                    .HasName("PK__Facility__C447DAAF6A4D477F")
                    .HasFillFactor(80);

                entity.ToTable("FacilityBedAssignmentDIM");

                entity.Property(e => e.Bed).HasMaxLength(200);
                entity.Property(e => e.BedCode).HasMaxLength(50);
                entity.Property(e => e.Block).HasMaxLength(200);
                entity.Property(e => e.BlockCode).HasMaxLength(50);
                entity.Property(e => e.Building).HasMaxLength(200);
                entity.Property(e => e.BuildingCode).HasMaxLength(50);
                entity.Property(e => e.Cell).HasMaxLength(200);
                entity.Property(e => e.CellCode).HasMaxLength(50);
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FacilityBedAssignmentDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FacilityBedAssignmentDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FacilityBedAssignmentDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FacilityBedAssignmentDIMCodeView");

                entity.Property(e => e.FacilityBedAssignmentBed).HasMaxLength(200);
                entity.Property(e => e.FacilityBedAssignmentBlock).HasMaxLength(200);
                entity.Property(e => e.FacilityBedAssignmentBuilding).HasMaxLength(200);
                entity.Property(e => e.FacilityBedAssignmentCell).HasMaxLength(200);
                entity.Property(e => e.FacilityBedAssignmentCode).HasMaxLength(50);
                entity.Property(e => e.FacilityBedAssignmentDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FacilityCategoryDim>(entity =>
            {
                entity.HasKey(e => e.FacilityCategoryId)
                    .HasName("PK__Facility__8AC60D01E60D9FFB")
                    .HasFillFactor(80);

                entity.ToTable("FacilityCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FacilityCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FacilityCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FacilityCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FacilityCategoryDIMCodeView");

                entity.Property(e => e.FacilityCategoryCode).HasMaxLength(50);
                entity.Property(e => e.FacilityCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FacilityGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FacilityGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.FacilityCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityMemberCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilitySecurityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<FacilityMemberCategoryDim>(entity =>
            {
                entity.HasKey(e => e.FacilityMemberCategoryId)
                    .HasName("PK__Facility__001A4F476458DF0C")
                    .HasFillFactor(80);

                entity.ToTable("FacilityMemberCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FacilityMemberCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FacilityMemberCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FacilityMemberCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FacilityMemberCategoryDIMCodeView");

                entity.Property(e => e.FacilityMemberCategoryCode).HasMaxLength(50);
                entity.Property(e => e.FacilityMemberCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FacilitySecurityLevelDim>(entity =>
            {
                entity.HasKey(e => e.FacilitySecurityLevelId)
                    .HasName("PK__Facility__250457BFD3A8AC74")
                    .HasFillFactor(80);

                entity.ToTable("FacilitySecurityLevelDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FacilitySecurityLevelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FacilitySecurityLevelDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FacilitySecurityLevelDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FacilitySecurityLevelDIMCodeView");

                entity.Property(e => e.FacilitySecurityLevelCode).HasMaxLength(50);
                entity.Property(e => e.FacilitySecurityLevelDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FacilityView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FacilityView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.FacilityCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityMemberCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityMemberCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilitySecurityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilitySecurityLevelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<FieldsFactorDim>(entity =>
            {
                entity.HasKey(e => e.FieldsFactorId)
                    .HasName("PK__FieldsFa__0C629DA44571819C")
                    .HasFillFactor(80);

                entity.ToTable("FieldsFactorDim");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
            });

            //modelBuilder.Entity<File>(entity =>
            //{
            //    entity.HasKey(e => e.FileId)
            //        .HasName("PK__Files__6F0F98BF8A4F86F7")
            //        .HasFillFactor(80);

            //    entity.HasIndex(e => e.FileGuid, "UQ__Files__6DB18C95B91C00E4")
            //        .IsUnique()
            //        .HasFillFactor(80);

            //    entity.Property(e => e.CreatedDate)
            //        .HasDefaultValueSql("(getdate())")
            //        .HasColumnType("datetime");
            //    entity.Property(e => e.EmailBody)
            //        .HasMaxLength(4000)
            //        .IsUnicode(false);
            //    entity.Property(e => e.FileGuid).HasDefaultValueSql("(newid())");
            //    entity.Property(e => e.FileName).HasMaxLength(100);
            //    entity.Property(e => e.ModifiedDate)
            //        .HasDefaultValueSql("(getdate())")
            //        .HasColumnType("datetime");
            //    entity.Property(e => e.Recepient).HasMaxLength(1000);
            //    entity.Property(e => e.RetryCount).HasDefaultValue(0);
            //    entity.Property(e => e.SendSuccessFully).HasDefaultValue(false);

            //    entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.FileCreatedByNavigations)
            //        .HasForeignKey(d => d.CreatedBy)
            //        .HasConstraintName("FK__Files__CreatedBy__3C6170A6");

            //    entity.HasOne(d => d.FileCategory).WithMany(p => p.Files)
            //        .HasForeignKey(d => d.FileCategoryId)
            //        .HasConstraintName("FK__Files__FileCateg__398503FB");

            //    entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.FileModifiedByNavigations)
            //        .HasForeignKey(d => d.ModifiedBy)
            //        .HasConstraintName("FK__Files__ModifiedB__3D5594DF");

            //    entity.HasOne(d => d.RowStatus).WithMany(p => p.Files)
            //        .HasForeignKey(d => d.RowStatusId)
            //        .HasConstraintName("FK__Files__RowStatus__4032018A");
            //});

            modelBuilder.Entity<FileCategoryDim>(entity =>
            {
                entity.HasKey(e => e.FileCategoryId)
                    .HasName("PK__FileCate__8E6E2B3613608563")
                    .HasFillFactor(80);

                entity.ToTable("FileCategoryDim");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FileCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK__FileCateg__RowSt__2B36E4A4");
            });

            modelBuilder.Entity<FinancialReportHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FinancialReportHelper");

                entity.Property(e => e.AdpreportNumber).HasColumnName("ADPReportNumber");
                entity.Property(e => e.AdpstatusId).HasColumnName("ADPStatusId");
                entity.Property(e => e.PaymentTime).HasColumnType("datetime");
                entity.Property(e => e.StatusId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.UploadedTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<FingerPrintPatternCategoryDim>(entity =>
            {
                entity.HasKey(e => e.FingerPrintPatternCategoryId)
                    .HasName("PK__FingerPr__08A7029E2EC7AAFE")
                    .HasFillFactor(80);

                entity.ToTable("FingerPrintPatternCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.Fpc)
                    .HasMaxLength(20)
                    .HasColumnName("FPC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FingerPrintPatternCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FingerPrintPatternCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FingerPrintPatternCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FingerPrintPatternCategoryDIMCodeView");

                entity.Property(e => e.FingerPrintPatternCategoryCode).HasMaxLength(20);
                entity.Property(e => e.FingerPrintPatternCategoryDescription).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FingerPrintPatternClassificationDim>(entity =>
            {
                entity.HasKey(e => e.FingerPrintPatternClassificationId)
                    .HasName("PK__FingerPr__1A8D45D27609C58C")
                    .HasFillFactor(80);

                entity.ToTable("FingerPrintPatternClassificationDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FingerPrintPatternClassificationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FingerPrintPatternClassificationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FingerPrintPatternClassificationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FingerPrintPatternClassificationDIMCodeView");

                entity.Property(e => e.FingerPrintPatternClassificationCode).HasMaxLength(20);
                entity.Property(e => e.FingerPrintPatternClassificationDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FingerprintFingerDim>(entity =>
            {
                entity.HasKey(e => e.FingerPrintFingerId)
                    .HasName("PK__Fingerpr__9C963B0AFCE7753A")
                    .HasFillFactor(80);

                entity.ToTable("FingerprintFingerDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Finger).HasMaxLength(20);
                entity.Property(e => e.Position).HasMaxLength(20);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FingerprintFingerDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FingerprintFingerDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FingerprintFingerDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FingerprintFingerDIMCodeView");

                entity.Property(e => e.FingerprintFingerCode).HasMaxLength(50);
                entity.Property(e => e.FingerprintFingerDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Firearm>(entity =>
            {
                entity.HasKey(e => e.ItemId).HasFillFactor(80);

                entity.ToTable("Firearm");

                entity.Property(e => e.ItemId).ValueGeneratedNever();
                entity.Property(e => e.AutomaticIndicator).HasComputedColumnSql("(case [FirearmActionCategoryId] when (2) then (1) else (0) end)", false);
                entity.Property(e => e.FirearmActionCategoryId).HasDefaultValue(1);
                entity.Property(e => e.FirearmCategoryId).HasDefaultValue(1);
                entity.Property(e => e.FirearmFinishId).HasDefaultValue(1);
                entity.Property(e => e.FirearmGageCaliberId).HasDefaultValue(1);
                entity.Property(e => e.FirearmGripId).HasDefaultValue(1);

                entity.HasOne(d => d.FirearmActionCategory).WithMany(p => p.Firearms)
                    .HasForeignKey(d => d.FirearmActionCategoryId)
                    .HasConstraintName("FirearmActionTypeDIM_Firearm_FK1");

                entity.HasOne(d => d.FirearmCategory).WithMany(p => p.Firearms)
                    .HasForeignKey(d => d.FirearmCategoryId)
                    .HasConstraintName("FirearmTypeDIM_Firearm_FK1");

                entity.HasOne(d => d.FirearmFinish).WithMany(p => p.Firearms)
                    .HasForeignKey(d => d.FirearmFinishId)
                    .HasConstraintName("FK_Firearm_FirearmFinishDIM");

                entity.HasOne(d => d.FirearmGageCaliber).WithMany(p => p.Firearms)
                    .HasForeignKey(d => d.FirearmGageCaliberId)
                    .HasConstraintName("FirearmGageCaliberDIM_Firearm_FK1");

                entity.HasOne(d => d.FirearmGrip).WithMany(p => p.Firearms)
                    .HasForeignKey(d => d.FirearmGripId)
                    .HasConstraintName("FirearmGripDIM_Firearm_FK1");

                entity.HasOne(d => d.Item).WithOne(p => p.Firearm)
                    .HasForeignKey<Firearm>(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Firearm_FK1");
            });

            modelBuilder.Entity<FirearmActionCategoryDim>(entity =>
            {
                entity.HasKey(e => e.FirearmActionCategoryId)
                    .HasName("PK__FirearmA__1799A22CC298125E")
                    .HasFillFactor(80);

                entity.ToTable("FirearmActionCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FirearmActionCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FirearmActionCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FirearmActionCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FirearmActionCategoryDIMCodeView");

                entity.Property(e => e.FirearmActionCategoryCode).HasMaxLength(20);
                entity.Property(e => e.FirearmActionCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FirearmCategoryDim>(entity =>
            {
                entity.HasKey(e => e.FirearmCategoryId)
                    .HasName("PK__FirearmC__0EB1797A1BD1B637")
                    .HasFillFactor(80);

                entity.ToTable("FirearmCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FirearmCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FirearmCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FirearmCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FirearmCategoryDIMCodeView");

                entity.Property(e => e.FirearmCategoryCode).HasMaxLength(20);
                entity.Property(e => e.FirearmCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FirearmFinishDim>(entity =>
            {
                entity.HasKey(e => e.FirearmFinishId)
                    .HasName("PK__FirearmF__D32BA9D85683EDA0")
                    .HasFillFactor(80);

                entity.ToTable("FirearmFinishDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FirearmFinishDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FirearmFinishDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FirearmFinishDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FirearmFinishDIMCodeView");

                entity.Property(e => e.FirearmFinishCode).HasMaxLength(20);
                entity.Property(e => e.FirearmFinishDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FirearmGageCaliberDim>(entity =>
            {
                entity.HasKey(e => e.FirearmGageCaliberId)
                    .HasName("PK__FirearmG__BA72697425D5E79E")
                    .HasFillFactor(80);

                entity.ToTable("FirearmGageCaliberDIM");

                entity.Property(e => e.Category).HasMaxLength(20);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FirearmGageCaliberDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FirearmGageCaliberDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FirearmGageCaliberDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FirearmGageCaliberDIMCodeView");

                entity.Property(e => e.FirearmGageCaliberCode).HasMaxLength(20);
                entity.Property(e => e.FirearmGageCaliberDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FirearmGripDim>(entity =>
            {
                entity.HasKey(e => e.FirearmGripId)
                    .HasName("PK__FirearmG__054990AE6D9945C7")
                    .HasFillFactor(80);

                entity.ToTable("FirearmGripDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.FirearmGripDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_FirearmGripDIM_RowStatusDIM");
            });

            modelBuilder.Entity<FirearmGripDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FirearmGripDIMCodeView");

                entity.Property(e => e.FirearmGripCode).HasMaxLength(20);
                entity.Property(e => e.FirearmGripDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FirearmGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FirearmGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FirearmActionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FirearmView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("FirearmView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FirearmActionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmActionCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FmsbranchOrder>(entity =>
            {
                entity.ToTable("FMSBranchOrder");
            });

            modelBuilder.Entity<FmsbranchUser>(entity =>
            {
                entity.ToTable("FMSBranchUser");

                entity.Property(e => e.FmsbranchId).HasColumnName("FMSBranchId");

                entity.HasOne(d => d.User).WithMany(p => p.FmsbranchUsers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__FMSBranch__UserI__2E5FCC17");
            });

            modelBuilder.Entity<FmsexcludedBranch>(entity =>
            {
                entity.ToTable("FMSExcludedBranch");
            });

            modelBuilder.Entity<FmssubBranchUser>(entity =>
            {
                entity.ToTable("FMSSubBranchUser");

                entity.Property(e => e.FmssubBranchId).HasColumnName("FMSSubBranchId");

                entity.HasOne(d => d.User).WithMany(p => p.FmssubBranchUsers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__FMSSubBra__UserI__313C38C2");
            });

            modelBuilder.Entity<GenderDim>(entity =>
            {
                entity.HasKey(e => e.GenderId)
                    .HasName("PK__GenderDI__4E24E9F7DC0095FE")
                    .HasFillFactor(80);

                entity.ToTable("GenderDIM");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.GenderDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_GenderDIM_RowStatusDIM");
            });

            modelBuilder.Entity<GeneralUnstatisfiedSurveyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeneralUnstatisfiedSurveyView");

                entity.Property(e => e.Emirate).HasMaxLength(200);
            });

            modelBuilder.Entity<GeoCensusTractDim>(entity =>
            {
                entity.HasKey(e => e.GeoCensusTractId)
                    .HasName("PK__GeoCensu__83E52B007402C5CB")
                    .HasFillFactor(80);

                entity.ToTable("GeoCensusTractDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CountyName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.StateName).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.GeoCensusTractDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_GeoCensusTractDIM_RowStatusDIM");
            });

            modelBuilder.Entity<GeoCensusTractDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeoCensusTractDIMCodeView");

                entity.Property(e => e.GeoCensusTractCode).HasMaxLength(50);
                entity.Property(e => e.GeoCensusTractDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<GeoCityDim>(entity =>
            {
                entity.HasKey(e => e.GeoCityId).HasFillFactor(80);

                entity.ToTable("GeoCityDIM");

                entity.Property(e => e.CityCode).HasMaxLength(50);
                entity.Property(e => e.CityName).HasMaxLength(50);
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CountyName).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.StateName).HasMaxLength(50);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.GeoCityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_GeoCityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<GeoCityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeoCityDIMCodeView");

                entity.Property(e => e.GeoCityCityName).HasMaxLength(50);
                entity.Property(e => e.GeoCityCode).HasMaxLength(50);
                entity.Property(e => e.GeoCityCountyName).HasMaxLength(50);
                entity.Property(e => e.GeoCityStateName).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<GeoCountryDim>(entity =>
            {
                entity.HasKey(e => e.GeoCountryId).HasFillFactor(80);

                entity.ToTable("GeoCountryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CountryCode).HasMaxLength(50);
                entity.Property(e => e.CountryFips104)
                    .HasMaxLength(50)
                    .HasColumnName("CountryFIPS104");
                entity.Property(e => e.CountryLongName).HasMaxLength(200);
                entity.Property(e => e.CountryName).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.GeoCountryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_GeoCountryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<GeoCountryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeoCountryDIMCodeView");

                entity.Property(e => e.GeoCountryCode).HasMaxLength(50);
                entity.Property(e => e.GeoCountryCountryName).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<GeoCountyDim>(entity =>
            {
                entity.HasKey(e => e.GeoCountyId).HasFillFactor(80);

                entity.ToTable("GeoCountyDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CountyCode).HasMaxLength(50);
                entity.Property(e => e.CountyName).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.StateName).HasMaxLength(50);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.GeoCountyDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_GeoCountyDIM_RowStatusDIM");
            });

            modelBuilder.Entity<GeoCountyDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeoCountyDIMCodeView");

                entity.Property(e => e.GeoCountyCode).HasMaxLength(50);
                entity.Property(e => e.GeoCountyCountyName).HasMaxLength(50);
                entity.Property(e => e.GeoCountyStateName).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<GeoLeodim>(entity =>
            {
                entity.HasKey(e => e.GeoLeoid)
                    .HasName("GeoLEODIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("GeoLEODIM");

                entity.Property(e => e.GeoLeoid).HasColumnName("GeoLEOId");
                entity.Property(e => e.Beat).HasMaxLength(50);
                entity.Property(e => e.BeatCode).HasMaxLength(20);
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.District).HasMaxLength(50);
                entity.Property(e => e.DistrictCode).HasMaxLength(20);
                entity.Property(e => e.Division).HasMaxLength(50);
                entity.Property(e => e.DivisionCode).HasMaxLength(20);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Sector).HasMaxLength(50);
                entity.Property(e => e.SectorCode).HasMaxLength(20);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Organization).WithMany(p => p.GeoLeodims)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GeoLEODIM_Organization");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.GeoLeodims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_GeoLEODIM_RowStatusDIM");
            });

            modelBuilder.Entity<GeoLeodimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeoLEODIMCodeView");

                entity.Property(e => e.GeoLeobeat)
                    .HasMaxLength(50)
                    .HasColumnName("GeoLEOBeat");
                entity.Property(e => e.GeoLeocode)
                    .HasMaxLength(50)
                    .HasColumnName("GeoLEOCode");
                entity.Property(e => e.GeoLeodescription)
                    .HasMaxLength(100)
                    .HasColumnName("GeoLEODescription");
                entity.Property(e => e.GeoLeodistrict)
                    .HasMaxLength(50)
                    .HasColumnName("GeoLEODistrict");
                entity.Property(e => e.GeoLeodivision)
                    .HasMaxLength(50)
                    .HasColumnName("GeoLEODivision");
                entity.Property(e => e.GeoLeosector)
                    .HasMaxLength(50)
                    .HasColumnName("GeoLEOSector");
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<GeoLocationSubDivisionDim>(entity =>
            {
                entity.HasKey(e => e.GeoLocationSubDivisionId).HasFillFactor(80);

                entity.ToTable("GeoLocationSubDivisionDIM");

                entity.Property(e => e.City).HasMaxLength(100);
                entity.Property(e => e.County).HasMaxLength(50);
                entity.Property(e => e.State).HasMaxLength(50);
                entity.Property(e => e.SubDivision).HasMaxLength(100);
                entity.Property(e => e.SubDivisionCode).HasMaxLength(100);

                entity.HasOne(d => d.RowStatus).WithMany(p => p.GeoLocationSubDivisionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_GeoLocationSubDivisionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<GeoLocationSubDivisionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeoLocationSubDivisionDIMCodeView");

                entity.Property(e => e.GeoLocationSubDivisionCity).HasMaxLength(100);
                entity.Property(e => e.GeoLocationSubDivisionCounty).HasMaxLength(50);
                entity.Property(e => e.GeoLocationSubDivisionState).HasMaxLength(50);
                entity.Property(e => e.GeoLocationSubDivisionSubDivision).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<GeoStateDim>(entity =>
            {
                entity.HasKey(e => e.GeoStateId).HasFillFactor(80);

                entity.ToTable("GeoStateDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.StateCode).HasMaxLength(5);
                entity.Property(e => e.StateName).HasMaxLength(50);

                entity.HasOne(d => d.RowStatus).WithMany(p => p.GeoStateDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_GeoStateDIM_RowStatusDIM");
            });

            modelBuilder.Entity<GeoStateDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeoStateDIMCodeView");

                entity.Property(e => e.GeoStateCode).HasMaxLength(50);
                entity.Property(e => e.GeoStateStateName).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<GeoZipDim>(entity =>
            {
                entity.HasKey(e => e.GeoZipId)
                    .HasName("GeoLocationDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("GeoZipDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ZipCode).HasMaxLength(10);

                entity.HasOne(d => d.RowStatus).WithMany(p => p.GeoZipDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_GeoZipDIM_RowStatusDIM");
            });

            modelBuilder.Entity<GeoZipDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GeoZipDIMCodeView");

                entity.Property(e => e.GeoZipCode).HasMaxLength(50);
                entity.Property(e => e.GeoZipZipCode).HasMaxLength(10);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<GetAccidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetAccidentDetails");

                entity.Property(e => e.AdpreportNumber).HasColumnName("ADPReportNumber");
                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.OwnerTcf)
                    .HasMaxLength(3000)
                    .HasColumnName("OwnerTCF");
                entity.Property(e => e.PlateColor).HasMaxLength(200);
                entity.Property(e => e.PlateColorEn).HasColumnName("PlateColorEN");
                entity.Property(e => e.PlateKindEn).HasColumnName("PlateKindEN");
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.PlateSource).HasMaxLength(100);
                entity.Property(e => e.PlateSourceEn).HasColumnName("PlateSourceEN");
                entity.Property(e => e.PlateType).HasMaxLength(200);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.VehicleBrand).HasMaxLength(100);
                entity.Property(e => e.VehicleBrandEn).HasColumnName("VehicleBrandEN");
                entity.Property(e => e.VehicleModel).HasMaxLength(100);
                entity.Property(e => e.VehicleModelEn).HasColumnName("VehicleModelEN");
                entity.Property(e => e.VehicleRole).HasMaxLength(100);
                entity.Property(e => e.VehicleType).HasMaxLength(150);
                entity.Property(e => e.VehicleTypeEn).HasColumnName("VehicleTypeEN");
                entity.Property(e => e.VehicleTypeId).HasColumnName("VehicleTypeID");
            });

            modelBuilder.Entity<GetActiveDirectoryPersonsFullDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetActiveDirectoryPersonsFullDetails");

                entity.Property(e => e.Email).HasMaxLength(256);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<GetAreaCenter>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetAreaCenters", "development");

                entity.Property(e => e.AreaId).ValueGeneratedOnAdd();
                entity.Property(e => e.Lat).HasColumnName("lat");
                entity.Property(e => e.Long).HasColumnName("long");
            });

            modelBuilder.Entity<GetAreaToBeAddedAutoDispatch>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetAreaToBeAddedAutoDispatch");

                entity.Property(e => e.AreaId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<GetAreaToBeAddedDetectLocation>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetAreaToBeAddedDetectLocation");

                entity.Property(e => e.AreaId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<GetAutoDispatchAreaDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetAutoDispatchAreaDetails");
            });

            modelBuilder.Entity<GetCreateAccidentCauseDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetCreateAccidentCauseData");

                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StrMainCause)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GetCreateAccidentDamagedPartDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetCreateAccidentDamagedPartData");

                entity.Property(e => e.LngSerial)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<GetCreateAccidentInvolvedData2>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetCreateAccidentInvolvedData2");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");
                entity.Property(e => e.CountryCode).HasMaxLength(50);
                entity.Property(e => e.DtDrivingLicenseExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.DtInsuranceExpiry).HasColumnType("datetime");
                entity.Property(e => e.IntPcolorCode).HasColumnName("IntPColorCode");
                entity.Property(e => e.IntPkindCode).HasColumnName("IntPKindCode");
                entity.Property(e => e.IntPsourceCode).HasColumnName("IntPSourceCode");
                entity.Property(e => e.IntPtypeCode).HasColumnName("IntPTypeCode");
                entity.Property(e => e.IntVehYearFull).HasMaxLength(100);
                entity.Property(e => e.LngDrivingLicenseNumber).HasMaxLength(3000);
                entity.Property(e => e.LngOwnTcfNumber).HasMaxLength(3000);
                entity.Property(e => e.LngTcfNumber).HasMaxLength(3000);
                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StrChaseNumber).HasMaxLength(3000);
                entity.Property(e => e.StrDriverName).HasMaxLength(3000);
                entity.Property(e => e.StrDrvAwarenessDesc)
                    .HasMaxLength(6)
                    .IsUnicode(false);
                entity.Property(e => e.StrInsurancePolicy).HasMaxLength(15);
                entity.Property(e => e.StrIsChemicalDanger)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.StrIsWinTinted)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.StrOwnerName).HasMaxLength(3000);
                entity.Property(e => e.StrPno)
                    .HasMaxLength(3000)
                    .HasColumnName("StrPNo");
            });

            modelBuilder.Entity<GetCreateAccidentInvolvedDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetCreateAccidentInvolvedData");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");
                entity.Property(e => e.DtDrivingLicenseExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.DtInsuranceExpiry).HasColumnType("datetime");
                entity.Property(e => e.IntPcolorCode).HasColumnName("IntPColorCode");
                entity.Property(e => e.IntPkindCode).HasColumnName("IntPKindCode");
                entity.Property(e => e.IntPsourceCode).HasColumnName("IntPSourceCode");
                entity.Property(e => e.IntPtypeCode).HasColumnName("IntPTypeCode");
                entity.Property(e => e.IntVehYearFull).HasMaxLength(100);
                entity.Property(e => e.LngDrivingLicenseNumber).HasMaxLength(3000);
                entity.Property(e => e.LngOwnTcfNumber).HasMaxLength(3000);
                entity.Property(e => e.LngTcfNumber).HasMaxLength(3000);
                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StrChaseNumber).HasMaxLength(3000);
                entity.Property(e => e.StrDriverName).HasMaxLength(3000);
                entity.Property(e => e.StrDrvAwarenessDesc)
                    .HasMaxLength(6)
                    .IsUnicode(false);
                entity.Property(e => e.StrInsurancePolicy).HasMaxLength(15);
                entity.Property(e => e.StrIsChemicalDanger)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.StrIsWinTinted)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.StrOwnerName).HasMaxLength(3000);
                entity.Property(e => e.StrPno)
                    .HasMaxLength(3000)
                    .HasColumnName("StrPNo");
            });

            modelBuilder.Entity<GetCreateAccidentMasterDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetCreateAccidentMasterData");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.CrossingStreetCode).HasMaxLength(50);
                entity.Property(e => e.IntSctcode).HasColumnName("IntSCTCode");
                entity.Property(e => e.ReportDatetime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.RoadSpeed).HasMaxLength(100);
                entity.Property(e => e.StrStSurfaceDesc)
                    .HasMaxLength(6)
                    .IsUnicode(false);
                entity.Property(e => e.StreetCode).HasMaxLength(50);
            });

            modelBuilder.Entity<GetCreateDamagedGovProperty>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetCreateDamagedGovProperty");

                entity.Property(e => e.GovAuthorityCode).HasMaxLength(50);
                entity.Property(e => e.GovPropertyCode).HasMaxLength(50);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<GetDetectLocationAreaDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetDetectLocationAreaDetails");
            });

            modelBuilder.Entity<GetDeviceListByRole>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetDeviceListByRole");

                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
            });

            modelBuilder.Entity<GetFullReportDetailsForMobileUser>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetFullReportDetailsForMobileUser");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");
                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.DriverName).HasMaxLength(3000);
                entity.Property(e => e.DriverTcn)
                    .HasMaxLength(3000)
                    .HasColumnName("DriverTCN");
                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(3000);
                entity.Property(e => e.InsuranceTypeId).HasColumnName("InsuranceTypeID");
                entity.Property(e => e.IssueDate).HasColumnType("datetime");
                entity.Property(e => e.LicenseNumber).HasMaxLength(3000);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(3000);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);
            });

            modelBuilder.Entity<GetFullReportDetailsForMotoriIntegration>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("getFullReportDetailsForMotoriIntegration");

                entity.Property(e => e.AccidentTypeName).HasMaxLength(100);
                entity.Property(e => e.BirthDate).HasColumnType("datetime");
                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.CityName).HasMaxLength(200);
                entity.Property(e => e.DriverName).HasMaxLength(3000);
                entity.Property(e => e.DriverTcn)
                    .HasMaxLength(3000)
                    .HasColumnName("DriverTCN");
                entity.Property(e => e.EasternCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");
                entity.Property(e => e.InsuranceCompanyName).HasMaxLength(100);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(3000);
                entity.Property(e => e.InsuranceTypeId).HasColumnName("InsuranceTypeID");
                entity.Property(e => e.InsuranceTypeName).HasMaxLength(100);
                entity.Property(e => e.IssueDate).HasColumnType("datetime");
                entity.Property(e => e.LicenseNumber).HasMaxLength(3000);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(3000);
                entity.Property(e => e.NorthernCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReasonCategoryName).HasMaxLength(500);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StreetName).HasMaxLength(200);
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);
            });

            modelBuilder.Entity<GetFullReportDetailsForMotoriIntegrationAdp>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetFullReportDetailsForMotoriIntegrationADP");

                entity.Property(e => e.AccidentTypeName).HasMaxLength(100);
                entity.Property(e => e.BirthDate).HasColumnType("datetime");
                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.CityName).HasMaxLength(200);
                entity.Property(e => e.DriverName).HasMaxLength(3000);
                entity.Property(e => e.DriverTcn)
                    .HasMaxLength(3000)
                    .HasColumnName("DriverTCN");
                entity.Property(e => e.EasternCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");
                entity.Property(e => e.InsuranceCompanyName).HasMaxLength(100);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(3000);
                entity.Property(e => e.InsuranceTypeId).HasColumnName("InsuranceTypeID");
                entity.Property(e => e.InsuranceTypeName).HasMaxLength(100);
                entity.Property(e => e.IssueDate).HasColumnType("datetime");
                entity.Property(e => e.LicenseNumber).HasMaxLength(3000);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(3000);
                entity.Property(e => e.NorthernCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReasonCategoryName).HasMaxLength(500);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportKindDescription).HasMaxLength(100);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StreetName).HasMaxLength(200);
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);
            });

            modelBuilder.Entity<GetIncidentMapStatus>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetIncidentMapStatus");

                entity.Property(e => e.Isdelivered).HasColumnName("ISDelivered");
                entity.Property(e => e.MapIconStatus)
                    .HasMaxLength(28)
                    .IsUnicode(false);
                entity.Property(e => e.PatrolStatus).HasMaxLength(20);
            });

            modelBuilder.Entity<GetLastDaySupportShortDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetLastDaySupportShortDetails");
            });

            modelBuilder.Entity<GetMdtaccidentReportRequiredField>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetMDTAccidentReportRequiredFields");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.ChasisNumber).HasMaxLength(100);
                entity.Property(e => e.DamagedPartsId)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.DriverDataLicenseExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DriverData_LicenseExpiryDate");
                entity.Property(e => e.DriverDataLicenseNumber)
                    .HasMaxLength(100)
                    .HasColumnName("DriverData_LicenseNumber");
                entity.Property(e => e.DriverDataName)
                    .HasMaxLength(100)
                    .HasColumnName("DriverData_Name");
                entity.Property(e => e.DriverDataTrafficCode)
                    .HasMaxLength(100)
                    .HasColumnName("DriverData_TrafficCode");
                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(100);
                entity.Property(e => e.OwnerDataName)
                    .HasMaxLength(100)
                    .HasColumnName("OwnerData_Name");
                entity.Property(e => e.OwnerDataTrafficCode)
                    .HasMaxLength(100)
                    .HasColumnName("OwnerData_TrafficCode");
                entity.Property(e => e.PlateNumber).HasMaxLength(100);
                entity.Property(e => e.ReportStatusCode).HasMaxLength(20);
                entity.Property(e => e.VehicleDataInsuranceExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VehicleData_InsuranceExpiryDate");
            });

            modelBuilder.Entity<GetPersonByUserName>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetPersonByUserName");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonCategory).HasMaxLength(20);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<GetReportDetailsDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("GetReportDetailsData");

                entity.Property(e => e.AccidentReason).HasMaxLength(500);
                entity.Property(e => e.AccidentType).HasMaxLength(100);
                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.DriverTcf)
                    .HasMaxLength(3000)
                    .HasColumnName("DriverTCF");
                entity.Property(e => e.InsuranceType).HasMaxLength(100);
                entity.Property(e => e.InsuranceTypeId).HasColumnName("InsuranceTypeID");
                entity.Property(e => e.OwnerTcf)
                    .HasMaxLength(3000)
                    .HasColumnName("OwnerTCF");
                entity.Property(e => e.PlateNo).HasMaxLength(3000);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.ReportType).HasMaxLength(100);
            });

            modelBuilder.Entity<GlassColorDim>(entity =>
            {
                entity.HasKey(e => e.GlassColorId)
                    .HasName("PK__GlassCol__D9B3A5346FE51E11")
                    .HasFillFactor(80);

                entity.ToTable("GlassColorDim");

                entity.Property(e => e.GlassColorId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Hash>(entity =>
            {
                entity.HasKey(e => new { e.Key, e.Field }).HasName("PK_HangFire_Hash");

                entity.ToTable("Hash", "HangFire");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Hash_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

                entity.Property(e => e.Key).HasMaxLength(100);
                entity.Property(e => e.Field).HasMaxLength(100);
            });

            modelBuilder.Entity<HeightMeasureUnitDim>(entity =>
            {
                entity.HasKey(e => e.HeightMeasureUnitId)
                    .HasName("HeightMeasureUnitDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("HeightMeasureUnitDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.HeightMeasureUnitDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_HeightMeasureUnitDIM_RowStatusDIM");
            });

            modelBuilder.Entity<HeightMeasureUnitDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("HeightMeasureUnitDIMCodeView");

                entity.Property(e => e.HeightMeasureUnitCode).HasMaxLength(20);
                entity.Property(e => e.HeightMeasureUnitDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<HighLowDim>(entity =>
            {
                entity.HasKey(e => e.HighLowId)
                    .HasName("HighLowDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("HighLowDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.HighLowDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_HighLowDIM_RowStatusDIM");
            });

            modelBuilder.Entity<HighLowDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("HighLowDIMCodeView");

                entity.Property(e => e.HighLowCode).HasMaxLength(20);
                entity.Property(e => e.HighLowDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccactivityPersonComment>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCActivityPersonComment");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FullName).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccgetMdtTeam>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCGetMdtTeams");
            });

            modelBuilder.Entity<IcccgetMdtVirtualOrganization>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCGetMdtVirtualOrganization");

                entity.Property(e => e.Code).HasMaxLength(20);
            });

            modelBuilder.Entity<IcccincidentCall>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCIncidentCall");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Expr1).HasMaxLength(20);
            });

            modelBuilder.Entity<IcccincidentItem>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCIncidentItem");

                entity.Property(e => e.ActivityCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ActivityItemStatus).HasMaxLength(100);
                entity.Property(e => e.ActivityItemStatusCode).HasMaxLength(20);
                entity.Property(e => e.CodeNumber).HasMaxLength(50);
                entity.Property(e => e.DispatcherName).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategory).HasMaxLength(100);
                entity.Property(e => e.OrganizationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccincidentItemFreePatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCIncidentItemFreePatrol");

                entity.Property(e => e.ActivityCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ActivityItemStatus).HasMaxLength(100);
                entity.Property(e => e.ActivityItemStatusCode).HasMaxLength(20);
                entity.Property(e => e.CodeNumber).HasMaxLength(50);
                entity.Property(e => e.DispatcherName).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategory).HasMaxLength(100);
                entity.Property(e => e.OrganizationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccincidentLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ICCCInci__3214EC0768AB9F6A");

                entity.ToTable("ICCCIncidentLog");

                entity.Property(e => e.LogDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Notes).HasMaxLength(250);

                entity.HasOne(d => d.IncidentRequest).WithMany(p => p.IcccincidentLogs)
                    .HasForeignKey(d => d.IncidentRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICCCIncidentLog_IncidentRequest");

                entity.HasOne(d => d.NewStatusNavigation).WithMany(p => p.IcccincidentLogNewStatusNavigations)
                    .HasForeignKey(d => d.NewStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICCCIncidentLog_Status2");

                entity.HasOne(d => d.OldStatusNavigation).WithMany(p => p.IcccincidentLogOldStatusNavigations)
                    .HasForeignKey(d => d.OldStatus)
                    .HasConstraintName("FK_ICCCIncidentLog_Status1");

                entity.HasOne(d => d.Patrol).WithMany(p => p.IcccincidentLogs)
                    .HasForeignKey(d => d.PatrolId)
                    .HasConstraintName("FK_ICCCIncidentLog_Item");

                entity.HasOne(d => d.Person).WithMany(p => p.IcccincidentLogs)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_ICCCIncidentLog_Person");
            });

            modelBuilder.Entity<IcccincidentRequest>(entity =>
            {
                entity.ToTable("ICCCIncidentRequest");

                entity.Property(e => e.IcccincidentId).HasColumnName("ICCCIncidentId");
                entity.Property(e => e.IcccincidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ICCCIncidentNumber");
                entity.Property(e => e.IcccincidentRequestInfoId).HasColumnName("ICCCIncidentRequestInfoID");
                entity.Property(e => e.Icccservice).HasColumnName("ICCCService");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.ReceivedTime).HasColumnType("datetime");
                entity.Property(e => e.RequestDateTime).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IcccincidentRequestInfo).WithMany(p => p.IcccincidentRequests)
                    .HasForeignKey(d => d.IcccincidentRequestInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICCCIncidentRequest_ICCCIncidentRequestInfo");

                entity.HasOne(d => d.ReceivedByNavigation).WithMany(p => p.IcccincidentRequests)
                    .HasForeignKey(d => d.ReceivedBy)
                    .HasConstraintName("FK_ICCCIncidentRequest_Person");

                entity.HasOne(d => d.RequestStatusNavigation).WithMany(p => p.IcccincidentRequests)
                    .HasForeignKey(d => d.RequestStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICCCIncidentRequest_ICCCRequestStatus");

                entity.HasOne(d => d.SaaedIncident).WithMany(p => p.IcccincidentRequests)
                    .HasForeignKey(d => d.SaaedIncidentId)
                    .HasConstraintName("FK_ICCCIncidentRequest_Activity");

                entity.HasOne(d => d.SmartDispatchingStatus).WithMany(p => p.IcccincidentRequests)
                    .HasForeignKey(d => d.SmartDispatchingStatusId)
                    .HasConstraintName("FK_IncidentRequest_SmartDispatchingStatus");
            });

            modelBuilder.Entity<IcccincidentRequestDetail>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ICCCInci__3214EC0740566535");

                entity.ToTable("ICCCIncidentRequestDetail");

                entity.Property(e => e.ConfirmationTime).HasColumnType("datetime");
                entity.Property(e => e.DispatchTime).HasColumnType("datetime");
                entity.Property(e => e.ExpectedTime).HasColumnType("decimal(10, 2)");
                entity.Property(e => e.IcccincidentId).HasColumnName("ICCCIncidentId");

                entity.HasOne(d => d.Area).WithMany(p => p.IcccincidentRequestDetails)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentRequestDetail_Area");

                entity.HasOne(d => d.Icccincident).WithMany(p => p.IcccincidentRequestDetails)
                    .HasForeignKey(d => d.IcccincidentId)
                    .HasConstraintName("FK_IncidentRequestDetail_Incident");
            });

            modelBuilder.Entity<IcccincidentRequestInfo>(entity =>
            {
                entity.ToTable("ICCCIncidentRequestInfo");

                entity.Property(e => e.IcccincidentRequestInfoId).HasColumnName("ICCCIncidentRequestInfoID");
                entity.Property(e => e.CallerName).HasMaxLength(100);
                entity.Property(e => e.CallerNumber).HasMaxLength(250);
                entity.Property(e => e.IncidentType).HasMaxLength(200);
                entity.Property(e => e.IsAml)
                    .HasDefaultValue(false)
                    .HasColumnName("isAml");
                entity.Property(e => e.IsDetectLocation).HasColumnName("isDetectLocation");
                entity.Property(e => e.SourceOperationRoomId).HasColumnName("SourceOperationRoomID");
            });

            modelBuilder.Entity<IcccincidentWorkFlow>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCIncidentWorkFlow");

                entity.Property(e => e.ActivityCategory).HasMaxLength(100);
                entity.Property(e => e.AssignTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentStatusCode).HasMaxLength(50);
                entity.Property(e => e.IncidentStatusDescription).HasMaxLength(100);
                entity.Property(e => e.IncworkFlowGuid).HasColumnName("INCWorkFlowGuid");
                entity.Property(e => e.ItemStatusCode).HasMaxLength(20);
                entity.Property(e => e.Organization).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.PlateNumber).HasMaxLength(50);
                entity.Property(e => e.StatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccintegrationLog>(entity =>
            {
                entity.ToTable("ICCCIntegrationLog");

                entity.Property(e => e.IcccincidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ICCCIncidentNumber");
                entity.Property(e => e.LoggedTime).HasColumnType("datetime");
                entity.Property(e => e.Method).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccnewIncidentLog>(entity =>
            {
                entity.ToTable("ICCCNewIncidentLog");

                entity.Property(e => e.IcccincidentNumber)
                    .HasMaxLength(500)
                    .HasColumnName("ICCCIncidentNumber");
                entity.Property(e => e.IcccincidentRequestId).HasColumnName("ICCCIncidentRequestId");
            });

            modelBuilder.Entity<IcccpoliceIncident>(entity =>
            {
                entity.ToTable("ICCCPoliceIncident");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Icccnumber)
                    .HasMaxLength(50)
                    .HasColumnName("ICCCNumber");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.IcccpoliceIncidents)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICCCPoliceIncident_Person");
            });

            modelBuilder.Entity<IcccrequestComment>(entity =>
            {
                entity.ToTable("ICCCRequestComment");

                entity.Property(e => e.IcccrequestId).HasColumnName("ICCCRequestId");
                entity.Property(e => e.RecievedTime).HasColumnType("datetime");

                entity.HasOne(d => d.Icccrequest).WithMany(p => p.IcccrequestComments)
                    .HasForeignKey(d => d.IcccrequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICCCRequestComment_ICCCIncidentRequest");

                entity.HasOne(d => d.Person).WithMany(p => p.IcccrequestComments)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICCCRequestComment_Person");
            });

            modelBuilder.Entity<IcccrequestDispatcher>(entity =>
            {
                entity.ToTable("ICCCRequestDispatcher");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.IcccrequestId).HasColumnName("ICCCRequestId");
                entity.Property(e => e.Issaaed).HasColumnName("ISSaaed");

                entity.HasOne(d => d.Icccrequest).WithMany(p => p.IcccrequestDispatchers)
                    .HasForeignKey(d => d.IcccrequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICCCRequestDispatcher_ICCCIncidentRequest");
            });

            modelBuilder.Entity<IcccrequestStatus>(entity =>
            {
                entity.HasKey(e => e.RequestStatusId);

                entity.ToTable("ICCCRequestStatus");

                entity.Property(e => e.RequestStatusId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccsaaedIncidentMap>(entity =>
            {
                entity.ToTable("ICCCSaaedIncidentMap");

                entity.Property(e => e.IcccincidentId).HasColumnName("ICCCIncidentId");
                entity.Property(e => e.Icccservice).HasColumnName("ICCCService");
            });

            modelBuilder.Entity<IcccsendReciveLog>(entity =>
            {
                entity.ToTable("ICCCSendReciveLog");

                entity.Property(e => e.IcccincidentId).HasColumnName("ICCCIncidentId");
                entity.Property(e => e.LoggedTime).HasColumnType("datetime");
                entity.Property(e => e.Value).HasMaxLength(200);
            });

            modelBuilder.Entity<IcccsendRetry>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_ICCCClosIncidentStatus");

                entity.ToTable("ICCCSendRetry");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IcccincidentId).HasColumnName("ICCCIncidentId");
                entity.Property(e => e.Icccservice).HasColumnName("ICCCService");
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<IcccsharedLookup>(entity =>
            {
                entity.ToTable("ICCCSharedLookup");

                entity.Property(e => e.Icccdb).HasColumnName("ICCCDB");
                entity.Property(e => e.Icccdescription)
                    .HasMaxLength(50)
                    .HasColumnName("ICCCDescription");
                entity.Property(e => e.Icccvalue).HasColumnName("ICCCValue");
                entity.Property(e => e.SaaedDescription).HasMaxLength(50);

                entity.HasOne(d => d.LookupType).WithMany(p => p.IcccsharedLookups)
                    .HasForeignKey(d => d.LookupTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ICCCSharedLookup_ICCCSharedLookupType");
            });

            modelBuilder.Entity<IcccsharedLookupType>(entity =>
            {
                entity.ToTable("ICCCSharedLookupType");

                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.LookupType).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccsupervisorMissionForTe>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCSupervisorMissionForTE");

                entity.Property(e => e.MissionEndTime).HasColumnType("datetime");
                entity.Property(e => e.MissionStartTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<IcccsupervisorSupport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCSupervisorSupports");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
            });

            modelBuilder.Entity<IcccviewAreaAreaCategoryArea>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewAreaAreaCategoryArea");

                entity.Property(e => e.Description).HasMaxLength(200);
            });

            modelBuilder.Entity<IcccviewAreaAreaCategoryEmira>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewAreaAreaCategoryEmira");

                entity.Property(e => e.Description).HasMaxLength(200);
            });

            modelBuilder.Entity<IcccviewAreaAreaCategoryLandmark>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewAreaAreaCategoryLandmark");

                entity.Property(e => e.Description).HasMaxLength(200);
            });

            modelBuilder.Entity<IcccviewAreaAreaCategorySector>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewAreaAreaCategorySector");

                entity.Property(e => e.Description).HasMaxLength(200);
            });

            modelBuilder.Entity<IcccviewAttendedPatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewAttendedPatrol");

                entity.Property(e => e.FinalDismissTime).HasColumnType("datetime");
                entity.Property(e => e.LoginAcknowledgeDate).HasColumnType("datetime");
                entity.Property(e => e.LoginTime).HasColumnType("datetime");
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.ReturnBackTime).HasColumnType("datetime");
                entity.Property(e => e.TempLogoutTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<IcccviewAttendedPatrolOfficer>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewAttendedPatrolOfficer");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccviewAutomaticIncident>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewAutomaticIncident");
            });

            modelBuilder.Entity<IcccviewCallerCredibility>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewCallerCredibility");

                entity.Property(e => e.Credibility).HasColumnType("decimal(33, 13)");
            });

            modelBuilder.Entity<IcccviewDispatcherIncidentPatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewDispatcherIncidentPatrol");

                entity.Property(e => e.DeviceCode).HasMaxLength(50);
                entity.Property(e => e.PlateNumber).HasMaxLength(50);
                entity.Property(e => e.SectorName).HasMaxLength(200);
                entity.Property(e => e.StatusDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<IcccviewIncident>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewIncident");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.AnsweringTime).HasColumnType("datetime");
                entity.Property(e => e.CloseReason).HasMaxLength(100);
                entity.Property(e => e.ConvertOrganization).HasMaxLength(250);
                entity.Property(e => e.ConvertReason).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.IcccdispatcherId).HasColumnName("ICCCDispatcherId");
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.Owner).HasMaxLength(250);
                entity.Property(e => e.Priority).HasMaxLength(100);
            });

            modelBuilder.Entity<IcccviewIncidentAssignedPatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewIncidentAssignedPatrol");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.DeviceCode).HasMaxLength(50);
                entity.Property(e => e.DispatcherOrganizationName).HasMaxLength(250);
                entity.Property(e => e.IncidentStatus).HasMaxLength(50);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.PatrolStatus).HasMaxLength(20);
            });

            modelBuilder.Entity<IcccviewIncidentCanceledPatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewIncidentCanceledPatrol");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.DeviceCode).HasMaxLength(50);
                entity.Property(e => e.DispatcherOrganizationName).HasMaxLength(250);
                entity.Property(e => e.IncidentStatus).HasMaxLength(50);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.PatrolStatus).HasMaxLength(20);
            });

            modelBuilder.Entity<IcccviewIncidentChildDelayStatus>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewIncidentChildDelayStatus");

                entity.Property(e => e.ActivityCreatedDate).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.PatrolDelayStatus).HasMaxLength(50);
                entity.Property(e => e.PatrolType).HasMaxLength(20);
            });

            modelBuilder.Entity<IcccviewIncidentDelayStatus>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewIncidentDelayStatus");

                entity.Property(e => e.IncidentCreatedDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentDelayStatus).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccviewIncidentPopupIncident>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewIncidentPopupIncident");

                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentStatus).HasMaxLength(100);
            });

            modelBuilder.Entity<IcccviewIncidentPopupPatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewIncidentPopupPatrol");

                entity.Property(e => e.OrganizationName).HasMaxLength(250);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.PatrolType).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccviewIncidentRequest>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewIncidentRequest");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.Address).HasMaxLength(100);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.Owner).HasMaxLength(250);
            });

            modelBuilder.Entity<IcccviewIncidentSupportRequest>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewIncidentSupportRequest");

                entity.Property(e => e.OrganizationName).HasMaxLength(250);
            });

            modelBuilder.Entity<IcccviewLoginChild>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewLoginChild");

                entity.Property(e => e.LastActivityId).HasColumnName("LastActivityID");
                entity.Property(e => e.LoginId).HasColumnName("LoginID");
            });

            modelBuilder.Entity<IcccviewOpenIncident>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewOpenIncident");

                entity.Property(e => e.IncidentCreatedDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Incident Number");
            });

            modelBuilder.Entity<IcccviewOpenIncidentDelayStatusHistory>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewOpenIncidentDelayStatusHistory");

                entity.Property(e => e.NotificationDateTime).HasColumnType("datetime");
                entity.Property(e => e.NotificationType).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccviewPatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewPatrol");

                entity.Property(e => e.DeviceCode).HasMaxLength(200);
                entity.Property(e => e.LocationDate).HasColumnType("datetime");
                entity.Property(e => e.PatroCode).HasMaxLength(50);
                entity.Property(e => e.TrackerCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IcccviewPatrol2>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewPatrol2");

                entity.Property(e => e.DeviceCode).HasMaxLength(200);
                entity.Property(e => e.ItemTypeName).HasMaxLength(100);
                entity.Property(e => e.LocationDate).HasColumnType("datetime");
                entity.Property(e => e.PatroCode).HasMaxLength(50);
                entity.Property(e => e.TrackerCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IcccviewPatrolDelayStatus>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewPatrolDelayStatus");

                entity.Property(e => e.IncidentCreatedDate).HasColumnType("datetime");
                entity.Property(e => e.PatrolDelayStatus).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccviewPatrolLoggedStatus>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewPatrolLoggedStatus");

                entity.Property(e => e.PatrolCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccviewPatrolLogoutRequest>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewPatrolLogoutRequest");

                entity.Property(e => e.LoginDate).HasColumnType("datetime");
                entity.Property(e => e.LogoutRequestTypeDescription)
                    .HasMaxLength(16)
                    .IsUnicode(false);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccviewPatrolLogoutRequestOfficer>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewPatrolLogoutRequestOfficers");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccviewPatrolOfficersNotAttended>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewPatrolOfficersNotAttended");

                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<IcccviewPatrolOnMission>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewPatrolOnMission");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<IcccviewSourceDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewSourceDetail");

                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(255);
                entity.Property(e => e.SourceName).HasMaxLength(100);
            });

            modelBuilder.Entity<IcccviewSupporCreator>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViewSupporCreators");

                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
            });

            modelBuilder.Entity<IcccviweIncidentOrganization>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ICCCViweIncidentOrganization");
            });

            modelBuilder.Entity<IdentificationAuthorityDim>(entity =>
            {
                entity.HasKey(e => e.IdentificationAuthorityId)
                    .HasName("IdentityAuthorityDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IdentificationAuthorityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.Jurisdiction).HasMaxLength(50);
                entity.Property(e => e.JurisdictionCode).HasMaxLength(20);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IdentificationAuthorityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IdentificationAuthorityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IdentificationAuthorityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IdentificationAuthorityDIMCodeView");

                entity.Property(e => e.IdentificationAuthorityCode).HasMaxLength(20);
                entity.Property(e => e.IdentificationAuthorityJurisdiction).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IdentificationCategoryDim>(entity =>
            {
                entity.HasKey(e => e.IdentificationCategoryId)
                    .HasName("IdentityTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IdentificationCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IdentificationCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IdentificationCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IdentificationCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IdentificationCategoryDIMCodeView");

                entity.Property(e => e.IdentificationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.IdentificationCategoryDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IdentificationClassDim>(entity =>
            {
                entity.HasKey(e => e.IdentificationClassId)
                    .HasName("IdentityClassDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IdentificationClassDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IdentificationClassDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IdentificationClassDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IdentificationClassDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IdentificationClassDIMCodeView");

                entity.Property(e => e.IdentificationClassCode).HasMaxLength(20);
                entity.Property(e => e.IdentificationClassDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IdentificationRestrictionDim>(entity =>
            {
                entity.HasKey(e => e.IdentificationRestrictionId)
                    .HasName("IdentityRestrictionsDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IdentificationRestrictionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IdentificationRestrictionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IdentificationRestrictionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IdentificationRestrictionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IdentificationRestrictionDIMCodeView");

                entity.Property(e => e.IdentificationRestrictionCode).HasMaxLength(20);
                entity.Property(e => e.IdentificationRestrictionDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IdentificationtStatusDim>(entity =>
            {
                entity.HasKey(e => e.IdentificationStatusId)
                    .HasName("IdentificationtStatusDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IdentificationtStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IdentificationtStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IdentificationtStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IdentificationtStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IdentificationtStatusDIMCodeView");

                entity.Property(e => e.IdentificationtStatusCode).HasMaxLength(20);
                entity.Property(e => e.IdentificationtStatusDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IdentityTheftCategoryDim>(entity =>
            {
                entity.HasKey(e => e.IdentityTheftCategoryId)
                    .HasName("PK_IdentityTheftTypeId")
                    .HasFillFactor(80);

                entity.ToTable("IdentityTheftCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.Reference).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IdentityTheftCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IdentityTheftCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IdentityTheftCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IdentityTheftCategoryDIMCodeView");

                entity.Property(e => e.IdentityTheftCategoryCode).HasMaxLength(20);
                entity.Property(e => e.IdentityTheftCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IdentityTheftIncident>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("IdentityTheftIncident");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.IdentityTheftCategoryId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.IdentityTheftIncident)
                    .HasForeignKey<IdentityTheftIncident>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IdentityTheftIncident_Activity");

                entity.HasOne(d => d.IdentityTheftCategory).WithMany(p => p.IdentityTheftIncidents)
                    .HasForeignKey(d => d.IdentityTheftCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IdentityTheftIncident_IdentityTheftCategoryDIM");
            });

            modelBuilder.Entity<Image>(entity =>
            {
                entity.HasKey(e => e.ImageId).HasFillFactor(80);

                entity.ToTable("Image");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(500)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.BinarySize).HasComputedColumnSql("(datalength(isnull([BinaryBase64Object],[BinaryHexObject])))", false);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryId).HasDefaultValue(1);
                entity.Property(e => e.ImageFormatId).HasDefaultValue(1);
                entity.Property(e => e.ImageGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsActive).HasDefaultValue(true);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsPermanentRecord).HasDefaultValue(true);
                entity.Property(e => e.IsPrivacyAct).HasDefaultValue(true);
                entity.Property(e => e.IsSqlstored)
                    .HasComputedColumnSql("(case when isnull([BinaryBase64Object],[BinaryHexObject]) IS NULL then (0) else (1) end)", false)
                    .HasColumnName("IsSQLStored");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);

                entity.HasOne(d => d.ImageCategory).WithMany(p => p.Images)
                    .HasForeignKey(d => d.ImageCategoryId)
                    .HasConstraintName("FK_Images_ImageTypeDIM");

                entity.HasOne(d => d.ImageFormat).WithMany(p => p.Images)
                    .HasForeignKey(d => d.ImageFormatId)
                    .HasConstraintName("FK_Images_ImageFormatDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Images)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Image_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Images)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Image_Image");
            });

            modelBuilder.Entity<ImageCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ImageCategoryId)
                    .HasName("PK_ImageTypeDIM")
                    .HasFillFactor(80);

                entity.ToTable("ImageCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ImageCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ImageCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ImageCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ImageCategoryDIMCodeView");

                entity.Property(e => e.ImageCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ImageCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ImageFormatDim>(entity =>
            {
                entity.HasKey(e => e.ImageFormatId).HasFillFactor(80);

                entity.ToTable("ImageFormatDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ImageFormatDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ImageFormatDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ImageFormatDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ImageFormatDIMCodeView");

                entity.Property(e => e.ImageFormatCode).HasMaxLength(20);
                entity.Property(e => e.ImageFormatDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ImageGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ImageGuidView");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ImageInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.ImageInvolvementId)
                    .HasName("PK__ImageInv__7507AA3880B637FA")
                    .HasFillFactor(80);

                entity.ToTable("ImageInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ImageInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ImageInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ImageInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ImageInvolvementDIMCodeView");

                entity.Property(e => e.ImageInvolvementCode).HasMaxLength(20);
                entity.Property(e => e.ImageInvolvementDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ImageView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ImageView");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageId).ValueGeneratedOnAdd();
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ImpactLevelDim>(entity =>
            {
                entity.HasKey(e => e.ImpactLevelId)
                    .HasName("PK__ImpactLe__FA14D022A6849540")
                    .HasFillFactor(80);

                entity.ToTable("ImpactLevelDim");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ImpactLevelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ImpactLevelDim_RowStatusDIM");
            });

            modelBuilder.Entity<ImpactTypeDim>(entity =>
            {
                entity.HasKey(e => e.ImpactTypeId)
                    .HasName("PK__ImpactTy__674B9D0C3F6FBAD6")
                    .HasFillFactor(80);

                entity.ToTable("ImpactTypeDim");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ImpactTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ImpactTypeDim_RowStatusDIM");
            });

            modelBuilder.Entity<ImpoundApitoken>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_ImpoundTokens");

                entity.ToTable("ImpoundAPITokens");

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.Token).HasMaxLength(50);
            });

            modelBuilder.Entity<ImpoundAuthority>(entity =>
            {
                entity.ToTable("ImpoundAuthority");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.AuthorityDescription).HasMaxLength(250);
            });

            modelBuilder.Entity<ImpoundOrder>(entity =>
            {
                entity.ToTable("ImpoundOrder");

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");
                entity.Property(e => e.CustomerMobileNumber).HasMaxLength(50);
                entity.Property(e => e.NoTrucksReq).HasDefaultValue(1);
                entity.Property(e => e.OfficerMobileNumber).HasMaxLength(150);
                entity.Property(e => e.OfficerName).HasMaxLength(150);
                entity.Property(e => e.OrderNumber).HasMaxLength(50);
                entity.Property(e => e.PoliceRefNumber).HasMaxLength(150);
            });

            modelBuilder.Entity<ImpoundOrderImage>(entity =>
            {
                entity.ToTable("ImpoundOrderImage");
            });

            modelBuilder.Entity<ImpoundOrderStatus>(entity =>
            {
                entity.ToTable("ImpoundOrderStatus");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.ImpoundOrderStatus1)
                    .HasMaxLength(150)
                    .HasColumnName("ImpoundOrderStatus");
            });

            modelBuilder.Entity<ImpoundOrderVehicleDispatch>(entity =>
            {
                entity.ToTable("ImpoundOrderVehicleDispatch");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");
            });

            modelBuilder.Entity<ImpoundOrdersOpenedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ImpoundOrdersOpenedView");

                entity.Property(e => e.CreatedDatetime).HasColumnType("datetime");
                entity.Property(e => e.CustomerMobileNumber).HasMaxLength(50);
                entity.Property(e => e.DispatchedPersonName).HasMaxLength(101);
                entity.Property(e => e.DispatchedTime).HasColumnType("datetime");
                entity.Property(e => e.DispatcherName).HasMaxLength(101);
                entity.Property(e => e.ImpoundOrderStatus).HasMaxLength(150);
                entity.Property(e => e.ImpoundPriority).HasMaxLength(50);
                entity.Property(e => e.OrderNumber).HasMaxLength(50);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ImpoundPatrolIdMapping>(entity =>
            {
                entity.ToTable("ImpoundPatrolIdMapping");
            });

            modelBuilder.Entity<ImpoundPersonIdMapping>(entity =>
            {
                entity.ToTable("ImpoundPersonIdMapping");
            });

            modelBuilder.Entity<ImpoundPriority>(entity =>
            {
                entity.ToTable("ImpoundPriority");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.ImpoundPriority1)
                    .HasMaxLength(50)
                    .HasColumnName("ImpoundPriority");
            });

            modelBuilder.Entity<ImpoundReason>(entity =>
            {
                entity.ToTable("ImpoundReason");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.ImpoundReason1)
                    .HasMaxLength(250)
                    .HasColumnName("ImpoundReason");
            });

            modelBuilder.Entity<ImpoundToken>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_ImpoundToens");

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.Token).HasMaxLength(50);
            });

            modelBuilder.Entity<IncdentBisync>(entity =>
            {
                entity.ToTable("IncdentBISync");

                entity.HasIndex(e => e.ActivityId, "NonClusteredIndex-20200601-155430");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.TransferDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Incident>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_Incident_1")
                    .HasFillFactor(80);

                entity.ToTable("Incident");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
                entity.Property(e => e.ExceptionalClearanceDate).HasColumnType("datetime");
                entity.Property(e => e.ForceInvolvedIndicator).HasDefaultValue(false);
                entity.Property(e => e.IncidentActivityCategoryId).HasDefaultValue(1);
                entity.Property(e => e.IncidentExceptionalClearanceId).HasDefaultValue(1);
                entity.Property(e => e.IncidentForceLevelId).HasDefaultValue(1);
                entity.Property(e => e.IncidentLevelId).HasDefaultValue(1);
                entity.Property(e => e.IncidentMethodId).HasDefaultValue(1);
                entity.Property(e => e.InvolvedCivilian).HasDefaultValue(false);
                entity.Property(e => e.InvolvedDomestic).HasDefaultValue(false);
                entity.Property(e => e.InvolvedGang).HasDefaultValue(false);
                entity.Property(e => e.InvolvedJuvenile).HasDefaultValue(false);
                entity.Property(e => e.InvolvedSenior).HasDefaultValue(false);
                entity.Property(e => e.InvolvedSubstance).HasDefaultValue(false);

                entity.HasOne(d => d.Activity).WithOne(p => p.Incident)
                    .HasForeignKey<Incident>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Incident_Activity");

                entity.HasOne(d => d.IncidentActivityCategory).WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.IncidentActivityCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("IncidentCategoryTypeDIM_Incident_FK1");

                entity.HasOne(d => d.IncidentExceptionalClearance).WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.IncidentExceptionalClearanceId)
                    .HasConstraintName("IncidentExceptionalClearanceDIM_Incident_FK1");

                entity.HasOne(d => d.IncidentForceLevel).WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.IncidentForceLevelId)
                    .HasConstraintName("IncidentForceTypeDIM_Incident_FK1");

                entity.HasOne(d => d.IncidentLevel).WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.IncidentLevelId)
                    .HasConstraintName("IncidentLevelDIM_Incident_FK1");

                entity.HasOne(d => d.IncidentMethod).WithMany(p => p.Incidents)
                    .HasForeignKey(d => d.IncidentMethodId)
                    .HasConstraintName("IncidentMethodDIM_Incident_FK1");
            });

            modelBuilder.Entity<IncidentActivityCategoryDim>(entity =>
            {
                entity.HasKey(e => e.IncidentActivityCategoryId)
                    .HasName("IncidentCategoryTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IncidentActivityCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IncidentActivityCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IncidentActivityCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IncidentActivityCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentActivityCategoryDIMCodeView");

                entity.Property(e => e.IncidentActivityCategoryCode).HasMaxLength(20);
                entity.Property(e => e.IncidentActivityCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IncidentArcfullDetail>(entity =>
            {
                entity.HasKey(e => e.VwIncidentArcfullDetailsId).HasFillFactor(80);

                entity.ToTable("IncidentARCFullDetails");

                entity.Property(e => e.VwIncidentArcfullDetailsId).HasColumnName("vw_IncidentARCFullDetailsId");
                entity.Property(e => e.AccId)
                    .HasMaxLength(100)
                    .HasColumnName("ACC_ID");
                entity.Property(e => e.AccLocDesc)
                    .HasMaxLength(200)
                    .HasColumnName("ACC_LOC_DESC");
                entity.Property(e => e.AreaText).HasMaxLength(200);
                entity.Property(e => e.CityText).HasMaxLength(200);
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.DriverBirthDate).HasColumnType("datetime");
                entity.Property(e => e.DriverDrinkingStatusText).HasMaxLength(100);
                entity.Property(e => e.DriverEducationLevelText).HasMaxLength(200);
                entity.Property(e => e.DriverGenderText).HasMaxLength(100);
                entity.Property(e => e.DriverLicenceExpDate).HasColumnType("datetime");
                entity.Property(e => e.DriverLicenceNo).HasMaxLength(3000);
                entity.Property(e => e.DriverLicenceSourceText).HasMaxLength(100);
                entity.Property(e => e.DriverName).HasMaxLength(3000);
                entity.Property(e => e.DriverNationalityText).HasMaxLength(100);
                entity.Property(e => e.DriverRunningStatusText).HasMaxLength(100);
                entity.Property(e => e.DriverStatusText).HasMaxLength(100);
                entity.Property(e => e.EmariteText).HasMaxLength(200);
                entity.Property(e => e.HoldDocumentPlaceText).HasMaxLength(100);
                entity.Property(e => e.HoldDocumentsText).HasMaxLength(100);
                entity.Property(e => e.IncidentDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNo).HasMaxLength(50);
                entity.Property(e => e.IncidentStatusText).HasMaxLength(100);
                entity.Property(e => e.IncidentTypeText).HasMaxLength(100);
                entity.Property(e => e.InsuranceCompanyText).HasMaxLength(100);
                entity.Property(e => e.InsuranceExpireDate).HasColumnType("datetime");
                entity.Property(e => e.InsuranceTypeText).HasMaxLength(100);
                entity.Property(e => e.IsMain)
                    .HasMaxLength(10)
                    .HasColumnName("IS_MAIN");
                entity.Property(e => e.ItemDescA)
                    .HasMaxLength(200)
                    .HasColumnName("ITEM_DESC_A");
                entity.Property(e => e.MdtaccidentBasicDetailsId).HasColumnName("MDTAccidentBasicDetailsId");
                entity.Property(e => e.ObjId).HasColumnName("OBJ_ID");
                entity.Property(e => e.ObjInjLvlTxt).HasColumnName("OBJ_INJ_LVL_TXT");
                entity.Property(e => e.ObjInjTxt).HasColumnName("OBJ_INJ_TXT");
                entity.Property(e => e.ObjOther).HasColumnName("OBJ_OTHER");
                entity.Property(e => e.ObjOwnerTxt).HasColumnName("OBJ_OWNER_TXT");
                entity.Property(e => e.ObjTypeTxt).HasColumnName("OBJ_TYPE_TXT");
                entity.Property(e => e.Other)
                    .HasMaxLength(500)
                    .HasColumnName("OTHER");
                entity.Property(e => e.OwnerName).HasMaxLength(3000);
                entity.Property(e => e.PlateClassText).HasMaxLength(200);
                entity.Property(e => e.PlateColorText).HasMaxLength(200);
                entity.Property(e => e.PlateNo).HasMaxLength(3000);
                entity.Property(e => e.PlateSourceText).HasMaxLength(100);
                entity.Property(e => e.PlateTypeText).HasMaxLength(200);
                entity.Property(e => e.RoadSpeedText).HasMaxLength(100);
                entity.Property(e => e.RoadSurfaceText).HasMaxLength(100);
                entity.Property(e => e.VecId).HasColumnName("VEC_ID");
                entity.Property(e => e.VehiclaMakeText).HasMaxLength(100);
                entity.Property(e => e.VehicleCollisionPointText).HasMaxLength(100);
                entity.Property(e => e.VehicleCountryText).HasMaxLength(50);
                entity.Property(e => e.VehicleKindText).HasMaxLength(150);
                entity.Property(e => e.VehicleModelText).HasMaxLength(100);
                entity.Property(e => e.VehicleProductingYear).HasMaxLength(100);
                entity.Property(e => e.VehicleStatusText).HasMaxLength(100);
                entity.Property(e => e.VehicleTypeText).HasMaxLength(100);
                entity.Property(e => e.VehiclesLiabilityText).HasMaxLength(100);
                entity.Property(e => e.WeatherText).HasMaxLength(100);
            });

            modelBuilder.Entity<IncidentCategory>(entity =>
            {
                entity.HasKey(e => e.IncidentCategoryId)
                    .HasName("IncidentCategory_PK")
                    .HasFillFactor(80);

                entity.ToTable("IncidentCategory");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IncidentCategories)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IncidentCategory_RowStatusDIM");
            });

            modelBuilder.Entity<IncidentCategoryStatus>(entity =>
            {
                entity.HasKey(e => e.IncidentCategoryStatusId)
                    .HasName("IncidentCategoryStatus_PK")
                    .HasFillFactor(80);

                entity.ToTable("IncidentCategoryStatus");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IncidentCategory).WithMany(p => p.IncidentCategoryStatuses)
                    .HasForeignKey(d => d.IncidentCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentCategoryStatus_IncidentCategory");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IncidentCategoryStatuses)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IncidentCategoryStatus_RowStatusDIM");

                entity.HasOne(d => d.Status).WithMany(p => p.IncidentCategoryStatuses)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentCategoryStatus_Status");
            });

            modelBuilder.Entity<IncidentCategoryTypeAssociation>(entity =>
            {
                entity.HasKey(e => e.IncidentCategoryTypeAssociationId).HasFillFactor(80);

                entity.ToTable("IncidentCategoryTypeAssociation");

                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ServiceCallCategory).WithMany(p => p.IncidentCategoryTypeAssociations)
                    .HasForeignKey(d => d.ServiceCallCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentCategoryTypeAssociation_ServiceCallCategoryDIM");

                entity.HasOne(d => d.ServiceCallIncidentType).WithMany(p => p.IncidentCategoryTypeAssociations)
                    .HasForeignKey(d => d.ServiceCallIncidentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentCategoryTypeAssociation_ServiceCallIncidentTypeDIM");
            });

            modelBuilder.Entity<IncidentExceptionalClearanceDim>(entity =>
            {
                entity.HasKey(e => e.IncidentExceptionalClearanceId)
                    .HasName("IncidentExceptionalClearanceDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IncidentExceptionalClearanceDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IncidentExceptionalClearanceDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IncidentExceptionalClearanceDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IncidentExceptionalClearanceDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentExceptionalClearanceDIMCodeView");

                entity.Property(e => e.IncidentExceptionalClearanceCode).HasMaxLength(20);
                entity.Property(e => e.IncidentExceptionalClearanceDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IncidentFactor>(entity =>
            {
                entity.HasKey(e => e.IncidentFactorId).HasFillFactor(80);

                entity.ToTable("IncidentFactor");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(555);
                entity.Property(e => e.FactorId).HasDefaultValue(1);
                entity.Property(e => e.IncidentFactorDescription).HasMaxLength(300);
                entity.Property(e => e.IncidentFactorGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.IncidentFactors)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentFactor_Incident");

                entity.HasOne(d => d.Factor).WithMany(p => p.IncidentFactors)
                    .HasForeignKey(d => d.FactorId)
                    .HasConstraintName("FK_IncidentFactor_IncidentFactorDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IncidentFactors)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IncidentFactor_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.IncidentFactors)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentFactor_Source");
            });

            modelBuilder.Entity<IncidentFactorDim>(entity =>
            {
                entity.HasKey(e => e.IncidentFactorId)
                    .HasName("IncidentFactorDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IncidentFactorDIM");

                entity.Property(e => e.Category).HasMaxLength(20);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Niem)
                    .HasMaxLength(20)
                    .HasColumnName("NIEM");
                entity.Property(e => e.NiemtypeName)
                    .HasMaxLength(100)
                    .HasColumnName("NIEMTypeName");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IncidentFactorDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IncidentFactorDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IncidentFactorDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentFactorDIMCodeView");

                entity.Property(e => e.IncidentFactorCode).HasMaxLength(20);
                entity.Property(e => e.IncidentFactorDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IncidentFactorGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentFactorGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(555);
                entity.Property(e => e.FactorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IncidentFactorDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IncidentFactorView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentFactorView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(555);
                entity.Property(e => e.FactorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FactorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IncidentFactorDescription).HasMaxLength(300);
                entity.Property(e => e.IncidentFactorId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IncidentForceLevelDim>(entity =>
            {
                entity.HasKey(e => e.IncidentForceLevelId)
                    .HasName("IncidentForceTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IncidentForceLevelDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IncidentForceLevelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IncidentForceLevelDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IncidentForceLevelDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentForceLevelDIMCodeView");

                entity.Property(e => e.IncidentForceLevelCode).HasMaxLength(20);
                entity.Property(e => e.IncidentForceLevelDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IncidentLaneDim>(entity =>
            {
                entity.HasKey(e => e.IncidentLaneId)
                    .HasName("PK__Incident__4F76533BB790032B")
                    .HasFillFactor(80);

                entity.ToTable("IncidentLaneDim");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
            });

            modelBuilder.Entity<IncidentLevelDim>(entity =>
            {
                entity.HasKey(e => e.IncidentLevelId)
                    .HasName("IncidentLevelDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IncidentLevelDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IncidentLevelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IncidentLevelDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IncidentLevelDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentLevelDIMCodeView");

                entity.Property(e => e.IncidentLevelCode).HasMaxLength(20);
                entity.Property(e => e.IncidentLevelDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IncidentMethodDim>(entity =>
            {
                entity.HasKey(e => e.IncidentMethodId)
                    .HasName("IncidentMethodDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IncidentMethodDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IncidentMethodDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IncidentMethodDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IncidentMethodDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentMethodDIMCodeView");

                entity.Property(e => e.IncidentMethodCode).HasMaxLength(20);
                entity.Property(e => e.IncidentMethodDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IncidentRequestNotificationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentRequestNotificationView");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.PersonName).HasMaxLength(50);
            });

            modelBuilder.Entity<IncidentReturnToOrreasonsDim>(entity =>
            {
                entity.HasKey(e => e.IncidentReturnToOrreasonsId).HasName("PK__Incident__5B60F58FC0BAF3DA");

                entity.ToTable("IncidentReturnToORReasonsDim");

                entity.Property(e => e.IncidentReturnToOrreasonsId)
                    .ValueGeneratedNever()
                    .HasColumnName("IncidentReturnToORReasonsId");
                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<IncidentStatute>(entity =>
            {
                entity.HasKey(e => e.IncidentStatuteId)
                    .HasName("PK__Incident__C86D7D1D11FB59E7")
                    .HasFillFactor(80);

                entity.ToTable("IncidentStatute");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IncidentStatuteDescription).HasMaxLength(300);
                entity.Property(e => e.IncidentStatuteGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.StatuteId).HasDefaultValue(1);
                entity.Property(e => e.StatuteSeverityId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithMany(p => p.IncidentStatutes)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentStatute_Activity");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IncidentStatutes)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IncidentStatute_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.IncidentStatutes)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentStatute_Source");

                entity.HasOne(d => d.Statute).WithMany(p => p.IncidentStatutes)
                    .HasForeignKey(d => d.StatuteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentStatute_StatuteDIM");

                entity.HasOne(d => d.StatuteSeverity).WithMany(p => p.IncidentStatutes)
                    .HasForeignKey(d => d.StatuteSeverityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentStatute_StatuteSeverityDIM");
            });

            modelBuilder.Entity<IncidentStatuteGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentStatuteGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.IncidentStatuteDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
                entity.Property(e => e.StatuteSeverityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IncidentStatuteView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentStatuteView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.IncidentStatuteDescription).HasMaxLength(300);
                entity.Property(e => e.IncidentStatuteId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
                entity.Property(e => e.StatuteDescription).HasMaxLength(100);
                entity.Property(e => e.StatuteSeverityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteSeverityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteStatuteDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<IncidentTimesHelp>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IncidentTimesHelp");

                entity.Property(e => e.Ad)
                    .HasColumnType("datetime")
                    .HasColumnName("AD");
                entity.Property(e => e.Ak)
                    .HasColumnType("datetime")
                    .HasColumnName("AK");
                entity.Property(e => e.Ar1)
                    .HasColumnType("datetime")
                    .HasColumnName("AR1");
                entity.Property(e => e.Ar2)
                    .HasColumnType("datetime")
                    .HasColumnName("AR2");
                entity.Property(e => e.Ca)
                    .HasColumnType("datetime")
                    .HasColumnName("CA");
                entity.Property(e => e.Cl)
                    .HasColumnType("datetime")
                    .HasColumnName("CL");
                entity.Property(e => e.ClosedIncident)
                    .HasColumnType("datetime")
                    .HasColumnName("Closed Incident");
                entity.Property(e => e.Earc)
                    .HasColumnType("datetime")
                    .HasColumnName("EARC");
                entity.Property(e => e.Sarc)
                    .HasColumnType("datetime")
                    .HasColumnName("SARC");
            });

            modelBuilder.Entity<IncidentsFullDetail>(entity =>
            {
                entity.HasKey(e => e.IncidentsFullDetailsId).HasFillFactor(80);

                entity.Property(e => e.Area)
                    .HasMaxLength(200)
                    .HasColumnName("AREA");
                entity.Property(e => e.CallTakerName)
                    .HasMaxLength(50)
                    .HasColumnName("CALL_TAKER_NAME");
                entity.Property(e => e.City)
                    .HasMaxLength(200)
                    .HasColumnName("CITY");
                entity.Property(e => e.ClosingComment)
                    .HasMaxLength(50)
                    .HasColumnName("CLOSING_COMMENT");
                entity.Property(e => e.ClosingEndDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CLOSING_END_DATETIME");
                entity.Property(e => e.ClosingReasons)
                    .HasMaxLength(100)
                    .HasColumnName("CLOSING_REASONS");
                entity.Property(e => e.ClosingStartDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CLOSING_START_DATETIME");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
                entity.Property(e => e.DispatcherName)
                    .HasMaxLength(50)
                    .HasColumnName("DISPATCHER_NAME");
                entity.Property(e => e.Emi)
                    .HasMaxLength(200)
                    .HasColumnName("EMI");
                entity.Property(e => e.FirstArrivalDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("FIRST_ARRIVAL_DATETIME");
                entity.Property(e => e.FirstArrivalReasons)
                    .HasMaxLength(100)
                    .HasColumnName("FIRST_ARRIVAL_REASONS");
                entity.Property(e => e.HandOverDocumentsDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("HAND_OVER_DOCUMENTS_DATETIME");
                entity.Property(e => e.IncidentAssignmentDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("INCIDENT_ASSIGNMENT_DATETIME");
                entity.Property(e => e.IncidentDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("INCIDENT_DATETIME");
                entity.Property(e => e.IncidentMasterId)
                    .HasMaxLength(50)
                    .HasColumnName("INCIDENT_MASTER_ID");
                entity.Property(e => e.IncidentSourceDescription)
                    .HasMaxLength(100)
                    .HasColumnName("INCIDENT_SOURCE_DESCRIPTION");
                entity.Property(e => e.IncidentTypeDescription)
                    .HasMaxLength(50)
                    .HasColumnName("INCIDENT_TYPE_DESCRIPTION");
                entity.Property(e => e.Latitude).HasColumnName("LATITUDE");
                entity.Property(e => e.Longitude).HasColumnName("LONGITUDE");
                entity.Property(e => e.PatrolCode)
                    .HasMaxLength(50)
                    .HasColumnName("PATROL_CODE");
                entity.Property(e => e.PoliceDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("POLICE_DATETIME");
                entity.Property(e => e.PoliceNo)
                    .HasMaxLength(255)
                    .HasColumnName("POLICE_NO");
                entity.Property(e => e.SecondArrivalEndDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SECOND_ARRIVAL_END_DATETIME");
                entity.Property(e => e.SecondArrivalReasons)
                    .HasMaxLength(100)
                    .HasColumnName("SECOND_ARRIVAL_REASONS");
                entity.Property(e => e.SecondArrivalStartDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SECOND_ARRIVAL_START_DATETIME");
                entity.Property(e => e.SeverityStatus)
                    .HasMaxLength(100)
                    .HasColumnName("SEVERITY_STATUS");
                entity.Property(e => e.SketchEndDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SKETCH_END_DATETIME");
                entity.Property(e => e.SketchStartDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SKETCH_START_DATETIME");
                entity.Property(e => e.SketchingReasons)
                    .HasMaxLength(100)
                    .HasColumnName("SKETCHING_REASONS");
                entity.Property(e => e.TrafficExpertName)
                    .HasMaxLength(50)
                    .HasColumnName("TRAFFIC_EXPERT_NAME");
                entity.Property(e => e.TrafficExpertReceiveDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("TRAFFIC_EXPERT_RECEIVE_DATETIME");
                entity.Property(e => e.TransferToPoliceCenterDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSFER_TO_POLICE_CENTER_DATETIME");
                entity.Property(e => e.TransferToPoliceCenterReasons)
                    .HasMaxLength(100)
                    .HasColumnName("TRANSFER_TO_POLICE_CENTER_REASONS");
                entity.Property(e => e.UserFullName)
                    .HasMaxLength(100)
                    .HasColumnName("USER_FULL_NAME");
                entity.Property(e => e.UserId).HasColumnName("USER_ID");
            });

            modelBuilder.Entity<IncidentsMapReportTemplate>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Incident__3214EC07275C828C");

                entity.ToTable("IncidentsMapReportTemplate");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.DateFrom).HasColumnType("datetime");
                entity.Property(e => e.DateTo).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TemplateName).HasMaxLength(100);
            });

            modelBuilder.Entity<InsuranceCompanyDim>(entity =>
            {
                entity.HasKey(e => e.InsuranceCompanyId)
                    .HasName("PK__Insuranc__CE9C94A40E622A1C")
                    .HasFillFactor(80);

                entity.ToTable("InsuranceCompanyDim");

                entity.Property(e => e.InsuranceCompanyId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.InsuranceCompanyDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_InsuranceCompanyDim_RowStatusDIM");
            });

            modelBuilder.Entity<InsuranceCompanyWhiteListDim>(entity =>
            {
                entity.HasKey(e => e.InsuranceCompanyId);

                entity.ToTable("InsuranceCompanyWhiteListDim");

                entity.Property(e => e.InsuranceCompanyId).ValueGeneratedNever();
                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsFixedLength();
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            });

            modelBuilder.Entity<InsuranceTypeDim>(entity =>
            {
                entity.HasKey(e => e.InsuranceTypeId)
                    .HasName("PK__Insuranc__9D7E7CC52F708D35")
                    .HasFillFactor(80);

                entity.ToTable("InsuranceTypeDim");

                entity.Property(e => e.InsuranceTypeId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.InsuranceTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_InsuranceTypeDim_RowStatusDIM");
            });

            modelBuilder.Entity<IntegrationTokenLog>(entity =>
            {
                entity.ToTable("IntegrationTokenLog");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<InternalUserPasswordChangeHistory>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Internal__3214EC07DC22382F");

                entity.ToTable("InternalUserPasswordChangeHistory");

                entity.HasIndex(e => e.ChangeDate, "IX_InternalUserPasswordChangeHistory_ChangeDate");

                entity.HasIndex(e => e.UserId, "IX_InternalUserPasswordChangeHistory_UserId");

                entity.HasIndex(e => new { e.UserId, e.ChangeDate }, "IX_InternalUserPasswordChangeHistory_UserId_ChangeDate");

                entity.HasIndex(e => new { e.UserId, e.ChangeDate }, "IX_InternalUserPasswordChangeHistory_UserId_ChangeDate_Include");

                entity.HasIndex(e => e.UserId, "IX_InternalUserPasswordChangeHistory_UserId_Include");

                entity.Property(e => e.ChangeDate).HasColumnType("datetime");
                entity.Property(e => e.PasswordHash)
                    .HasMaxLength(150)
                    .IsUnicode(false);
                entity.Property(e => e.Salt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.User).WithMany(p => p.InternalUserPasswordChangeHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InternalUserPasswordChangeHistory_AspUser");
            });

            modelBuilder.Entity<IntersectionDim>(entity =>
            {
                entity.HasKey(e => e.IntersectionId)
                    .HasName("PK__Intersec__DAE298941AACFE59")
                    .HasFillFactor(80);

                entity.ToTable("IntersectionDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IntersectionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IntersectionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IntoxicationIntoxicantCategoryDim>(entity =>
            {
                entity.HasKey(e => e.IntoxicationIntoxicantCategoryId)
                    .HasName("PersonIntoxicationTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IntoxicationIntoxicantCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IntoxicationIntoxicantCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IntoxicationIntoxicantCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IntoxicationIntoxicantCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IntoxicationIntoxicantCategoryDIMCodeView");

                entity.Property(e => e.IntoxicationIntoxicantCategoryCode).HasMaxLength(20);
                entity.Property(e => e.IntoxicationIntoxicantCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<IntoxicationLevelDim>(entity =>
            {
                entity.HasKey(e => e.IntoxicationLevelId)
                    .HasName("PersonIntoxicationLevelDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("IntoxicationLevelDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.IntoxicationLevelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_IntoxicationLevelDIM_RowStatusDIM");
            });

            modelBuilder.Entity<IntoxicationLevelDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("IntoxicationLevelDIMCodeView");

                entity.Property(e => e.IntoxicationLevelCode).HasMaxLength(20);
                entity.Property(e => e.IntoxicationLevelDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.HasKey(e => e.ItemId).HasFillFactor(80);

                entity.ToTable("Item");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DeviceCode).HasMaxLength(200);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ItemCategoryId).HasDefaultValue(1);
                entity.Property(e => e.ItemConditionId).HasDefaultValue(1);
                entity.Property(e => e.ItemGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ItemMakeModelId).HasDefaultValue(1);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorId).HasDefaultValue(1);
                entity.Property(e => e.ItemSecondaryColorId).HasDefaultValue(1);
                entity.Property(e => e.ItemStatusId).HasDefaultValue(1);
                entity.Property(e => e.ItemUsageId).HasDefaultValue(1);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ItemCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Item_Person");

                entity.HasOne(d => d.ItemCategory).WithMany(p => p.Items)
                    .HasForeignKey(d => d.ItemCategoryId)
                    .HasConstraintName("ItemCategoryDIM_Object_FK1");

                entity.HasOne(d => d.ItemCondition).WithMany(p => p.Items)
                    .HasForeignKey(d => d.ItemConditionId)
                    .HasConstraintName("ObjectConditionDIM_Object_FK1");

                entity.HasOne(d => d.ItemMakeModel).WithMany(p => p.Items)
                    .HasForeignKey(d => d.ItemMakeModelId)
                    .HasConstraintName("itemmakemodeldim_Object_FK1");

                entity.HasOne(d => d.ItemManufactory).WithMany(p => p.Items)
                    .HasForeignKey(d => d.ItemManufactoryId)
                    .HasConstraintName("FK_Item_ItemManufactory");

                entity.HasOne(d => d.ItemPrimaryColor).WithMany(p => p.ItemItemPrimaryColors)
                    .HasForeignKey(d => d.ItemPrimaryColorId)
                    .HasConstraintName("itemColorDIM_Object_FK1");

                entity.HasOne(d => d.ItemSecondaryColor).WithMany(p => p.ItemItemSecondaryColors)
                    .HasForeignKey(d => d.ItemSecondaryColorId)
                    .HasConstraintName("FK_Object_itemColorDIM");

                entity.HasOne(d => d.ItemStatus).WithMany(p => p.Items)
                    .HasForeignKey(d => d.ItemStatusId)
                    .HasConstraintName("FK_Item_ItemStatus");

                entity.HasOne(d => d.ItemUsage).WithMany(p => p.Items)
                    .HasForeignKey(d => d.ItemUsageId)
                    .HasConstraintName("FK_Item_ItemUsageDIM");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ItemModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Item_Person1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Items)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Item_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Items)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Item_Source");
            });

            modelBuilder.Entity<ItemAlias>(entity =>
            {
                entity.HasKey(e => e.ItemAliasId).HasFillFactor(80);

                entity.ToTable("ItemAlias");

                entity.Property(e => e.Alias).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ItemAliasDescription).HasMaxLength(300);
                entity.Property(e => e.ItemAliasGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Item).WithMany(p => p.ItemAliases)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemAlias_Item");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemAliases)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemAlias_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ItemAliases)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemAlias_Source");
            });

            modelBuilder.Entity<ItemAliasGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemAliasGuidView");

                entity.Property(e => e.Alias).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemAliasDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemAliasView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemAliasView");

                entity.Property(e => e.Alias).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemAliasDescription).HasMaxLength(300);
                entity.Property(e => e.ItemAliasId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ItemCategoryId)
                    .HasName("ItemCategoryDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemCategoryDIM");

                entity.Property(e => e.Category).HasMaxLength(50);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemCategoryDIMCodeView");

                entity.Property(e => e.ItemCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ItemCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemColorDim>(entity =>
            {
                entity.HasKey(e => e.ItemColorId)
                    .HasName("itemColorDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemColorDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemColorDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemColorDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemColorDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemColorDIMCodeView");

                entity.Property(e => e.ItemColorCode).HasMaxLength(20);
                entity.Property(e => e.ItemColorDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemComment>(entity =>
            {
                entity.HasKey(e => e.ItemCommentId).HasFillFactor(80);

                entity.ToTable("ItemComment");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ItemCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ItemCommentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Comment).WithMany(p => p.ItemComments)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemComment_Comment");

                entity.HasOne(d => d.CommentInvolvement).WithMany(p => p.ItemComments)
                    .HasForeignKey(d => d.CommentInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemComment_CommentInvolvementDIM");

                entity.HasOne(d => d.Item).WithMany(p => p.ItemComments)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemComment_Item");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemComments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemComment_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ItemComments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemComment_Source");
            });

            modelBuilder.Entity<ItemCommentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemCommentContainerGuidView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemCommentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemCommentContainerView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ItemCommentId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemCommentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemCommentGuidView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemCommentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemCommentView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImportanceHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PriorityHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemConditionDim>(entity =>
            {
                entity.HasKey(e => e.ItemConditionId)
                    .HasName("ObjectConditionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemConditionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemConditionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemConditionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemConditionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemConditionDIMCodeView");

                entity.Property(e => e.ItemConditionCode).HasMaxLength(20);
                entity.Property(e => e.ItemConditionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemDocument>(entity =>
            {
                entity.HasKey(e => e.ItemDocumentId).HasFillFactor(80);

                entity.ToTable("ItemDocument");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ItemDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ItemDocumentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Document).WithMany(p => p.ItemDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemDocument_Document");

                entity.HasOne(d => d.DocumentInvolvement).WithMany(p => p.ItemDocuments)
                    .HasForeignKey(d => d.DocumentInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemDocument_DocumentInvolvementDIM");

                entity.HasOne(d => d.Item).WithMany(p => p.ItemDocuments)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemDocument_Item");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemDocuments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemDocument_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ItemDocuments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemDocument_Source");
            });

            modelBuilder.Entity<ItemDocumentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemDocumentContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemDocumentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemDocumentContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ItemDocumentId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemDocumentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemDocumentGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ItemDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<ItemDocumentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemDocumentView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ItemDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<ItemGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<ItemIdentifier>(entity =>
            {
                entity.HasKey(e => e.ItemIdentifierId).HasFillFactor(80);

                entity.ToTable("ItemIdentifier");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ItemIdentifierDescription).HasMaxLength(300);
                entity.Property(e => e.ItemIdentifierDistinctiveMarkingId).HasDefaultValue(1);
                entity.Property(e => e.ItemIdentifierGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ItemIdentifierLocationId).HasDefaultValue(1);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Item).WithMany(p => p.ItemIdentifiers)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_ObjectIdentifiers_FK1");

                entity.HasOne(d => d.ItemIdentifierDistinctiveMarking).WithMany(p => p.ItemIdentifiers)
                    .HasForeignKey(d => d.ItemIdentifierDistinctiveMarkingId)
                    .HasConstraintName("FK_ItemIdentifier_ItemIdentifierDistinctiveMarkingDIM");

                entity.HasOne(d => d.ItemIdentifierLocation).WithMany(p => p.ItemIdentifiers)
                    .HasForeignKey(d => d.ItemIdentifierLocationId)
                    .HasConstraintName("itemIdentifierLocaitonDIM_ObjectIdentifiers_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemIdentifiers)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemIdentifier_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ItemIdentifiers)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemIdentifier_Source");
            });

            modelBuilder.Entity<ItemIdentifierDistinctiveMarkingDim>(entity =>
            {
                entity.HasKey(e => e.ItemIdentifierDistinctiveMarkingId)
                    .HasName("ItemIdentifierDistinctiveMarkingDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemIdentifierDistinctiveMarkingDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemIdentifierDistinctiveMarkingDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemIdentifierDistinctiveMarkingDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemIdentifierDistinctiveMarkingDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemIdentifierDistinctiveMarkingDIMCodeView");

                entity.Property(e => e.ItemIdentifierDistinctiveMarkingCode).HasMaxLength(20);
                entity.Property(e => e.ItemIdentifierDistinctiveMarkingDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemIdentifierGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemIdentifierGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemIdentifierDescription).HasMaxLength(300);
                entity.Property(e => e.ItemIdentifierDistinctiveMarkingCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemIdentifierLocationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemIdentifierLocationDim>(entity =>
            {
                entity.HasKey(e => e.ItemIdentifierLocationId)
                    .HasName("itemIdentifierLocaitonDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemIdentifierLocationDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemIdentifierLocationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemIdentifierLocationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemIdentifierLocationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemIdentifierLocationDIMCodeView");

                entity.Property(e => e.ItemIdentifierLocationCode).HasMaxLength(20);
                entity.Property(e => e.ItemIdentifierLocationDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemIdentifierView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemIdentifierView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemIdentifierDescription).HasMaxLength(300);
                entity.Property(e => e.ItemIdentifierDistinctiveMarkingCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemIdentifierDistinctiveMarkingDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemIdentifierId).ValueGeneratedOnAdd();
                entity.Property(e => e.ItemIdentifierLocationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemIdentifierLocationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemImage>(entity =>
            {
                entity.HasKey(e => e.ItemImageId).HasFillFactor(80);

                entity.ToTable("ItemImage");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ItemImageDescription).HasMaxLength(300);
                entity.Property(e => e.ItemImageGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Image).WithMany(p => p.ItemImages)
                    .HasForeignKey(d => d.ImageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemImage_Image");

                entity.HasOne(d => d.ImageInvolvement).WithMany(p => p.ItemImages)
                    .HasForeignKey(d => d.ImageInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemImage_ImageInvolvementDIM");

                entity.HasOne(d => d.Item).WithMany(p => p.ItemImages)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemImage_Item");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemImages)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemImage_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ItemImages)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemImage_Source");
            });

            modelBuilder.Entity<ItemImageContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemImageContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemImageDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemImageContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemImageContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemImageDescription).HasMaxLength(300);
                entity.Property(e => e.ItemImageId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemImageGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemImageGuidView");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.ItemImageDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemImageView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemImageView");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.ItemImageDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.ItemInvolvementId)
                    .HasName("PK__ItemInvo__DF98DBEB9D678FB2")
                    .HasFillFactor(80);

                entity.ToTable("ItemInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemInvolvementDIMCodeView");

                entity.Property(e => e.ItemInvolvementCode).HasMaxLength(20);
                entity.Property(e => e.ItemInvolvementDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemLocation>(entity =>
            {
                entity.HasKey(e => e.ItemLocationId).HasFillFactor(80);

                entity.ToTable("ItemLocation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.FromDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ItemLocationDescription).HasMaxLength(300);
                entity.Property(e => e.ItemLocationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToDateTimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ItemLocationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ItemLocation_Person");

                entity.HasOne(d => d.Item).WithMany(p => p.ItemLocations)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemLocation_Item");

                entity.HasOne(d => d.Location).WithMany(p => p.ItemLocations)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemLocation_Location");

                entity.HasOne(d => d.LocationInvolvement).WithMany(p => p.ItemLocations)
                    .HasForeignKey(d => d.LocationInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemLocation_LocationInvolvementDIM");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ItemLocationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ItemLocation_Person1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemLocations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemLocation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ItemLocations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemLocation_Source");
            });

            modelBuilder.Entity<ItemLocationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemLocationContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemLocationDescription).HasMaxLength(300);
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemLocationContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemLocationContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemLocationDescription).HasMaxLength(300);
                entity.Property(e => e.ItemLocationId).ValueGeneratedOnAdd();
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemMakeModelDim>(entity =>
            {
                entity.HasKey(e => e.ItemMakeModelId)
                    .HasName("itemmakemodeldim_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemMakeModelDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CountryCode)
                    .HasMaxLength(50)
                    .HasDefaultValue("N/A");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.ItemCategoryId).HasDefaultValue(1);
                entity.Property(e => e.Make).HasMaxLength(200);
                entity.Property(e => e.MakeCode)
                    .HasMaxLength(50)
                    .HasDefaultValue("N/A");
                entity.Property(e => e.Model)
                    .HasMaxLength(200)
                    .HasDefaultValue("N/A");
                entity.Property(e => e.ModelCode).HasMaxLength(50);
                entity.Property(e => e.Reference).HasMaxLength(250);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Vst)
                    .HasMaxLength(50)
                    .HasColumnName("VST");

                entity.HasOne(d => d.ItemCategory).WithMany(p => p.ItemMakeModelDims)
                    .HasForeignKey(d => d.ItemCategoryId)
                    .HasConstraintName("FK_itemmakemodeldim_ItemCategoryDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemMakeModelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemMakeModelDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemMakeModelDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemMakeModelDIMCodeView");

                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemManufactoryDim>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_ItemManufactory")
                    .HasFillFactor(80);

                entity.ToTable("ItemManufactoryDIM");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.ItemCategoryId).HasDefaultValue(1);
                entity.Property(e => e.Name).HasMaxLength(50);

                entity.HasOne(d => d.ItemCategory).WithMany(p => p.ItemManufactoryDims)
                    .HasForeignKey(d => d.ItemCategoryId)
                    .HasConstraintName("FK_ItemManufactoryDIM_ItemCategoryDIM");
            });

            modelBuilder.Entity<ItemQuestionnaireContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemQuestionnaireContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemQuestionnaireGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemQuestionnaireGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ItemDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<ItemQuestionnaireView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemQuestionnaireView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ItemDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.QuestionnaireCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<ItemRegistration>(entity =>
            {
                entity.HasKey(e => e.ItemRegistrationId).HasFillFactor(80);

                entity.ToTable("ItemRegistration");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ItemRegistrationAuthorityId).HasDefaultValue(1);
                entity.Property(e => e.ItemRegistrationDescription).HasMaxLength(300);
                entity.Property(e => e.ItemRegistrationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ItemRegistrationJurisdictionId).HasDefaultValue(1);
                entity.Property(e => e.ItemRegistrationPlateCategoryId).HasDefaultValue(1);
                entity.Property(e => e.ItemRegistrationPlateCodeId).HasDefaultValue(1);
                entity.Property(e => e.ItemRegistrationPlateKindId).HasDefaultValue(1);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PlateIdentification).HasMaxLength(50);

                entity.HasOne(d => d.Item).WithMany(p => p.ItemRegistrations)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemRegistration_Item");

                entity.HasOne(d => d.ItemRegistrationAuthority).WithMany(p => p.ItemRegistrations)
                    .HasForeignKey(d => d.ItemRegistrationAuthorityId)
                    .HasConstraintName("FK_ItemRegistration_ItemRegistrationAuthorityDIM");

                entity.HasOne(d => d.ItemRegistrationJurisdiction).WithMany(p => p.ItemRegistrations)
                    .HasForeignKey(d => d.ItemRegistrationJurisdictionId)
                    .HasConstraintName("FK_ItemRegistration_ItemRegistrationJurisdictionDIM");

                entity.HasOne(d => d.ItemRegistrationPlateCategory).WithMany(p => p.ItemRegistrations)
                    .HasForeignKey(d => d.ItemRegistrationPlateCategoryId)
                    .HasConstraintName("FK_ItemRegistration_ItemRegistrationPlateCategoryDIM");

                entity.HasOne(d => d.ItemRegistrationPlateCode).WithMany(p => p.ItemRegistrations)
                    .HasForeignKey(d => d.ItemRegistrationPlateCodeId)
                    .HasConstraintName("FK_ItemRegistration_ItemRegistrationPlateCodeDIM");

                entity.HasOne(d => d.ItemRegistrationPlateKind).WithMany(p => p.ItemRegistrations)
                    .HasForeignKey(d => d.ItemRegistrationPlateKindId)
                    .HasConstraintName("FK_ItemRegistration_ItemRegistrationPlateKindDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemRegistrations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemRegistration_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.ItemRegistrations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemRegistration_Source");
            });

            modelBuilder.Entity<ItemRegistrationAuthorityDim>(entity =>
            {
                entity.HasKey(e => e.ItemRegistrationAuthorityId)
                    .HasName("VehicleRegistrationAuthorityDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemRegistrationAuthorityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemRegistrationAuthorityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemRegistrationAuthorityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemRegistrationAuthorityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemRegistrationAuthorityDIMCodeView");

                entity.Property(e => e.ItemRegistrationAuthorityCode).HasMaxLength(20);
                entity.Property(e => e.ItemRegistrationAuthorityDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemRegistrationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemRegistrationGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemRegistrationAuthorityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationDescription).HasMaxLength(300);
                entity.Property(e => e.ItemRegistrationJurisdictionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationPlateCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationPlateCodeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationPlateKindCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PlateIdentification).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemRegistrationJurisdictionDim>(entity =>
            {
                entity.HasKey(e => e.ItemRegistrationJurisdictionId)
                    .HasName("VehicleRegistrationJurisdictionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemRegistrationJurisdictionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemRegistrationJurisdictionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemRegistrationJurisdictionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemRegistrationJurisdictionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemRegistrationJurisdictionDIMCodeView");

                entity.Property(e => e.ItemRegistrationJurisdictionCode).HasMaxLength(20);
                entity.Property(e => e.ItemRegistrationJurisdictionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemRegistrationPlateCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ItemRegistrationPlateCategoryId)
                    .HasName("VehiclePlateTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemRegistrationPlateCategoryDIM");

                entity.Property(e => e.ItemRegistrationPlateCategoryId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(200);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemRegistrationPlateCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemRegistrationPlateCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemRegistrationPlateCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemRegistrationPlateCategoryDIMCodeView");

                entity.Property(e => e.ItemRegistrationPlateCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ItemRegistrationPlateCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemRegistrationPlateCodeDim>(entity =>
            {
                entity.HasKey(e => e.ItemRegistrationPlateCodeId)
                    .HasName("ItemRegistrationPlateCodeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemRegistrationPlateCodeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemRegistrationPlateCodeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemRegistrationPlateCodeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemRegistrationPlateCodeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemRegistrationPlateCodeDIMCodeView");

                entity.Property(e => e.ItemRegistrationPlateCodeCode).HasMaxLength(20);
                entity.Property(e => e.ItemRegistrationPlateCodeDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemRegistrationPlateColorDim>(entity =>
            {
                entity.HasKey(e => e.ItemRegistrationPlateColorId)
                    .HasName("ItemRegistrationPlateColorDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemRegistrationPlateColorDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemRegistrationPlateColorDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemRegistrationPlateColorDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemRegistrationPlateKindDim>(entity =>
            {
                entity.HasKey(e => e.ItemRegistrationPlateKindId)
                    .HasName("ItemRegistrationPlateKindDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ItemRegistrationPlateKindDIM");

                entity.Property(e => e.ItemRegistrationPlateKindId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(200);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemRegistrationPlateKindDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemRegistrationPlateKindDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemRegistrationPlateKindDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemRegistrationPlateKindDIMCodeView");

                entity.Property(e => e.ItemRegistrationPlateKindCode).HasMaxLength(20);
                entity.Property(e => e.ItemRegistrationPlateKindDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemRegistrationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemRegistrationView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemRegistrationAuthorityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationAuthorityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationDescription).HasMaxLength(300);
                entity.Property(e => e.ItemRegistrationId).ValueGeneratedOnAdd();
                entity.Property(e => e.ItemRegistrationJurisdictionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationJurisdictionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationPlateCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationPlateCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationPlateCodeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationPlateCodeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationPlateKindCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemRegistrationPlateKindDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PlateIdentification).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemStatusDim>(entity =>
            {
                entity.HasKey(e => e.ItemStatusId)
                    .HasName("PK__ItemStat__80C775A3768CB1A9")
                    .HasFillFactor(80);

                entity.ToTable("ItemStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemStatusDIMCodeView");

                entity.Property(e => e.ItemStatusCode).HasMaxLength(20);
                entity.Property(e => e.ItemStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemUsageDim>(entity =>
            {
                entity.HasKey(e => e.ItemUsageId).HasFillFactor(80);

                entity.ToTable("ItemUsageDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ItemUsageDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ItemUsageDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ItemUsageDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemUsageDIMCodeView");

                entity.Property(e => e.ItemUsageCode).HasMaxLength(20);
                entity.Property(e => e.ItemUsageDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ItemView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ItemView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemId).ValueGeneratedOnAdd();
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Jewelry>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK_Jewelry_1")
                    .HasFillFactor(80);

                entity.ToTable("Jewelry");

                entity.Property(e => e.ItemId).ValueGeneratedNever();
                entity.Property(e => e.JewelryCaratId).HasDefaultValue(1);
                entity.Property(e => e.JewelryCategoryId).HasDefaultValue(1);
                entity.Property(e => e.JewelryGenderId).HasDefaultValue(1);
                entity.Property(e => e.JewelryMetalTypeId).HasDefaultValue(1);
                entity.Property(e => e.JewelryStyleId).HasDefaultValue(1);

                entity.HasOne(d => d.Item).WithOne(p => p.Jewelry)
                    .HasForeignKey<Jewelry>(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Jewelry_FK1");

                entity.HasOne(d => d.JewelryCarat).WithMany(p => p.Jewelries)
                    .HasForeignKey(d => d.JewelryCaratId)
                    .HasConstraintName("JewelryCaratDIM_Jewelry_FK1");

                entity.HasOne(d => d.JewelryCategory).WithMany(p => p.Jewelries)
                    .HasForeignKey(d => d.JewelryCategoryId)
                    .HasConstraintName("JewelryTypeDIM_Jewelry_FK1");

                entity.HasOne(d => d.JewelryGender).WithMany(p => p.Jewelries)
                    .HasForeignKey(d => d.JewelryGenderId)
                    .HasConstraintName("JewelryGenderDIM_Jewelry_FK1");

                entity.HasOne(d => d.JewelryMetalType).WithMany(p => p.Jewelries)
                    .HasForeignKey(d => d.JewelryMetalTypeId)
                    .HasConstraintName("JewelryMetalTypeDIM_Jewelry_FK1");

                entity.HasOne(d => d.JewelryStyle).WithMany(p => p.Jewelries)
                    .HasForeignKey(d => d.JewelryStyleId)
                    .HasConstraintName("JewelryStyleDIM_Jewelry_FK1");
            });

            modelBuilder.Entity<JewelryCaratDim>(entity =>
            {
                entity.HasKey(e => e.JewelryCaratId)
                    .HasName("JewelryCaratDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("JewelryCaratDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JewelryCaratDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JewelryCaratDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JewelryCaratDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryCaratDIMCodeView");

                entity.Property(e => e.JewelryCaratCode).HasMaxLength(20);
                entity.Property(e => e.JewelryCaratDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JewelryCategoryDim>(entity =>
            {
                entity.HasKey(e => e.JewelryCategoryId)
                    .HasName("JewelryTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("JewelryCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JewelryCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JewelryCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JewelryCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryCategoryDIMCodeView");

                entity.Property(e => e.JewelryCategoryCode).HasMaxLength(20);
                entity.Property(e => e.JewelryCategoryDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JewelryGenderDim>(entity =>
            {
                entity.HasKey(e => e.JewelryGenderId)
                    .HasName("JewelryGenderDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("JewelryGenderDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JewelryGenderDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JewelryGenderDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JewelryGenderDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryGenderDIMCodeView");

                entity.Property(e => e.JewelryGenderCode).HasMaxLength(20);
                entity.Property(e => e.JewelryGenderDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JewelryGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JewelryMetalTypeDim>(entity =>
            {
                entity.HasKey(e => e.JewelryMetalTypeId)
                    .HasName("JewelryMetalTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("JewelryMetalTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JewelryMetalTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JewelryMetalTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JewelryMetalTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryMetalTypeDIMCodeView");

                entity.Property(e => e.JewelryMetalTypeCode).HasMaxLength(20);
                entity.Property(e => e.JewelryMetalTypeDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JewelryStone>(entity =>
            {
                entity.HasKey(e => e.JewelryStoneId).HasFillFactor(80);

                entity.ToTable("JewelryStone");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.JewelryStoneCaratId).HasDefaultValue(1);
                entity.Property(e => e.JewelryStoneCategoryId).HasDefaultValue(1);
                entity.Property(e => e.JewelryStoneColorId).HasDefaultValue(1);
                entity.Property(e => e.JewelryStoneCutId).HasDefaultValue(1);
                entity.Property(e => e.JewelryStoneDescription).HasMaxLength(300);
                entity.Property(e => e.JewelryStoneGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Item).WithMany(p => p.JewelryStones)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Jewelry_JewelryStone_FK1");

                entity.HasOne(d => d.JewelryStoneCarat).WithMany(p => p.JewelryStones)
                    .HasForeignKey(d => d.JewelryStoneCaratId)
                    .HasConstraintName("JewelryCaratDIM_JewelryStone_FK1");

                entity.HasOne(d => d.JewelryStoneCategory).WithMany(p => p.JewelryStones)
                    .HasForeignKey(d => d.JewelryStoneCategoryId)
                    .HasConstraintName("JewelryStoneTypeDIM_JewelryStone_FK1");

                entity.HasOne(d => d.JewelryStoneColor).WithMany(p => p.JewelryStones)
                    .HasForeignKey(d => d.JewelryStoneColorId)
                    .HasConstraintName("itemColorDIM_JewelryStone_FK1");

                entity.HasOne(d => d.JewelryStoneCut).WithMany(p => p.JewelryStones)
                    .HasForeignKey(d => d.JewelryStoneCutId)
                    .HasConstraintName("JewelryStoneCutDIM_JewelryStone_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JewelryStones)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JewelryStone_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.JewelryStones)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JewelryStone_Source");
            });

            modelBuilder.Entity<JewelryStoneCaratDim>(entity =>
            {
                entity.HasKey(e => e.JewelryStoneCaratId).HasFillFactor(80);

                entity.ToTable("JewelryStoneCaratDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JewelryStoneCaratDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JewelryStoneCaratDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JewelryStoneCaratDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryStoneCaratDIMCodeView");

                entity.Property(e => e.JewelryStoneCaratCode).HasMaxLength(20);
                entity.Property(e => e.JewelryStoneCaratDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JewelryStoneCategoryDim>(entity =>
            {
                entity.HasKey(e => e.JewelryStoneCategoryId)
                    .HasName("JewelryStoneTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("JewelryStoneCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JewelryStoneCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JewelryStoneCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JewelryStoneCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryStoneCategoryDIMCodeView");

                entity.Property(e => e.JewelryStoneCategoryCode).HasMaxLength(20);
                entity.Property(e => e.JewelryStoneCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JewelryStoneCutDim>(entity =>
            {
                entity.HasKey(e => e.JewelryStoneCutId)
                    .HasName("JewelryStoneCutDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("JewelryStoneCutDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JewelryStoneCutDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JewelryStoneCutDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JewelryStoneCutDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryStoneCutDIMCodeView");

                entity.Property(e => e.JewelryStoneCutCode).HasMaxLength(20);
                entity.Property(e => e.JewelryStoneCutDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JewelryStoneGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryStoneGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.JewelryStoneCaratCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneCutCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JewelryStoneView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryStoneView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.JewelryStoneCaratCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneCaratDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneCutCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneCutDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStoneDescription).HasMaxLength(300);
                entity.Property(e => e.JewelryStoneId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JewelryStyleDim>(entity =>
            {
                entity.HasKey(e => e.JewelryStyleId)
                    .HasName("JewelryStyleDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("JewelryStyleDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JewelryStyleDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JewelryStyleDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JewelryStyleDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryStyleDIMCodeView");

                entity.Property(e => e.JewelryStyleCode).HasMaxLength(20);
                entity.Property(e => e.JewelryStyleDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JewelryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JewelryView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_HangFire_Job");

                entity.ToTable("Job", "HangFire");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Job_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

                entity.HasIndex(e => e.StateName, "IX_HangFire_Job_StateName").HasFilter("([StateName] IS NOT NULL)");

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");
                entity.Property(e => e.ExpireAt).HasColumnType("datetime");
                entity.Property(e => e.StateName).HasMaxLength(20);
            });

            modelBuilder.Entity<JobParameter>(entity =>
            {
                entity.HasKey(e => new { e.JobId, e.Name }).HasName("PK_HangFire_JobParameter");

                entity.ToTable("JobParameter", "HangFire");

                entity.Property(e => e.Name).HasMaxLength(40);

                entity.HasOne(d => d.Job).WithMany(p => p.JobParameters)
                    .HasForeignKey(d => d.JobId)
                    .HasConstraintName("FK_HangFire_JobParameter_Job");
            });

            modelBuilder.Entity<JobQueue>(entity =>
            {
                entity.HasKey(e => new { e.Queue, e.Id }).HasName("PK_HangFire_JobQueue");

                entity.ToTable("JobQueue", "HangFire");

                entity.Property(e => e.Queue).HasMaxLength(50);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.FetchedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<JudicialOfficial>(entity =>
            {
                entity.HasKey(e => e.PersonId).HasFillFactor(80);

                entity.ToTable("JudicialOfficial");

                entity.Property(e => e.PersonId).ValueGeneratedNever();
                entity.Property(e => e.IdentificationJurisdiction).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarIdentification).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialRegIdentification).HasMaxLength(50);

                entity.HasOne(d => d.JudicialOfficialBarStatus).WithMany(p => p.JudicialOfficials)
                    .HasForeignKey(d => d.JudicialOfficialBarStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JudicialOfficial_JudicialOfficialBarStatusDIM");

                entity.HasOne(d => d.JudicialOfficialCategory).WithMany(p => p.JudicialOfficials)
                    .HasForeignKey(d => d.JudicialOfficialCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JudicialOfficial_JudicialOffiicalCategoryDIM");

                entity.HasOne(d => d.JudicialOfficialPanel).WithMany(p => p.JudicialOfficials)
                    .HasForeignKey(d => d.JudicialOfficialPanelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JudicialOfficial_JudicialOfficialPanelDIM");

                entity.HasOne(d => d.Person).WithOne(p => p.JudicialOfficial)
                    .HasForeignKey<JudicialOfficial>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JudicialOfficial_Person");
            });

            modelBuilder.Entity<JudicialOfficialBarStatusDim>(entity =>
            {
                entity.HasKey(e => e.JudicialOfficialBarStatusId)
                    .HasName("PK__Judicial__9A21FCADFF16411B")
                    .HasFillFactor(80);

                entity.ToTable("JudicialOfficialBarStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JudicialOfficialBarStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JudicialOfficialBarStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JudicialOfficialBarStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JudicialOfficialBarStatusDIMCodeView");

                entity.Property(e => e.JudicialOfficialBarStatusCode).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarStatusDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JudicialOfficialCategoryDim>(entity =>
            {
                entity.HasKey(e => e.JudicialOfficialCategoryId)
                    .HasName("PK__Judicial__3CA028A2211B4EEC")
                    .HasFillFactor(80);

                entity.ToTable("JudicialOfficialCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JudicialOfficialCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JudicialOfficialCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JudicialOfficialCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JudicialOfficialCategoryDIMCodeView");

                entity.Property(e => e.JudicialOfficialCategoryCode).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JudicialOfficialGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JudicialOfficialGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IdentificationJurisdiction).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarIdentification).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialRegIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<JudicialOfficialPanelDim>(entity =>
            {
                entity.HasKey(e => e.JudicialOfficialPanelId)
                    .HasName("PK__Judicial__87BE839DC640C9A2")
                    .HasFillFactor(80);

                entity.ToTable("JudicialOfficialPanelDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JudicialOfficialPanelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JudicialOfficialPanelDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JudicialOfficialPanelDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JudicialOfficialPanelDIMCodeView");

                entity.Property(e => e.JudicialOfficialPanelCode).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialPanelDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JudicialOfficialView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JudicialOfficialView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IdentificationJurisdiction).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarIdentification).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialBarStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialRegIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<Juror>(entity =>
            {
                entity.HasKey(e => e.PersonId).HasFillFactor(80);

                entity.ToTable("Juror");

                entity.Property(e => e.PersonId).ValueGeneratedNever();
                entity.Property(e => e.JurorDismissedDate).HasColumnType("datetime");
                entity.Property(e => e.JurorIdentification).HasMaxLength(50);
                entity.Property(e => e.JurorPanelIdentification).HasMaxLength(50);

                entity.HasOne(d => d.JurorDismissedReason).WithMany(p => p.Jurors)
                    .HasForeignKey(d => d.JurorDismissedReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Juror_JurorDismissedReasonDIM");

                entity.HasOne(d => d.Person).WithOne(p => p.Juror)
                    .HasForeignKey<Juror>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Juror_Person");
            });

            modelBuilder.Entity<JurorDismissedReasonDim>(entity =>
            {
                entity.HasKey(e => e.JurorDismissedReasonId)
                    .HasName("PK__JurorDis__DCC20E00FFA5E301")
                    .HasFillFactor(80);

                entity.ToTable("JurorDismissedReasonDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.JurorDismissedReasonDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_JurorDismissedReasonDIM_RowStatusDIM");
            });

            modelBuilder.Entity<JurorDismissedReasonDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JurorDismissedReasonDIMCodeView");

                entity.Property(e => e.JurorDismissedReasonCode).HasMaxLength(50);
                entity.Property(e => e.JurorDismissedReasonDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<JurorGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JurorGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.JurorDismissedDate).HasColumnType("datetime");
                entity.Property(e => e.JurorDismissedReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorIdentification).HasMaxLength(50);
                entity.Property(e => e.JurorPanelIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<JurorView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("JurorView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.JurorDismissedDate).HasColumnType("datetime");
                entity.Property(e => e.JurorDismissedReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorDismissedReasonDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorIdentification).HasMaxLength(50);
                entity.Property(e => e.JurorPanelIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<LanguageDim>(entity =>
            {
                entity.HasKey(e => e.LanguageId)
                    .HasName("LanguageDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("LanguageDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Isocode6392)
                    .HasMaxLength(50)
                    .HasColumnName("ISOCode6392");
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LanguageDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LanguageDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LanguageDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LanguageDIMCodeView");

                entity.Property(e => e.LanguageCode).HasMaxLength(20);
                entity.Property(e => e.LanguageDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<LicenseCategoryDim>(entity =>
            {
                entity.HasKey(e => e.LicenseCategoryId)
                    .HasName("PK__LicenseC__B7C8860F03803CE7")
                    .HasFillFactor(80);

                entity.ToTable("LicenseCategoryDim");

                entity.Property(e => e.LicenseCategoryId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LicenseCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LicenseCategoryDim_RowStatusDIM");
            });

            modelBuilder.Entity<LicensePlate>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK__LicenseP__727E838BB9EEF698")
                    .HasFillFactor(80);

                entity.ToTable("LicensePlate");

                entity.Property(e => e.ItemId).ValueGeneratedNever();
                entity.Property(e => e.DateEntered).HasColumnType("datetime");
                entity.Property(e => e.DateOfTheft).HasColumnType("datetime");
                entity.Property(e => e.ExpireDate).HasColumnType("datetime");
                entity.Property(e => e.LicensePlateListSourceId).HasDefaultValue(1);
                entity.Property(e => e.LicensePlateListTypeId).HasDefaultValue(1);
                entity.Property(e => e.Ncicnumber)
                    .HasMaxLength(50)
                    .HasColumnName("NCICNumber");

                entity.HasOne(d => d.Item).WithOne(p => p.LicensePlate)
                    .HasForeignKey<LicensePlate>(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LicensePlate_Activity");

                entity.HasOne(d => d.LicensePlateListSource).WithMany(p => p.LicensePlates)
                    .HasForeignKey(d => d.LicensePlateListSourceId)
                    .HasConstraintName("FK_LicensePlate_LicensePlateListSourceDIM");

                entity.HasOne(d => d.LicensePlateListType).WithMany(p => p.LicensePlates)
                    .HasForeignKey(d => d.LicensePlateListTypeId)
                    .HasConstraintName("FK_LicensePlate_LicensePlateListTypeDIM");
            });

            modelBuilder.Entity<LicensePlateCameraDim>(entity =>
            {
                entity.HasKey(e => e.LicensePlateCameraId)
                    .HasName("PK__LicenseP__0177C9F67015C4D9")
                    .HasFillFactor(80);

                entity.ToTable("LicensePlateCameraDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.System).HasMaxLength(50);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LicensePlateCameraDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LicensePlateCameraDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LicensePlateCameraDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LicensePlateCameraDIMCodeView");

                entity.Property(e => e.LicensePlateCameraCode).HasMaxLength(20);
                entity.Property(e => e.LicensePlateCameraDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<LicensePlateDirectionDim>(entity =>
            {
                entity.HasKey(e => e.LicensePlateDirectionId)
                    .HasName("PK__LicenseP__BD284C589D2ECF91")
                    .HasFillFactor(80);

                entity.ToTable("LicensePlateDirectionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LicensePlateDirectionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LicensePlateDirectionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LicensePlateDirectionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LicensePlateDirectionDIMCodeView");

                entity.Property(e => e.LicensePlateDirectionCode).HasMaxLength(20);
                entity.Property(e => e.LicensePlateDirectionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<LicensePlateGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LicensePlateGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DateEntered).HasColumnType("datetime");
                entity.Property(e => e.DateOfTheft).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ExpireDate).HasColumnType("datetime");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Ncicnumber)
                    .HasMaxLength(50)
                    .HasColumnName("NCICNumber");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LicensePlateLaneDim>(entity =>
            {
                entity.HasKey(e => e.LicensePlateLaneId)
                    .HasName("PK__LicenseP__9D2628C3B961F9EE")
                    .HasFillFactor(80);

                entity.ToTable("LicensePlateLaneDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LicensePlateLaneDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LicensePlateLaneDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LicensePlateLaneDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LicensePlateLaneDIMCodeView");

                entity.Property(e => e.LicensePlateLaneCode).HasMaxLength(20);
                entity.Property(e => e.LicensePlateLaneDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<LicensePlateListSourceDim>(entity =>
            {
                entity.HasKey(e => e.LicensePlateListSourceId)
                    .HasName("PK__LicenseP__1739BFABF9CC3872")
                    .HasFillFactor(80);

                entity.ToTable("LicensePlateListSourceDIM");

                entity.Property(e => e.LicensePlateListSourceId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.InEmirates).HasDefaultValue(true);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LicensePlateListSourceDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LicensePlateListSourceDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LicensePlateListSourceDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LicensePlateListSourceDIMCodeView");

                entity.Property(e => e.LicensePlateListSourceCode).HasMaxLength(20);
                entity.Property(e => e.LicensePlateListSourceDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<LicensePlateListTypeDim>(entity =>
            {
                entity.HasKey(e => e.LicensePlateListTypeId)
                    .HasName("PK__LicenseP__1AE00F637BF1D2B5")
                    .HasFillFactor(80);

                entity.ToTable("LicensePlateListTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LicensePlateListTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LicensePlateListTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LicensePlateListTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LicensePlateListTypeDIMCodeView");

                entity.Property(e => e.LicensePlateListTypeCode).HasMaxLength(20);
                entity.Property(e => e.LicensePlateListTypeDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<LicensePlateLocation>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__LicenseP__45F4A791418D84B7")
                    .HasFillFactor(80);

                entity.ToTable("LicensePlateLocation");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.IsPhotoPresent).HasDefaultValue(false);
                entity.Property(e => e.IsVideoPresent).HasDefaultValue(false);
                entity.Property(e => e.LicensePlateCameraId).HasDefaultValue(1);
                entity.Property(e => e.LicensePlateDirectionId).HasDefaultValue(1);
                entity.Property(e => e.LicensePlateLaneId).HasDefaultValue(1);
                entity.Property(e => e.LicensePlateViolationTypeId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.LicensePlateLocation)
                    .HasForeignKey<LicensePlateLocation>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LicensePlateLocation_Activity");

                entity.HasOne(d => d.LicensePlateCamera).WithMany(p => p.LicensePlateLocations)
                    .HasForeignKey(d => d.LicensePlateCameraId)
                    .HasConstraintName("FK_LicensePlateLocation_LicensePlaceCameraDIM");

                entity.HasOne(d => d.LicensePlateDirection).WithMany(p => p.LicensePlateLocations)
                    .HasForeignKey(d => d.LicensePlateDirectionId)
                    .HasConstraintName("FK_LicensePlateLocation_LicensePlateDirectionDIM");

                entity.HasOne(d => d.LicensePlateLane).WithMany(p => p.LicensePlateLocations)
                    .HasForeignKey(d => d.LicensePlateLaneId)
                    .HasConstraintName("FK_LicensePlateLocation_LicensePlateLaneDIM");

                entity.HasOne(d => d.LicensePlateViolationType).WithMany(p => p.LicensePlateLocations)
                    .HasForeignKey(d => d.LicensePlateViolationTypeId)
                    .HasConstraintName("FK_LicensePlateLocation_LicensePlateViolationTypeDIM");
            });

            modelBuilder.Entity<LicensePlateView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LicensePlateView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DateEntered).HasColumnType("datetime");
                entity.Property(e => e.DateOfTheft).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ExpireDate).HasColumnType("datetime");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Ncicnumber)
                    .HasMaxLength(50)
                    .HasColumnName("NCICNumber");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LicensePlateViolationTypeDim>(entity =>
            {
                entity.HasKey(e => e.LicensePlateViolationTypeId)
                    .HasName("PK__LicenseP__6D8131E2B4437DA7")
                    .HasFillFactor(80);

                entity.ToTable("LicensePlateViolationTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LicensePlateViolationTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LicensePlateViolationTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LicensePlateViolationTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LicensePlateViolationTypeDIMCodeView");

                entity.Property(e => e.LicensePlateViolationTypeCode).HasMaxLength(20);
                entity.Property(e => e.LicensePlateViolationTypeDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<List>(entity =>
            {
                entity.HasKey(e => new { e.Key, e.Id }).HasName("PK_HangFire_List");

                entity.ToTable("List", "HangFire");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_List_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

                entity.Property(e => e.Key).HasMaxLength(100);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.ExpireAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<LoadedReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("Loaded_Reports");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.HasKey(e => e.LocationId).HasFillFactor(80);

                entity.ToTable("Location");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.Latitude).HasComputedColumnSql("([GeoPoint].[STY])", false);
                entity.Property(e => e.LocationCategoryId).HasDefaultValue(1);
                entity.Property(e => e.LocationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.LocationName).HasMaxLength(100);
                entity.Property(e => e.Longitude).HasComputedColumnSql("([GeoPoint].[STX])", false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.LocationCategory).WithMany(p => p.Locations)
                    .HasForeignKey(d => d.LocationCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LocationTypeDIM_Location_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Locations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Location_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Locations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Location_Source");
            });

            modelBuilder.Entity<LocationArea>(entity =>
            {
                entity.HasKey(e => e.LocationAreaId).HasFillFactor(80);

                entity.ToTable("LocationArea");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.FromDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationAreaDescription).HasMaxLength(300);
                entity.Property(e => e.LocationAreaGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ToDateTimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.Area).WithMany(p => p.LocationAreas)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationArea_GeoAreaofInterestDIM");

                entity.HasOne(d => d.AreaInvolvement).WithMany(p => p.LocationAreas)
                    .HasForeignKey(d => d.AreaInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationArea_AreaInvolvementDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.LocationAreaCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_LocationArea_Person");

                entity.HasOne(d => d.Location).WithMany(p => p.LocationAreas)
                    .HasForeignKey(d => d.Locationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationArea_Location");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.LocationAreaModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_LocationArea_Person1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LocationAreas)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LocationArea_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.LocationAreas)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationArea_Source");
            });

            modelBuilder.Entity<LocationAreaContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationAreaContainerGuidView");

                entity.Property(e => e.AreaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationAreaDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationAreaContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationAreaContainerView");

                entity.Property(e => e.AreaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationAreaDescription).HasMaxLength(300);
                entity.Property(e => e.LocationAreaId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationAreaGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationAreaGuidView");

                entity.Property(e => e.AreaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.LocationAreaDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationAreaView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationAreaView");

                entity.Property(e => e.AreaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AreaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.LocationAreaDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationCategoryDim>(entity =>
            {
                entity.HasKey(e => e.LocationCategoryId)
                    .HasName("LocationTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("LocationCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Type).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LocationCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LocationCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LocationCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationCategoryDIMCodeView");

                entity.Property(e => e.LocationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.LocationCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<LocationComment>(entity =>
            {
                entity.HasKey(e => e.LocationCommentId).HasFillFactor(80);

                entity.ToTable("LocationComment");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.LocationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.LocationCommentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Comment).WithMany(p => p.LocationComments)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationComment_Comment");

                entity.HasOne(d => d.CommentInvolvement).WithMany(p => p.LocationComments)
                    .HasForeignKey(d => d.CommentInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationComment_CommentInvolvementDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.LocationCommentCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_LocationComment_Person");

                entity.HasOne(d => d.Location).WithMany(p => p.LocationComments)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationComment_Location");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.LocationCommentModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_LocationComment_Person1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LocationComments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LocationComment_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.LocationComments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationComment_Source");
            });

            modelBuilder.Entity<LocationCommentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationCommentContainerGuidView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationCommentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationCommentContainerView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.LocationCommentId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationCommentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationCommentGuidView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationCommentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationCommentView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImportanceHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PriorityHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationContact>(entity =>
            {
                entity.HasKey(e => e.LocationContactId).HasFillFactor(80);

                entity.ToTable("LocationContact");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.LocationContactDescription).HasMaxLength(300);
                entity.Property(e => e.LocationContactGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Contact).WithMany(p => p.LocationContacts)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationContact_Contact");

                entity.HasOne(d => d.ContactInvolvement).WithMany(p => p.LocationContacts)
                    .HasForeignKey(d => d.ContactInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationContact_ContactInvolvementDIM");

                entity.HasOne(d => d.Location).WithMany(p => p.LocationContacts)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationContact_Location");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LocationContacts)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LocationContact_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.LocationContacts)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationContact_Source");
            });

            modelBuilder.Entity<LocationContactContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationContactContainerGuidView");

                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationContactDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationContactContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationContactContainerView");

                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationContactDescription).HasMaxLength(300);
                entity.Property(e => e.LocationContactId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationContactGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationContactGuidView");

                entity.Property(e => e.ContactCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationContactDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationContactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationContactView");

                entity.Property(e => e.ContactCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationContactDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationDatumDim>(entity =>
            {
                entity.HasKey(e => e.LocationDatumId)
                    .HasName("PK__Location__57EEA5E5E65544F7")
                    .HasFillFactor(80);

                entity.ToTable("LocationDatumDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LocationDatumDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LocationDatumDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LocationDatumDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationDatumDIMCodeView");

                entity.Property(e => e.LocationDatumCode).HasMaxLength(20);
                entity.Property(e => e.LocationDatumDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<LocationDocument>(entity =>
            {
                entity.HasKey(e => e.LocationDocumentId).HasFillFactor(80);

                entity.ToTable("LocationDocument");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.LocationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.LocationDocumentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Document).WithMany(p => p.LocationDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationDocument_Document");

                entity.HasOne(d => d.DocumentInvolvement).WithMany(p => p.LocationDocuments)
                    .HasForeignKey(d => d.DocumentInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationDocument_DocumentInvolvementDIM");

                entity.HasOne(d => d.Location).WithMany(p => p.LocationDocuments)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationDocument_Location");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LocationDocuments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LocationDocument_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.LocationDocuments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationDocument_Source");
            });

            modelBuilder.Entity<LocationDocumentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationDocumentContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationDocumentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationDocumentContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.LocationDocumentId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationDocumentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationDocumentGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.LocationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<LocationDocumentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationDocumentView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.LocationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<LocationImage>(entity =>
            {
                entity.HasKey(e => e.LocationImageId).HasFillFactor(80);

                entity.ToTable("LocationImage");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.LocationImageDescription).HasMaxLength(300);
                entity.Property(e => e.LocationImageGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Image).WithMany(p => p.LocationImages)
                    .HasForeignKey(d => d.ImageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationImage_Image");

                entity.HasOne(d => d.ImageInvolvement).WithMany(p => p.LocationImages)
                    .HasForeignKey(d => d.ImageInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationImage_ImageInvolvementDIM");

                entity.HasOne(d => d.Location).WithMany(p => p.LocationImages)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationImage_Location");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LocationImages)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LocationImage_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.LocationImages)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LocationImage_LocationImage");
            });

            modelBuilder.Entity<LocationImageContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationImageContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationImageDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationImageContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationImageContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationImageDescription).HasMaxLength(300);
                entity.Property(e => e.LocationImageId).ValueGeneratedOnAdd();
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationImageGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationImageGuidView");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.LocationImageDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationImageView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationImageView");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.LocationImageDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.LocationInvolvementId)
                    .HasName("LocationInvolvementDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("LocationInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LocationInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LocationInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LocationInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationInvolvementDIMCodeView");

                entity.Property(e => e.LocationInvolvementCode).HasMaxLength(20);
                entity.Property(e => e.LocationInvolvementDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<LocationMatrix>(entity =>
            {
                entity.HasKey(e => e.LocationMatrixId)
                    .HasName("PK__Location__41FC1017717B4791")
                    .HasFillFactor(80);

                entity.ToTable("LocationMatrix");

                entity.Property(e => e.IsActive).HasDefaultValue(true);

                entity.HasOne(d => d.Area).WithMany(p => p.LocationMatrixAreas)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("fk_LocationMatrix_Area_Area");

                entity.HasOne(d => d.City).WithMany(p => p.LocationMatrixCities)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("fk_LocationMatrix_Area_City");

                entity.HasOne(d => d.Emirates).WithMany(p => p.LocationMatrixEmirates)
                    .HasForeignKey(d => d.EmiratesId)
                    .HasConstraintName("fk_LocationMatrix_Area_Emirates");

                entity.HasOne(d => d.Sector).WithMany(p => p.LocationMatrixSectors)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("fk_LocationMatrix_Area_Sector");

                entity.HasOne(d => d.Street).WithMany(p => p.LocationMatrixStreets)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("fk_LocationMatrix_Area_Street");
            });

            modelBuilder.Entity<LocationQuestionnaireContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationQuestionnaireContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationQuestionnaireGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationQuestionnaireGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.LocationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<LocationQuestionnaireView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationQuestionnaireView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.LocationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.QuestionnaireCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<LocationStreetCategoryDim>(entity =>
            {
                entity.HasKey(e => e.LocationStreetCategoryId)
                    .HasName("RoadTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("LocationStreetCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LocationStreetCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LocationStreetCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LocationStreetCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationStreetCategoryDIMCodeView");

                entity.Property(e => e.LocationStreetCategoryCode).HasMaxLength(20);
                entity.Property(e => e.LocationStreetCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<LocationStreetDirectionDim>(entity =>
            {
                entity.HasKey(e => e.LocationStreetDirectionId)
                    .HasName("RoadDirectionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("LocationStreetDirectionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.LocationStreetDirectionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_LocationStreetDirectionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<LocationStreetDirectionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LocationStreetDirectionDIMCodeView");

                entity.Property(e => e.LocationStreetDirectionCode).HasMaxLength(20);
                entity.Property(e => e.LocationStreetDirectionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<LogedInPatrol>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_LogedPatrol");

                entity.ToTable("LogedInPatrol");

                entity.Property(e => e.PersonName).HasMaxLength(50);
                entity.Property(e => e.SectorCode).HasMaxLength(50);

                entity.HasOne(d => d.Item).WithMany(p => p.LogedInPatrols)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LogedInPatrol_Item");

                entity.HasOne(d => d.Person).WithMany(p => p.LogedInPatrols)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LogedInPatrol_Person");

                entity.HasOne(d => d.Sector).WithMany(p => p.LogedInPatrols)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LogedInPatrol_Area");
            });

            modelBuilder.Entity<LoggedInPatrolPersonView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("LoggedInPatrolPersonView");

                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<LogoutToken>(entity =>
            {
                entity.ToTable("LogoutToken");

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.Token).HasMaxLength(1024);
            });

            modelBuilder.Entity<LookUpTranslate>(entity =>
            {
                entity.HasKey(e => e.TranslateLookUpId);

                entity.ToTable("LookUpTranslate");
            });

            modelBuilder.Entity<Lookup>(entity =>
            {
                entity.ToTable("Lookup");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.Name).HasMaxLength(150);
            });

            modelBuilder.Entity<LookupDetail>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.LookupId).HasColumnName("LookupID");
                entity.Property(e => e.Name).HasMaxLength(150);
                entity.Property(e => e.NameAr).HasMaxLength(150);

                entity.HasOne(d => d.Lookup).WithMany(p => p.LookupDetails)
                    .HasForeignKey(d => d.LookupId)
                    .HasConstraintName("FK_LookupDetails_Lookup");
            });

            modelBuilder.Entity<MdtGetAttendedPatrolByArea>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtGetAttendedPatrolByArea");

                entity.Property(e => e.LoginDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<MdtGetEscortingReportBasicDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtGetEscortingReportBasicDetails");

                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentTime).HasColumnType("datetime");
                entity.Property(e => e.Priority).HasMaxLength(20);
                entity.Property(e => e.ReportDescription).HasMaxLength(3000);
                entity.Property(e => e.ReportNumber)
                    .HasMaxLength(100)
                    .HasColumnName("reportNumber");
                entity.Property(e => e.SourceName).HasMaxLength(100);
            });

            modelBuilder.Entity<MdtGetRspImage>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtGetRspImages");

                entity.Property(e => e.ImageName).HasMaxLength(100);
            });

            modelBuilder.Entity<MdtGetRspProcedure>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtGetRspProcedures");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.ProceduresList)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MdtGetRspReportBasicDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtGetRspReportBasicDetails");

                entity.Property(e => e.AffectedLanes)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.EventTypes)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.FieldsFactors)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentTime).HasColumnType("datetime");
                entity.Property(e => e.Priority).HasMaxLength(20);
                entity.Property(e => e.ReportNumber)
                    .HasMaxLength(100)
                    .HasColumnName("reportNumber");
                entity.Property(e => e.SourceName).HasMaxLength(100);
            });

            modelBuilder.Entity<MdtGetRspVehicleDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtGetRspVehicleData");

                entity.Property(e => e.DriverName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.DriverTrafficCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.LicenseNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PlateNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TrafficCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MdtGetTunnelReportBasicDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtGetTunnelReportBasicDetails");

                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentTime).HasColumnType("datetime");
                entity.Property(e => e.Priority).HasMaxLength(20);
                entity.Property(e => e.ReportDescription).HasMaxLength(3000);
                entity.Property(e => e.ReportNumber)
                    .HasMaxLength(100)
                    .HasColumnName("reportNumber");
                entity.Property(e => e.SourceName).HasMaxLength(100);
            });

            modelBuilder.Entity<MdtViewCheckUserLogin>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtViewCheckUserLogin");

                entity.Property(e => e.MainLoginDate).HasColumnType("datetime");
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.TempLoginTime).HasColumnType("datetime");
                entity.Property(e => e.TempLogoutRequestAcceptDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<MdtViewReportDamagedProperty>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtViewReportDamagedProperties");

                entity.Property(e => e.Note)
                    .HasMaxLength(300)
                    .HasColumnName("NOTE");
            });

            modelBuilder.Entity<MdtViewReportImage>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtViewReportImages");

                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.ImageName).HasMaxLength(100);
            });

            modelBuilder.Entity<MdtViewReportReconstructionPlan>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtViewReportReconstructionPlan");

                entity.Property(e => e.CurrentLocationValue).HasMaxLength(300);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.ImagePath).HasMaxLength(300);
                entity.Property(e => e.MapMode).HasMaxLength(20);
                entity.Property(e => e.SearchAddress).HasMaxLength(300);
                entity.Property(e => e.SelectedMap)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.Xaxis).HasColumnName("XAxis");
                entity.Property(e => e.Yaxis).HasColumnName("YAxis");
            });

            modelBuilder.Entity<MdtViewReportWittness>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtViewReportWittness");

                entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
                entity.Property(e => e.MobileNumber).HasMaxLength(100);
                entity.Property(e => e.TrafficCode).HasMaxLength(100);
                entity.Property(e => e.WittnessName).HasMaxLength(100);
                entity.Property(e => e.WittnessTestimony).HasMaxLength(300);
            });

            modelBuilder.Entity<MdtViewVehicleDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MdtViewVehicleData");

                entity.Property(e => e.ChasisNumber).HasMaxLength(100);
                entity.Property(e => e.DriverDataAddress)
                    .HasMaxLength(300)
                    .HasColumnName("DriverData_Address");
                entity.Property(e => e.DriverDataBirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DriverData_BirthDate");
                entity.Property(e => e.DriverDataExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DriverData_ExpiryDate");
                entity.Property(e => e.DriverDataId).HasColumnName("DriverData_Id");
                entity.Property(e => e.DriverDataIssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DriverData_IssueDate");
                entity.Property(e => e.DriverDataLicenseCategoryId).HasColumnName("DriverData_LicenseCategoryId");
                entity.Property(e => e.DriverDataLicenseNumber)
                    .HasMaxLength(100)
                    .HasColumnName("DriverData_LicenseNumber");
                entity.Property(e => e.DriverDataMobileNumber)
                    .HasMaxLength(20)
                    .HasColumnName("DriverData_MobileNumber");
                entity.Property(e => e.DriverDataName)
                    .HasMaxLength(100)
                    .HasColumnName("DriverData_Name");
                entity.Property(e => e.DriverDataNationalityId).HasColumnName("DriverData_NationalityId");
                entity.Property(e => e.DriverDataTrafficCode)
                    .HasMaxLength(100)
                    .HasColumnName("DriverData_TrafficCode");
                entity.Property(e => e.EngineNumber).HasMaxLength(100);
                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(100);
                entity.Property(e => e.InsuranceTypeId).HasColumnName("InsuranceTypeID");
                entity.Property(e => e.OwnerDataAddress)
                    .HasMaxLength(300)
                    .HasColumnName("OwnerData_Address");
                entity.Property(e => e.OwnerDataId).HasColumnName("OwnerData_Id");
                entity.Property(e => e.OwnerDataName)
                    .HasMaxLength(100)
                    .HasColumnName("OwnerData_Name");
                entity.Property(e => e.OwnerDataNationalityId).HasColumnName("OwnerData_NationalityId");
                entity.Property(e => e.OwnerDataTrafficCode)
                    .HasMaxLength(100)
                    .HasColumnName("OwnerData_TrafficCode");
                entity.Property(e => e.PlateNumber).HasMaxLength(100);
                entity.Property(e => e.VehicleBrandId).HasColumnName("VehicleBrandID");
                entity.Property(e => e.VehicleCategoryId).HasColumnName("VehicleCategoryID");
                entity.Property(e => e.VehicleDataCausingType)
                    .HasMaxLength(100)
                    .HasColumnName("VehicleData_CausingType");
                entity.Property(e => e.VehicleDataComments)
                    .HasMaxLength(300)
                    .HasColumnName("VehicleData_Comments");
                entity.Property(e => e.VehicleDataExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VehicleData_ExpiryDate");
                entity.Property(e => e.VehicleDescription).HasMaxLength(300);
                entity.Property(e => e.VehicleModelId).HasColumnName("VehicleModelID");
                entity.Property(e => e.VehicleTypeId).HasColumnName("VehicleTypeID");
                entity.Property(e => e.WeightEmpty).HasMaxLength(50);
                entity.Property(e => e.WeightNonEmpty).HasMaxLength(50);
            });

            modelBuilder.Entity<MdtaccidentBasicDetail>(entity =>
            {
                entity.HasKey(e => e.MdtaccidentBasicDetailsId)
                    .HasName("PK__MDTAccid__5C1D2444954EF239")
                    .HasFillFactor(80);

                entity.ToTable("MDTAccidentBasicDetails");

                entity.Property(e => e.MdtaccidentBasicDetailsId).HasColumnName("MDTAccidentBasicDetailsId");
                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.EasternCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.LocationDescription).HasMaxLength(3000);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.NorthernCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.ReportReconstructionWillBeContinued).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AccidentLocationDescription).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.AccidentLocationDescriptionId)
                    .HasConstraintName("FK__MDTAccide__Accid__519EE6B3");

                entity.HasOne(d => d.AccidentType).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.AccidentTypeId)
                    .HasConstraintName("FK_MDTAccidentBasicDetails_AccidentTypeDim");

                entity.HasOne(d => d.City).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_MDTAccidentBasicDetailsEmirates_CityDIM");

                entity.HasOne(d => d.CollisionType).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.CollisionTypeId)
                    .HasConstraintName("FK__MDTAccide__Colli__50AAC27A");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_MDTAccidentBasicDetails_Person");

                entity.HasOne(d => d.CrossingStreet).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.CrossingStreetId)
                    .HasConstraintName("FK_MDTAccidentBasicDetailsEmirates_CrossStreetDIM");

                entity.HasOne(d => d.Emirates).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.EmiratesId)
                    .HasConstraintName("FK_MDTAccidentBasicDetailsEmirates_EmirateDIM");

                entity.HasOne(d => d.Intersection).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.IntersectionId)
                    .HasConstraintName("FK_MDTAccidentBasicDetails_IntersectionDim");

                entity.HasOne(d => d.Region).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FK_MDTAccidentBasicDetailsEmirates_ReportAreaDIM");

                entity.HasOne(d => d.RoadSpeed).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.RoadSpeedId)
                    .HasConstraintName("FK_MDTAccidentBasicDetails_RoadSpeedDim");

                entity.HasOne(d => d.RoadSurface).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.RoadSurfaceId)
                    .HasConstraintName("FK_MDTAccidentBasicDetails_RoadSurfaceDim");

                entity.HasOne(d => d.Scenario).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.ScenarioId)
                    .HasConstraintName("FK_MDTAccidentBasicDetails_ScenarioDIM");

                entity.HasOne(d => d.Sector).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.SectorId)
                    .HasConstraintName("FK_MDTAccidentBasicDetailsEmirates_SectorDIM");

                entity.HasOne(d => d.Street).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.StreetId)
                    .HasConstraintName("FK_MDTAccidentBasicDetailsEmirates_StreetDIM");

                entity.HasOne(d => d.Weather).WithMany(p => p.MdtaccidentBasicDetails)
                    .HasForeignKey(d => d.WeatherId)
                    .HasConstraintName("FK_MDTAccidentBasicDetails_WeatherDim");
            });

            modelBuilder.Entity<MdtaccidentReportBasicDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MDTAccidentReportBasicDetails");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.EasternCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.LocationDescription).HasMaxLength(3000);
                entity.Property(e => e.MdtaccidentBasicDetailsId).HasColumnName("MDTAccidentBasicDetailsId");
                entity.Property(e => e.NorthernCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<MdtpersonSyncHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MDTPersonSyncHelper");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonId).ValueGeneratedOnAdd();
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MdtuserLogDetailsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MDTUserLogDetailsView");

                entity.Property(e => e.AreaName).HasMaxLength(200);
                entity.Property(e => e.CheckinDate).HasColumnType("datetime");
                entity.Property(e => e.CheckinTime).HasColumnType("datetime");
                entity.Property(e => e.CheckoutDate).HasColumnType("datetime");
                entity.Property(e => e.CheckoutTime).HasColumnType("datetime");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.PatrolPlateNumber).HasMaxLength(50);
                entity.Property(e => e.SectorName).HasMaxLength(200);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
            });

            modelBuilder.Entity<MdtuserLogViewForAdmin>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MDTUserLogViewForAdmin");

                entity.Property(e => e.AreaName).HasMaxLength(200);
                entity.Property(e => e.CheckinDate).HasColumnType("datetime");
                entity.Property(e => e.CheckoutDate).HasColumnType("datetime");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.PatrolPlateNumber).HasMaxLength(50);
                entity.Property(e => e.SectorId).HasColumnName("sectorId");
                entity.Property(e => e.SectorName).HasMaxLength(200);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<MeasureUnitDim>(entity =>
            {
                entity.HasKey(e => e.MeasureUnitId)
                    .HasName("MeasureUnitDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("MeasureUnitDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.MeasureUnitDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_MeasureUnitDIM_RowStatusDIM");
            });

            modelBuilder.Entity<MeasureUnitDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MeasureUnitDIMCodeView");

                entity.Property(e => e.MeasureUnitCode).HasMaxLength(20);
                entity.Property(e => e.MeasureUnitDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Membership>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__Membersh__1788CC4C6EE0DE2F")
                    .HasFillFactor(80);

                entity.Property(e => e.UserId).ValueGeneratedNever();
                entity.Property(e => e.Comment).HasMaxLength(256);
                entity.Property(e => e.CreateDate).HasColumnType("datetime");
                entity.Property(e => e.Email).HasMaxLength(256);
                entity.Property(e => e.FailedPasswordAnswerAttemptWindowsStart).HasColumnType("datetime");
                entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");
                entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");
                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
                entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");
                entity.Property(e => e.Password).HasMaxLength(128);
                entity.Property(e => e.PasswordAnswer).HasMaxLength(128);
                entity.Property(e => e.PasswordQuestion).HasMaxLength(256);
                entity.Property(e => e.PasswordSalt).HasMaxLength(128);

                entity.HasOne(d => d.Application).WithMany(p => p.Memberships)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MembershipApplication");

                entity.HasOne(d => d.User).WithOne(p => p.Membership)
                    .HasForeignKey<Membership>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("MembershipUser");
            });

            modelBuilder.Entity<MilitaryBranchDim>(entity =>
            {
                entity.HasKey(e => e.MilitaryBranchId)
                    .HasName("MilitaryServiceBranchDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("MilitaryBranchDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.MilitaryBranchDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_MilitaryBranchDIM_RowStatusDIM");
            });

            modelBuilder.Entity<MilitaryBranchDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MilitaryBranchDIMCodeView");

                entity.Property(e => e.MilitaryBranchCode).HasMaxLength(20);
                entity.Property(e => e.MilitaryBranchDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<MilitaryDischargeTypeDim>(entity =>
            {
                entity.HasKey(e => e.MilitaryDischargeTypeId)
                    .HasName("MilitaryDischargeTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("MilitaryDischargeTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.MilitaryDischargeTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_MilitaryDischargeTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<MilitaryDischargeTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MilitaryDischargeTypeDIMCodeView");

                entity.Property(e => e.MilitaryDischargeTypeCode).HasMaxLength(20);
                entity.Property(e => e.MilitaryDischargeTypeDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<MilitaryServiceTypeDim>(entity =>
            {
                entity.HasKey(e => e.MilitaryServiceTypeId)
                    .HasName("MilitaryServiceTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("MilitaryServiceTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.MilitaryServiceTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_MilitaryServiceTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<MilitaryServiceTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MilitaryServiceTypeDIMCodeView");

                entity.Property(e => e.MilitaryServiceTypeCode).HasMaxLength(20);
                entity.Property(e => e.MilitaryServiceTypeDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<MilitaryStatusDim>(entity =>
            {
                entity.HasKey(e => e.MilitaryStatusId).HasFillFactor(80);

                entity.ToTable("MilitaryStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.MilitaryStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_MilitaryStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<MilitaryStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MilitaryStatusDIMCodeView");

                entity.Property(e => e.MilitaryStatusCode).HasMaxLength(20);
                entity.Property(e => e.MilitaryStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<MissingPerson>(entity =>
            {
                entity.HasKey(e => e.PersonId)
                    .HasName("PK_MissingPerson_1")
                    .HasFillFactor(80);

                entity.ToTable("MissingPerson");

                entity.Property(e => e.PersonId).ValueGeneratedNever();
                entity.Property(e => e.DeclarationDate).HasColumnType("datetime");
                entity.Property(e => e.FoundDate).HasColumnType("datetime");
                entity.Property(e => e.FoundIndicator).HasDefaultValue(false);
                entity.Property(e => e.InterestIndicator).HasDefaultValue(false);
                entity.Property(e => e.LastSeenDate).HasColumnType("datetime");
                entity.Property(e => e.MissingPersonCategoryId).HasDefaultValue(1);
                entity.Property(e => e.MissingPersonCircumstanceId).HasDefaultValue(1);
                entity.Property(e => e.MissingPersonStatusId).HasDefaultValue(1);

                entity.HasOne(d => d.DeclarationPerson).WithMany(p => p.MissingPersonDeclarationPeople)
                    .HasForeignKey(d => d.DeclarationPersonId)
                    .HasConstraintName("FK_MissingPerson_Person-Declaration");

                entity.HasOne(d => d.FoundLocation).WithMany(p => p.MissingPersonFoundLocations)
                    .HasForeignKey(d => d.FoundLocationId)
                    .HasConstraintName("FK_MissingPerson_Location-Found");

                entity.HasOne(d => d.LastSeenLocation).WithMany(p => p.MissingPersonLastSeenLocations)
                    .HasForeignKey(d => d.LastSeenLocationId)
                    .HasConstraintName("FK_MissingPerson_Location-LastSeen");

                entity.HasOne(d => d.MissingPersonCategory).WithMany(p => p.MissingPeople)
                    .HasForeignKey(d => d.MissingPersonCategoryId)
                    .HasConstraintName("FK_MissingPerson_MissingPersonCategoryDIM");

                entity.HasOne(d => d.MissingPersonCircumstance).WithMany(p => p.MissingPeople)
                    .HasForeignKey(d => d.MissingPersonCircumstanceId)
                    .HasConstraintName("FK_MissingPerson_MissingPersonCircumstanceDIM");

                entity.HasOne(d => d.MissingPersonStatus).WithMany(p => p.MissingPeople)
                    .HasForeignKey(d => d.MissingPersonStatusId)
                    .HasConstraintName("FK_MissingPerson_MissingPersonStatusDIM");

                entity.HasOne(d => d.Person).WithOne(p => p.MissingPersonPerson)
                    .HasForeignKey<MissingPerson>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MissingPerson_Person");
            });

            modelBuilder.Entity<MissingPersonCategoryDim>(entity =>
            {
                entity.HasKey(e => e.MissingPersonCategoryId)
                    .HasName("PK_CaseMissingPersonTypeDIM")
                    .HasFillFactor(80);

                entity.ToTable("MissingPersonCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.MissingPersonCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_MissingPersonCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<MissingPersonCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MissingPersonCategoryDIMCodeView");

                entity.Property(e => e.MissingPersonCategoryCode).HasMaxLength(20);
                entity.Property(e => e.MissingPersonCategoryDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<MissingPersonCircumstanceDim>(entity =>
            {
                entity.HasKey(e => e.MissingPersonCircumstanceId)
                    .HasName("PK_CaseMissingPersonCircumstanceDIM")
                    .HasFillFactor(80);

                entity.ToTable("MissingPersonCircumstanceDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.MissingPersonCircumstanceDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_MissingPersonCircumstanceDIM_RowStatusDIM");
            });

            modelBuilder.Entity<MissingPersonCircumstanceDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MissingPersonCircumstanceDIMCodeView");

                entity.Property(e => e.MissingPersonCircumstanceCode).HasMaxLength(20);
                entity.Property(e => e.MissingPersonCircumstanceDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<MissingPersonGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MissingPersonGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DeclarationDate).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.FoundDate).HasColumnType("datetime");
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.LastSeenDate).HasColumnType("datetime");
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.MissingPersonCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<MissingPersonStatusDim>(entity =>
            {
                entity.HasKey(e => e.MissingPersonStatusId)
                    .HasName("PK_MissingPersonStatusId")
                    .HasFillFactor(80);

                entity.ToTable("MissingPersonStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.MissingPersonStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_MissingPersonStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<MissingPersonStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MissingPersonStatusDIMCodeView");

                entity.Property(e => e.MissingPersonStatusCode).HasMaxLength(20);
                entity.Property(e => e.MissingPersonStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<MissingPersonView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MissingPersonView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DeclarationDate).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.FoundDate).HasColumnType("datetime");
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.LastSeenDate).HasColumnType("datetime");
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.MissingPersonCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<MissingReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("Missing_Reports");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<MissionCategoryDim>(entity =>
            {
                entity.HasKey(e => e.MissionCategoryId);

                entity.ToTable("MissionCategoryDim");

                entity.Property(e => e.MissionCategoryId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<MissionPatrolStepDim>(entity =>
            {
                entity.HasKey(e => e.MissionPatrolStepId);

                entity.ToTable("MissionPatrolStepDim");

                entity.Property(e => e.MissionPatrolStepId)
                    .ValueGeneratedNever()
                    .HasColumnName("MissionPatrolStepID");
                entity.Property(e => e.DescriptionAr).HasMaxLength(100);
                entity.Property(e => e.DescriptionEn).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Visible).HasDefaultValue(true);
            });

            modelBuilder.Entity<MissionStepDim>(entity =>
            {
                entity.HasKey(e => e.MissionStepId);

                entity.ToTable("MissionStepDim");

                entity.Property(e => e.MissionStepId)
                    .ValueGeneratedNever()
                    .HasColumnName("MissionStepID");
                entity.Property(e => e.DescriptionAr).HasMaxLength(100);
                entity.Property(e => e.DescriptionEn).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<MobileClaim>(entity =>
            {
                entity.Property(e => e.AccidentNumber).HasMaxLength(50);
                entity.Property(e => e.ClaimDate).HasColumnType("datetime");
                entity.Property(e => e.ClaimNumber).HasMaxLength(500);
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<MobileCountry>(entity =>
            {
                entity.HasKey(e => e.CountryId);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");
                entity.Property(e => e.CountryCode).HasMaxLength(50);
                entity.Property(e => e.CountryName).HasMaxLength(100);
                entity.Property(e => e.CountryNameAr)
                    .HasMaxLength(200)
                    .HasColumnName("CountryNameAR");
            });

            modelBuilder.Entity<MobileForgetPasswordRequest>(entity =>
            {
                entity.HasKey(e => e.RequestId);

                entity.ToTable("MobileForgetPasswordRequest");

                entity.Property(e => e.CreatedAt)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.CustomerVerificationResponseTime).HasColumnType("datetime");
                entity.Property(e => e.RequestDate).HasColumnType("datetime");
                entity.Property(e => e.VerificationCode).HasMaxLength(50);
            });

            modelBuilder.Entity<MobileIncidentTypeDim>(entity =>
            {
                entity.HasKey(e => e.MobileIncidentTypeId).HasName("PK__MobileIn__D61120962BB79EFE");

                entity.ToTable("MobileIncidentTypeDIM");

                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(100)
                    .HasColumnName("DescriptionAR");
                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(100)
                    .HasColumnName("DescriptionEN");
            });

            modelBuilder.Entity<MobileLicensesPlateListSourceDim>(entity =>
            {
                entity.HasKey(e => e.LicensePlateListSourceId).HasName("PK__LicenseP__1739BFABF9C55C38725");

                entity.ToTable("MobileLicensesPlateListSourceDIM");

                entity.Property(e => e.LicensePlateListSourceId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DescriptionEn).HasMaxLength(100);
                entity.Property(e => e.InEmirates).HasDefaultValue(true);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<MobileMessage>(entity =>
            {
                entity.HasKey(e => e.MobileMessagesId);

                entity.Property(e => e.DeviceCode).HasMaxLength(500);
                entity.Property(e => e.MessageDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.RequestNumberNavigation).WithMany(p => p.MobileMessages)
                    .HasForeignKey(d => d.RequestNumber)
                    .HasConstraintName("FK_MobileMessages_MobileRequest");
            });

            modelBuilder.Entity<MobileNotification>(entity =>
            {
                entity.ToTable("MobileNotification");

                entity.Property(e => e.DeviceCode).HasMaxLength(100);
                entity.Property(e => e.MobileNotificationTypeId).HasMaxLength(50);
                entity.Property(e => e.NotificationDateTime).HasColumnType("datetime");
                entity.Property(e => e.StatusTxt).HasColumnName("StatusTXT");

                entity.HasOne(d => d.RequestNumberNavigation).WithMany(p => p.MobileNotifications)
                    .HasForeignKey(d => d.RequestNumber)
                    .HasConstraintName("FK_MobileNotification_MobileRequest");
            });

            modelBuilder.Entity<MobilePlateColorDim>(entity =>
            {
                entity.HasKey(e => e.MobilePlateColorId)
                    .HasName("MobilePlateColorDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("MobilePlateColorDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<MobilePlateSourceDim>(entity =>
            {
                entity.HasKey(e => e.PlateSourceId).HasName("PK__PlateSou__1621");

                entity.ToTable("MobilePlateSourceDim");

                entity.Property(e => e.PlateSourceId).ValueGeneratedNever();
                entity.Property(e => e.DescriptionAr).HasMaxLength(100);
                entity.Property(e => e.DescriptionEn).HasMaxLength(100);
                entity.Property(e => e.InEmirates).HasDefaultValue(true);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<MobileRegistrationUserRequest>(entity =>
            {
                entity.HasKey(e => e.RequestUserId);

                entity.ToTable("MobileRegistrationUserRequest");

                entity.Property(e => e.CustomerVerificationResponseTime).HasColumnType("datetime");
                entity.Property(e => e.Email).HasMaxLength(500);
                entity.Property(e => e.EmailVerificationCode).HasMaxLength(50);
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.OtpexpirationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("OTPExpirationDate");
                entity.Property(e => e.Password).HasMaxLength(50);
                entity.Property(e => e.RequestDate).HasColumnType("datetime");
                entity.Property(e => e.Tcn)
                    .HasMaxLength(50)
                    .HasColumnName("TCN");
                entity.Property(e => e.Username).HasMaxLength(500);
                entity.Property(e => e.VerificationCode).HasMaxLength(50);
            });

            modelBuilder.Entity<MobileRequest>(entity =>
            {
                entity.HasKey(e => e.RequestNumber).HasName("PK_MobileAppRequest");

                entity.ToTable("MobileRequest");

                entity.Property(e => e.AreaId).HasColumnName("AreaID");
                entity.Property(e => e.CompletionDate).HasColumnType("datetime");
                entity.Property(e => e.CreateDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentTypeId).HasColumnName("IncidentTypeID");
                entity.Property(e => e.ModifyDate).HasColumnType("datetime");
                entity.Property(e => e.PhoneNumber).HasMaxLength(50);
                entity.Property(e => e.ReceivedTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);

                entity.HasOne(d => d.Activity).WithMany(p => p.MobileRequests)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("FK_MobileRequest_Activity");

                entity.HasOne(d => d.Area).WithMany(p => p.MobileRequests)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_MobileRequest_Area");

                entity.HasOne(d => d.MobileRequestStatus).WithMany(p => p.MobileRequests)
                    .HasForeignKey(d => d.MobileRequestStatusId)
                    .HasConstraintName("FK_MobileRequest_MobileRequestStatusDIM");

                entity.HasOne(d => d.ReceivedPerson).WithMany(p => p.MobileRequests)
                    .HasForeignKey(d => d.ReceivedPersonId)
                    .HasConstraintName("FK_MobileRequest_Person");

                entity.HasOne(d => d.Report).WithMany(p => p.MobileRequests)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_MobileRequest_Report");

                entity.HasOne(d => d.ReportPlanningStatus).WithMany(p => p.MobileRequests)
                    .HasForeignKey(d => d.ReportPlanningStatusId)
                    .HasConstraintName("FK_MobileRequest_ReportPlanningStatus");
            });

            modelBuilder.Entity<MobileRequestChannelDim>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("MobileRequestChannelDIM");

                entity.Property(e => e.ChannelDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChannelId).HasColumnName("ChannelID");
                entity.Property(e => e.OrganizationDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            });

            modelBuilder.Entity<MobileRequestComment>(entity =>
            {
                entity.HasKey(e => e.CommentId);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.FullName).HasMaxLength(150);

                entity.HasOne(d => d.MobileRequest).WithMany(p => p.MobileRequestComments)
                    .HasForeignKey(d => d.MobileRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileRequestComments_MobileRequestComments");
            });

            modelBuilder.Entity<MobileRequestImage>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_RequestImage");

                entity.ToTable("MobileRequestImage");

                entity.Property(e => e.VehicleId).HasColumnName("VehicleID");

                entity.HasOne(d => d.Image).WithMany(p => p.MobileRequestImages)
                    .HasForeignKey(d => d.ImageId)
                    .HasConstraintName("FK_MobileRequestImage_Image");

                entity.HasOne(d => d.Vehicle).WithMany(p => p.MobileRequestImages)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_MobileRequestImage_MobileRequestVehicle");
            });

            modelBuilder.Entity<MobileRequestListPlanningStatusDisplay>(entity =>
            {
                entity.HasKey(e => e.PlanningStatusId).HasName("PK__MobileRe__23B4E2D9ADB79A11");

                entity.ToTable("MobileRequestListPlanningStatusDisplay");

                entity.Property(e => e.PlanningStatusId).ValueGeneratedNever();
                entity.Property(e => e.DisplayTextAr).HasMaxLength(50);
                entity.Property(e => e.DisplayTextEn).HasMaxLength(50);

                entity.HasOne(d => d.PlanningStatus).WithOne(p => p.MobileRequestListPlanningStatusDisplay)
                    .HasForeignKey<MobileRequestListPlanningStatusDisplay>(d => d.PlanningStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileRequestListPlanningStatusDisplay_PlanningStatus");
            });

            modelBuilder.Entity<MobileRequestRejectionReasonDim>(entity =>
            {
                entity.HasKey(e => e.MobileRequestRejectionReasonId).HasName("PK__MobileRe__B66BEFB8E9A47446");

                entity.ToTable("MobileRequestRejectionReasonDIM");

                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(200)
                    .HasColumnName("DescriptionAR");
                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(200)
                    .HasColumnName("DescriptionEN");

                entity.HasOne(d => d.ActivityReason).WithMany(p => p.MobileRequestRejectionReasonDims)
                    .HasForeignKey(d => d.ActivityReasonId)
                    .HasConstraintName("FK_MobileRequestRejectionReasonDIM_ActivityReasonDIM");
            });

            modelBuilder.Entity<MobileRequestReportPlanningStatusDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__MobileRe__3214EC077BAA470F");

                entity.ToTable("MobileRequestReportPlanningStatusDIM");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DescriptionAr).HasMaxLength(50);
                entity.Property(e => e.DescriptionEn).HasMaxLength(50);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<MobileRequestReportPlanningStatusLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__MobileRe__3214EC07648D9300");

                entity.ToTable("MobileRequestReportPlanningStatusLog");

                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.MobileRequestReportPlanningStatusLogs)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_MobileRequestInternalStatusLog_Person");

                entity.HasOne(d => d.NewStatusNavigation).WithMany(p => p.MobileRequestReportPlanningStatusLogNewStatusNavigations)
                    .HasForeignKey(d => d.NewStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileRequestInternalStatusLog_NewStatus");

                entity.HasOne(d => d.OldStatusNavigation).WithMany(p => p.MobileRequestReportPlanningStatusLogOldStatusNavigations)
                    .HasForeignKey(d => d.OldStatus)
                    .HasConstraintName("FK_MobileRequestInternalStatusLog_OldStatus");
            });

            modelBuilder.Entity<MobileRequestStatusDim>(entity =>
            {
                entity.HasKey(e => e.MobileRequestStatusId).HasName("PK__MobileRe__480A9A9940DF2B2D");

                entity.ToTable("MobileRequestStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(100)
                    .HasColumnName("DescriptionAR");
                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(100)
                    .HasColumnName("DescriptionEN");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<MobileRequestSurveryAnswersDim>(entity =>
            {
                entity.HasKey(e => e.MobileRequestSurveyAnswerId);

                entity.ToTable("MobileRequestSurveryAnswersDim");

                entity.Property(e => e.MobileRequestSurveyAnswerId).ValueGeneratedNever();

                entity.HasOne(d => d.MobileRequestQuestion).WithMany(p => p.MobileRequestSurveryAnswersDims)
                    .HasForeignKey(d => d.MobileRequestQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileRequestSurveryAnswersDim_MobileRequestSurveyQuestions");
            });

            modelBuilder.Entity<MobileRequestSurvey>(entity =>
            {
                entity.ToTable("MobileRequestSurvey");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.HasOne(d => d.MobileRequestAnswer).WithMany(p => p.MobileRequestSurveys)
                    .HasForeignKey(d => d.MobileRequestAnswerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileRequestSurvey_MobileRequestSurveryAnswersDim");

                entity.HasOne(d => d.MobileRequestNumberNavigation).WithMany(p => p.MobileRequestSurveys)
                    .HasForeignKey(d => d.MobileRequestNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileRequestSurvey_MobileRequest");
            });

            modelBuilder.Entity<MobileRequestSurveyQuestion>(entity =>
            {
                entity.Property(e => e.MobileRequestSurveyQuestionId).ValueGeneratedNever();
                entity.Property(e => e.QuestionDescAr).HasMaxLength(500);
                entity.Property(e => e.QuestionDescEn).HasMaxLength(500);
            });

            modelBuilder.Entity<MobileRequestTransaction>(entity =>
            {
                entity.ToTable("MobileRequestTransaction");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedBy).WithMany(p => p.MobileRequestTransactions)
                    .HasForeignKey(d => d.CreatedById)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileRequestTransaction_Person");

                entity.HasOne(d => d.MobileRequest).WithMany(p => p.MobileRequestTransactions)
                    .HasForeignKey(d => d.MobileRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileRequestTransaction_MobileRequest");

                entity.HasOne(d => d.MobileRequestStatus).WithMany(p => p.MobileRequestTransactions)
                    .HasForeignKey(d => d.MobileRequestStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileRequestTransaction_MobileRequestTransactionStatusDim");
            });

            modelBuilder.Entity<MobileRequestTransactionStatusDim>(entity =>
            {
                entity.HasKey(e => e.MobileRequestTransactionStatusId);

                entity.ToTable("MobileRequestTransactionStatusDim");

                entity.Property(e => e.MobileRequestTransactionStatusId).ValueGeneratedNever();
                entity.Property(e => e.StatusDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<MobileRequestVehicle>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_RequestVehicle");

                entity.ToTable("MobileRequestVehicle");

                entity.Property(e => e.DeviceCode).HasMaxLength(500);
                entity.Property(e => e.DriverLicenseNumber).HasMaxLength(50);
                entity.Property(e => e.DriverMobileNumber).HasMaxLength(50);
                entity.Property(e => e.PlateNumber).HasMaxLength(50);

                entity.HasOne(d => d.RequestNumberNavigation).WithMany(p => p.MobileRequestVehicles)
                    .HasForeignKey(d => d.RequestNumber)
                    .HasConstraintName("FK_MobileRequestVehicle_MobileRequest");
            });

            modelBuilder.Entity<MobileStatusMessagesDim>(entity =>
            {
                entity.HasKey(e => e.MobileStatusMessageId).HasName("PK_MobileStatusMessages");

                entity.ToTable("MobileStatusMessagesDIM");

                entity.Property(e => e.MobileStatusMessageId).HasColumnName("MobileStatusMessageID");
                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(200)
                    .HasColumnName("DescriptionAR");
                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(200)
                    .HasColumnName("DescriptionEN");

                entity.HasOne(d => d.ActivityReason).WithMany(p => p.MobileStatusMessagesDims)
                    .HasForeignKey(d => d.ActivityReasonId)
                    .HasConstraintName("FK_MobileStatusMessagesDIM_ActivityReasonDIM");

                entity.HasOne(d => d.Status).WithMany(p => p.MobileStatusMessagesDims)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileStatusMessagesDIM_MobileRequestStatusDIM");
            });

            modelBuilder.Entity<MobileSurveyLookupDim>(entity =>
            {
                entity.HasKey(e => e.SurveyAnswerLookupId);

                entity.ToTable("MobileSurveyLookupDim");

                entity.Property(e => e.SurveyAnswerLookupId).ValueGeneratedNever();
                entity.Property(e => e.AnswerDescAr).HasMaxLength(500);
                entity.Property(e => e.AnswerDescEn).HasMaxLength(500);
            });

            modelBuilder.Entity<MobileUser>(entity =>
            {
                entity.ToTable("MobileUser");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
                entity.Property(e => e.DeletionDate).HasColumnType("datetime");
                entity.Property(e => e.DetailedAddress).HasMaxLength(50);
                entity.Property(e => e.Email).HasMaxLength(500);
                entity.Property(e => e.EnforcePasswordChange).HasDefaultValue(true);
                entity.Property(e => e.HistoricalTrackingHashedPassword)
                    .HasMaxLength(150)
                    .IsUnicode(false);
                entity.Property(e => e.IdentityEmiratesId).HasMaxLength(50);
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.Nationality).HasMaxLength(50);
                entity.Property(e => e.Password).HasMaxLength(50);
                entity.Property(e => e.PasswordChangeDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PasswordExpirationDate)
                    .HasDefaultValueSql("(dateadd(day,(90),getdate()))")
                    .HasColumnType("datetime");
                entity.Property(e => e.Salt)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Tcn)
                    .HasMaxLength(50)
                    .HasColumnName("TCN");
                entity.Property(e => e.UaepassUuid)
                    .HasMaxLength(500)
                    .HasColumnName("UAEPassUUID");
                entity.Property(e => e.Username).HasMaxLength(500);

                entity.HasOne(d => d.Area).WithMany(p => p.MobileUsers)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_MobileUser_Area");

                entity.HasOne(d => d.City).WithMany(p => p.MobileUsers)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_MobileUser_City");

                entity.HasOne(d => d.CommunicationChannel).WithMany(p => p.MobileUsers)
                    .HasForeignKey(d => d.CommunicationChannelId)
                    .HasConstraintName("FK_MobileUser_CommunicationMethod");

                entity.HasOne(d => d.Emirate).WithMany(p => p.MobileUsers)
                    .HasForeignKey(d => d.EmirateId)
                    .HasConstraintName("FK_MobileUser_Emirate");

                entity.HasOne(d => d.Gender).WithMany(p => p.MobileUsers)
                    .HasForeignKey(d => d.GenderId)
                    .HasConstraintName("FK_MobileUser_Gender");

                entity.HasOne(d => d.Language).WithMany(p => p.MobileUsers)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_MobileUser_Language");

                entity.HasOne(d => d.NationalityNavigation).WithMany(p => p.MobileUsers)
                    .HasForeignKey(d => d.NationalityId)
                    .HasConstraintName("FK_MobileUser_Nationality");

                entity.HasOne(d => d.RegisterationRequest).WithMany(p => p.MobileUsers)
                    .HasForeignKey(d => d.RegisterationRequestId)
                    .HasConstraintName("FK_MobileUser_MobileRegistrationUserRequest");
            });

            modelBuilder.Entity<MobileUserLoggingLog>(entity =>
            {
                entity.HasKey(e => e.MobileUserLogId);

                entity.ToTable("MobileUserLoggingLog");

                entity.Property(e => e.LogDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<MobileVerificationService>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_VerificationService");

                entity.ToTable("MobileVerificationService");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.CreateTime).HasColumnType("datetime");
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ModifiedReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("Modified_Reports");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<ModifiedVehicle>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("Modified_Vehicles");
            });

            modelBuilder.Entity<MonthlyTrafficStatisticsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MonthlyTrafficStatisticsView");

                entity.Property(e => e.EmirateName).HasMaxLength(200);
            });

            modelBuilder.Entity<MotoriGetVehicleInquery>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MotoriGetVehicleInquery");

                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.EmptyWeight).HasMaxLength(3000);
                entity.Property(e => e.EngineNumber).HasMaxLength(3000);
                entity.Property(e => e.InsuranceExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.InsuranceTypeId).HasColumnName("InsuranceTypeID");
                entity.Property(e => e.ModelYear).HasMaxLength(100);
                entity.Property(e => e.Origin).HasMaxLength(100);
                entity.Property(e => e.OwnerNameArabic).HasMaxLength(3000);
                entity.Property(e => e.OwnerNameEnglish).HasMaxLength(3000);
                entity.Property(e => e.OwnerTcn).HasMaxLength(3000);
                entity.Property(e => e.PlaceOfIssue).HasMaxLength(100);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.PolicyNumber).HasMaxLength(3000);
                entity.Property(e => e.PolicyType).HasMaxLength(100);
                entity.Property(e => e.VehicleCategory).HasMaxLength(100);
                entity.Property(e => e.VehicleType).HasMaxLength(150);
            });

            modelBuilder.Entity<MotoriServiceLastRun>(entity =>
            {
                entity.ToTable("MotoriServiceLastRun");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.LastRunTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MultiSourceOffenderDim>(entity =>
            {
                entity.HasKey(e => e.MultiSourceOffenderId).HasFillFactor(80);

                entity.ToTable("MultiSourceOffenderDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.MultiSourceOffenderDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_MultiSourceOffenderDIM_RowStatusDIM");
            });

            modelBuilder.Entity<MultiSourceOffenderDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("MultiSourceOffenderDIMCodeView");

                entity.Property(e => e.MultiSourceOffenderCode).HasMaxLength(20);
                entity.Property(e => e.MultiSourceOffenderDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });



            modelBuilder.Entity<NationalityDim>(entity =>
            {
                entity.HasKey(e => e.NationalityId)
                    .HasName("PK__National__F628E74436CA5F16")
                    .HasFillFactor(80);

                entity.ToTable("NationalityDim");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.NationalityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_NationalityDim_RowStatusDIM");
            });

            modelBuilder.Entity<NationalityLanguageDim>(entity =>
            {
                entity.HasKey(e => e.NationalityLangId);

                entity.ToTable("NationalityLanguageDim");

                entity.Property(e => e.Language).HasMaxLength(50);
            });

            modelBuilder.Entity<NationalityLanguageView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("NationalityLanguageView");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Language).HasMaxLength(50);
            });

            modelBuilder.Entity<NewGetFullReportDetailsForMotoriIntegrationExtra>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("NewGetFullReportDetailsForMotoriIntegrationExtra");

                entity.Property(e => e.AccidentTypeName).HasMaxLength(100);
                entity.Property(e => e.BirthDate).HasColumnType("datetime");
                entity.Property(e => e.CarModelYear).HasMaxLength(100);
                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.CityName).HasMaxLength(200);
                entity.Property(e => e.DriverGender).HasMaxLength(100);
                entity.Property(e => e.DriverName).HasMaxLength(3000);
                entity.Property(e => e.DriverNationalityName).HasMaxLength(100);
                entity.Property(e => e.DriverTcn)
                    .HasMaxLength(3000)
                    .HasColumnName("DriverTCN");
                entity.Property(e => e.EasternCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");
                entity.Property(e => e.InsuranceCompanyName).HasMaxLength(100);
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(3000);
                entity.Property(e => e.InsuranceTypeId).HasColumnName("InsuranceTypeID");
                entity.Property(e => e.InsuranceTypeName).HasMaxLength(100);
                entity.Property(e => e.IntersectionName).HasMaxLength(100);
                entity.Property(e => e.IssueDate).HasColumnType("datetime");
                entity.Property(e => e.LicenseNumber).HasMaxLength(3000);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(3000);
                entity.Property(e => e.NorthernCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReasonCategoryName).HasMaxLength(500);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StreetName).HasMaxLength(200);
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);
                entity.Property(e => e.VehicleCategory).HasMaxLength(100);
                entity.Property(e => e.VehicleCategoryId).HasColumnName("VehicleCategoryID");
                entity.Property(e => e.VehicleMake).HasMaxLength(100);
                entity.Property(e => e.VehicleModel).HasMaxLength(100);
                entity.Property(e => e.VehicleType).HasMaxLength(150);
                entity.Property(e => e.VehicleTypeId).HasColumnName("VehicleTypeID");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("Notification", tb => tb.HasTrigger("ExtratPatrolIdTrigger"));

                entity.HasIndex(e => e.NotifyingRecordId, "IndexNotificationRecordId").HasFillFactor(80);

                entity.HasIndex(e => e.IsNotified, "IsNotifiedInx");

                entity.HasIndex(e => new { e.IncidentId, e.NotificationType }, "NotificationType").HasFillFactor(80);

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.NotificationConditions).IsUnicode(false);
                entity.Property(e => e.NotificationDateTime).HasColumnType("datetime");
                entity.Property(e => e.NotificationType).HasMaxLength(50);
            });

            modelBuilder.Entity<NotificationMessageLog>(entity =>
            {
                entity.HasKey(e => e.MessageLogId).HasName("PK__Notifica__96DF7C58DF1EB75E");

                entity.ToTable("NotificationMessageLog");

                entity.Property(e => e.MessageTemplateLanguage)
                    .HasMaxLength(10)
                    .IsUnicode(false);
                entity.Property(e => e.ReceiverMobileNumber).HasMaxLength(500);
                entity.Property(e => e.ReferenceRequestId).HasMaxLength(100);
                entity.Property(e => e.SenderMobileNumber).HasMaxLength(20);

                entity.HasOne(d => d.MessageTemplate).WithMany(p => p.NotificationMessageLogs)
                    .HasForeignKey(d => d.MessageTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Notificat__Messa__43319722");
            });

            modelBuilder.Entity<NotificationMessageLogDetail>(entity =>
            {
                entity.HasKey(e => e.NotificationMessageLogDetailsId);

                entity.Property(e => e.IsSmssentTry).HasColumnName("IsSMSSentTry");
                entity.Property(e => e.Lang).HasMaxLength(50);
                entity.Property(e => e.SmssentTryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SMSSentTryDate");
                entity.Property(e => e.Smstext).HasColumnName("SMSText");

                entity.HasOne(d => d.NotificationMessageLog).WithMany(p => p.NotificationMessageLogDetails)
                    .HasForeignKey(d => d.NotificationMessageLogId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotificationMessageLogDetails_NotificationMessageLog");
            });

            modelBuilder.Entity<NotificationMessageLogremender>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("NotificationMessageLogremender");

                entity.Property(e => e.MessageLogId).ValueGeneratedOnAdd();
                entity.Property(e => e.MessageTemplateLanguage)
                    .HasMaxLength(10)
                    .IsUnicode(false);
                entity.Property(e => e.ReceiverMobileNumber).HasMaxLength(500);
                entity.Property(e => e.ReferenceRequestId).HasMaxLength(100);
                entity.Property(e => e.SenderMobileNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<NotificationMessageTemplate>(entity =>
            {
                entity.HasKey(e => e.MessageTemplateId).HasName("PK__Notifica__0B0D026D188099FC");

                entity.ToTable("NotificationMessageTemplate");

                entity.HasIndex(e => e.MessageTemplateCode, "UQ_NotificationMessageTemplate_MessageTemplateCode").IsUnique();

                entity.Property(e => e.MessageTemplateCode).HasMaxLength(100);
                entity.Property(e => e.MessageTemplateDescription).HasMaxLength(1000);
                entity.Property(e => e.MessageTemplateName).HasMaxLength(250);
            });

            modelBuilder.Entity<NotificationTypeRole>(entity =>
            {
                entity.HasKey(e => e.NotificationTypeRoleId).HasFillFactor(80);

                entity.ToTable("NotificationTypeRole");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.NotificationWay).WithMany(p => p.NotificationTypeRoles)
                    .HasForeignKey(d => d.NotificationWayId)
                    .HasConstraintName("FK_NotificationTypeRole_NotificationWay");
            });

            modelBuilder.Entity<NotificationWay>(entity =>
            {
                entity.HasKey(e => e.NotificationWayId).HasFillFactor(80);

                entity.ToTable("NotificationWay");

                entity.Property(e => e.NotificationWayId)
                    .ValueGeneratedNever()
                    .HasComment("1- for mail and 2- for SMS ");
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Objection>(entity =>
            {
                entity.ToTable("Objection");

                entity.Property(e => e.CenterComment).HasMaxLength(2000);
                entity.Property(e => e.CityName).HasMaxLength(200);
                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.IncidentApproximateDateFrom).HasColumnType("datetime");
                entity.Property(e => e.IncidentApproximateDateTo).HasColumnType("datetime");
                entity.Property(e => e.IsNew).HasDefaultValue(true);
                entity.Property(e => e.LicenceNumber).HasMaxLength(2000);
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.NationalId)
                    .HasMaxLength(50)
                    .HasColumnName("NationalID");
                entity.Property(e => e.NationalityTxt).HasMaxLength(250);
                entity.Property(e => e.ObjectionDate).HasColumnType("datetime");
                entity.Property(e => e.OtherRequestModification).HasMaxLength(250);
                entity.Property(e => e.OtherSourceOfRequest).HasMaxLength(250);
                entity.Property(e => e.RequestTypeId).HasColumnName("requestTypeId");
                entity.Property(e => e.SourceOfRequestVehicleId).HasColumnName("SourceOfRequestVehicleID");
                entity.Property(e => e.VehicleNumber).HasMaxLength(2000);

                entity.HasOne(d => d.Department).WithMany(p => p.Objections)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_Objection_Organization");

                entity.HasOne(d => d.ObjectionCustomerAdditionalData).WithMany(p => p.Objections)
                    .HasForeignKey(d => d.ObjectionCustomerAdditionalDataId)
                    .HasConstraintName("FK__Objection__Objec__70CD7949");

                entity.HasOne(d => d.PereferredCommunicationMethodNavigation).WithMany(p => p.Objections)
                    .HasForeignKey(d => d.PereferredCommunicationMethod)
                    .HasConstraintName("FK_Objection_CommunicationMethodId");

                entity.HasOne(d => d.Reason).WithMany(p => p.Objections)
                    .HasForeignKey(d => d.ReasonId)
                    .HasConstraintName("FK_Objection_Reason");

                entity.HasOne(d => d.Report).WithMany(p => p.Objections)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_Objection_Report");

                entity.HasOne(d => d.RequestChannel).WithMany(p => p.Objections)
                    .HasForeignKey(d => d.RequestChannelId)
                    .HasConstraintName("FK__Objection__Reque__6FD95510");
            });

            modelBuilder.Entity<ObjectionCommentLog>(entity =>
            {
                entity.ToTable("ObjectionCommentLog");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");

                entity.HasOne(d => d.Objection).WithMany(p => p.ObjectionCommentLogs)
                    .HasForeignKey(d => d.ObjectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ObjectionCommentLog_Objection");

                entity.HasOne(d => d.Person).WithMany(p => p.ObjectionCommentLogs)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ObjectionCommentLog_Person");
            });

            modelBuilder.Entity<ObjectionCustomerAdditionalDatum>(entity =>
            {
                entity.HasKey(e => e.ObjectionCustomerAdditionalDataId);

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ModifictionDateTime).HasColumnType("datetime");
                entity.Property(e => e.Tcn).HasColumnName("TCN");
            });

            modelBuilder.Entity<ObjectionCustomerDocument>(entity =>
            {
                entity.ToTable("ObjectionCustomerDocument");

                entity.Property(e => e.ClientName).HasMaxLength(1000);
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.DocumentExtension).HasMaxLength(100);
                entity.Property(e => e.DocumentName).HasMaxLength(500);
                entity.Property(e => e.OriginalName).HasMaxLength(500);

                entity.HasOne(d => d.Objection).WithMany(p => p.ObjectionCustomerDocuments)
                    .HasForeignKey(d => d.ObjectionId)
                    .HasConstraintName("FK_ObjectionCustomerDocument_Objection");
            });

            modelBuilder.Entity<ObjectionCustomerDocumentTypeDim>(entity =>
            {
                entity.HasKey(e => e.ObjectionCustomerDocumentTypeId);

                entity.ToTable("ObjectionCustomerDocumentTypeDim");

                entity.Property(e => e.DescriptionAr).HasMaxLength(150);
                entity.Property(e => e.DescriptionEn).HasMaxLength(150);
            });

            modelBuilder.Entity<ObjectionDocument>(entity =>
            {
                entity.HasKey(e => e.ObjectionDocId);

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ObjectionExemptionRequestType>(entity =>
            {
                entity.HasKey(e => e.ExemptionRequestTypeId);

                entity.ToTable("ObjectionExemptionRequestType");

                entity.Property(e => e.ExemptionRequestTypeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ObjectionFrontEndRequest>(entity =>
            {
                entity.ToTable("ObjectionFrontEndRequest");

                entity.Property(e => e.ClientName).HasMaxLength(500);
                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<ObjectionLocation>(entity =>
            {
                entity.ToTable("ObjectionLocation");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);

                entity.HasOne(d => d.Objection).WithMany(p => p.ObjectionLocations)
                    .HasForeignKey(d => d.ObjectionId)
                    .HasConstraintName("FK_ObjectionLocation_Objection");
            });

            modelBuilder.Entity<ObjectionLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("ObjectionLog");

                entity.Property(e => e.ClientName).HasMaxLength(2000);
                entity.Property(e => e.IsPoliceAction).HasDefaultValueSql("(NULL)");
                entity.Property(e => e.LogDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Objection).WithMany(p => p.ObjectionLogs)
                    .HasForeignKey(d => d.ObjectionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ObjectionLog_Objection");

                entity.HasOne(d => d.Person).WithMany(p => p.ObjectionLogs)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_ObjectionLog_Person");
            });

            modelBuilder.Entity<ObjectionRenewLog>(entity =>
            {
                entity.ToTable("ObjectionRenewLog");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.ObjectionId).HasColumnName("ObjectionID");
                entity.Property(e => e.ObjectionRenewDate).HasColumnType("datetime");
                entity.Property(e => e.ReportVehicleDataId).HasColumnName("ReportVehicleDataID");
            });

            modelBuilder.Entity<ObjectionRequestChannelDim>(entity =>
            {
                entity.HasKey(e => e.ChannelId);

                entity.ToTable("ObjectionRequestChannelDIM");

                entity.Property(e => e.ChannelId)
                    .ValueGeneratedNever()
                    .HasColumnName("ChannelID");
                entity.Property(e => e.AfterPaymentReturnUrl)
                    .HasMaxLength(500)
                    .HasColumnName("AfterPaymentReturnURL");
                entity.Property(e => e.ChannelArDesc).HasMaxLength(50);
                entity.Property(e => e.ChannelDesc).HasMaxLength(50);
                entity.Property(e => e.OrganizationDesc).HasMaxLength(50);
                entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            });

            modelBuilder.Entity<ObjectionRequestModification>(entity =>
            {
                entity.HasKey(e => e.RequestModificationId);

                entity.ToTable("ObjectionRequestModification");

                entity.Property(e => e.RequestModificationId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ObjectionRequestType>(entity =>
            {
                entity.HasKey(e => e.RequestTypeId);

                entity.Property(e => e.RequestTypeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ObjectionResultDim>(entity =>
            {
                entity.HasKey(e => e.ObjectionResultId);

                entity.ToTable("ObjectionResultDim");

                entity.Property(e => e.ObjectionResultId).ValueGeneratedNever();
                entity.Property(e => e.ResultName).HasMaxLength(50);
                entity.Property(e => e.ResultNameEnglish).HasMaxLength(50);
            });

            modelBuilder.Entity<ObjectionReturnView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ObjectionReturnView");

                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.RequestDate).HasColumnType("datetime");
                entity.Property(e => e.RequestStatus).HasMaxLength(50);
            });

            modelBuilder.Entity<ObjectionSourceOfRequest>(entity =>
            {
                entity.HasKey(e => e.SourceRequestId);

                entity.ToTable("ObjectionSourceOfRequest");

                entity.Property(e => e.Description).HasMaxLength(250);
                entity.Property(e => e.SourceName).HasMaxLength(250);
            });

            modelBuilder.Entity<ObjectionStatusDim>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("ObjectionStatusDim");

                entity.Property(e => e.ArabicDescription).HasMaxLength(50);
                entity.Property(e => e.EnglishDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<Offense>(entity =>
            {
                entity.HasKey(e => e.OffenseId).HasFillFactor(80);

                entity.ToTable("Offense");

                entity.Property(e => e.AttemptedIndicator).HasDefaultValue(false);
                entity.Property(e => e.CargoTheftIndicator).HasDefaultValue(false);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DomesticViolenceIndicator).HasDefaultValue(false);
                entity.Property(e => e.EntryPassagePointId).HasDefaultValue(1);
                entity.Property(e => e.ExitPassagePointId).HasDefaultValue(1);
                entity.Property(e => e.GangInvolvementIndicator).HasDefaultValue(false);
                entity.Property(e => e.HomeInvasionIndicator).HasDefaultValue(false);
                entity.Property(e => e.IdentityTheftIndicator).HasDefaultValue(false);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OffenseCodeId).HasDefaultValue(1);
                entity.Property(e => e.OffenseGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.TerrorismIndicator).HasDefaultValue(false);

                entity.HasOne(d => d.EntryPassagePoint).WithMany(p => p.OffenseEntryPassagePoints)
                    .HasForeignKey(d => d.EntryPassagePointId)
                    .HasConstraintName("FK_Offense_PassagePointTypeDIM-Entry");

                entity.HasOne(d => d.ExitPassagePoint).WithMany(p => p.OffenseExitPassagePoints)
                    .HasForeignKey(d => d.ExitPassagePointId)
                    .HasConstraintName("FK_Offense_PassagePointTypeDIM-Exit");

                entity.HasOne(d => d.OffenseCode).WithMany(p => p.Offenses)
                    .HasForeignKey(d => d.OffenseCodeId)
                    .HasConstraintName("FK_Offense_OffenseCodeDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Offenses)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Offense_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Offenses)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Offense_Source");
            });

            modelBuilder.Entity<OffenseChargeAssociation>(entity =>
            {
                entity.HasKey(e => e.OffenseChargeAssociationId).HasFillFactor(80);

                entity.ToTable("OffenseChargeAssociation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OffenseChargeAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.OffenseChargeAssociationGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Charge).WithMany(p => p.OffenseChargeAssociations)
                    .HasForeignKey(d => d.ChargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseChargeAssociation_Charge");

                entity.HasOne(d => d.Offense).WithMany(p => p.OffenseChargeAssociations)
                    .HasForeignKey(d => d.OffenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseChargeAssociation_Offense");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OffenseChargeAssociations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OffenseChargeAssociation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OffenseChargeAssociations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseChargeAssociation_Source");
            });

            modelBuilder.Entity<OffenseChargeAssociationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseChargeAssociationContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseChargeAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseChargeAssociationContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseChargeAssociationContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseChargeAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.OffenseChargeAssociationId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseChargeAssociationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseChargeAssociationGuidView");

                entity.Property(e => e.ChargeDegreeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDescription).HasMaxLength(100);
                entity.Property(e => e.ChargeSeverityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FillingDate).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseChargeAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
            });

            modelBuilder.Entity<OffenseChargeAssociationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseChargeAssociationView");

                entity.Property(e => e.ChargeDegreeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDegreeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeDescription).HasMaxLength(100);
                entity.Property(e => e.ChargeSeverityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeSeverityLevelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ChargeStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FillingDate).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseChargeAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
                entity.Property(e => e.StatuteDescription).HasMaxLength(100);
                entity.Property(e => e.StatuteStatuteDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<OffenseCitationAssociation>(entity =>
            {
                entity.HasKey(e => e.OffenseCitationAssociationId).HasFillFactor(80);

                entity.ToTable("OffenseCitationAssociation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OffenseCitationAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.OffenseCitationAssociationGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Activity).WithMany(p => p.OffenseCitationAssociations)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseCitationAssociation_Activity");

                entity.HasOne(d => d.Offense).WithMany(p => p.OffenseCitationAssociations)
                    .HasForeignKey(d => d.OffenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseCitationAssociation_Offense");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OffenseCitationAssociations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OffenseCitationAssociation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OffenseCitationAssociations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseCitationAssociation_Source");
            });

            modelBuilder.Entity<OffenseCitationAssociationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseCitationAssociationContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCitationAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseCitationAssociationContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseCitationAssociationContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCitationAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.OffenseCitationAssociationId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseCodeDim>(entity =>
            {
                entity.HasKey(e => e.OffenseCodeId)
                    .HasName("OffenseDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("OffenseCodeDIM");

                entity.Property(e => e.Category).HasMaxLength(100);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.EndNote).HasMaxLength(10);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.OffenseLevel).HasMaxLength(50);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OffenseCodeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OffenseCodeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OffenseCodeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseCodeDIMCodeView");

                entity.Property(e => e.OffenseCodeCode).HasMaxLength(20);
                entity.Property(e => e.OffenseCodeDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OffenseComment>(entity =>
            {
                entity.HasKey(e => e.OffenseCommentId).HasFillFactor(80);

                entity.ToTable("OffenseComment");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OffenseCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OffenseCommentGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Activity).WithMany(p => p.OffenseComments)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseComment_Activty");

                entity.HasOne(d => d.Comment).WithMany(p => p.OffenseComments)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseComment_Comment");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OffenseComments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OffenseComment_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OffenseComments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseComment_Source");
            });

            modelBuilder.Entity<OffenseCommentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseCommentContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCommentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseCommentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseCommentContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OffenseCommentId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseCommentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseCommentGuidView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseCommentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseCommentView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImportanceHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PriorityHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseDrivingIncidentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseDrivingIncidentContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseIncidentAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EntryPassagePointCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ExitPassagePointCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCodeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseIdentityTheftIncidentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseIdentityTheftIncidentContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseIncidentAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseIncidentAssociation>(entity =>
            {
                entity.HasKey(e => e.OffenseIncidentAssociationId)
                    .HasName("PK_OffenseIncident")
                    .HasFillFactor(80);

                entity.ToTable("OffenseIncidentAssociation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OffenseIncidentAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.OffenseIncidentAssociationGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Activity).WithMany(p => p.OffenseIncidentAssociations)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseIncidentAssociation_Activity");

                entity.HasOne(d => d.Offense).WithMany(p => p.OffenseIncidentAssociations)
                    .HasForeignKey(d => d.OffenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseIncidentAssociation_Offense");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OffenseIncidentAssociations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OffenseIncidentAssociation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OffenseIncidentAssociations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OffenseIncidentAssociation_Source");
            });

            modelBuilder.Entity<OffenseIncidentAssociationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseIncidentAssociationContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseIncidentAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseIncidentAssociationContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseIncidentAssociationContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseIncidentAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.OffenseIncidentAssociationId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OffenseView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OffenseView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EntryPassagePointCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EntryPassagePointDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ExitPassagePointCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ExitPassagePointDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCodeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OffenseCodeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OffenseId).ValueGeneratedOnAdd();
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OfficerActivityDim>(entity =>
            {
                entity.HasKey(e => e.OfficerActivityId)
                    .HasName("PK__OfficerA__71AF3C0F9FA4CE64")
                    .HasFillFactor(80);

                entity.ToTable("OfficerActivityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OfficerActivityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OfficerActivityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OfficerActivityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OfficerActivityDIMCodeView");

                entity.Property(e => e.OfficerActivityCode).HasMaxLength(20);
                entity.Property(e => e.OfficerActivityDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OfficerAssignmentDim>(entity =>
            {
                entity.HasKey(e => e.OfficerAssignmentId)
                    .HasName("PK__OfficerA__44493E0671E551E1")
                    .HasFillFactor(80);

                entity.ToTable("OfficerAssignmentDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OfficerAssignmentDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OfficerAssignmentDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OfficerAssignmentDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OfficerAssignmentDIMCodeView");

                entity.Property(e => e.OfficerAssignmentCode).HasMaxLength(20);
                entity.Property(e => e.OfficerAssignmentDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OfficerInjury>(entity =>
            {
                entity.HasKey(e => e.PersonInjuryId).HasFillFactor(80);

                entity.ToTable("OfficerInjury");

                entity.Property(e => e.PersonInjuryId).ValueGeneratedNever();
                entity.Property(e => e.OfficerActivityId).HasDefaultValue(1);
                entity.Property(e => e.OfficerAssignmentId).HasDefaultValue(1);
                entity.Property(e => e.OfficerInjuryListId).HasDefaultValue(1);
                entity.Property(e => e.OfficerMeansOfAttackId).HasDefaultValue(1);

                entity.HasOne(d => d.OfficerActivity).WithMany(p => p.OfficerInjuries)
                    .HasForeignKey(d => d.OfficerActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfficerInjury_OfficerActivityDIM");

                entity.HasOne(d => d.OfficerAssignment).WithMany(p => p.OfficerInjuries)
                    .HasForeignKey(d => d.OfficerAssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfficerInjury_OfficerAssignmentDIM");

                entity.HasOne(d => d.OfficerInjuryList).WithMany(p => p.OfficerInjuries)
                    .HasForeignKey(d => d.OfficerInjuryListId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfficerInjury_OfficerInjuryDIM");

                entity.HasOne(d => d.OfficerMeansOfAttack).WithMany(p => p.OfficerInjuries)
                    .HasForeignKey(d => d.OfficerMeansOfAttackId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfficerInjury_OfficerMeansOfAttackDIM");

                entity.HasOne(d => d.PersonInjury).WithOne(p => p.OfficerInjury)
                    .HasForeignKey<OfficerInjury>(d => d.PersonInjuryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfficerInjury_PersonInjury");
            });

            modelBuilder.Entity<OfficerInjuryGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OfficerInjuryGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EmsarrivedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EMSArrivedDateTime");
                entity.Property(e => e.EmsnotifiedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EMSNotifiedDateTime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OfficerActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OfficerAssignmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OfficerInjuryListCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OfficerMeansOfAttackCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInjuryDescription).HasMaxLength(300);
                entity.Property(e => e.PersonInjuryLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInjuryListCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicalByCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMoruaryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonPhysicianCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonTransportedByCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PronouncedDateTime).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OfficerInjuryListDim>(entity =>
            {
                entity.HasKey(e => e.OfficerInjuryListId)
                    .HasName("PK__OfficerI__98237426284A54EF")
                    .HasFillFactor(80);

                entity.ToTable("OfficerInjuryListDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OfficerInjuryListDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OfficerInjuryListDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OfficerInjuryListDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OfficerInjuryListDIMCodeView");

                entity.Property(e => e.OfficerInjuryListCode).HasMaxLength(20);
                entity.Property(e => e.OfficerInjuryListDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OfficerInjuryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OfficerInjuryView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EmsarrivedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EMSArrivedDateTime");
                entity.Property(e => e.EmsnotifiedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EMSNotifiedDateTime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OfficerActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OfficerActivityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OfficerAssignmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OfficerAssignmentDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OfficerInjuryListCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OfficerInjuryListDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OfficerMeansOfAttackCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OfficerMeansOfAttackDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInjuryDescription).HasMaxLength(300);
                entity.Property(e => e.PersonInjuryLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInjuryLevelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInjuryListCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInjuryListDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicalByCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicalByDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMoruaryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMoruaryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonPhysicianCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonPhysicianDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonTransportedByCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonTransportedByDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PronouncedDateTime).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OfficerMeansOfAttackDim>(entity =>
            {
                entity.HasKey(e => e.OfficerMeansOfAttackId)
                    .HasName("PK__OfficerM__7C369654BE9655D2")
                    .HasFillFactor(80);

                entity.ToTable("OfficerMeansOfAttackDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OfficerMeansOfAttackDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OfficerMeansOfAttackDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OfficerMeansOfAttackDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OfficerMeansOfAttackDIMCodeView");

                entity.Property(e => e.OfficerMeansOfAttackCode).HasMaxLength(20);
                entity.Property(e => e.OfficerMeansOfAttackDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OfflineDto>(entity =>
            {
                entity.HasKey(e => e.OfflineDtoId)
                    .HasName("PK__OfflineD__8DC612A73EF86B8C")
                    .HasFillFactor(80);

                entity.ToTable("OfflineDto");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.IsActive).HasDefaultValue(false);
                entity.Property(e => e.IsSynced).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTime).HasColumnType("datetime");
                entity.Property(e => e.SerializedDto).IsUnicode(false);

                entity.HasOne(d => d.Activity).WithMany(p => p.OfflineDtos)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("FK__OfflineDt__Activ__2EC849BD");

                entity.HasOne(d => d.DtoType).WithMany(p => p.OfflineDtos)
                    .HasForeignKey(d => d.DtoTypeId)
                    .HasConstraintName("FK__OfflineDt__DtoTy__2FBC6DF6");
            });

            modelBuilder.Entity<OfflineIncident>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__OfflineI__45F4A791EA04FF55")
                    .HasFillFactor(80);

                entity.ToTable("OfflineIncident");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OfflineOperation>(entity =>
            {
                entity.HasKey(e => e.OfflineOperationId)
                    .HasName("PK__OfflineO__AAC7EF8F9B060009")
                    .HasFillFactor(80);

                entity.ToTable("OfflineOperation");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.IsActive).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithMany(p => p.OfflineOperations)
                    .HasForeignKey(d => d.ActivityId)
                    .HasConstraintName("FK__OfflineOp__Activ__30B0922F");

                entity.HasOne(d => d.OfflineDto).WithMany(p => p.OfflineOperations)
                    .HasForeignKey(d => d.OfflineDtoId)
                    .HasConstraintName("FK__OfflineOp__Offli__31A4B668");

                entity.HasOne(d => d.OperationType).WithMany(p => p.OfflineOperations)
                    .HasForeignKey(d => d.OperationTypeId)
                    .HasConstraintName("FK__OfflineOp__Opera__3298DAA1");
            });

            modelBuilder.Entity<OfflineReportDto>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("OfflineReportDTO");

                entity.HasIndex(e => e.IncidentNumber, "OfflineReportDTOIncidentNumberInx").HasFillFactor(80);

                entity.HasIndex(e => e.ReportNumber, "OfflineReportDTOReportNumberInx").HasFillFactor(80);

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.ReportNumber).HasMaxLength(200);
            });

            modelBuilder.Entity<OldReportMigration>(entity =>
            {
                entity.ToTable("OldReportMigration");

                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<OpenIncidentPerAreasView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OpenIncidentPerAreasView");

                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.Incidents).HasColumnName("incidents");
            });

            modelBuilder.Entity<OpenIncidentPerPriorityView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OpenIncidentPerPriorityView");

                entity.Property(e => e.Incidents).HasColumnName("incidents");
                entity.Property(e => e.Priority).HasMaxLength(100);
            });

            modelBuilder.Entity<OpenIncidentPerTypeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OpenIncidentPerTypeView");

                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.Incidents).HasColumnName("incidents");
            });

            modelBuilder.Entity<OperationTypeDim>(entity =>
            {
                entity.HasKey(e => e.OperationTypeId)
                    .HasName("PK__Operatio__FF7FE513881FEC29")
                    .HasFillFactor(80);

                entity.ToTable("OperationTypeDim");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
            });

            modelBuilder.Entity<Organization>(entity =>
            {
                entity.HasKey(e => e.OrganizationId).HasFillFactor(80);

                entity.ToTable("Organization");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Image).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.IncorporatedIndicator).HasDefaultValue(false);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsTs).HasColumnName("IsTS");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryId).HasDefaultValue(1);
                entity.Property(e => e.OrganizationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.OrganizationStatusId).HasDefaultValue(1);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrganizationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Organization_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrganizationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Organization_Person1");

                entity.HasOne(d => d.OrganizationCategory).WithMany(p => p.Organizations)
                    .HasForeignKey(d => d.OrganizationCategoryId)
                    .HasConstraintName("FK_Organization_OrganizationCategoryDIM");

                entity.HasOne(d => d.OrganizationStatus).WithMany(p => p.Organizations)
                    .HasForeignKey(d => d.OrganizationStatusId)
                    .HasConstraintName("FK_Organization_OrganizationStatusDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Organizations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Organization_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Organizations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Organization_Source");
            });

            modelBuilder.Entity<OrganizationAgencyContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationAgencyContainerGuidView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationAgencyGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationAgencyGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.AgencyCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Identifier).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Ori)
                    .HasMaxLength(50)
                    .HasColumnName("ORI");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationAgencyView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationAgencyView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.AgencyCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AgencyCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Identifier).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Ori)
                    .HasMaxLength(50)
                    .HasColumnName("ORI");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationAircraftContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationAircraftContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationAircraftGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationAircraftGuidView");

                entity.Property(e => e.AircraftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FuselageColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TailIndentification).HasMaxLength(10);
                entity.Property(e => e.WingColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationAircraftView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationAircraftView");

                entity.Property(e => e.AircraftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FuselageColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FuselageColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TailIndentification).HasMaxLength(10);
                entity.Property(e => e.WingColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WingColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationArea>(entity =>
            {
                entity.ToTable("OrganizationArea");
            });

            modelBuilder.Entity<OrganizationArticleContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationArticleContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationArticleGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationArticleGuidView");

                entity.Property(e => e.ArticleCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleTypeCode).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationArticleView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationArticleView");

                entity.Property(e => e.ArticleCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleTypeCategoryCode).HasMaxLength(50);
                entity.Property(e => e.ArticleTypeCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.ArticleTypeCode).HasMaxLength(20);
                entity.Property(e => e.ArticleTypeDescription).HasMaxLength(250);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationAssociation>(entity =>
            {
                entity.HasKey(e => e.OrganizationAssociationId).HasFillFactor(80);

                entity.ToTable("OrganizationAssociation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationAssociationCategoryId).HasDefaultValue(1);
                entity.Property(e => e.OrganizationAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationAssociationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrganizationAssociationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_OrganizationAssociation_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrganizationAssociationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_OrganizationAssociation_Person1");

                entity.HasOne(d => d.OrganizationAssociationCategory).WithMany(p => p.OrganizationAssociations)
                    .HasForeignKey(d => d.OrganizationAssociationCategoryId)
                    .HasConstraintName("FK_OrganizationAssociation_OrganizationAssociationCategoryDIM");

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationAssociationOrganizations)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Organization_RelatedOrganizations_FK2");

                entity.HasOne(d => d.OrganizationRelated).WithMany(p => p.OrganizationAssociationOrganizationRelateds)
                    .HasForeignKey(d => d.OrganizationRelatedId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Organization_RelatedOrganizations_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationAssociations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationAssociation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationAssociations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationAssociation_Source");
            });

            modelBuilder.Entity<OrganizationAssociationCategoryDim>(entity =>
            {
                entity.HasKey(e => e.OrganizationAssociationCategoryId).HasFillFactor(80);

                entity.ToTable("OrganizationAssociationCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationAssociationCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationAssociationCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OrganizationAssociationCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationAssociationCategoryDIMCodeView");

                entity.Property(e => e.OrganizationAssociationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.OrganizationAssociationCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationAssociationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationAssociationGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationAssociationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationAssociationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationAssociationView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationAssociationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationAssociationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationAssociationId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationCategoryDim>(entity =>
            {
                entity.HasKey(e => e.OrganizationCategoryId)
                    .HasName("OrganizationTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("OrganizationCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OrganizationCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationCategoryDIMCodeView");

                entity.Property(e => e.OrganizationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.OrganizationCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationComment>(entity =>
            {
                entity.HasKey(e => e.OrganizationCommentId).HasFillFactor(80);

                entity.ToTable("OrganizationComment");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationCommentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Comment).WithMany(p => p.OrganizationComments)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationComment_Comment");

                entity.HasOne(d => d.CommentInvolvement).WithMany(p => p.OrganizationComments)
                    .HasForeignKey(d => d.CommentInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationComment_CommentInvolvementDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrganizationCommentCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_OrganizationComment_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrganizationCommentModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_OrganizationComment_Person1");

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationComments)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationComment_Organization");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationComments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationComment_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationComments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationComment_Source");
            });

            modelBuilder.Entity<OrganizationCommentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationCommentContainerGuidView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationCommentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationCommentContainerView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationCommentId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationCommentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationCommentGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationCommentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationCommentView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationContact>(entity =>
            {
                entity.HasKey(e => e.OrganizationContactId)
                    .HasName("PK__Organiza__D8D247239908A405")
                    .HasFillFactor(80);

                entity.ToTable("OrganizationContact");

                entity.Property(e => e.ContactGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationContactDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationContactGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.OrganizationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ContactInvolvement).WithMany(p => p.OrganizationContacts)
                    .HasForeignKey(d => d.ContactInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationContact_ContactInvolvementDIM");

                entity.HasOne(d => d.Contact).WithMany(p => p.OrganizationContacts)
                    .HasForeignKey(d => d.Contactid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationContact_Contact");

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationContacts)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationContact_Organization");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationContacts)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationContact_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationContacts)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationContact_Source");
            });

            modelBuilder.Entity<OrganizationContactContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationContactContainerGuidView");

                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationContactDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationContactContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationContactContainerView");

                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationContactDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationContactId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationContactGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationContactGuidView");

                entity.Property(e => e.ContactCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationContactDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationContactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationContactView");

                entity.Property(e => e.ContactCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationContactDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationCourtContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationCourtContainerGuidView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationCourtGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationCourtGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CourtCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationCourtView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationCourtView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CourtCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CourtCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationDocument>(entity =>
            {
                entity.HasKey(e => e.OrganizationDocumentId).HasFillFactor(80);

                entity.ToTable("OrganizationDocument");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationDocumentGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Document).WithMany(p => p.OrganizationDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationDocument_Document");

                entity.HasOne(d => d.DocumentInvolvement).WithMany(p => p.OrganizationDocuments)
                    .HasForeignKey(d => d.DocumentInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationDocument_DocumentInvolvementDIM");

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationDocuments)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationDocument_Organization");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationDocuments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationDocument_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationDocuments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationDocument_Source");
            });

            modelBuilder.Entity<OrganizationDocumentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationDocumentContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationDocumentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationDocumentContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationDocumentId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationDocumentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationDocumentGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<OrganizationDocumentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationDocumentView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<OrganizationDrugContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationDrugContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationDrugGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationDrugGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DrugCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationDrugView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationDrugView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DrugCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationEnforcementOfficialContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationEnforcementOfficialContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationEnforcementOfficialGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationEnforcementOfficialGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EnforcementOfficialAsnCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialBadgeIdentification).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialPostLicenseIdent).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialUnit).HasMaxLength(50);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationEnforcementOfficialView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationEnforcementOfficialView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EnforcementOfficialAsnCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialAsnCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialBadgeIdentification).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialPostLicenseIdent).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialUnit).HasMaxLength(50);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationEvidenceContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationEvidenceContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationEvidenceGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationEvidenceGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.EvidenceAmount).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationEvidenceView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationEvidenceView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.EvidenceAmount).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationFacilityContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationFacilityContainerGuidView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationFacilityGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationFacilityGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.FacilityCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityMemberCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilitySecurityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationFacilityView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationFacilityView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.FacilityCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityMemberCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilityMemberCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilitySecurityLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FacilitySecurityLevelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationFirearmContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationFirearmContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationFirearmGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationFirearmGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FirearmActionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationFirearmView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationFirearmView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FirearmActionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmActionCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationImage>(entity =>
            {
                entity.HasKey(e => e.OrganizationImageId).HasFillFactor(80);

                entity.ToTable("OrganizationImage");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationImageDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationImageGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Image).WithMany(p => p.OrganizationImages)
                    .HasForeignKey(d => d.ImageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationImage_Image");

                entity.HasOne(d => d.ImageInvolvement).WithMany(p => p.OrganizationImages)
                    .HasForeignKey(d => d.ImageInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationImage_ImageInvolvementDIM");

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationImages)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationImage_Organization");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationImages)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationImage_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationImages)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationImage_OrganizationImage");
            });

            modelBuilder.Entity<OrganizationImageContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationImageContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationImageDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationImageContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationImageContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationImageDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationImageId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationImageGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationImageGuidView");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationImageDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationImageView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationImageView");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationImageDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.OrganizationInvolvementId)
                    .HasName("PK__Organiza__52EA582D32178C66")
                    .HasFillFactor(80);

                entity.ToTable("OrganizationInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OrganizationInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationInvolvementDIMCodeView");

                entity.Property(e => e.OrganizationInvolvementCode).HasMaxLength(20);
                entity.Property(e => e.OrganizationInvolvementDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationItem>(entity =>
            {
                entity.HasKey(e => e.OrganizationItemId).HasFillFactor(80);

                entity.ToTable("OrganizationItem");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.FromDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationItemGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToDateTimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrganizationItemCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_OrganizationItem_Person");

                entity.HasOne(d => d.CurrentStatus).WithMany(p => p.OrganizationItems)
                    .HasForeignKey(d => d.CurrentStatusId)
                    .HasConstraintName("FK_OrganizationItem_OrganizationItemStatusDIM");

                entity.HasOne(d => d.Item).WithMany(p => p.OrganizationItems)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationItem_Item");

                entity.HasOne(d => d.ItemInvolvement).WithMany(p => p.OrganizationItems)
                    .HasForeignKey(d => d.ItemInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationItem_ItemInvolvementDIM");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrganizationItemModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_OrganizationItem_Person1");

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationItems)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationItem_Organization");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationItems)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationItem_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationItems)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationItem_Source");
            });

            modelBuilder.Entity<OrganizationItemContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationItemContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationItemContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationItemContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationItemId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationItemGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationItemGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationItemStatusDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("OrganizationItemStatusDIM");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationItemStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationItemStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OrganizationItemView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationItemView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationJewelryContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationJewelryContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationJewelryGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationJewelryGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationJewelryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationJewelryView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationJudicialOfficialContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationJudicialOfficialContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationJudicialOfficialGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationJudicialOfficialGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IdentificationJurisdiction).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarIdentification).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialRegIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationJudicialOfficialView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationJudicialOfficialView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IdentificationJurisdiction).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarIdentification).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialBarStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialRegIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationJurorContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationJurorContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationJurorGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationJurorGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.JurorDismissedDate).HasColumnType("datetime");
                entity.Property(e => e.JurorDismissedReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorIdentification).HasMaxLength(50);
                entity.Property(e => e.JurorPanelIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationJurorView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationJurorView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.JurorDismissedDate).HasColumnType("datetime");
                entity.Property(e => e.JurorDismissedReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorDismissedReasonDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorIdentification).HasMaxLength(50);
                entity.Property(e => e.JurorPanelIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationLicensePlateContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationLicensePlateContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationLicensePlateGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationLicensePlateGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DateEntered).HasColumnType("datetime");
                entity.Property(e => e.DateOfTheft).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ExpireDate).HasColumnType("datetime");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Ncicnumber)
                    .HasMaxLength(50)
                    .HasColumnName("NCICNumber");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationLicensePlateView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationLicensePlateView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DateEntered).HasColumnType("datetime");
                entity.Property(e => e.DateOfTheft).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ExpireDate).HasColumnType("datetime");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Ncicnumber)
                    .HasMaxLength(50)
                    .HasColumnName("NCICNumber");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationLocation>(entity =>
            {
                entity.HasKey(e => e.OrganizationLocationId).HasFillFactor(80);

                entity.ToTable("OrganizationLocation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationLocationDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationLocationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrganizationLocationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_OrganizationLocation_Person");

                entity.HasOne(d => d.Location).WithMany(p => p.OrganizationLocations)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationLocation_Location");

                entity.HasOne(d => d.LocationInvolvement).WithMany(p => p.OrganizationLocations)
                    .HasForeignKey(d => d.LocationInvolvementId)
                    .HasConstraintName("FK_OrganizationLocation_OrganizationLocationInvolvementDIM");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrganizationLocationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_OrganizationLocation_Person1");

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationLocations)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationLocation_Organization");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationLocations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationLocation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationLocations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationLocation_Source");
            });

            modelBuilder.Entity<OrganizationLocationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationLocationContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationLocationDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationLocationContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationLocationContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationLocationDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationLocationId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationLogCategoryDim>(entity =>
            {
                entity.HasKey(e => e.OrganizationLogCategoryId)
                    .HasName("OrganizationLogCategoryDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("OrganizationLogCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationLogCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationLogCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OrganizationLogCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationLogCategoryDIMCodeView");

                entity.Property(e => e.OrganizationLogCategoryCode).HasMaxLength(20);
                entity.Property(e => e.OrganizationLogCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationMissingPersonContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationMissingPersonContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationMissingPersonGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationMissingPersonGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DeclarationDate).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.FoundDate).HasColumnType("datetime");
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.LastSeenDate).HasColumnType("datetime");
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.MissingPersonCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationMissingPersonView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationMissingPersonView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DeclarationDate).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.FoundDate).HasColumnType("datetime");
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.LastSeenDate).HasColumnType("datetime");
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.MissingPersonCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationPerson>(entity =>
            {
                entity.HasKey(e => e.OrganizationPersonId).HasFillFactor(80);

                entity.ToTable("OrganizationPerson");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.FromDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.IsActive).HasDefaultValue(true);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.OrganizationPersonnelCategoryId).HasDefaultValue(1);
                entity.Property(e => e.OrganizationPersonnelRoleId).HasDefaultValue(1);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToDateTimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrganizationPersonCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_OrganizationPerson_Person2");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrganizationPersonModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_OrganizationPerson_Person1");

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationPeople)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Organization_OrganizationPersonnel_FK1");

                entity.HasOne(d => d.OrganizationPersonnelCategory).WithMany(p => p.OrganizationPeople)
                    .HasForeignKey(d => d.OrganizationPersonnelCategoryId)
                    .HasConstraintName("OrganizationPersonnelCategoryDIM_OrganizationPersonnel_FK1");

                entity.HasOne(d => d.OrganizationPersonnelRole).WithMany(p => p.OrganizationPeople)
                    .HasForeignKey(d => d.OrganizationPersonnelRoleId)
                    .HasConstraintName("OrganizationPersonnelRoleDIM_OrganizationPersonnel_FK1");

                entity.HasOne(d => d.Person).WithMany(p => p.OrganizationPersonPeople)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationPerson_Person");

                entity.HasOne(d => d.PersonInvolvement).WithMany(p => p.OrganizationPeople)
                    .HasForeignKey(d => d.PersonInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationPerson_PersonInvolvementDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationPeople)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationPerson_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationPeople)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationPerson_Source");
            });

            modelBuilder.Entity<OrganizationPersonContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationPersonContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationPersonContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationPersonContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonId).ValueGeneratedOnAdd();
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationPersonGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationPersonGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationPersonView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationPersonView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationPersonnelCategoryDim>(entity =>
            {
                entity.HasKey(e => e.OrganizationPersonnelCategoryId)
                    .HasName("OrganizationPersonnelCategoryDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("OrganizationPersonnelCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationPersonnelCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationPersonnelCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OrganizationPersonnelCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationPersonnelCategoryDIMCodeView");

                entity.Property(e => e.OrganizationPersonnelCategoryCode).HasMaxLength(20);
                entity.Property(e => e.OrganizationPersonnelCategoryDescription).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationPersonnelRoleDim>(entity =>
            {
                entity.HasKey(e => e.OrganizationPersonnelRoleId)
                    .HasName("OrganizationPersonnelRoleDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("OrganizationPersonnelRoleDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationPersonnelRoleDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationPersonnelRoleDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OrganizationPersonnelRoleDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationPersonnelRoleDIMCodeView");

                entity.Property(e => e.OrganizationPersonnelRoleCode).HasMaxLength(20);
                entity.Property(e => e.OrganizationPersonnelRoleDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationProviderContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationProviderContainerGuidView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationProviderGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationProviderGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.ProviderCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationProviderView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationProviderView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.ProviderCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationQuestionnaireContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationQuestionnaireContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationQuestionnaireGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationQuestionnaireGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<OrganizationQuestionnaireView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationQuestionnaireView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.QuestionnaireCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<OrganizationRealestateContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationRealestateContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationRealestateGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationRealestateGuidView");

                entity.Property(e => e.Acreage).HasMaxLength(50);
                entity.Property(e => e.Boundry).HasMaxLength(400);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RealestateAttachedFacilityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationRealestateView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationRealestateView");

                entity.Property(e => e.Acreage).HasMaxLength(50);
                entity.Property(e => e.Boundry).HasMaxLength(400);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RealestateAttachedFacilityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateAttachedFacilityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationReason>(entity =>
            {
                entity.HasKey(e => e.OrganizationReasonId)
                    .HasName("PK__Organiza__6D2C7EDBEC5EBF54")
                    .HasFillFactor(80);

                entity.ToTable("OrganizationReason");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OrganizationReasonCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__Organizat__Creat__0ACA1512");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.OrganizationReasonModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__Organizat__Modif__0BBE394B");

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationReasons)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Organizat__Organ__08E1CCA0");

                entity.HasOne(d => d.Reason).WithMany(p => p.OrganizationReasons)
                    .HasForeignKey(d => d.ReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Organizat__Reaso__09D5F0D9");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationReasons)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK__Organizat__RowSt__0CB25D84");
            });

            modelBuilder.Entity<OrganizationRole>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("Organization_Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationRoles)
                    .HasForeignKey(d => d.OrganizationId)
                    .HasConstraintName("FK_Organization_Role_Organization");

                entity.HasOne(d => d.Role).WithMany(p => p.OrganizationRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_Organization_Role_aspnet_Roles");
            });

            modelBuilder.Entity<OrganizationSocialMediaContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationSocialMediaContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationSocialMediaContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationSocialMediaContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationSocialMediaId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationSocialMediaGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationSocialMediaGuidView");

                entity.Property(e => e.Account).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
                entity.Property(e => e.Uri)
                    .HasMaxLength(500)
                    .HasColumnName("URI");
            });

            modelBuilder.Entity<OrganizationSocialMediaView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationSocialMediaView");

                entity.Property(e => e.Account).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
                entity.Property(e => e.Uri)
                    .HasMaxLength(500)
                    .HasColumnName("URI");
            });

            modelBuilder.Entity<OrganizationSocialMedium>(entity =>
            {
                entity.HasKey(e => e.OrganizationSocialMediaId)
                    .HasName("PK__Organiza__8F972FDD8E085887")
                    .HasFillFactor(80);

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationSocialMediaGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationSocialMedia)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationSocialMedia_Organization");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationSocialMedia)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationSocialMedia_RowStatusDIM");

                entity.HasOne(d => d.SocialMedia).WithMany(p => p.OrganizationSocialMedia)
                    .HasForeignKey(d => d.SocialMediaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationSocialMedia_SocialMedia");

                entity.HasOne(d => d.SocialMediaInvolvement).WithMany(p => p.OrganizationSocialMedia)
                    .HasForeignKey(d => d.SocialMediaInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationSocialMedia_SocialMediaInvolvementDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationSocialMedia)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationSocialMedia_Source");
            });

            modelBuilder.Entity<OrganizationStatusDim>(entity =>
            {
                entity.HasKey(e => e.OrganizationStatusId).HasFillFactor(80);

                entity.ToTable("OrganizationStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OrganizationStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationStatusDIMCodeView");

                entity.Property(e => e.OrganizationStatusCode).HasMaxLength(20);
                entity.Property(e => e.OrganizationStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationSubjectContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationSubjectContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationSubjectGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationSubjectGuidView");

                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalOrganizationGuid).HasColumnName("CriminalOrganizationGUID");
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DnacollectionStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusCode");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.MultiSourceOffenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.SubjectCorrectionIdentification).HasMaxLength(50);
                entity.Property(e => e.SubjectDisciplinaryActionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(20);
                entity.Property(e => e.SubjectJacketNumber).HasMaxLength(50);
                entity.Property(e => e.SubjectSpecialHandlingGuid).HasColumnName("SubjectSpecialHandlingGUID");
                entity.Property(e => e.SubjectStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.TheftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationSubjectOrganizationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationSubjectOrganizationContainerGuidView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationSubjectOrganizationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationSubjectOrganizationGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.StatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(50);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationSubjectOrganizationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationSubjectOrganizationView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CautionInformationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCommentDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.StatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.StatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(50);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OrganizationSubjectView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationSubjectView");

                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CautionInformationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DnacollectionStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusCode");
                entity.Property(e => e.DnacollectionStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusDescription");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.MultiSourceOffenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MultiSourceOffenderDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.SubjectCorrectionIdentification).HasMaxLength(50);
                entity.Property(e => e.SubjectDisciplinaryActionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectDisciplinaryActionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(20);
                entity.Property(e => e.SubjectJacketNumber).HasMaxLength(50);
                entity.Property(e => e.SubjectStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.TheftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.TheftCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationUnit>(entity =>
            {
                entity.HasKey(e => e.OrganizationUnitId).HasFillFactor(80);

                entity.ToTable("OrganizationUnit");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationStatusId).HasDefaultValue(1);
                entity.Property(e => e.OrganizationUnitCategoryId).HasDefaultValue(1);
                entity.Property(e => e.OrganizationUnitDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationUnitGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.UnitAbbreviation).HasMaxLength(20);
                entity.Property(e => e.UnitName).HasMaxLength(50);

                entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Organization_OrganizationUnit_FK1");

                entity.HasOne(d => d.OrganizationStatus).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.OrganizationStatusId)
                    .HasConstraintName("FK_OrganizationUnit_OrganizationStatusDIM");

                entity.HasOne(d => d.OrganizationUnitCategory).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.OrganizationUnitCategoryId)
                    .HasConstraintName("OrganizationUnitTypeDIM_OrganizationUnit_FK1");

                entity.HasOne(d => d.PrimaryPerson).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.PrimaryPersonId)
                    .HasConstraintName("FK_OrganizationUnit_OrganizationPersonnel");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationUnit_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationUnits)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationUnit_Source");
            });

            modelBuilder.Entity<OrganizationUnitCategoryDim>(entity =>
            {
                entity.HasKey(e => e.OrganizationUnitCategoryId)
                    .HasName("OrganizationUnitTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("OrganizationUnitCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationUnitCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationUnitCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OrganizationUnitCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitCategoryDIMCodeView");

                entity.Property(e => e.OrganizationUnitCategoryCode).HasMaxLength(20);
                entity.Property(e => e.OrganizationUnitCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationUnitGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationUnitCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationUnitDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.UnitAbbreviation).HasMaxLength(20);
                entity.Property(e => e.UnitName).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationUnitLog>(entity =>
            {
                entity.HasKey(e => e.OrganizationUnitLogId).HasFillFactor(80);

                entity.ToTable("OrganizationUnitLog");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OffTime).HasColumnType("datetime");
                entity.Property(e => e.OnTime).HasColumnType("datetime");
                entity.Property(e => e.OrganizationLogCategoryId).HasDefaultValue(1);
                entity.Property(e => e.OrganizationUnitCategoryId).HasDefaultValue(1);
                entity.Property(e => e.OrganizationUnitLogDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationUnitLogGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.OrganizationUnitStatusId).HasDefaultValue(1);
                entity.Property(e => e.Vehicle).HasMaxLength(20);

                entity.HasOne(d => d.Item).WithMany(p => p.OrganizationUnitLogs)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_OrganizationUnitLog_Item");

                entity.HasOne(d => d.OrganizationLogCategory).WithMany(p => p.OrganizationUnitLogs)
                    .HasForeignKey(d => d.OrganizationLogCategoryId)
                    .HasConstraintName("OrganizationLogCategoryDIM_OrganizationUnitLog_FK1");

                entity.HasOne(d => d.OrganizationUnitCategory).WithMany(p => p.OrganizationUnitLogs)
                    .HasForeignKey(d => d.OrganizationUnitCategoryId)
                    .HasConstraintName("FK_OrganizationUnitLog_OrganizationUnitCategoryDIM");

                entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.OrganizationUnitLogs)
                    .HasForeignKey(d => d.OrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrganizationUnit_OrganizationUnitLog_FK1");

                entity.HasOne(d => d.OrganizationUnitStatus).WithMany(p => p.OrganizationUnitLogs)
                    .HasForeignKey(d => d.OrganizationUnitStatusId)
                    .HasConstraintName("OrganizationUnitStatusDIM_OrganizationUnitLog_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationUnitLogs)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationUnitLog_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationUnitLogs)
                    .HasForeignKey(d => d.SourceId)
                    .HasConstraintName("FK_OrganizationUnitLog_Source");
            });

            modelBuilder.Entity<OrganizationUnitLogGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitLogGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffTime).HasColumnType("datetime");
                entity.Property(e => e.OnTime).HasColumnType("datetime");
                entity.Property(e => e.OrganizationLogCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationUnitCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationUnitLogDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationUnitStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Vehicle).HasMaxLength(20);
            });

            modelBuilder.Entity<OrganizationUnitLogView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitLogView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffTime).HasColumnType("datetime");
                entity.Property(e => e.OnTime).HasColumnType("datetime");
                entity.Property(e => e.OrganizationLogCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationLogCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationUnitCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationUnitCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationUnitLogDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationUnitLogId).ValueGeneratedOnAdd();
                entity.Property(e => e.OrganizationUnitStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationUnitStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Vehicle).HasMaxLength(20);
            });

            modelBuilder.Entity<OrganizationUnitPersonnel>(entity =>
            {
                entity.HasKey(e => e.OrganizationUnitPersonnelId).HasFillFactor(80);

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OrganizationUnitPersonnelDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationUnitPersonnelGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.OrganizationUnitPersonnel)
                    .HasForeignKey(d => d.OrganizationUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("OrganizationUnit_OrganizationUnitPersonnel_FK1");

                entity.HasOne(d => d.OrganzationPerson).WithMany(p => p.OrganizationUnitPersonnel)
                    .HasForeignKey(d => d.OrganzationPersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrganizationUnitPersonnel_OrganizationPerson");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationUnitPersonnel)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationUnitPersonnel_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.OrganizationUnitPersonnel)
                    .HasForeignKey(d => d.SourceId)
                    .HasConstraintName("FK_OrganizationUnitPersonnel_Source");
            });

            modelBuilder.Entity<OrganizationUnitPersonnelGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitPersonnelGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationUnitPersonnelDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationUnitPersonnelView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitPersonnelView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationUnitPersonnelDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationUnitPersonnelId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationUnitStatusDim>(entity =>
            {
                entity.HasKey(e => e.OrganizationUnitStatusId)
                    .HasName("OrganizationUnitStatusDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("OrganizationUnitStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.OrganizationUnitStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_OrganizationUnitStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<OrganizationUnitStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitStatusDIMCodeView");

                entity.Property(e => e.OrganizationUnitStatusCode).HasMaxLength(20);
                entity.Property(e => e.OrganizationUnitStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationUnitView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUnitView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationUnitCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationUnitCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationUnitDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationUnitId).ValueGeneratedOnAdd();
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.UnitAbbreviation).HasMaxLength(20);
                entity.Property(e => e.UnitName).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationUserContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUserContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationUserGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUserGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DirectoryDomain).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceDirectoryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationUserView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationUserView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DirectoryDomain).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceDirectoryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceDirectoryCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationVehicleContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationVehicleContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationVehicleGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationVehicleGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.Identification).HasMaxLength(20);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.MotorCarrierIdentification).HasMaxLength(20);
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationVehicleView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationVehicleView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.Identification).HasMaxLength(20);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.MotorCarrierIdentification).HasMaxLength(20);
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationVesselContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationVesselContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationVesselGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationVesselGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.GeoCountryCode).HasMaxLength(50);
                entity.Property(e => e.HullIdentification).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.InternationalRadioCallSign).HasMaxLength(50);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicenseNumber).HasMaxLength(50);
                entity.Property(e => e.Mmsinumber)
                    .HasMaxLength(20)
                    .HasColumnName("MMSINumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OfficalCoastGuardNumber).HasMaxLength(50);
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PortOfRegistry).HasMaxLength(50);
                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SailNumber).HasMaxLength(50);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselRegistrationNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationVesselView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationVesselView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.GeoCountryCode).HasMaxLength(50);
                entity.Property(e => e.GeoCountryCountryName).HasMaxLength(50);
                entity.Property(e => e.HullIdentification).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.InternationalRadioCallSign).HasMaxLength(50);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicenseNumber).HasMaxLength(50);
                entity.Property(e => e.Mmsinumber)
                    .HasMaxLength(20)
                    .HasColumnName("MMSINumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OfficalCoastGuardNumber).HasMaxLength(50);
                entity.Property(e => e.OrganizationItemDescription).HasMaxLength(300);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PortOfRegistry).HasMaxLength(50);
                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SailNumber).HasMaxLength(50);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselRegistrationNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<OrganizationVictimContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationVictimContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationVictimGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationVictimGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.VictimCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationVictimView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationVictimView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.OrganizationPersonnelCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationPersonnelRoleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.VictimCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrganizationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("OrganizationView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationId).ValueGeneratedOnAdd();
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<OwnerDatum>(entity =>
            {
                entity.HasKey(e => e.OwnerDataId)
                    .HasName("PK__OwnerDat__28A6FE41ACB3B1BB")
                    .HasFillFactor(80);

                entity.HasIndex(e => e.VehicleDataId, "<Name of Missing Index, sysname,>");

                entity.HasIndex(e => e.TrafficCode, "NonClusteredIndex-20240219-153330");

                entity.Property(e => e.Address).HasMaxLength(3000);
                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(3000);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.OwnerData)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_OwnerData_Person");

                entity.HasOne(d => d.Nationality).WithMany(p => p.OwnerData)
                    .HasForeignKey(d => d.NationalityId)
                    .HasConstraintName("FK_VehicleData_NationalityDIM");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.OwnerData)
                    .HasForeignKey(d => d.VehicleDataId)
                    .HasConstraintName("FK_VehicleData_VehicleData");
            });

            modelBuilder.Entity<PageAction>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_Permissions")
                    .HasFillFactor(80);

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ControlDisplayName).HasMaxLength(250);
                entity.Property(e => e.ControlUniqueName).HasMaxLength(50);
                entity.Property(e => e.ParentControlType).HasMaxLength(50);
                entity.Property(e => e.ParentUniqeName).HasMaxLength(50);

                entity.HasOne(d => d.PageActionCategory).WithMany(p => p.PageActions)
                    .HasForeignKey(d => d.PageActionCategoryId)
                    .HasConstraintName("FK_PageActions_PageActionCategoryDIM");

                entity.HasOne(d => d.Page).WithMany(p => p.PageActions)
                    .HasForeignKey(d => d.PageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Permissions_Pages");
            });

            modelBuilder.Entity<PageActionCategoryDim>(entity =>
            {
                entity.HasKey(e => e.PageActionCategoryId).HasFillFactor(80);

                entity.ToTable("PageActionCategoryDIM");

                entity.Property(e => e.CategoryName).HasMaxLength(100);
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CultureDescriptionXml).HasColumnName("CultureDescriptionXML");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<PageActionRole>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.ActionId }).HasFillFactor(80);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Action).WithMany(p => p.PageActionRoles)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PageActionRoles_PageActions");

                entity.HasOne(d => d.Role).WithMany(p => p.PageActionRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PageActionRoles_aspnet_Roles");
            });

            modelBuilder.Entity<PageRole>(entity =>
            {
                entity.HasKey(e => e.PageRoleId).HasFillFactor(80);

                entity.Property(e => e.PageRoleId).HasDefaultValueSql("(newid())");
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.HasOne(d => d.AccessTypeNavigation).WithMany(p => p.PageRoles)
                    .HasForeignKey(d => d.AccessType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PageRoles_AcessTypeDIM");

                entity.HasOne(d => d.Page).WithMany(p => p.PageRoles)
                    .HasForeignKey(d => d.PageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PageRoles_ApplicationPages");

                entity.HasOne(d => d.Role).WithMany(p => p.PageRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PageRoles_aspnet_Roles");
            });

            modelBuilder.Entity<Parameter>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("Parameter");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<Parole>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("Parole");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();

                entity.HasOne(d => d.Activity).WithOne(p => p.Parole)
                    .HasForeignKey<Parole>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Parole_Activity");

                entity.HasOne(d => d.SupervisionCustodyStatus).WithMany(p => p.Paroles)
                    .HasForeignKey(d => d.SupervisionCustodyStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Parole_SupervisionCustodyStatusDIM");

                entity.HasOne(d => d.SupervisionStatus).WithMany(p => p.Paroles)
                    .HasForeignKey(d => d.SupervisionStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Parole_SupervisionStatusDIM");
            });

            modelBuilder.Entity<PassagePointTypeDim>(entity =>
            {
                entity.HasKey(e => e.PassagePointTypeId).HasFillFactor(80);

                entity.ToTable("PassagePointTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PassagePointTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PassagePointTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PassagePointTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PassagePointTypeDIMCodeView");

                entity.Property(e => e.PassagePointTypeCode).HasMaxLength(20);
                entity.Property(e => e.PassagePointTypeDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PasswordDictionary>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Password__3214EC0744D0CD30");

                entity.ToTable("PasswordDictionary");

                entity.HasIndex(e => e.Password, "IDX_PasswordDictionary_Password");

                entity.HasIndex(e => new { e.TypeId, e.Password }, "IX_PasswordDictionary_TypeId_Password");

                entity.Property(e => e.FileName).HasMaxLength(255);
                entity.Property(e => e.FileUpdateDate).HasColumnType("datetime");
                entity.Property(e => e.ImportDate).HasColumnType("datetime");
                entity.Property(e => e.Password).HasMaxLength(255);

                entity.HasOne(d => d.Type).WithMany(p => p.PasswordDictionaries)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PasswordDictionary_EntryType");
            });

            modelBuilder.Entity<PasswordEntryTypeDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Password__3214EC07A252ED66");

                entity.ToTable("PasswordEntryTypeDIM");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.EntryType).HasMaxLength(50);
            });

            modelBuilder.Entity<PasswordPolicyApplication>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Password__3214EC075EC48D29");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.ApplicationName).HasMaxLength(255);
            });

            modelBuilder.Entity<PasswordPolicyConfiguration>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Password__3214EC07A965FDAB");

                entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");
                entity.Property(e => e.PropertyKey).HasMaxLength(255);
                entity.Property(e => e.PropertyValue).HasMaxLength(255);

                entity.HasOne(d => d.Application).WithMany(p => p.PasswordPolicyConfigurations)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("FK__PasswordP__Appli__0813FEB0");
            });

            modelBuilder.Entity<PatrolDetailView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PatrolDetailView");

                entity.Property(e => e.PatrolCode)
                    .HasMaxLength(50)
                    .HasColumnName("Patrol Code");
                entity.Property(e => e.PlateNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Plate Number");
            });

            modelBuilder.Entity<PatrolLocationNotification>(entity =>
            {
                entity.HasKey(e => e.PatrolLocationNotificationId)
                    .HasName("PK__PatrolLo__025A4F50EEAE6FF1")
                    .HasFillFactor(80);

                entity.ToTable("PatrolLocationNotification");

                entity.Property(e => e.PatrolLocationNotificationId).HasColumnName("PatrolLocationNotificationID");
                entity.Property(e => e.BatteryCurrent).HasColumnType("decimal(18, 0)");
                entity.Property(e => e.BatteryVoltage).HasColumnType("decimal(18, 0)");
                entity.Property(e => e.Code).HasMaxLength(200);
                entity.Property(e => e.DeviceCode).HasMaxLength(200);
                entity.Property(e => e.GroupIdentifier)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.IsNotified).HasDefaultValue(false);
                entity.Property(e => e.LocationDate).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(200);
                entity.Property(e => e.TrackerCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PatrolLogInView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PatrolLogInView");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.SectorName).HasMaxLength(200);
            });

            modelBuilder.Entity<PatrolStatusView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PatrolStatusView");

                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<PatrolToken>(entity =>
            {
                entity.ToTable("PatrolToken");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PaymentAccountOperation>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.MerchantRefrence).HasMaxLength(50);
                entity.Property(e => e.NetAmount).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.PaymentGateWayFees).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.PaymentInfoId).HasColumnName("PaymentInfoID");
                entity.Property(e => e.PaymentReference).HasMaxLength(50);
                entity.Property(e => e.ServiceAmount).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
                entity.Property(e => e.UserId).HasMaxLength(255);
                entity.Property(e => e.Vat).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.PaymentInfo).WithMany(p => p.PaymentAccountOperations)
                    .HasForeignKey(d => d.PaymentInfoId)
                    .HasConstraintName("FK_PaymentAccountOperations_PaymentOrganizationInfo");
            });

            modelBuilder.Entity<PaymentBankAccount>(entity =>
            {
                entity.HasKey(e => e.AccountId).HasName("PK_BankAccounts");

                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(1000)
                    .HasColumnName("DescriptionAR");
                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(1000)
                    .HasColumnName("DescriptionEN");
                entity.Property(e => e.DirectDebitReference).HasMaxLength(100);
                entity.Property(e => e.Iban).HasMaxLength(50);
                entity.Property(e => e.SwiftCode).HasMaxLength(11);

                entity.HasOne(d => d.PaymentInfo).WithMany(p => p.PaymentBankAccounts)
                    .HasForeignKey(d => d.PaymentInfoId)
                    .HasConstraintName("FK_OrganizationBankAccounts_PaymentOrganizationInfo");
            });

            modelBuilder.Entity<PaymentChannelReturnPage>(entity =>
            {
                entity.Property(e => e.CreatedAt).HasColumnType("datetime");
                entity.Property(e => e.ReturnUrl)
                    .HasMaxLength(500)
                    .HasColumnName("ReturnURL");

                entity.HasOne(d => d.Transaction).WithMany(p => p.PaymentChannelReturnPages)
                    .HasForeignKey(d => d.TransactionId)
                    .HasConstraintName("FK_PaymentChannelReturnPages_PaymentTransactions");
            });

            modelBuilder.Entity<PaymentIntegrationLog>(entity =>
            {
                entity.HasKey(e => e.IntegerationLogId);

                entity.ToTable("PaymentIntegrationLog");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.RequestTime).HasColumnType("datetime");
                entity.Property(e => e.ResponseTime).HasColumnType("datetime");

                entity.HasOne(d => d.IntegrationMethod).WithMany(p => p.PaymentIntegrationLogs)
                    .HasForeignKey(d => d.IntegrationMethodId)
                    .HasConstraintName("FK_PaymentIntegrationLog_PaymentIntegrationMethods");

                entity.HasOne(d => d.PaymentTransaction).WithMany(p => p.PaymentIntegrationLogs)
                    .HasForeignKey(d => d.PaymentTransactionId)
                    .HasConstraintName("FK_PaymentIntegrationLog_PaymentTransactions");
            });

            modelBuilder.Entity<PaymentIntegrationMethod>(entity =>
            {
                entity.HasKey(e => e.MethodId);

                entity.Property(e => e.MethodId).ValueGeneratedNever();
                entity.Property(e => e.MethodName).HasMaxLength(100);
            });

            modelBuilder.Entity<PaymentNotification>(entity =>
            {
                entity.HasKey(e => e.NotificationId).HasName("PK__PaymentN__20CF2E12B66493EC");

                entity.Property(e => e.EvgpaymentReference).HasColumnName("EVGPaymentReference");
                entity.Property(e => e.ResponseDescription).HasMaxLength(20);
                entity.Property(e => e.TransactionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PaymentOrganizationInfo>(entity =>
            {
                entity.HasKey(e => e.PaymentInfoId).HasName("PK_OrganizationPaymentInfo");

                entity.ToTable("PaymentOrganizationInfo");

                entity.Property(e => e.BalanceLastUpdate).HasColumnType("datetime");
                entity.Property(e => e.CompanyInfoId).HasColumnName("CompanyInfoID");
                entity.Property(e => e.Email).HasMaxLength(50);
                entity.Property(e => e.IdentificationNo).HasMaxLength(100);
                entity.Property(e => e.Mobile).HasMaxLength(50);
                entity.Property(e => e.ParticipantCode).HasMaxLength(50);
                entity.Property(e => e.ParticipantNameAr).HasMaxLength(200);
                entity.Property(e => e.ParticipantNameEn).HasMaxLength(200);
                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");

                entity.HasOne(d => d.PaymentUserAccount).WithMany(p => p.PaymentOrganizationInfos)
                    .HasForeignKey(d => d.PaymentUserAccountId)
                    .HasConstraintName("FK_PaymentOrganizationInfo_PaymentUserAccounts");
            });

            modelBuilder.Entity<PaymentRefundDetail>(entity =>
            {
                entity.HasKey(e => e.PaymentRefundDetails);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.RefundDate).HasColumnType("datetime");

                entity.HasOne(d => d.PaymentTransaction).WithMany(p => p.PaymentRefundDetails)
                    .HasForeignKey(d => d.PaymentTransactionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentRefundDetails_PaymentTransactions");

                entity.HasOne(d => d.RefundStatus).WithMany(p => p.PaymentRefundDetails)
                    .HasForeignKey(d => d.RefundStatusId)
                    .HasConstraintName("FK_PaymentRefundDetails_PaymentRequestStatusDim");
            });

            modelBuilder.Entity<PaymentRequestStatusDim>(entity =>
            {
                entity.ToTable("PaymentRequestStatusDim");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.EnglishName).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(150);
            });

            modelBuilder.Entity<PaymentRequestTypeDim>(entity =>
            {
                entity.ToTable("PaymentRequestTypeDim");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.AfterPaymentReturnUrl).HasMaxLength(500);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.PredefinedCode).HasMaxLength(100);
                entity.Property(e => e.VatPredefinedCode)
                    .HasMaxLength(150)
                    .HasColumnName("VAT_PredefinedCode");

                entity.HasOne(d => d.PaymentAccount).WithMany(p => p.PaymentRequestTypeDims)
                    .HasForeignKey(d => d.PaymentAccountId)
                    .HasConstraintName("FK_PaymentRequestTypeDim_PaymentUserAccounts");
            });

            modelBuilder.Entity<PaymentSettlement>(entity =>
            {
                entity.Property(e => e.Settlementdate).HasColumnType("datetime");
                entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<PaymentSettlementTransaction>(entity =>
            {
                entity.Property(e => e.PayProCreationDate).HasColumnType("datetime");
                entity.Property(e => e.PayProMerchantReference).HasMaxLength(100);
                entity.Property(e => e.PayProPaymentReference).HasMaxLength(100);
                entity.Property(e => e.PayProRefundReference).HasMaxLength(100);

                entity.HasOne(d => d.SaaedTransaction).WithMany(p => p.PaymentSettlementTransactions)
                    .HasForeignKey(d => d.SaaedTransactionId)
                    .HasConstraintName("FK_PaymentSettlementTransactions_PaymentTransaction");

                entity.HasOne(d => d.Settlement).WithMany(p => p.PaymentSettlementTransactions)
                    .HasForeignKey(d => d.SettlementId)
                    .HasConstraintName("FK_PaymentSettlementTransactions_PaymentSettlements");
            });

            modelBuilder.Entity<PaymentTransaction>(entity =>
            {
                entity.HasKey(e => e.TransactionId);

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ModificationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ObjectionId).HasColumnName("ObjectionID");
                entity.Property(e => e.PayProPaymentReference).HasMaxLength(100);
                entity.Property(e => e.PayProRefundReference).HasMaxLength(100);
                entity.Property(e => e.PaymentDate).HasColumnType("datetime");
                entity.Property(e => e.PaymentRequestTypeId).HasColumnName("PaymentRequestTypeID");
                entity.Property(e => e.PaymentStatusId).HasColumnName("PaymentStatusID");
                entity.Property(e => e.PaymentUserAccountId).HasColumnName("PaymentUserAccountID");
                entity.Property(e => e.ReportVehicleDataId).HasColumnName("ReportVehicleDataID");
                entity.Property(e => e.RequestId).HasColumnName("RequestID");
                entity.Property(e => e.SaaedPaymentReference).HasMaxLength(50);
                entity.Property(e => e.SettlementDate).HasColumnType("datetime");
                entity.Property(e => e.Vat).HasColumnName("VAT");

                entity.HasOne(d => d.Channel).WithMany(p => p.PaymentTransactions)
                    .HasForeignKey(d => d.ChannelId)
                    .HasConstraintName("FK__PaymentTr__Chann__71C19D82");

                entity.HasOne(d => d.Objection).WithMany(p => p.PaymentTransactions)
                    .HasForeignKey(d => d.ObjectionId)
                    .HasConstraintName("FK_PaymentTransactions_Objection");

                entity.HasOne(d => d.PaymentInfo).WithMany(p => p.PaymentTransactions)
                    .HasForeignKey(d => d.PaymentInfoId)
                    .HasConstraintName("FK_PaymentTransactions_PaymentOrganizationInfo");

                entity.HasOne(d => d.PaymentRequestType).WithMany(p => p.PaymentTransactions)
                    .HasForeignKey(d => d.PaymentRequestTypeId)
                    .HasConstraintName("FK_PaymentTransactions_PaymentRequestTypeDim");

                entity.HasOne(d => d.PaymentStatus).WithMany(p => p.PaymentTransactions)
                    .HasForeignKey(d => d.PaymentStatusId)
                    .HasConstraintName("FK_PaymentTransactions_PaymentRequestStatusDim");

                entity.HasOne(d => d.PaymentUserAccount).WithMany(p => p.PaymentTransactions)
                    .HasForeignKey(d => d.PaymentUserAccountId)
                    .HasConstraintName("FK_PaymentTransactions_PaymentUserAccounts");

                entity.HasOne(d => d.ReportVehicleData).WithMany(p => p.PaymentTransactions)
                    .HasForeignKey(d => d.ReportVehicleDataId)
                    .HasConstraintName("FK_PaymentTransactions_ReportVehicleData");
            });

            modelBuilder.Entity<PaymentUserAccount>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.Password).HasMaxLength(150);
                entity.Property(e => e.UserAccount).HasMaxLength(150);
                entity.Property(e => e.UserName).HasMaxLength(150);
            });

            modelBuilder.Entity<PendingArmyNotification>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PendingArmyNotification");

                entity.Property(e => e.AdpreportNumber).HasColumnName("ADPReportNumber");
                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<PendingPublicNotification>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PendingPublicNotification");

                entity.Property(e => e.Email).HasMaxLength(100);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.HasKey(e => e.PersonId).HasFillFactor(80);

                entity.ToTable("Person");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsFromActiveDirectory).HasDefaultValue(false);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InverseCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Person_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.InverseModifiedByNavigation)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_Person_Person1");

                entity.HasOne(d => d.PersonStatus).WithMany(p => p.People)
                    .HasForeignKey(d => d.PersonStatusId)
                    .HasConstraintName("FK_Person_PersonStatusDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.People)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Person_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.People)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Person_Source");
            });

            modelBuilder.Entity<PersonAffiliation>(entity =>
            {
                entity.HasKey(e => e.PersonAffiliationId).HasFillFactor(80);

                entity.ToTable("PersonAffiliation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsPrimary).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonAffiliationDescription).HasMaxLength(300);
                entity.Property(e => e.PersonAffiliationGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Organization).WithMany(p => p.PersonAffiliations)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonAffiliation_Organization");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonAffiliations)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Person_PersonAffiliations_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonAffiliations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonAffiliation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonAffiliations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonAffiliation_Source");
            });

            modelBuilder.Entity<PersonAffiliationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonAffiliationGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonAffiliationDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonAffiliationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonAffiliationView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonAffiliationDescription).HasMaxLength(300);
                entity.Property(e => e.PersonAffiliationId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonAircraftContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonAircraftContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonAircraftGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonAircraftGuidView");

                entity.Property(e => e.AircraftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FuselageColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TailIndentification).HasMaxLength(10);
                entity.Property(e => e.WingColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonAircraftView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonAircraftView");

                entity.Property(e => e.AircraftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.AircraftUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FuselageColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FuselageColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TailIndentification).HasMaxLength(10);
                entity.Property(e => e.WingColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WingColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonAlias>(entity =>
            {
                entity.HasKey(e => e.PersonAliasId).HasFillFactor(80);

                entity.ToTable("PersonAlias");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.FullName)
                    .HasMaxLength(152)
                    .HasComputedColumnSql("((((isnull([FirstName],'')+' ')+isnull([MiddleName],''))+' ')+isnull([LastName],''))", false);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsPrimary).HasDefaultValue(true);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.LastNameFirst)
                    .HasMaxLength(102)
                    .HasComputedColumnSql("((isnull([LastName],'')+', ')+isnull([FirstName],''))", false);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.PersonAliasGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.PersonNameCategoryId).HasDefaultValue(1);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.Suffix).HasMaxLength(50);

                entity.HasOne(d => d.Person).WithMany(p => p.PersonAliases)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Person_PersonAlias_FK1");

                entity.HasOne(d => d.PersonNameCategory).WithMany(p => p.PersonAliases)
                    .HasForeignKey(d => d.PersonNameCategoryId)
                    .HasConstraintName("FK_PersonAlias_PersonNameCategoryDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonAliases)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonAlias_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonAliases)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonAlias_Source");
            });

            modelBuilder.Entity<PersonAliasGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonAliasGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.FullName).HasMaxLength(152);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.LastNameFirst).HasMaxLength(102);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.PersonNameCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonAliasView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonAliasView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.FullName).HasMaxLength(152);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.LastNameFirst).HasMaxLength(102);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.PersonAliasId).ValueGeneratedOnAdd();
                entity.Property(e => e.PersonNameCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonNameCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonArea>(entity =>
            {
                entity.HasKey(e => e.PersonAreaId).HasFillFactor(80);

                entity.ToTable("PersonArea");

                entity.HasIndex(e => e.PersonId, "NonClusteredIndex-20200531-151217");

                entity.Property(e => e.PersonAreaId).HasColumnName("personAreaId");

                entity.HasOne(d => d.Area).WithMany(p => p.PersonAreas)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_PersonArea_Area");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonAreas)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PersonArea_Person");
            });

            modelBuilder.Entity<PersonArticleContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonArticleContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonArticleGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonArticleGuidView");

                entity.Property(e => e.ArticleCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleTypeCode).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonArticleView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonArticleView");

                entity.Property(e => e.ArticleCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ArticleTypeCategoryCode).HasMaxLength(50);
                entity.Property(e => e.ArticleTypeCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.ArticleTypeCode).HasMaxLength(20);
                entity.Property(e => e.ArticleTypeDescription).HasMaxLength(250);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonAspnetUser>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("PersonAspnetUser");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.PersonId).HasColumnName("PersonID");
                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonAspnetUsers)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonAspnetUser_Person");

                entity.HasOne(d => d.User).WithMany(p => p.PersonAspnetUsers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonAspnetUser_aspnet_Users");
            });

            modelBuilder.Entity<PersonBloodTypeDim>(entity =>
            {
                entity.HasKey(e => e.PersonBloodTypeId)
                    .HasName("PersonBloodTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonBloodTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonBloodTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonBloodTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonBloodTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonBloodTypeDIMCodeView");

                entity.Property(e => e.PersonBloodTypeCode).HasMaxLength(20);
                entity.Property(e => e.PersonBloodTypeDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonBodyPartStatusDim>(entity =>
            {
                entity.HasKey(e => e.PersonBodyPartStatusId)
                    .HasName("PK_PersonBodyStatusDIM")
                    .HasFillFactor(80);

                entity.ToTable("PersonBodyPartStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonBodyPartStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonBodyPartStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonBodyPartStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonBodyPartStatusDIMCodeView");

                entity.Property(e => e.PersonBodyPartStatusCode).HasMaxLength(20);
                entity.Property(e => e.PersonBodyPartStatusDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonBodyXrayDim>(entity =>
            {
                entity.HasKey(e => e.PersonBodyXrayId).HasFillFactor(80);

                entity.ToTable("PersonBodyXrayDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonBodyXrayDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonBodyXrayDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonBodyXrayDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonBodyXrayDIMCodeView");

                entity.Property(e => e.PersonBodyXrayCode).HasMaxLength(20);
                entity.Property(e => e.PersonBodyXrayDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonBuildDim>(entity =>
            {
                entity.HasKey(e => e.PersonBuildId)
                    .HasName("PersonBuildDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonBuildDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonBuildDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonBuildDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonBuildDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonBuildDIMCodeView");

                entity.Property(e => e.PersonBuildCode).HasMaxLength(20);
                entity.Property(e => e.PersonBuildDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonCategoryDim>(entity =>
            {
                entity.HasKey(e => e.PersonCategoryId).HasFillFactor(80);

                entity.ToTable("PersonCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonCategoryDIMCodeView");

                entity.Property(e => e.PersonCategoryCode).HasMaxLength(20);
                entity.Property(e => e.PersonCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonCauseofDeathDim>(entity =>
            {
                entity.HasKey(e => e.PersonCauseOfDeathId)
                    .HasName("PK_PersonDeathReasonDIM")
                    .HasFillFactor(80);

                entity.ToTable("PersonCauseofDeathDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonCauseofDeathDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonCauseofDeathDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonCauseofDeathDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonCauseofDeathDIMCodeView");

                entity.Property(e => e.PersonCauseofDeathCode).HasMaxLength(20);
                entity.Property(e => e.PersonCauseofDeathDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonCircumcisionDim>(entity =>
            {
                entity.HasKey(e => e.PersonCircumcisionId).HasFillFactor(80);

                entity.ToTable("PersonCircumcisionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonCircumcisionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonCircumcisionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonCircumcisionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonCircumcisionDIMCodeView");

                entity.Property(e => e.PersonCircumcisionCode).HasMaxLength(20);
                entity.Property(e => e.PersonCircumcisionDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonCitizenship>(entity =>
            {
                entity.HasKey(e => e.PersonCitizenshipId).HasFillFactor(80);

                entity.ToTable("PersonCitizenship");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsPrimary).HasDefaultValue(true);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonCitizenshipDescription).HasMaxLength(300);
                entity.Property(e => e.PersonCitizenshipGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.GeoCountry).WithMany(p => p.PersonCitizenships)
                    .HasForeignKey(d => d.GeoCountryid)
                    .HasConstraintName("FK_PersonCitizenship_GeoLocationDIM");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonCitizenships)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PersonCitizenship_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonCitizenships)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonCitizenship_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonCitizenships)
                    .HasForeignKey(d => d.SourceId)
                    .HasConstraintName("FK_PersonCitizenship_Source");
            });

            modelBuilder.Entity<PersonCitizenshipGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonCitizenshipGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.GeoCountryCode).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonCitizenshipDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonCitizenshipView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonCitizenshipView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.GeoCountryCode).HasMaxLength(50);
                entity.Property(e => e.GeoCountryCountryName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonCitizenshipDescription).HasMaxLength(300);
                entity.Property(e => e.PersonCitizenshipId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonClothing>(entity =>
            {
                entity.HasKey(e => e.PersonClothingId)
                    .HasName("PK_PersonClothingDIM")
                    .HasFillFactor(80);

                entity.ToTable("PersonClothing");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonClothingCategoryId).HasDefaultValue(1);
                entity.Property(e => e.PersonClothingColorId).HasDefaultValue(1);
                entity.Property(e => e.PersonClothingDescription).HasMaxLength(300);
                entity.Property(e => e.PersonClothingGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.PersonClothingStyleId).HasDefaultValue(1);

                entity.HasOne(d => d.PersonClothingCategory).WithMany(p => p.PersonClothings)
                    .HasForeignKey(d => d.PersonClothingCategoryId)
                    .HasConstraintName("FK_PersonClothing_PersonClothingCategoryDIM");

                entity.HasOne(d => d.PersonClothingColor).WithMany(p => p.PersonClothings)
                    .HasForeignKey(d => d.PersonClothingColorId)
                    .HasConstraintName("FK_PersonClothing_PersonClothingColorDIM");

                entity.HasOne(d => d.PersonClothingStyle).WithMany(p => p.PersonClothings)
                    .HasForeignKey(d => d.PersonClothingStyleId)
                    .HasConstraintName("FK_PersonClothing_PersonClothingStyleDIM");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonClothings)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonClothing_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonClothings)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonClothing_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonClothings)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonClothing_Source");
            });

            modelBuilder.Entity<PersonClothingCategoryDim>(entity =>
            {
                entity.HasKey(e => e.PersonClothingCategoryId).HasFillFactor(80);

                entity.ToTable("PersonClothingCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonClothingCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonClothingCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonClothingCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonClothingCategoryDIMCodeView");

                entity.Property(e => e.PersonClothingCategoryCode).HasMaxLength(20);
                entity.Property(e => e.PersonClothingCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonClothingColorDim>(entity =>
            {
                entity.HasKey(e => e.PersonClothingColorId).HasFillFactor(80);

                entity.ToTable("PersonClothingColorDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonClothingColorDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonClothingColorDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonClothingColorDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonClothingColorDIMCodeView");

                entity.Property(e => e.PersonClothingColorCode).HasMaxLength(20);
                entity.Property(e => e.PersonClothingColorDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonClothingGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonClothingGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonClothingCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonClothingColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonClothingDescription).HasMaxLength(300);
                entity.Property(e => e.PersonClothingStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonClothingStyleDim>(entity =>
            {
                entity.HasKey(e => e.PersonClothingStyleId).HasFillFactor(80);

                entity.ToTable("PersonClothingStyleDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonClothingStyleDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonClothingStyleDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonClothingStyleDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonClothingStyleDIMCodeView");

                entity.Property(e => e.PersonClothingStyleCode).HasMaxLength(20);
                entity.Property(e => e.PersonClothingStyleDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonClothingView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonClothingView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonClothingCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonClothingCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonClothingColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonClothingColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonClothingDescription).HasMaxLength(300);
                entity.Property(e => e.PersonClothingId).ValueGeneratedOnAdd();
                entity.Property(e => e.PersonClothingStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonClothingStyleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonComment>(entity =>
            {
                entity.HasKey(e => e.PersonCommentId).HasFillFactor(80);

                entity.ToTable("PersonComment");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonCommentDescription).HasMaxLength(300);
                entity.Property(e => e.PersonCommentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Comment).WithMany(p => p.PersonComments)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonComment_Comment");

                entity.HasOne(d => d.CommentInvolvement).WithMany(p => p.PersonComments)
                    .HasForeignKey(d => d.CommentInvolvementId)
                    .HasConstraintName("FK_PersonComment_PersonCommentCategoryDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PersonCommentCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PersonComment_Person2");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonCommentPeople)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonComment_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonComments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonComment_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonComments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonComment_Source");
            });

            modelBuilder.Entity<PersonCommentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonCommentContainerGuidView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonCommentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonCommentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonCommentContainerView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonCommentDescription).HasMaxLength(300);
                entity.Property(e => e.PersonCommentId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonCommentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonCommentGuidView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonCommentDescription).HasMaxLength(300);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonCommentNew01>(entity =>
            {
                entity.HasKey(e => e.PersonCommentId).HasFillFactor(80);

                entity.ToTable("PersonCommentNew01");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonCommentDescription).HasMaxLength(300);
                entity.Property(e => e.PersonCommentGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Comment).WithMany(p => p.PersonCommentNew01s)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonComment_CommentNew01");

                entity.HasOne(d => d.CommentInvolvement).WithMany(p => p.PersonCommentNew01s)
                    .HasForeignKey(d => d.CommentInvolvementId)
                    .HasConstraintName("FK_PersonComment_PersonCommentCategoryDIMNew01");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PersonCommentNew01CreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PersonComment_Person2New01");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonCommentNew01People)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonComment_PersonNew01");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonCommentNew01s)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonComment_RowStatusDIMNew01");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonCommentNew01s)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonComment_SourceNew01");
            });

            modelBuilder.Entity<PersonCommentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonCommentView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImportanceHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonCommentDescription).HasMaxLength(300);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PriorityHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonComplexionDim>(entity =>
            {
                entity.HasKey(e => e.PersonComplexionId)
                    .HasName("PersonComplexionDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonComplexionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonComplexionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonComplexionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonComplexionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonComplexionDIMCodeView");

                entity.Property(e => e.PersonComplexionCode).HasMaxLength(20);
                entity.Property(e => e.PersonComplexionDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonContact>(entity =>
            {
                entity.HasKey(e => e.PersonContactId).HasFillFactor(80);

                entity.ToTable("PersonContact");

                entity.HasIndex(e => e.PersonId, "ContactIndex").HasFillFactor(80);

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonContactDescription).HasMaxLength(300);
                entity.Property(e => e.PersonContactGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Contact).WithMany(p => p.PersonContacts)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonContact_Contact");

                entity.HasOne(d => d.ContactInvolvement).WithMany(p => p.PersonContacts)
                    .HasForeignKey(d => d.ContactInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonContact_ContactInvolvementDIM");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonContacts)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonContact_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonContacts)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonContact_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonContacts)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonContact_Source");
            });

            modelBuilder.Entity<PersonContactContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonContactContainerGuidView");

                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonContactDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonContactContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonContactContainerView");

                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonContactDescription).HasMaxLength(300);
                entity.Property(e => e.PersonContactId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonContactGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonContactGuidView");

                entity.Property(e => e.ContactCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonContactDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonContactView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonContactView");

                entity.Property(e => e.ContactCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonContactDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonDisguiseDim>(entity =>
            {
                entity.HasKey(e => e.PersonDisguiseId)
                    .HasName("PersonDisguiseDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonDisguiseDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonDisguiseDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonDisguiseDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonDisguiseDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDisguiseDIMCodeView");

                entity.Property(e => e.PersonDisguiseCode).HasMaxLength(20);
                entity.Property(e => e.PersonDisguiseDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonDocument>(entity =>
            {
                entity.HasKey(e => e.PersonDocumentId).HasFillFactor(80);

                entity.ToTable("PersonDocument");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.PersonDocumentGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Document).WithMany(p => p.PersonDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonDocument_Document");

                entity.HasOne(d => d.DocumentInvolvement).WithMany(p => p.PersonDocuments)
                    .HasForeignKey(d => d.DocumentInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonDocument_DocumentInvolvementDIM");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonDocuments)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonDocument_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonDocuments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonDocument_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonDocuments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonDocument_Source");
            });

            modelBuilder.Entity<PersonDocumentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDocumentContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonDocumentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDocumentContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.PersonDocumentId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonDocumentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDocumentGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<PersonDocumentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDocumentView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<PersonDriverLicense>(entity =>
            {
                entity.HasKey(e => e.PersonId).HasFillFactor(80);

                entity.ToTable("PersonDriverLicense");

                entity.Property(e => e.PersonId).ValueGeneratedNever();
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.EffectiveYear).HasComputedColumnSql("(datepart(year,[EffectiveDate]))", false);
                entity.Property(e => e.ExpirationYear).HasComputedColumnSql("(datepart(year,[ExpirationDate]))", false);
                entity.Property(e => e.Identification).HasMaxLength(50);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonDriverLicenseDescription).HasMaxLength(300);
                entity.Property(e => e.PersonDriverLicenseGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.PersonDriverLicenseId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.DriverLicenseCivilianClass).WithMany(p => p.PersonDriverLicenses)
                    .HasForeignKey(d => d.DriverLicenseCivilianClassId)
                    .HasConstraintName("FK_PersonDriverLicense_DriverLicenseNonCommericalClassDIM");

                entity.HasOne(d => d.DriverLicenseCommericalClass).WithMany(p => p.PersonDriverLicenses)
                    .HasForeignKey(d => d.DriverLicenseCommericalClassId)
                    .HasConstraintName("FK_PersonDriverLicense_DriverLicenseCommericalClassDIM");

                entity.HasOne(d => d.DriverLicenseImage).WithMany(p => p.PersonDriverLicenses)
                    .HasForeignKey(d => d.DriverLicenseImageId)
                    .HasConstraintName("FK_PersonDriverLicense_Image");

                entity.HasOne(d => d.DriverLicensePermitStatus).WithMany(p => p.PersonDriverLicenses)
                    .HasForeignKey(d => d.DriverLicensePermitStatusId)
                    .HasConstraintName("FK_PersonDriverLicense_DriverLicensePermitStatusDIM");

                entity.HasOne(d => d.IdentificationAuthority).WithMany(p => p.PersonDriverLicenses)
                    .HasForeignKey(d => d.IdentificationAuthorityId)
                    .HasConstraintName("FK_PersonDriverLicense_IdentificationJurisdictionAuthorityDIM");

                entity.HasOne(d => d.PersonDrivingInsCoverageCategory).WithMany(p => p.PersonDriverLicenses)
                    .HasForeignKey(d => d.PersonDrivingInsCoverageCategoryId)
                    .HasConstraintName("FK_PersonDriverLicense_PersonDrivingInsCoverageCategoryDIM");

                entity.HasOne(d => d.PersonDrivingInsuranceStatus).WithMany(p => p.PersonDriverLicenses)
                    .HasForeignKey(d => d.PersonDrivingInsuranceStatusId)
                    .HasConstraintName("FK_PersonDriverLicense_PersonDrivingInsuranceStatusDIM");

                entity.HasOne(d => d.Person).WithOne(p => p.PersonDriverLicense)
                    .HasForeignKey<PersonDriverLicense>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonDriverLicense_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonDriverLicenses)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonDriverLicense_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonDriverLicenses)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonDriverLicense_Source");
            });

            modelBuilder.Entity<PersonDriverLicenseGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDriverLicenseGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DriverLicenseCivilianClassCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DriverLicenseCommericalClassCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DriverLicensePermitStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Identification).HasMaxLength(50);
                entity.Property(e => e.IdentificationAuthorityCode).HasMaxLength(20);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonDriverLicenseDescription).HasMaxLength(300);
                entity.Property(e => e.PersonDrivingInsCoverageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonDrivingInsuranceStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonDriverLicenseView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDriverLicenseView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DriverLicenseCivilianClassCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DriverLicenseCivilianClassDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DriverLicenseCommericalClassCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DriverLicenseCommericalClassDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DriverLicensePermitStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DriverLicensePermitStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Identification).HasMaxLength(50);
                entity.Property(e => e.IdentificationAuthorityCode).HasMaxLength(20);
                entity.Property(e => e.IdentificationAuthorityJurisdiction).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonDriverLicenseDescription).HasMaxLength(300);
                entity.Property(e => e.PersonDriverLicenseId).ValueGeneratedOnAdd();
                entity.Property(e => e.PersonDrivingInsCoverageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonDrivingInsCoverageCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonDrivingInsuranceStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonDrivingInsuranceStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonDrivingInsCoverageCategoryDim>(entity =>
            {
                entity.HasKey(e => e.PersonDrivingInsCoverageCategoryId)
                    .HasName("DrivingInsuranceTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonDrivingInsCoverageCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonDrivingInsCoverageCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonDrivingInsCoverageCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonDrivingInsCoverageCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDrivingInsCoverageCategoryDIMCodeView");

                entity.Property(e => e.PersonDrivingInsCoverageCategoryCode).HasMaxLength(20);
                entity.Property(e => e.PersonDrivingInsCoverageCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonDrivingInsuranceStatusDim>(entity =>
            {
                entity.HasKey(e => e.PersonDrivingInsuranceStatusId)
                    .HasName("DrivingInsuranceStatusDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonDrivingInsuranceStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonDrivingInsuranceStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonDrivingInsuranceStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonDrivingInsuranceStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDrivingInsuranceStatusDIMCodeView");

                entity.Property(e => e.PersonDrivingInsuranceStatusCode).HasMaxLength(20);
                entity.Property(e => e.PersonDrivingInsuranceStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonDrugContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDrugContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonDrugGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDrugGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DrugCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonDrugView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonDrugView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DrugCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugCompositionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugContainerDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugFoundDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DrugSubstanceFormDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonEducation>(entity =>
            {
                entity.HasKey(e => e.PersonEducationId)
                    .HasName("PK__PersonEd__B59DFF105C0C31F0")
                    .HasFillFactor(80);

                entity.ToTable("PersonEducation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.EducationCategoryId).HasDefaultValue(1);
                entity.Property(e => e.EducationDegreeId).HasDefaultValue(1);
                entity.Property(e => e.EducationOrganizationId).HasDefaultValue(1L);
                entity.Property(e => e.EducationStatusId).HasDefaultValue(1);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonEducationDescription).HasMaxLength(400);
                entity.Property(e => e.PersonEducationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.StudentIdentification).HasMaxLength(20);

                entity.HasOne(d => d.EducationCategory).WithMany(p => p.PersonEducations)
                    .HasForeignKey(d => d.EducationCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonEducation_EducationCategory");

                entity.HasOne(d => d.EducationDegree).WithMany(p => p.PersonEducations)
                    .HasForeignKey(d => d.EducationDegreeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonEducation_EducationDegree");

                entity.HasOne(d => d.EducationOrganization).WithMany(p => p.PersonEducations)
                    .HasForeignKey(d => d.EducationOrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonEducation_Organization");

                entity.HasOne(d => d.EducationStatus).WithMany(p => p.PersonEducations)
                    .HasForeignKey(d => d.EducationStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonEducation_EducationStatus");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonEducations)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonEducation_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonEducations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonEducation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonEducations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonEducation_Source");
            });

            modelBuilder.Entity<PersonEducationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonEducationGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EducationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EducationDegreeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EducationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonEducationDescription).HasMaxLength(400);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.StudentIdentification).HasMaxLength(20);
            });

            modelBuilder.Entity<PersonEducationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonEducationView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EducationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EducationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EducationDegreeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EducationDegreeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EducationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EducationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonEducationDescription).HasMaxLength(400);
                entity.Property(e => e.PersonEducationId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.StudentIdentification).HasMaxLength(20);
            });

            modelBuilder.Entity<PersonEmployment>(entity =>
            {
                entity.HasKey(e => e.PersonEmploymentId).HasFillFactor(80);

                entity.ToTable("PersonEmployment");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.EmployeeIdentification).HasMaxLength(50);
                entity.Property(e => e.EmploymentDepartmentId).HasDefaultValue(1);
                entity.Property(e => e.EmploymentOccupationId).HasDefaultValue(1);
                entity.Property(e => e.EmploymentRankId).HasDefaultValue(1);
                entity.Property(e => e.EmploymentStatusId).HasDefaultValue(1);
                entity.Property(e => e.EmploymentWorkShiftId).HasDefaultValue(1);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonEmploymentDescription).HasMaxLength(300);
                entity.Property(e => e.PersonEmploymentGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.EmployerOrganization).WithMany(p => p.PersonEmployments)
                    .HasForeignKey(d => d.EmployerOrganizationId)
                    .HasConstraintName("FK_PersonEmployment_Organization");

                entity.HasOne(d => d.EmployerPerson).WithMany(p => p.PersonEmploymentEmployerPeople)
                    .HasForeignKey(d => d.EmployerPersonId)
                    .HasConstraintName("FK_PersonEmployment_Person1");

                entity.HasOne(d => d.EmploymentDepartment).WithMany(p => p.PersonEmployments)
                    .HasForeignKey(d => d.EmploymentDepartmentId)
                    .HasConstraintName("FK_PersonEmployment_EmploymentDepartmentDIM");

                entity.HasOne(d => d.EmploymentOccupation).WithMany(p => p.PersonEmployments)
                    .HasForeignKey(d => d.EmploymentOccupationId)
                    .HasConstraintName("EmploymentOccupationDIM_PersonEmployment_FK1");

                entity.HasOne(d => d.EmploymentPosition).WithMany(p => p.PersonEmployments)
                    .HasForeignKey(d => d.EmploymentPositionId)
                    .HasConstraintName("EmploymentPositionDIM_PersonEmployment_FK1");

                entity.HasOne(d => d.EmploymentRank).WithMany(p => p.PersonEmployments)
                    .HasForeignKey(d => d.EmploymentRankId)
                    .HasConstraintName("EmploymentRankDIM_PersonEmployment_FK1");

                entity.HasOne(d => d.EmploymentStatus).WithMany(p => p.PersonEmployments)
                    .HasForeignKey(d => d.EmploymentStatusId)
                    .HasConstraintName("FK_PersonEmployment_EmploymentStatusDIM");

                entity.HasOne(d => d.EmploymentWorkShift).WithMany(p => p.PersonEmployments)
                    .HasForeignKey(d => d.EmploymentWorkShiftId)
                    .HasConstraintName("EmploymentWorkShiftDIM_PersonEmployment_FK1");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonEmploymentPeople)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonEmployment_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonEmployments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonEmployment_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonEmployments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonEmployment_Source");
            });

            modelBuilder.Entity<PersonEmploymentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonEmploymentGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EmployeeIdentification).HasMaxLength(50);
                entity.Property(e => e.EmploymentDepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentOccupationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentPositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentRankCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentWorkShiftCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonEmploymentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonEmploymentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonEmploymentView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EmployeeIdentification).HasMaxLength(50);
                entity.Property(e => e.EmploymentDepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentDepartmentDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentOccupationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentOccupationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentPositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentPositionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentRankCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentRankDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentWorkShiftCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EmploymentWorkShiftDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonEmploymentDescription).HasMaxLength(300);
                entity.Property(e => e.PersonEmploymentId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonEvidenceContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonEvidenceContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonEvidenceGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonEvidenceGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.EvidenceAmount).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonEvidenceView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonEvidenceView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.EvidenceAmount).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonEyeColorDim>(entity =>
            {
                entity.HasKey(e => e.PersonEyeColorId)
                    .HasName("PersonEyeColorDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonEyeColorDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(20);
                entity.Property(e => e.Nicic)
                    .HasMaxLength(20)
                    .HasColumnName("NICIC");
                entity.Property(e => e.Niem1)
                    .HasMaxLength(20)
                    .HasColumnName("NIEM1");
                entity.Property(e => e.Niem2)
                    .HasMaxLength(20)
                    .HasColumnName("NIEM2");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonEyeColorDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonEyeColorDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonEyeColorDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonEyeColorDIMCodeView");

                entity.Property(e => e.PersonEyeColorCode).HasMaxLength(20);
                entity.Property(e => e.PersonEyeColorDescription).HasMaxLength(20);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonEyeWearDim>(entity =>
            {
                entity.HasKey(e => e.PersonEyeWearId)
                    .HasName("PersonEyeWearDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonEyeWearDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonEyeWearDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonEyeWearDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonEyeWearDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonEyeWearDIMCodeView");

                entity.Property(e => e.PersonEyeWearCode).HasMaxLength(20);
                entity.Property(e => e.PersonEyeWearDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonFacialHairDim>(entity =>
            {
                entity.HasKey(e => e.PersonFacialHairId)
                    .HasName("PersonFacialHairTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonFacialHairDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.PersonFacialHairColor).WithMany(p => p.PersonFacialHairDims)
                    .HasForeignKey(d => d.PersonFacialHairColorId)
                    .HasConstraintName("PersonHairColorDIM_PersonFacialHairTypeDIM_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonFacialHairDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonFacialHairDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonFacialHairDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonFacialHairDIMCodeView");

                entity.Property(e => e.PersonFacialHairCode).HasMaxLength(20);
                entity.Property(e => e.PersonFacialHairDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonFingerprintSet>(entity =>
            {
                entity.HasKey(e => e.PersonFingerprintSetId).HasFillFactor(80);

                entity.ToTable("PersonFingerprintSet");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.FingerPrintPatternCategoryId).HasDefaultValue(1);
                entity.Property(e => e.FingerPrintPatternClassificationId).HasDefaultValue(1);
                entity.Property(e => e.FingerprintFingerId).HasDefaultValue(1);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonFingerprintSetDescription).HasMaxLength(300);
                entity.Property(e => e.PersonFingerprintSetGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.FingerPrintPatternCategory).WithMany(p => p.PersonFingerprintSets)
                    .HasForeignKey(d => d.FingerPrintPatternCategoryId)
                    .HasConstraintName("FingerprintClassifcationTypeDIM_PersonFingerprintSet_FK1");

                entity.HasOne(d => d.FingerPrintPatternClassification).WithMany(p => p.PersonFingerprintSets)
                    .HasForeignKey(d => d.FingerPrintPatternClassificationId)
                    .HasConstraintName("FingerprintClassificationDIM_PersonFingerprintSet_FK1");

                entity.HasOne(d => d.FingerprintFinger).WithMany(p => p.PersonFingerprintSets)
                    .HasForeignKey(d => d.FingerprintFingerId)
                    .HasConstraintName("FK_PersonFingerprintSet_FingerPrintDIM");

                entity.HasOne(d => d.FingerprintImage).WithMany(p => p.PersonFingerprintSets)
                    .HasForeignKey(d => d.FingerprintImageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonFingerprintSet_Image");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonFingerprintSets)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Person_PersonFingerprintSet_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonFingerprintSets)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonFingerprintSet_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonFingerprintSets)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonFingerprintSet_Source");
            });

            modelBuilder.Entity<PersonFingerprintSetGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonFingerprintSetGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FingerPrintPatternCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FingerPrintPatternClassificationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FingerprintFingerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonFingerprintSetDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonFingerprintSetView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonFingerprintSetView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FingerPrintPatternCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FingerPrintPatternCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FingerPrintPatternClassificationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FingerPrintPatternClassificationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FingerprintFingerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FingerprintFingerDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonFingerprintSetDescription).HasMaxLength(300);
                entity.Property(e => e.PersonFingerprintSetId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonFirearmContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonFirearmContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonFirearmGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonFirearmGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FirearmActionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonFirearmView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonFirearmView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.FirearmActionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmActionCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmFinishDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGageCaliberDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirearmGripDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonGeneralAppearanceDim>(entity =>
            {
                entity.HasKey(e => e.PersonGeneralAppearanceId).HasFillFactor(80);

                entity.ToTable("PersonGeneralAppearanceDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonGeneralAppearanceDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonGeneralAppearanceDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonGeneralAppearanceDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonGeneralAppearanceDIMCodeView");

                entity.Property(e => e.PersonGeneralAppearanceCode).HasMaxLength(20);
                entity.Property(e => e.PersonGeneralAppearanceDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonHairAppearanceDim>(entity =>
            {
                entity.HasKey(e => e.PersonHairAppearanceId)
                    .HasName("PersonAppearanceDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonHairAppearanceDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonHairAppearanceDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonHairAppearanceDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonHairAppearanceDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonHairAppearanceDIMCodeView");

                entity.Property(e => e.PersonHairAppearanceCode).HasMaxLength(20);
                entity.Property(e => e.PersonHairAppearanceDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonHairColorDim>(entity =>
            {
                entity.HasKey(e => e.PersonHairColorId)
                    .HasName("PersonHairColorDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonHairColorDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonHairColorDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonHairColorDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonHairColorDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonHairColorDIMCodeView");

                entity.Property(e => e.PersonHairColorCode).HasMaxLength(20);
                entity.Property(e => e.PersonHairColorDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonHairStyleDim>(entity =>
            {
                entity.HasKey(e => e.PersonHairStyleId)
                    .HasName("PersonHairStyleDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonHairStyleDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonHairStyleDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonHairStyleDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonHairStyleDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonHairStyleDIMCodeView");

                entity.Property(e => e.PersonHairStyleCode).HasMaxLength(20);
                entity.Property(e => e.PersonHairStyleDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonHandednessDim>(entity =>
            {
                entity.HasKey(e => e.PersonHandednessId)
                    .HasName("PersonHandednessDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonHandednessDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonHandednessDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonHandednessDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonHandednessDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonHandednessDIMCodeView");

                entity.Property(e => e.PersonHandednessCode).HasMaxLength(20);
                entity.Property(e => e.PersonHandednessDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonHistoricalLocation>(entity =>
            {
                entity.Property(e => e.ActionDateTime).HasColumnType("datetime");
                entity.Property(e => e.Latitude).HasColumnType("decimal(18, 15)");
                entity.Property(e => e.Longitude).HasColumnType("decimal(18, 15)");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonHistoricalLocations)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonHistoricalLocations_Person");
            });

            modelBuilder.Entity<PersonHistoricalTokenShared>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_PersonHistoricalTokenShared");

                entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
                entity.Property(e => e.ExpiryDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Event).WithMany(p => p.PersonHistoricalTokenShareds)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonHistoricalTokenShareds_Events");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonHistoricalTokenShareds)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonHistoricalTokenShared_Person");
            });

            modelBuilder.Entity<PersonImage>(entity =>
            {
                entity.HasKey(e => e.PersonImageId)
                    .HasName("PK_PersonDigitalImage")
                    .HasFillFactor(80);

                entity.ToTable("PersonImage");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonImageDescription).HasMaxLength(300);
                entity.Property(e => e.PersonImageGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Image).WithMany(p => p.PersonImages)
                    .HasForeignKey(d => d.ImageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonImage_Image");

                entity.HasOne(d => d.ImageInvolvement).WithMany(p => p.PersonImages)
                    .HasForeignKey(d => d.ImageInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonImage_ImageInvolvementDIM");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonImages)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonImage_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonImages)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonImage_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonImages)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonImage_Source");
            });

            modelBuilder.Entity<PersonImageContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonImageContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonImageDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonImageContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonImageContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonImageDescription).HasMaxLength(300);
                entity.Property(e => e.PersonImageId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonImageGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonImageGuidView");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonImageDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonImageView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonImageView");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinaryLocationUri)
                    .HasMaxLength(255)
                    .HasColumnName("BinaryLocationURI");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ImageCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.IsSqlstored).HasColumnName("IsSQLStored");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonImageDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonInjury>(entity =>
            {
                entity.HasKey(e => e.PersonInjuryId)
                    .HasName("PK__PersonIn__6FE58C29A3979109")
                    .HasFillFactor(80);

                entity.ToTable("PersonInjury");

                entity.Property(e => e.CoronerNotified).HasDefaultValue(false);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.EmsarrivedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EMSArrivedDateTime");
                entity.Property(e => e.EmsnotifiedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EMSNotifiedDateTime");
                entity.Property(e => e.IsDead).HasDefaultValue(false);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsInjured).HasDefaultValue(false);
                entity.Property(e => e.KinNotified).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonInjuryDescription).HasMaxLength(300);
                entity.Property(e => e.PersonInjuryGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.PersonInjuryLevelId).HasDefaultValue(1);
                entity.Property(e => e.PersonInjuryListId).HasDefaultValue(1);
                entity.Property(e => e.PersonMedicalById).HasDefaultValue(1);
                entity.Property(e => e.PersonMedicationId).HasDefaultValue(1);
                entity.Property(e => e.PersonMoruaryId).HasDefaultValue(1);
                entity.Property(e => e.PersonPhysicianId).HasDefaultValue(1);
                entity.Property(e => e.PersonTransportedById).HasDefaultValue(1);
                entity.Property(e => e.PronouncedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonInjuries)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonInjury_Person");

                entity.HasOne(d => d.PersonInjuryLevel).WithMany(p => p.PersonInjuries)
                    .HasForeignKey(d => d.PersonInjuryLevelId)
                    .HasConstraintName("FK_PersonInjury_PersonInjuryLevelDIM");

                entity.HasOne(d => d.PersonInjuryList).WithMany(p => p.PersonInjuries)
                    .HasForeignKey(d => d.PersonInjuryListId)
                    .HasConstraintName("FK_PersonInjury_PersonInjuryListDIM");

                entity.HasOne(d => d.PersonMedicalBy).WithMany(p => p.PersonInjuries)
                    .HasForeignKey(d => d.PersonMedicalById)
                    .HasConstraintName("FK_PersonInjury_PersonMedicalByDIM");

                entity.HasOne(d => d.PersonMedication).WithMany(p => p.PersonInjuries)
                    .HasForeignKey(d => d.PersonMedicationId)
                    .HasConstraintName("FK_PersonInjury_PersonMedicationDIM");

                entity.HasOne(d => d.PersonMoruary).WithMany(p => p.PersonInjuries)
                    .HasForeignKey(d => d.PersonMoruaryId)
                    .HasConstraintName("FK_PersonInjury_PersonMoruaryDIM");

                entity.HasOne(d => d.PersonPhysician).WithMany(p => p.PersonInjuries)
                    .HasForeignKey(d => d.PersonPhysicianId)
                    .HasConstraintName("FK_PersonInjury_PersonPhysicianDIM");

                entity.HasOne(d => d.PersonTransportedBy).WithMany(p => p.PersonInjuries)
                    .HasForeignKey(d => d.PersonTransportedById)
                    .HasConstraintName("FK_PersonInjury_PersonTransportedByDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonInjuries)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonInjury_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonInjuries)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonInjury_Source");
            });

            modelBuilder.Entity<PersonInjuryGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonInjuryGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EmsarrivedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EMSArrivedDateTime");
                entity.Property(e => e.EmsnotifiedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EMSNotifiedDateTime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInjuryDescription).HasMaxLength(300);
                entity.Property(e => e.PersonInjuryLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInjuryListCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicalByCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMoruaryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonPhysicianCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonTransportedByCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PronouncedDateTime).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonInjuryLevelDim>(entity =>
            {
                entity.HasKey(e => e.PersonInjuryLevelId)
                    .HasName("PK__PersonIn__3787F5B9F7AC4FE3")
                    .HasFillFactor(80);

                entity.ToTable("PersonInjuryLevelDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonInjuryLevelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonInjuryLevelDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonInjuryLevelDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonInjuryLevelDIMCodeView");

                entity.Property(e => e.PersonInjuryLevelCode).HasMaxLength(20);
                entity.Property(e => e.PersonInjuryLevelDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonInjuryListDim>(entity =>
            {
                entity.HasKey(e => e.PersonInjuryListId)
                    .HasName("PK__PersonIn__6B52C991C8074346")
                    .HasFillFactor(80);

                entity.ToTable("PersonInjuryListDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonInjuryListDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonInjuryListDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonInjuryListDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonInjuryListDIMCodeView");

                entity.Property(e => e.PersonInjuryListCode).HasMaxLength(20);
                entity.Property(e => e.PersonInjuryListDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonInjuryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonInjuryView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EmsarrivedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EMSArrivedDateTime");
                entity.Property(e => e.EmsnotifiedDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EMSNotifiedDateTime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInjuryDescription).HasMaxLength(300);
                entity.Property(e => e.PersonInjuryId).ValueGeneratedOnAdd();
                entity.Property(e => e.PersonInjuryLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInjuryLevelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInjuryListCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInjuryListDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicalByCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicalByDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMoruaryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMoruaryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonPhysicianCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonPhysicianDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonTransportedByCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonTransportedByDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PronouncedDateTime).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonIntoxication>(entity =>
            {
                entity.HasKey(e => e.PersonIntoxicationId).HasFillFactor(80);

                entity.ToTable("PersonIntoxication");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.IntoxicationIntoxicantCategoryId).HasDefaultValue(1);
                entity.Property(e => e.IntoxicationLevelId).HasDefaultValue(1);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonIntoxicationDescription).HasMaxLength(300);
                entity.Property(e => e.PersonIntoxicationGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IntoxicationIntoxicantCategory).WithMany(p => p.PersonIntoxications)
                    .HasForeignKey(d => d.IntoxicationIntoxicantCategoryId)
                    .HasConstraintName("FK_PersonIntoxication_IntoxicationIntoxicantCategoryDIM");

                entity.HasOne(d => d.IntoxicationLevel).WithMany(p => p.PersonIntoxications)
                    .HasForeignKey(d => d.IntoxicationLevelId)
                    .HasConstraintName("FK_PersonIntoxication_IntoxicationLevelDIM");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonIntoxications)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonIntoxication_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonIntoxications)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonIntoxication_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonIntoxications)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonIntoxication_Source");
            });

            modelBuilder.Entity<PersonIntoxicationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonIntoxicationGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.IntoxicationIntoxicantCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IntoxicationLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonIntoxicationDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonIntoxicationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonIntoxicationView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.IntoxicationIntoxicantCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IntoxicationIntoxicantCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IntoxicationLevelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IntoxicationLevelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonIntoxicationDescription).HasMaxLength(300);
                entity.Property(e => e.PersonIntoxicationId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.PersonInvolvementId)
                    .HasName("PK__PersonIn__CC5597797D51A207")
                    .HasFillFactor(80);

                entity.ToTable("PersonInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonInvolvementDIMCodeView");

                entity.Property(e => e.PersonInvolvementCode).HasMaxLength(20);
                entity.Property(e => e.PersonInvolvementDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonItem>(entity =>
            {
                entity.HasKey(e => e.PersonItemId).HasFillFactor(80);

                entity.ToTable("PersonItem");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.FromDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.PersonItemGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToDateTimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PersonItemCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_PersonItem_Person2");

                entity.HasOne(d => d.Item).WithMany(p => p.PersonItems)
                    .HasForeignKey(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonItem_Item");

                entity.HasOne(d => d.ItemInvolvement).WithMany(p => p.PersonItems)
                    .HasForeignKey(d => d.ItemInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonItem_ItemInvolvementDIM");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.PersonItemModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_PersonItem_Person1");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonItemPeople)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonItem_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonItems)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonItem_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonItems)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonItem_Source");
            });

            modelBuilder.Entity<PersonItemContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonItemContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonItemContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonItemContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.PersonItemId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonItemGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonItemGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonItemView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonItemView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonJewelryContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonJewelryContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonJewelryDim>(entity =>
            {
                entity.HasKey(e => e.PersonJewelryId)
                    .HasName("PersonJewelryDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonJewelryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonJewelryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonJewelryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonJewelryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonJewelryDIMCodeView");

                entity.Property(e => e.PersonJewelryCode).HasMaxLength(20);
                entity.Property(e => e.PersonJewelryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonJewelryGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonJewelryGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonJewelryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonJewelryView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCaratDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryGenderDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryMetalTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JewelryStyleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonLanguage>(entity =>
            {
                entity.HasKey(e => e.PersonLanguageId).HasFillFactor(80);

                entity.ToTable("PersonLanguage");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsPrimary).HasDefaultValue(false);
                entity.Property(e => e.IsRead).HasDefaultValue(true);
                entity.Property(e => e.IsSpoken).HasDefaultValue(true);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonLanguageDescription).HasMaxLength(300);
                entity.Property(e => e.PersonLanguageGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Language).WithMany(p => p.PersonLanguages)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("LanguageDIM_PersonLanguage_FK1");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonLanguages)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Person_PersonLanguage_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonLanguages)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonLanguage_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonLanguages)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonLanguage_Source");
            });

            modelBuilder.Entity<PersonLanguageGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonLanguageGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonLanguageDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonLanguageView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonLanguageView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LanguageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonLanguageDescription).HasMaxLength(300);
                entity.Property(e => e.PersonLanguageId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonLicensePlateContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonLicensePlateContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonLicensePlateGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonLicensePlateGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DateEntered).HasColumnType("datetime");
                entity.Property(e => e.DateOfTheft).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ExpireDate).HasColumnType("datetime");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Ncicnumber)
                    .HasMaxLength(50)
                    .HasColumnName("NCICNumber");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonLicensePlateView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonLicensePlateView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DateEntered).HasColumnType("datetime");
                entity.Property(e => e.DateOfTheft).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ExpireDate).HasColumnType("datetime");
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListSourceDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicensePlateListTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Ncicnumber)
                    .HasMaxLength(50)
                    .HasColumnName("NCICNumber");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonLocation>(entity =>
            {
                entity.HasKey(e => e.PersonLocationId).HasFillFactor(80);

                entity.ToTable("PersonLocation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.FromDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsPrimary).HasDefaultValue(true);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonLocationDescription).HasMaxLength(300);
                entity.Property(e => e.PersonLocationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToDateTimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.Location).WithMany(p => p.PersonLocations)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonLocaiton_Location");

                entity.HasOne(d => d.LocationInvolvement).WithMany(p => p.PersonLocations)
                    .HasForeignKey(d => d.LocationInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonLocation_LocationInvolvementDIM");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonLocations)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonLocaiton_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonLocations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonLocation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonLocations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonLocation_Source");
            });

            modelBuilder.Entity<PersonLocationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonLocationContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonLocationDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonLocationContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonLocationContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonLocationDescription).HasMaxLength(300);
                entity.Property(e => e.PersonLocationId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonMaritalStatusDim>(entity =>
            {
                entity.HasKey(e => e.PersonMaritalStatusId)
                    .HasName("PersonMaritalStatusDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonMaritalStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonMaritalStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonMaritalStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonMaritalStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonMaritalStatusDIMCodeView");

                entity.Property(e => e.PersonMaritalStatusCode).HasMaxLength(20);
                entity.Property(e => e.PersonMaritalStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonMedicalByDim>(entity =>
            {
                entity.HasKey(e => e.PersonMedicalById)
                    .HasName("PK__PersonMe__264CAE67ED101818")
                    .HasFillFactor(80);

                entity.ToTable("PersonMedicalByDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonMedicalByDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonMedicalByDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonMedicalByDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonMedicalByDIMCodeView");

                entity.Property(e => e.PersonMedicalByCode).HasMaxLength(20);
                entity.Property(e => e.PersonMedicalByDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonMedicalCautionDim>(entity =>
            {
                entity.HasKey(e => e.PersonMedicalCautionId).HasFillFactor(80);

                entity.ToTable("PersonMedicalCautionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonMedicalCautionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonMedicalCautionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonMedicalCautionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonMedicalCautionDIMCodeView");

                entity.Property(e => e.PersonMedicalCautionCode).HasMaxLength(20);
                entity.Property(e => e.PersonMedicalCautionDescription).HasMaxLength(150);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonMedicalCondition>(entity =>
            {
                entity.HasKey(e => e.PersonMedicalConditionId)
                    .HasName("PK_PersonMedicalCondition_1")
                    .HasFillFactor(80);

                entity.ToTable("PersonMedicalCondition");

                entity.Property(e => e.ConditionDateTime).HasColumnType("datetime");
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsPrimary).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonMedicalCautionId).HasDefaultValue(1);
                entity.Property(e => e.PersonMedicalConditionDescription).HasMaxLength(300);
                entity.Property(e => e.PersonMedicalConditionGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.PersonMedicalConditionTypeId).HasDefaultValue(1);

                entity.HasOne(d => d.Person).WithMany(p => p.PersonMedicalConditions)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonMedicalCondition_Person");

                entity.HasOne(d => d.PersonMedicalCaution).WithMany(p => p.PersonMedicalConditions)
                    .HasForeignKey(d => d.PersonMedicalCautionId)
                    .HasConstraintName("FK_PersonMedicalCondition_PersonMedicalCautionDIM");

                entity.HasOne(d => d.PersonMedicalConditionType).WithMany(p => p.PersonMedicalConditions)
                    .HasForeignKey(d => d.PersonMedicalConditionTypeId)
                    .HasConstraintName("FK_PersonMedicalCondition_PersonMedicalConditionDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonMedicalConditions)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonMedicalCondition_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonMedicalConditions)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonMedicalCondition_Source");
            });

            modelBuilder.Entity<PersonMedicalConditionGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonMedicalConditionGuidView");

                entity.Property(e => e.ConditionDateTime).HasColumnType("datetime");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonMedicalCautionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicalConditionDescription).HasMaxLength(300);
                entity.Property(e => e.PersonMedicalConditionTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonMedicalConditionTypeDim>(entity =>
            {
                entity.HasKey(e => e.PersonMedicalConditionTypeId)
                    .HasName("PK_PersonMedicalConditionDIM")
                    .HasFillFactor(80);

                entity.ToTable("PersonMedicalConditionTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonMedicalConditionTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonMedicalConditionTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonMedicalConditionTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonMedicalConditionTypeDIMCodeView");

                entity.Property(e => e.PersonMedicalConditionTypeCode).HasMaxLength(20);
                entity.Property(e => e.PersonMedicalConditionTypeDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonMedicalConditionView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonMedicalConditionView");

                entity.Property(e => e.ConditionDateTime).HasColumnType("datetime");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonMedicalCautionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicalCautionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicalConditionDescription).HasMaxLength(300);
                entity.Property(e => e.PersonMedicalConditionId).ValueGeneratedOnAdd();
                entity.Property(e => e.PersonMedicalConditionTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMedicalConditionTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonMedicationDim>(entity =>
            {
                entity.HasKey(e => e.PersonMedicationId)
                    .HasName("PK__PersonMe__9E4E3DF6CA88C545")
                    .HasFillFactor(80);

                entity.ToTable("PersonMedicationDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonMedicationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonMedicationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonMedicationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonMedicationDIMCodeView");

                entity.Property(e => e.PersonMedicationCode).HasMaxLength(20);
                entity.Property(e => e.PersonMedicationDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonMilitarySummary>(entity =>
            {
                entity.HasKey(e => e.PersonMilitarySummaryId).HasFillFactor(80);

                entity.ToTable("PersonMilitarySummary");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.MilitaryBranchId).HasDefaultValue(1);
                entity.Property(e => e.MilitaryDischargeTypeId).HasDefaultValue(1);
                entity.Property(e => e.MilitaryServiceTypeId).HasDefaultValue(1);
                entity.Property(e => e.MilitaryStatusId).HasDefaultValue(1);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonMilitarySummaryDescription).HasMaxLength(300);
                entity.Property(e => e.PersonMilitarySummaryGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ServiceEnd).HasColumnType("datetime");
                entity.Property(e => e.ServiceStart).HasColumnType("datetime");

                entity.HasOne(d => d.MilitaryBranch).WithMany(p => p.PersonMilitarySummaries)
                    .HasForeignKey(d => d.MilitaryBranchId)
                    .HasConstraintName("FK_PersonMilitarySummary_MilitaryBranchDIM");

                entity.HasOne(d => d.MilitaryDischargeType).WithMany(p => p.PersonMilitarySummaries)
                    .HasForeignKey(d => d.MilitaryDischargeTypeId)
                    .HasConstraintName("FK_PersonMilitarySummary_MilitaryDischargeTypeDIM");

                entity.HasOne(d => d.MilitaryServiceType).WithMany(p => p.PersonMilitarySummaries)
                    .HasForeignKey(d => d.MilitaryServiceTypeId)
                    .HasConstraintName("FK_PersonMilitarySummary_MilitaryServiceTypeDIM");

                entity.HasOne(d => d.MilitaryStatus).WithMany(p => p.PersonMilitarySummaries)
                    .HasForeignKey(d => d.MilitaryStatusId)
                    .HasConstraintName("FK_PersonMilitarySummary_MilitaryStatusDIM");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonMilitarySummaries)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonMilitarySummary_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonMilitarySummaries)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonMilitarySummary_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonMilitarySummaries)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonMilitarySummary_Source");
            });

            modelBuilder.Entity<PersonMilitarySummaryGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonMilitarySummaryGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.MilitaryBranchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MilitaryDischargeTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MilitaryServiceTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MilitaryStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonMilitarySummaryDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ServiceEnd).HasColumnType("datetime");
                entity.Property(e => e.ServiceStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<PersonMilitarySummaryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonMilitarySummaryView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.MilitaryBranchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MilitaryBranchDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MilitaryDischargeTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MilitaryDischargeTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MilitaryServiceTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MilitaryServiceTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MilitaryStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MilitaryStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonMilitarySummaryDescription).HasMaxLength(300);
                entity.Property(e => e.PersonMilitarySummaryId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ServiceEnd).HasColumnType("datetime");
                entity.Property(e => e.ServiceStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<PersonMoruaryDim>(entity =>
            {
                entity.HasKey(e => e.PersonMoruaryId)
                    .HasName("PK__PersonMo__D393952AFE5A9D04")
                    .HasFillFactor(80);

                entity.ToTable("PersonMoruaryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonMoruaryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonMoruaryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonMoruaryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonMoruaryDIMCodeView");

                entity.Property(e => e.PersonMoruaryCode).HasMaxLength(20);
                entity.Property(e => e.PersonMoruaryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonNameCategoryDim>(entity =>
            {
                entity.HasKey(e => e.PersonNameCategoryId)
                    .HasName("PersonnameCategoryDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonNameCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(30);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Nciccode)
                    .HasMaxLength(30)
                    .HasColumnName("NCICCode");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonNameCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonNameCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonNameCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonNameCategoryDIMCodeView");

                entity.Property(e => e.PersonNameCategoryCode).HasMaxLength(30);
                entity.Property(e => e.PersonNameCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonNationality>(entity =>
            {
                entity.ToTable("PersonNationality");

                entity.Property(e => e.NationalityCode).HasMaxLength(500);
                entity.Property(e => e.NationalityDescription).HasMaxLength(500);
                entity.Property(e => e.Username).HasMaxLength(250);

                entity.HasOne(d => d.Person).WithMany(p => p.PersonNationalities)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PersonNationality_Person");
            });

            modelBuilder.Entity<PersonOtherIdentification>(entity =>
            {
                entity.HasKey(e => e.PersonOtherIdentificationId).HasFillFactor(80);

                entity.ToTable("PersonOtherIdentification");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.EffectiveYear).HasComputedColumnSql("(datepart(year,[EffectiveDate]))", false);
                entity.Property(e => e.ExpirationYear).HasComputedColumnSql("(datepart(year,[ExpirationDate]))", false);
                entity.Property(e => e.Identification).HasMaxLength(50);
                entity.Property(e => e.IdentificationAuthorityId).HasDefaultValue(1);
                entity.Property(e => e.IdentificationCategoryId).HasDefaultValue(1);
                entity.Property(e => e.IdentificationClassId).HasDefaultValue(1);
                entity.Property(e => e.IdentificationRestrictionId).HasDefaultValue(1);
                entity.Property(e => e.IdentificationStatusId).HasDefaultValue(1);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonOtherIdentificationDescription).HasMaxLength(300);
                entity.Property(e => e.PersonOtherIdentificationGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdenticationImage).WithMany(p => p.PersonOtherIdentifications)
                    .HasForeignKey(d => d.IdenticationImageId)
                    .HasConstraintName("FK_PersonOtherIdentification_Image");

                entity.HasOne(d => d.IdentificationAuthority).WithMany(p => p.PersonOtherIdentifications)
                    .HasForeignKey(d => d.IdentificationAuthorityId)
                    .HasConstraintName("IdentityAuthorityDIM_PersonIdenityDocument_FK1");

                entity.HasOne(d => d.IdentificationCategory).WithMany(p => p.PersonOtherIdentifications)
                    .HasForeignKey(d => d.IdentificationCategoryId)
                    .HasConstraintName("IdentityTypeDIM_PersonIdenityDocument_FK1");

                entity.HasOne(d => d.IdentificationClass).WithMany(p => p.PersonOtherIdentifications)
                    .HasForeignKey(d => d.IdentificationClassId)
                    .HasConstraintName("IdentityClassDIM_PersonIdenityDocument_FK1");

                entity.HasOne(d => d.IdentificationRestriction).WithMany(p => p.PersonOtherIdentifications)
                    .HasForeignKey(d => d.IdentificationRestrictionId)
                    .HasConstraintName("IdentityRestrictionsDIM_PersonIdenityDocument_FK1");

                entity.HasOne(d => d.IdentificationStatus).WithMany(p => p.PersonOtherIdentifications)
                    .HasForeignKey(d => d.IdentificationStatusId)
                    .HasConstraintName("FK_PersonOtherIdentification_IdentificationtStatusDIM");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonOtherIdentifications)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonOtherIdentification_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonOtherIdentifications)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonOtherIdentification_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonOtherIdentifications)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonOtherIdentification_Source");
            });

            modelBuilder.Entity<PersonOtherIdentificationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonOtherIdentificationGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Identification).HasMaxLength(50);
                entity.Property(e => e.IdentificationAuthorityCode).HasMaxLength(20);
                entity.Property(e => e.IdentificationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IdentificationClassCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IdentificationRestrictionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IdentificationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonOtherIdentificationDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonOtherIdentificationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonOtherIdentificationView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Identification).HasMaxLength(50);
                entity.Property(e => e.IdentificationAuthorityCode).HasMaxLength(20);
                entity.Property(e => e.IdentificationAuthorityJurisdiction).HasMaxLength(50);
                entity.Property(e => e.IdentificationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IdentificationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IdentificationClassCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IdentificationClassDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IdentificationRestrictionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IdentificationRestrictionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IdentificationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.IdentificationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonOtherIdentificationDescription).HasMaxLength(300);
                entity.Property(e => e.PersonOtherIdentificationId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonPhysicalDetail>(entity =>
            {
                entity.HasKey(e => e.PersonId).HasFillFactor(80);

                entity.ToTable("PersonPhysicalDetail");

                entity.Property(e => e.PersonId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(200);

                entity.HasOne(d => d.PersonBodyPartStatus).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonBodyPartStatusId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonBodyPartStatusDIM");

                entity.HasOne(d => d.PersonBuild).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonBuildId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonBuildDIM");

                entity.HasOne(d => d.PersonCircumcision).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonCircumcisionId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonCircumcisionDIM");

                entity.HasOne(d => d.PersonComplexion).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonComplexionId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonComplexionDIM");

                entity.HasOne(d => d.PersonDisguise).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonDisguiseId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonDisguiseDIM");

                entity.HasOne(d => d.PersonEyeColor).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonEyeColorId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonEyeColorDIM");

                entity.HasOne(d => d.PersonEyeWear).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonEyeWearId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonEyeWearDIM");

                entity.HasOne(d => d.PersonFacialHair).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonFacialHairId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonFacialHairDIM");

                entity.HasOne(d => d.PersonGeneralAppearance).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonGeneralAppearanceId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonGeneralAppearanceDIM");

                entity.HasOne(d => d.PersonHairAppearance).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonHairAppearanceId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonHairAppearanceDIM");

                entity.HasOne(d => d.PersonHairStyle).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonHairStyleId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonHairStyleDIM");

                entity.HasOne(d => d.PersonHandedness).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonHandednessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonHandednessDIM");

                entity.HasOne(d => d.Person).WithOne(p => p.PersonPhysicalDetail)
                    .HasForeignKey<PersonPhysicalDetail>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonPhysicalDetail_Person");

                entity.HasOne(d => d.PersonJewelry).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonJewelryId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonJewelryDIM");

                entity.HasOne(d => d.PersonRace).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonRaceId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonRaceDIM");

                entity.HasOne(d => d.PersonSex).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonSexId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonSexDIM");

                entity.HasOne(d => d.PersonSpeech).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.PersonSpeechId)
                    .HasConstraintName("FK_PersonPhysicalDetail_PersonSpeechDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonPhysicalDetail_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonPhysicalDetails)
                    .HasForeignKey(d => d.SourceId)
                    .HasConstraintName("FK_PersonPhysicalDetail_Source");
            });

            modelBuilder.Entity<PersonPhysicalDetailGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonPhysicalDetailGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonBodyPartStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonBuildCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonCircumcisionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonComplexionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonDisguiseCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonEyeColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonEyeWearCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonFacialHairCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonGeneralAppearanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHairAppearanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHairStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHandednessCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonJewelryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonRaceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSexCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSpeechCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonPhysicalDetailView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonPhysicalDetailView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonBodyPartStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonBodyPartStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonBuildCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonBuildDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonCircumcisionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonCircumcisionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonComplexionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonComplexionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonDisguiseCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonDisguiseDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonEyeColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonEyeColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonEyeWearCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonEyeWearDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonFacialHairCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonFacialHairDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonGeneralAppearanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonGeneralAppearanceDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHairAppearanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHairAppearanceDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHairStyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHairStyleDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHandednessCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHandednessDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonJewelryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonJewelryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonRaceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonRaceDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSexCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSexDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSpeechCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSpeechDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonPhysicalFeature>(entity =>
            {
                entity.HasKey(e => e.PersonPhysicalFeatureId).HasFillFactor(80);

                entity.ToTable("PersonPhysicalFeature");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonPhysicalFeatureDescription).HasMaxLength(300);
                entity.Property(e => e.PersonPhysicalFeatureGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.PhysicalFeatureCategoryId).HasDefaultValue(1);
                entity.Property(e => e.PhysicalFeatureDescription).HasMaxLength(100);
                entity.Property(e => e.PhysicalFeatureHandicapId).HasDefaultValue(1);
                entity.Property(e => e.PhysicalFeatureLocationId).HasDefaultValue(1);
                entity.Property(e => e.PhysicalFeatureSeverityId).HasDefaultValue(1);
                entity.Property(e => e.RemovedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonPhysicalFeatures)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Person_PersonFeature_FK1");

                entity.HasOne(d => d.PhysicalFeatureCategory).WithMany(p => p.PersonPhysicalFeatures)
                    .HasForeignKey(d => d.PhysicalFeatureCategoryId)
                    .HasConstraintName("PhysicalFeatureCategoryDIM_PersonFeature_FK1");

                entity.HasOne(d => d.PhysicalFeatureHandicap).WithMany(p => p.PersonPhysicalFeatures)
                    .HasForeignKey(d => d.PhysicalFeatureHandicapId)
                    .HasConstraintName("FK_PersonFeature_FeatureHandicapDIM");

                entity.HasOne(d => d.PhysicalFeatureImage).WithMany(p => p.PersonPhysicalFeatures)
                    .HasForeignKey(d => d.PhysicalFeatureImageId)
                    .HasConstraintName("FK_PersonPhysicalFeature_Image");

                entity.HasOne(d => d.PhysicalFeatureLocation).WithMany(p => p.PersonPhysicalFeatures)
                    .HasForeignKey(d => d.PhysicalFeatureLocationId)
                    .HasConstraintName("PhysicalFeatureLocationDIM_PersonFeature_FK1");

                entity.HasOne(d => d.PhysicalFeatureSeverity).WithMany(p => p.PersonPhysicalFeatures)
                    .HasForeignKey(d => d.PhysicalFeatureSeverityId)
                    .HasConstraintName("FK_PersonPhysicalFeature_PhysicalFeatureSeverityDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonPhysicalFeatures)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonPhysicalFeature_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonPhysicalFeatures)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonPhysicalFeature_Source");
            });

            modelBuilder.Entity<PersonPhysicalFeatureGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonPhysicalFeatureGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonPhysicalFeatureDescription).HasMaxLength(300);
                entity.Property(e => e.PhysicalFeatureCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalFeatureDescription).HasMaxLength(100);
                entity.Property(e => e.PhysicalFeatureHandicapCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalFeatureLocationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalFeatureSeverityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RemovedDate).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonPhysicalFeatureView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonPhysicalFeatureView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonPhysicalFeatureDescription).HasMaxLength(300);
                entity.Property(e => e.PersonPhysicalFeatureId).ValueGeneratedOnAdd();
                entity.Property(e => e.PhysicalFeatureCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalFeatureCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalFeatureDescription).HasMaxLength(100);
                entity.Property(e => e.PhysicalFeatureHandicapCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalFeatureHandicapDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalFeatureLocationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalFeatureLocationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalFeatureSeverityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalFeatureSeverityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RemovedDate).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonPhysicianDim>(entity =>
            {
                entity.HasKey(e => e.PersonPhysicianId)
                    .HasName("PK__PersonPh__84A54BBF0C5587AC")
                    .HasFillFactor(80);

                entity.ToTable("PersonPhysicianDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonPhysicianDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonPhysicianDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonPhysicianDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonPhysicianDIMCodeView");

                entity.Property(e => e.PersonPhysicianCode).HasMaxLength(20);
                entity.Property(e => e.PersonPhysicianDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonQuestionnaireContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonQuestionnaireContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonQuestionnaireGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonQuestionnaireGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<PersonQuestionnaireView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonQuestionnaireView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonDocumentDescription).HasMaxLength(300);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.QuestionnaireCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<PersonRaceDim>(entity =>
            {
                entity.HasKey(e => e.PersonRaceId)
                    .HasName("PersonRaceDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonRaceDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.LongDescription).HasMaxLength(255);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonRaceDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonRaceDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonRaceDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonRaceDIMCodeView");

                entity.Property(e => e.PersonRaceCode).HasMaxLength(20);
                entity.Property(e => e.PersonRaceDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonRealestateContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonRealestateContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonRealestateGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonRealestateGuidView");

                entity.Property(e => e.Acreage).HasMaxLength(50);
                entity.Property(e => e.Boundry).HasMaxLength(400);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RealestateAttachedFacilityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonRealestateView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonRealestateView");

                entity.Property(e => e.Acreage).HasMaxLength(50);
                entity.Property(e => e.Boundry).HasMaxLength(400);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RealestateAttachedFacilityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateAttachedFacilityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonRelationship>(entity =>
            {
                entity.HasKey(e => e.PersonRelationshipId).HasFillFactor(80);

                entity.ToTable("PersonRelationship");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonRelationshipDescription).HasMaxLength(300);
                entity.Property(e => e.PersonRelationshipGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Person).WithMany(p => p.PersonRelationshipPeople)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonRelationship_Person");

                entity.HasOne(d => d.PersonRelated).WithMany(p => p.PersonRelationshipPersonRelateds)
                    .HasForeignKey(d => d.PersonRelatedId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonRelationship_Person1");

                entity.HasOne(d => d.PersonRelationshipType).WithMany(p => p.PersonRelationships)
                    .HasForeignKey(d => d.PersonRelationshipTypeId)
                    .HasConstraintName("PersonRelationshipTypeDIM_PersonRelationships_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonRelationships)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonRelationship_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonRelationships)
                    .HasForeignKey(d => d.SourceId)
                    .HasConstraintName("FK_PersonRelationship_Source");
            });

            modelBuilder.Entity<PersonRelationshipGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonRelationshipGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonRelationshipDescription).HasMaxLength(300);
                entity.Property(e => e.PersonRelationshipTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonRelationshipTypeDim>(entity =>
            {
                entity.HasKey(e => e.PersonRelationshipTypeId)
                    .HasName("PersonRelationshipTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonRelationshipTypeDIM");

                entity.Property(e => e.Category).HasMaxLength(50);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonRelationshipTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonRelationshipTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonRelationshipTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonRelationshipTypeDIMCodeView");

                entity.Property(e => e.PersonRelationshipTypeCode).HasMaxLength(20);
                entity.Property(e => e.PersonRelationshipTypeDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonRelationshipView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonRelationshipView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonRelationshipDescription).HasMaxLength(300);
                entity.Property(e => e.PersonRelationshipId).ValueGeneratedOnAdd();
                entity.Property(e => e.PersonRelationshipTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonRelationshipTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonReligionDim>(entity =>
            {
                entity.HasKey(e => e.PersonReligionId)
                    .HasName("PK__PersonRe__CD4031334A86A96C")
                    .HasFillFactor(80);

                entity.ToTable("PersonReligionDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonReligionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonReligionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonReligionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonReligionDIMCodeView");

                entity.Property(e => e.PersonReligionCode).HasMaxLength(50);
                entity.Property(e => e.PersonReligionDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonReportsAssignment>(entity =>
            {
                entity.ToTable("PersonReportsAssignment");

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");
                entity.Property(e => e.CreatedBy).HasMaxLength(500);
                entity.Property(e => e.PersonId).HasColumnName("personID");
                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonReportsAssignments)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonReportsAssignment_Person");

                entity.HasOne(d => d.Report).WithMany(p => p.PersonReportsAssignments)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonReportsAssignment_Reports");
            });

            modelBuilder.Entity<PersonSexDim>(entity =>
            {
                entity.HasKey(e => e.PersonSexId)
                    .HasName("PersonSexDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonSexDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonSexDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonSexDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonSexDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonSexDIMCodeView");

                entity.Property(e => e.PersonSexCode).HasMaxLength(20);
                entity.Property(e => e.PersonSexDescription).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonSexualOrientationDim>(entity =>
            {
                entity.HasKey(e => e.PersonSexualOrientationId)
                    .HasName("PersonSexualOrientationDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonSexualOrientationDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonSexualOrientationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonSexualOrientationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonSexualOrientationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonSexualOrientationDIMCodeView");

                entity.Property(e => e.PersonSexualOrientationCode).HasMaxLength(20);
                entity.Property(e => e.PersonSexualOrientationDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonSkinToneDim>(entity =>
            {
                entity.HasKey(e => e.PersonSkinToneId)
                    .HasName("PersonSkinToneDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonSkinToneDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonSkinToneDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonSkinToneDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonSkinToneDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonSkinToneDIMCodeView");

                entity.Property(e => e.PersonSkinToneCode).HasMaxLength(20);
                entity.Property(e => e.PersonSkinToneDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonSocialMediaContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonSocialMediaContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonSocialMediaContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonSocialMediaContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.PersonSocialMediaId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonSocialMediaGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonSocialMediaGuidView");

                entity.Property(e => e.Account).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
                entity.Property(e => e.Uri)
                    .HasMaxLength(500)
                    .HasColumnName("URI");
            });

            modelBuilder.Entity<PersonSocialMediaView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonSocialMediaView");

                entity.Property(e => e.Account).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
                entity.Property(e => e.Uri)
                    .HasMaxLength(500)
                    .HasColumnName("URI");
            });

            modelBuilder.Entity<PersonSocialMedium>(entity =>
            {
                entity.HasKey(e => e.PersonSocialMediaId).HasFillFactor(80);

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.PersonSocialMediaGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonSocialMedia)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Person_PersonSocialMediaContact_FK1");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonSocialMedia)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonSocialMedia_RowStatusDIM");

                entity.HasOne(d => d.SocialMedia).WithMany(p => p.PersonSocialMedia)
                    .HasForeignKey(d => d.SocialMediaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonContactSocialMedia_SocialMedia");

                entity.HasOne(d => d.SocialMediaInvolvement).WithMany(p => p.PersonSocialMedia)
                    .HasForeignKey(d => d.SocialMediaInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonSocialMedia_SocialMediaInvolvementDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonSocialMedia)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonSocialMedia_Source");
            });

            modelBuilder.Entity<PersonSpeechDim>(entity =>
            {
                entity.HasKey(e => e.PersonSpeechId)
                    .HasName("PersonSpeechDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PersonSpeechDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonSpeechDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonSpeechDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonSpeechDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonSpeechDIMCodeView");

                entity.Property(e => e.PersonSpeechCode).HasMaxLength(20);
                entity.Property(e => e.PersonSpeechDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonStatusDim>(entity =>
            {
                entity.HasKey(e => e.PersonStatusId).HasFillFactor(80);

                entity.ToTable("PersonStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonStatusDIMCodeView");

                entity.Property(e => e.PersonStatusCode).HasMaxLength(20);
                entity.Property(e => e.PersonStatusDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonTooth>(entity =>
            {
                entity.HasKey(e => e.PersonToothId).HasFillFactor(80);

                entity.ToTable("PersonTooth");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DentalCharacteristicId).HasDefaultValue(1);
                entity.Property(e => e.DentalCharacteristicRestorationId).HasDefaultValue(1);
                entity.Property(e => e.DentalStatusId).HasDefaultValue(1);
                entity.Property(e => e.DentalToothPositionId).HasDefaultValue(1);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonToothDescription).HasMaxLength(300);
                entity.Property(e => e.PersonToothGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.DentalCharacteristic).WithMany(p => p.PersonTeeth)
                    .HasForeignKey(d => d.DentalCharacteristicId)
                    .HasConstraintName("FK_PersonTooth_DentalCharacteristicDIM");

                entity.HasOne(d => d.DentalCharacteristicRestoration).WithMany(p => p.PersonTeeth)
                    .HasForeignKey(d => d.DentalCharacteristicRestorationId)
                    .HasConstraintName("FK_PersonTooth_DentalCharacteristicRestorationDIM");

                entity.HasOne(d => d.DentalStatus).WithMany(p => p.PersonTeeth)
                    .HasForeignKey(d => d.DentalStatusId)
                    .HasConstraintName("FK_PersonDentalDetails_DentalStatusDIM");

                entity.HasOne(d => d.DentalToothPosition).WithMany(p => p.PersonTeeth)
                    .HasForeignKey(d => d.DentalToothPositionId)
                    .HasConstraintName("FK_PersonTooth_DentalToothPositionDIM");

                entity.HasOne(d => d.Person).WithMany(p => p.PersonTeeth)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonDentalDetails_Person");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonTeeth)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonTooth_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonTeeth)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonTooth_Source");
            });

            modelBuilder.Entity<PersonToothGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonToothGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DentalCharacteristicCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DentalCharacteristicRestorationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DentalStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DentalToothPositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonToothDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonToothView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonToothView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DentalCharacteristicCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DentalCharacteristicDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DentalCharacteristicRestorationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DentalCharacteristicRestorationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DentalStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DentalStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DentalToothPositionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DentalToothPositionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonToothDescription).HasMaxLength(300);
                entity.Property(e => e.PersonToothId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonTransportedByDim>(entity =>
            {
                entity.HasKey(e => e.PersonTransportedById)
                    .HasName("PK__PersonTr__4A7AAFCBD65C9CF9")
                    .HasFillFactor(80);

                entity.ToTable("PersonTransportedByDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonTransportedByDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonTransportedByDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PersonTransportedByDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonTransportedByDIMCodeView");

                entity.Property(e => e.PersonTransportedByCode).HasMaxLength(20);
                entity.Property(e => e.PersonTransportedByDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonVehicleContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonVehicleContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonVehicleGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonVehicleGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.Identification).HasMaxLength(20);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.MotorCarrierIdentification).HasMaxLength(20);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonVehicleView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonVehicleView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.Identification).HasMaxLength(20);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.MotorCarrierIdentification).HasMaxLength(20);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonVesselContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonVesselContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonVesselGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonVesselGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.GeoCountryCode).HasMaxLength(50);
                entity.Property(e => e.HullIdentification).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.InternationalRadioCallSign).HasMaxLength(50);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicenseNumber).HasMaxLength(50);
                entity.Property(e => e.Mmsinumber)
                    .HasMaxLength(20)
                    .HasColumnName("MMSINumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OfficalCoastGuardNumber).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.PortOfRegistry).HasMaxLength(50);
                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SailNumber).HasMaxLength(50);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselRegistrationNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonVesselView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonVesselView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.GeoCountryCode).HasMaxLength(50);
                entity.Property(e => e.GeoCountryCountryName).HasMaxLength(50);
                entity.Property(e => e.HullIdentification).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.InternationalRadioCallSign).HasMaxLength(50);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicenseNumber).HasMaxLength(50);
                entity.Property(e => e.Mmsinumber)
                    .HasMaxLength(20)
                    .HasColumnName("MMSINumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OfficalCoastGuardNumber).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonItemDescription).HasMaxLength(300);
                entity.Property(e => e.PortOfRegistry).HasMaxLength(50);
                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SailNumber).HasMaxLength(50);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselRegistrationNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonId).ValueGeneratedOnAdd();
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonVitalStatistic>(entity =>
            {
                entity.HasKey(e => e.PersonId).HasFillFactor(80);

                entity.ToTable("PersonVitalStatistic");

                entity.Property(e => e.PersonId).ValueGeneratedNever();
                entity.Property(e => e.PersonBirthDate).HasColumnType("datetime");
                entity.Property(e => e.PersonDeathDate).HasColumnType("datetime");
                entity.Property(e => e.PersonHeight).HasMaxLength(50);
                entity.Property(e => e.PersonHeightMin).HasMaxLength(50);
                entity.Property(e => e.PersonHeightmax).HasMaxLength(50);
                entity.Property(e => e.PersonVitalStatisticDescription).HasMaxLength(200);
                entity.Property(e => e.PersonWeight).HasMaxLength(50);
                entity.Property(e => e.PersonWeightMax).HasMaxLength(50);
                entity.Property(e => e.PersonWeightMin).HasMaxLength(50);

                entity.HasOne(d => d.Ethnicity).WithMany(p => p.PersonVitalStatistics)
                    .HasForeignKey(d => d.EthnicityId)
                    .HasConstraintName("FK_PersonVitalStatistic_EthnicityDIM");

                entity.HasOne(d => d.PersonBodyXray).WithMany(p => p.PersonVitalStatistics)
                    .HasForeignKey(d => d.PersonBodyXrayId)
                    .HasConstraintName("FK_PersonVitalStatistic_PersonBodyXrayDIM");

                entity.HasOne(d => d.PersonHairColor).WithMany(p => p.PersonVitalStatistics)
                    .HasForeignKey(d => d.PersonHairColorId)
                    .HasConstraintName("FK_PersonVitalStatistic_PersonHairColorDIM");

                entity.HasOne(d => d.Person).WithOne(p => p.PersonVitalStatistic)
                    .HasForeignKey<PersonVitalStatistic>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonVitalStatistic_Person");

                entity.HasOne(d => d.PersonMaritalStatus).WithMany(p => p.PersonVitalStatistics)
                    .HasForeignKey(d => d.PersonMaritalStatusId)
                    .HasConstraintName("FK_PersonVitalStatistic_PersonMaritalStatusDIM");

                entity.HasOne(d => d.PersonReligion).WithMany(p => p.PersonVitalStatistics)
                    .HasForeignKey(d => d.PersonReligionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonVitalStatistic_PersonReligionDIM");

                entity.HasOne(d => d.PersonSexualOrientation).WithMany(p => p.PersonVitalStatistics)
                    .HasForeignKey(d => d.PersonSexualOrientationId)
                    .HasConstraintName("FK_PersonVitalStatistic_PersonSexualOrientationDIM");

                entity.HasOne(d => d.PersonSkinTone).WithMany(p => p.PersonVitalStatistics)
                    .HasForeignKey(d => d.PersonSkinToneId)
                    .HasConstraintName("FK_PersonVitalStatistic_PersonSkinToneDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PersonVitalStatistics)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PersonVitalStatistic_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.PersonVitalStatistics)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonVitalStatistic_Source");
            });

            modelBuilder.Entity<PersonVitalStatisticGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonVitalStatisticGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonBirthDate).HasColumnType("datetime");
                entity.Property(e => e.PersonBodyXrayCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonDeathDate).HasColumnType("datetime");
                entity.Property(e => e.PersonHairColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHeight).HasMaxLength(50);
                entity.Property(e => e.PersonHeightMin).HasMaxLength(50);
                entity.Property(e => e.PersonHeightmax).HasMaxLength(50);
                entity.Property(e => e.PersonMaritalStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonReligionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSexualOrientationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSkinToneCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonVitalStatisticDescription).HasMaxLength(200);
                entity.Property(e => e.PersonWeight).HasMaxLength(50);
                entity.Property(e => e.PersonWeightMax).HasMaxLength(50);
                entity.Property(e => e.PersonWeightMin).HasMaxLength(50);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<PersonVitalStatisticView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PersonVitalStatisticView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EthnicityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonBirthDate).HasColumnType("datetime");
                entity.Property(e => e.PersonBodyXrayCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonBodyXrayDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonDeathDate).HasColumnType("datetime");
                entity.Property(e => e.PersonHairColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHairColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHeight).HasMaxLength(50);
                entity.Property(e => e.PersonHeightMin).HasMaxLength(50);
                entity.Property(e => e.PersonHeightmax).HasMaxLength(50);
                entity.Property(e => e.PersonMaritalStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonMaritalStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonReligionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonReligionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSexualOrientationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSexualOrientationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSkinToneCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSkinToneDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonVitalStatisticDescription).HasMaxLength(200);
                entity.Property(e => e.PersonWeight).HasMaxLength(50);
                entity.Property(e => e.PersonWeightMax).HasMaxLength(50);
                entity.Property(e => e.PersonWeightMin).HasMaxLength(50);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<PhysicalAppearanceHistory>(entity =>
            {
                entity.HasKey(e => e.PhysicalAppearanceHistoryId).HasFillFactor(80);

                entity.ToTable("PhysicalAppearanceHistory");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.HeightFeet).HasMaxLength(10);
                entity.Property(e => e.HeightInches).HasMaxLength(10);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonBuildId).HasDefaultValue(1);
                entity.Property(e => e.PersonHairColorId).HasDefaultValue(1);
                entity.Property(e => e.PersonLeftEyeColorId).HasDefaultValue(1);
                entity.Property(e => e.PersonRightEyeColorId).HasDefaultValue(1);
                entity.Property(e => e.PersonSkinToneId).HasDefaultValue(1);
                entity.Property(e => e.PhysicalAppearanceHistoryDescription).HasMaxLength(300);
                entity.Property(e => e.PhysicalAppearanceHistoryGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.Weight).HasMaxLength(10);

                entity.HasOne(d => d.PersonBuild).WithMany(p => p.PhysicalAppearanceHistories)
                    .HasForeignKey(d => d.PersonBuildId)
                    .HasConstraintName("FK_PhysicalAppearanceHistory_PersonBuildDIM");

                entity.HasOne(d => d.PersonHairColor).WithMany(p => p.PhysicalAppearanceHistories)
                    .HasForeignKey(d => d.PersonHairColorId)
                    .HasConstraintName("FK_PhysicalAppearanceHistory_PersonHairColorDIM");

                entity.HasOne(d => d.Person).WithMany(p => p.PhysicalAppearanceHistories)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhysicalAppearanceHistory_Person");

                entity.HasOne(d => d.PersonLeftEyeColor).WithMany(p => p.PhysicalAppearanceHistoryPersonLeftEyeColors)
                    .HasForeignKey(d => d.PersonLeftEyeColorId)
                    .HasConstraintName("FK_PhysicalAppearanceHistory_PersonLeftEyeColorDIM");

                entity.HasOne(d => d.PersonRightEyeColor).WithMany(p => p.PhysicalAppearanceHistoryPersonRightEyeColors)
                    .HasForeignKey(d => d.PersonRightEyeColorId)
                    .HasConstraintName("FK_PhysicalAppearanceHistory_PersonRightEyeColorDIM");

                entity.HasOne(d => d.PersonSkinTone).WithMany(p => p.PhysicalAppearanceHistories)
                    .HasForeignKey(d => d.PersonSkinToneId)
                    .HasConstraintName("FK_PhysicalAppearanceHistory_PersonSkinToneDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PhysicalAppearanceHistories)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PhysicalAppearanceHistory_RowStatusDIM");
            });

            modelBuilder.Entity<PhysicalAppearanceHistoryGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PhysicalAppearanceHistoryGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.HeightFeet).HasMaxLength(10);
                entity.Property(e => e.HeightInches).HasMaxLength(10);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonBuildCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHairColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonLeftEyeColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonRightEyeColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSkinToneCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalAppearanceHistoryDescription).HasMaxLength(300);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Weight).HasMaxLength(10);
            });

            modelBuilder.Entity<PhysicalAppearanceHistoryView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PhysicalAppearanceHistoryView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.HeightFeet).HasMaxLength(10);
                entity.Property(e => e.HeightInches).HasMaxLength(10);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonBuildCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonBuildDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHairColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonHairColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonLeftEyeColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonLeftEyeColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonRightEyeColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonRightEyeColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSkinToneCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonSkinToneDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PhysicalAppearanceHistoryDescription).HasMaxLength(300);
                entity.Property(e => e.PhysicalAppearanceHistoryId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Weight).HasMaxLength(10);
            });

            modelBuilder.Entity<PhysicalFeatureCategoryDim>(entity =>
            {
                entity.HasKey(e => e.PhysicalFeatureCategoryId)
                    .HasName("PhysicalFeatureCategoryDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PhysicalFeatureCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.InjuryCode).HasMaxLength(20);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PhysicalFeatureCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PhysicalFeatureCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PhysicalFeatureCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PhysicalFeatureCategoryDIMCodeView");

                entity.Property(e => e.PhysicalFeatureCategoryCode).HasMaxLength(20);
                entity.Property(e => e.PhysicalFeatureCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PhysicalFeatureHandicapDim>(entity =>
            {
                entity.HasKey(e => e.PhysicalFeatureHandicapId)
                    .HasName("PK_FeatureHandicapDIM")
                    .HasFillFactor(80);

                entity.ToTable("PhysicalFeatureHandicapDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PhysicalFeatureHandicapDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PhysicalFeatureHandicapDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PhysicalFeatureHandicapDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PhysicalFeatureHandicapDIMCodeView");

                entity.Property(e => e.PhysicalFeatureHandicapCode).HasMaxLength(20);
                entity.Property(e => e.PhysicalFeatureHandicapDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PhysicalFeatureLocationDim>(entity =>
            {
                entity.HasKey(e => e.PhysicalFeatureLocationId)
                    .HasName("PhysicalFeatureLocationDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PhysicalFeatureLocationDIM");

                entity.Property(e => e.Area).HasMaxLength(50);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PhysicalFeatureLocationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PhysicalFeatureLocationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PhysicalFeatureLocationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PhysicalFeatureLocationDIMCodeView");

                entity.Property(e => e.PhysicalFeatureLocationCode).HasMaxLength(20);
                entity.Property(e => e.PhysicalFeatureLocationDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PhysicalFeatureSeverityDim>(entity =>
            {
                entity.HasKey(e => e.PhysicalFeatureSeverityId)
                    .HasName("FeatureSeverityDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("PhysicalFeatureSeverityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PhysicalFeatureSeverityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PhysicalFeatureSeverityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PhysicalFeatureSeverityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PhysicalFeatureSeverityDIMCodeView");

                entity.Property(e => e.PhysicalFeatureSeverityCode).HasMaxLength(20);
                entity.Property(e => e.PhysicalFeatureSeverityDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PioneerDatum>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccidentDateTime).HasMaxLength(255);
                entity.Property(e => e.AccidentEmirate).HasMaxLength(255);
                entity.Property(e => e.AdpId)
                    .HasMaxLength(255)
                    .HasColumnName("ADP_ID");
                entity.Property(e => e.SaaedId)
                    .HasMaxLength(255)
                    .HasColumnName("SAAED_ID");
                entity.Property(e => e.Status).HasMaxLength(255);
                entity.Property(e => e.TicketStatusDateTime).HasMaxLength(255);
                entity.Property(e => e.UploadDate).HasMaxLength(255);
            });

            modelBuilder.Entity<PioneerIntegrationLog>(entity =>
            {
                entity.ToTable("PioneerIntegrationLog");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.Earcid).HasColumnName("EARCID");
                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<Plate>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("Plate$");

                entity.Property(e => e.F13).HasMaxLength(255);
                entity.Property(e => e.PlateCategoryArabicDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Plate Category Arabic Description");
                entity.Property(e => e.PlateCategoryCode).HasColumnName("Plate Category Code");
                entity.Property(e => e.PlateCategoryEnglishDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Plate Category English Description");
                entity.Property(e => e.PlateColorArabicDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Plate Color Arabic Description");
                entity.Property(e => e.PlateColorCode).HasColumnName("Plate Color Code");
                entity.Property(e => e.PlateColorEnglishDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Plate Color English Description");
                entity.Property(e => e.PlateSourceArabicDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Plate Source Arabic Description");
                entity.Property(e => e.PlateSourceCode).HasColumnName("Plate Source Code");
                entity.Property(e => e.PlateSourceEnglishDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Plate Source English Description");
                entity.Property(e => e.PlateTypeArabicDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Plate Type Arabic Description");
                entity.Property(e => e.PlateTypeCode).HasColumnName("Plate Type Code");
                entity.Property(e => e.PlateTypeEnglishDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Plate Type English Description");
            });

            modelBuilder.Entity<PlateClassToPlateColorMap>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__PlateCla__3214EC071F607930")
                    .HasFillFactor(80);

                entity.ToTable("PlateClassToPlateColorMap");

                entity.Property(e => e.CreatedDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsActive).HasDefaultValue(false);

                entity.HasOne(d => d.ItemRegistrationPlateColor).WithMany(p => p.PlateClassToPlateColorMaps)
                    .HasForeignKey(d => d.ItemRegistrationPlateColorId)
                    .HasConstraintName("FK__PlateClas__ItemR__525B9EBD");

                entity.HasOne(d => d.ItemRegistrationPlateKind).WithMany(p => p.PlateClassToPlateColorMaps)
                    .HasForeignKey(d => d.ItemRegistrationPlateKindId)
                    .HasConstraintName("FK__PlateClas__ItemR__51677A84");
            });

            modelBuilder.Entity<PlateMatrix>(entity =>
            {
                entity.HasKey(e => e.PlateMatrixId)
                    .HasName("PK__PlateMat__10358A1EC6BA8782")
                    .HasFillFactor(80);

                entity.ToTable("PlateMatrix");

                entity.Property(e => e.PlateMatrixId).ValueGeneratedNever();
                entity.Property(e => e.IsActive).HasDefaultValue(true);

                entity.HasOne(d => d.PlateClass).WithMany(p => p.PlateMatrices)
                    .HasForeignKey(d => d.PlateClassId)
                    .HasConstraintName("fk_PlateMatrix_ItemRegistrationPlateKindDIM");

                entity.HasOne(d => d.PlateColor).WithMany(p => p.PlateMatrices)
                    .HasForeignKey(d => d.PlateColorId)
                    .HasConstraintName("fk_PlateMatrix_ItemRegistrationPlateColorDIM");

                entity.HasOne(d => d.PlateSource).WithMany(p => p.PlateMatrices)
                    .HasForeignKey(d => d.PlateSourceId)
                    .HasConstraintName("fk_PlateMatrix_PlateSourceDIM");

                entity.HasOne(d => d.PlateType).WithMany(p => p.PlateMatrices)
                    .HasForeignKey(d => d.PlateTypeId)
                    .HasConstraintName("fk_PlateMatrix_ItemRegistrationPlateCategoryDIM");
            });

            modelBuilder.Entity<PlateSourceDim>(entity =>
            {
                entity.HasKey(e => e.PlateSourceId)
                    .HasName("PK__PlateSou__4A0DE1B1FB2B0162")
                    .HasFillFactor(80);

                entity.ToTable("PlateSourceDim");

                entity.Property(e => e.PlateSourceId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.InEmirates).HasDefaultValue(true);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PlateSourceDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PlateSourceDim_RowStatusDIM");
            });

            modelBuilder.Entity<PlateSourceDim1>(entity =>
            {
                entity.HasKey(e => e.PlateSourceId)
                    .HasName("PK__PlateSouu__4A0DE1B1FB2B0162")
                    .HasFillFactor(80);

                entity.ToTable("PlateSourceDim1");

                entity.Property(e => e.PlateSourceId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.InEmirates).HasDefaultValue(true);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PlateSourceToPlateTypeMap>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__PlateSou__3214EC07CCD7769F")
                    .HasFillFactor(80);

                entity.ToTable("PlateSourceToPlateTypeMap");

                entity.Property(e => e.CreatedDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsActive).HasDefaultValue(false);

                entity.HasOne(d => d.ItemRegistrationPlateCategory).WithMany(p => p.PlateSourceToPlateTypeMaps)
                    .HasForeignKey(d => d.ItemRegistrationPlateCategoryId)
                    .HasConstraintName("FK__PlateSour__ItemR__4CA2C567");

                entity.HasOne(d => d.PlateSource).WithMany(p => p.PlateSourceToPlateTypeMaps)
                    .HasForeignKey(d => d.PlateSourceId)
                    .HasConstraintName("FK__PlateSour__Plate__4BAEA12E");
            });

            modelBuilder.Entity<PlateTypeToPlateClassMap>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__PlateTyp__3214EC07AFF6E492")
                    .HasFillFactor(80);

                entity.ToTable("PlateTypeToPlateClassMap");

                entity.Property(e => e.CreatedDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsActive).HasDefaultValue(false);

                entity.HasOne(d => d.ItemRegistrationPlateCategory).WithMany(p => p.PlateTypeToPlateClassMaps)
                    .HasForeignKey(d => d.ItemRegistrationPlateCategoryId)
                    .HasConstraintName("FK__PlateType__ItemR__572053DA");

                entity.HasOne(d => d.ItemRegistrationPlateKind).WithMany(p => p.PlateTypeToPlateClassMaps)
                    .HasForeignKey(d => d.ItemRegistrationPlateKindId)
                    .HasConstraintName("FK__PlateType__ItemR__58147813");
            });

            modelBuilder.Entity<PoliceIncident>(entity =>
            {
                entity.HasKey(e => e.RequestId);

                entity.ToTable("PoliceIncident");

                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.PoliceIncidentId).HasMaxLength(50);
            });

            modelBuilder.Entity<PolicyDim>(entity =>
            {
                entity.HasKey(e => e.PolicyId)
                    .HasName("PK__PolicyDI__2E1339A44FF55ECF")
                    .HasFillFactor(80);

                entity.ToTable("PolicyDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PolicyDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PolicyDIM_RowStatusDIM");
            });

            modelBuilder.Entity<PolicyDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PolicyDIMCodeView");

                entity.Property(e => e.PolicyCode).HasMaxLength(20);
                entity.Property(e => e.PolicyDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<PrivateReportCode>(entity =>
            {
                entity.ToTable("PrivateReportCode");

                entity.Property(e => e.MobileNumber).HasMaxLength(15);
                entity.Property(e => e.ReportCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Probation>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("Probation");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();

                entity.HasOne(d => d.Activity).WithOne(p => p.Probation)
                    .HasForeignKey<Probation>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Probation_Activity");

                entity.HasOne(d => d.SupervisionCustodyStatus).WithMany(p => p.Probations)
                    .HasForeignKey(d => d.SupervisionCustodyStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Probation_SupervisionCustodyStatusDIM");

                entity.HasOne(d => d.SupervisionStatus).WithMany(p => p.Probations)
                    .HasForeignKey(d => d.SupervisionStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Probation_SupervisionStatusDIM");
            });

            modelBuilder.Entity<ProceduresDim>(entity =>
            {
                entity.HasKey(e => e.ProcedureId)
                    .HasName("PK__Procedur__54C2E52DEC46A522")
                    .HasFillFactor(80);

                entity.ToTable("ProceduresDim");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
            });

            modelBuilder.Entity<Profile>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__Profiles__1788CC4C5947EBCF")
                    .HasFillFactor(80);

                entity.Property(e => e.UserId).ValueGeneratedNever();
                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
                entity.Property(e => e.PropertyNames).HasMaxLength(4000);
                entity.Property(e => e.PropertyValueBinary).HasColumnType("image");
                entity.Property(e => e.PropertyValueStrings).HasMaxLength(4000);

                entity.HasOne(d => d.User).WithOne(p => p.Profile)
                    .HasForeignKey<Profile>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UserProfile");
            });

            modelBuilder.Entity<ProgramDim>(entity =>
            {
                entity.HasKey(e => e.ProgramId)
                    .HasName("PK__ProgramD__752560589154E400")
                    .HasFillFactor(80);

                entity.ToTable("ProgramDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.ProgramArea).HasMaxLength(200);
                entity.Property(e => e.ProgramAreaCode).HasMaxLength(50);
                entity.Property(e => e.ProgramCategory).HasMaxLength(200);
                entity.Property(e => e.ProgramCategoryCode).HasMaxLength(50);
                entity.Property(e => e.ProgramName).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ProgramDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ProgramDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ProgramDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProgramDIMCodeView");

                entity.Property(e => e.ProgramCode).HasMaxLength(50);
                entity.Property(e => e.ProgramDescription).HasMaxLength(500);
                entity.Property(e => e.ProgramProgramArea).HasMaxLength(200);
                entity.Property(e => e.ProgramProgramCategory).HasMaxLength(200);
                entity.Property(e => e.ProgramProgramName).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ProgramParticipation>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("ProgramParticipation");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.ProgramPubliclyRunIndicator).HasDefaultValue(true);
                entity.Property(e => e.ReferredDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Activity).WithOne(p => p.ProgramParticipation)
                    .HasForeignKey<ProgramParticipation>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProgramParticipation_Activity");

                entity.HasOne(d => d.Program).WithMany(p => p.ProgramParticipations)
                    .HasForeignKey(d => d.ProgramId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProgramParticipation_ProgramDIM");

                entity.HasOne(d => d.ProgramReferralStatus).WithMany(p => p.ProgramParticipations)
                    .HasForeignKey(d => d.ProgramReferralStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProgramParticipation_ProgramReferralStatusDIM");

                entity.HasOne(d => d.ProgramStatus).WithMany(p => p.ProgramParticipations)
                    .HasForeignKey(d => d.ProgramStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProgramParticipation_ProgramStatusDIM");
            });

            modelBuilder.Entity<ProgramReferralStatusDim>(entity =>
            {
                entity.HasKey(e => e.ProgramReferralStatusId).HasFillFactor(80);

                entity.ToTable("ProgramReferralStatusDIM");

                entity.Property(e => e.ProgramReferralStatusId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ProgramReferralStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ProgramReferralStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ProgramReferralStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProgramReferralStatusDIMCodeView");

                entity.Property(e => e.ProgramReferralStatusCode).HasMaxLength(50);
                entity.Property(e => e.ProgramReferralStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ProgramStatusDim>(entity =>
            {
                entity.HasKey(e => e.ProgramStatusId)
                    .HasName("PK__ProgramS__B30DF6DC68D73E92")
                    .HasFillFactor(80);

                entity.ToTable("ProgramStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ProgramStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ProgramStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ProgramStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProgramStatusDIMCodeView");

                entity.Property(e => e.ProgramStatusCode).HasMaxLength(50);
                entity.Property(e => e.ProgramStatusDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Promotion>(entity =>
            {
                entity.Property(e => e.ChassisNumber).HasMaxLength(50);
                entity.Property(e => e.OrderDate).HasColumnType("datetime");
                entity.Property(e => e.OwnerName).HasMaxLength(200);
                entity.Property(e => e.OwnerNumber).HasMaxLength(50);
                entity.Property(e => e.PlateNumber).HasMaxLength(50);
                entity.Property(e => e.ReportNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<PropertyTypeDim>(entity =>
            {
                entity.HasKey(e => e.PropertyTypeId)
                    .HasName("PK__Property__BDE14DB42D8337E9")
                    .HasFillFactor(80);

                entity.ToTable("PropertyTypeDim");

                entity.Property(e => e.PropertyTypeId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.PropertyTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_PropertyTypeDim_RowStatusDIM");
            });

            modelBuilder.Entity<Provider>(entity =>
            {
                entity.HasKey(e => e.OrganizationId).HasFillFactor(80);

                entity.ToTable("Provider");

                entity.Property(e => e.OrganizationId).ValueGeneratedNever();
                entity.Property(e => e.ProviderCategoryId).HasDefaultValue(1);
                entity.Property(e => e.ProviderStatusId).HasDefaultValue(1);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Organization).WithOne(p => p.Provider)
                    .HasForeignKey<Provider>(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Provider_Organization");

                entity.HasOne(d => d.ProviderCategory).WithMany(p => p.Providers)
                    .HasForeignKey(d => d.ProviderCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Provider_ProviderCategory");

                entity.HasOne(d => d.ProviderStatus).WithMany(p => p.Providers)
                    .HasForeignKey(d => d.ProviderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Provider_ProviderStatus");
            });

            modelBuilder.Entity<ProviderCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ProviderCategoryId)
                    .HasName("PK__Provider__3B83737D49C06D47")
                    .HasFillFactor(80);

                entity.ToTable("ProviderCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ProviderCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ProviderCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ProviderCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProviderCategoryDIMCodeView");

                entity.Property(e => e.ProviderCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ProviderCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ProviderGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProviderGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.ProviderCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProviderStatusDim>(entity =>
            {
                entity.HasKey(e => e.ProviderStatusId)
                    .HasName("PK__Provider__1AD45ED64FDA4F97")
                    .HasFillFactor(80);

                entity.ToTable("ProviderStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ProviderStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ProviderStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ProviderStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProviderStatusDIMCodeView");

                entity.Property(e => e.ProviderStatusCode).HasMaxLength(20);
                entity.Property(e => e.ProviderStatusDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ProviderView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ProviderView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.ProviderCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PublicNotifier>(entity =>
            {
                entity.HasKey(e => e.PublicNotifId);

                entity.ToTable("PublicNotifier");

                entity.Property(e => e.PublicNotifId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PurchaseRequest>(entity =>
            {
                entity.ToTable("PurchaseRequest");

                entity.Property(e => e.BuyPrice).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.CreateDate).HasColumnType("datetime");
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.LastStatusId).HasDefaultValue(1);
                entity.Property(e => e.SubmittedOfferValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.PurchaseRequests)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_PurchaseRequest_Person");

                entity.HasOne(d => d.LastStatus).WithMany(p => p.PurchaseRequests)
                    .HasForeignKey(d => d.LastStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseRequest_PurchaseRequestStatus");

                entity.HasOne(d => d.Report).WithMany(p => p.PurchaseRequests)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseRequest_Report");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.PurchaseRequests)
                    .HasForeignKey(d => d.VehicleDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseRequest_VehicleData");
            });

            modelBuilder.Entity<PurchaseRequestComment>(entity =>
            {
                entity.Property(e => e.CommentDate).HasColumnType("datetime");

                entity.HasOne(d => d.Person).WithMany(p => p.PurchaseRequestComments)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseRequestComments_Person");

                entity.HasOne(d => d.PurchaseRequest).WithMany(p => p.PurchaseRequestComments)
                    .HasForeignKey(d => d.PurchaseRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseRequestComments_PurchaseRequest");

                entity.HasOne(d => d.Status).WithMany(p => p.PurchaseRequestComments)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseRequestComments_PurchaseRequestStatus");
            });

            modelBuilder.Entity<PurchaseRequestLog>(entity =>
            {
                entity.ToTable("PurchaseRequestLog");

                entity.Property(e => e.BuyPrice).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.SubmittedOfferValue).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.PurchaseRequestLogs)
                    .HasForeignKey(d => d.ModifiedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseRequestLog_Person");

                entity.HasOne(d => d.PurchaseRequest).WithMany(p => p.PurchaseRequestLogs)
                    .HasForeignKey(d => d.PurchaseRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseRequestLog_PurchaseRequest");

                entity.HasOne(d => d.Status).WithMany(p => p.PurchaseRequestLogs)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseRequestLog_PurchaseRequestStatus");
            });

            modelBuilder.Entity<PurchaseRequestStatus>(entity =>
            {
                entity.ToTable("PurchaseRequestStatus");

                entity.Property(e => e.PurchaseRequestStatusArabic).HasMaxLength(50);
                entity.Property(e => e.PurchaseRequestStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PurchaseRequestStatusEnglish).HasMaxLength(50);
            });

            modelBuilder.Entity<PurchaseRequestViewHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("PurchaseRequestViewHelper");

                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.CreateDate).HasColumnType("datetime");
                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.Name).HasMaxLength(3000);
                entity.Property(e => e.PlateColor).HasMaxLength(200);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.PlateSource).HasMaxLength(100);
                entity.Property(e => e.PurchaseRequestStatusArabic).HasMaxLength(50);
                entity.Property(e => e.PurchaseRequestStatusEnglish).HasMaxLength(50);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);
            });

            modelBuilder.Entity<Question>(entity =>
            {
                entity.HasKey(e => e.QuestionId)
                    .HasName("PK__Question__0DC06FAC22595A5E")
                    .HasFillFactor(80);

                entity.ToTable("Question");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionCategoryId).HasDefaultValue(1);
                entity.Property(e => e.QuestionGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.QuestionCategory).WithMany(p => p.Questions)
                    .HasForeignKey(d => d.QuestionCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Question_QuestionCategoryDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Questions)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Question_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Questions)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Question_Source");
            });

            modelBuilder.Entity<QuestionCategoryDim>(entity =>
            {
                entity.HasKey(e => e.QuestionCategoryId)
                    .HasName("PK__Question__48FE4081DFD612E6")
                    .HasFillFactor(80);

                entity.ToTable("QuestionCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.QuestionCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_QuestionCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<QuestionCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionCategoryDIMCodeView");

                entity.Property(e => e.QuestionCategoryCode).HasMaxLength(20);
                entity.Property(e => e.QuestionCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<QuestionChoice>(entity =>
            {
                entity.HasKey(e => e.QuestionChoiceId)
                    .HasName("PK__Question__8661A3082EF44362")
                    .HasFillFactor(80);

                entity.ToTable("QuestionChoice");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionChoiceGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Question).WithMany(p => p.QuestionChoices)
                    .HasForeignKey(d => d.QuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QuestionChoice_Question");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.QuestionChoices)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_QuestionChoice_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.QuestionChoices)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QuestionChoice_Source");
            });

            modelBuilder.Entity<QuestionChoiceGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionChoiceGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QuestionChoiceView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionChoiceView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionChoiceId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QuestionGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QuestionView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.QuestionCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.QuestionId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Questionnaire>(entity =>
            {
                entity.HasKey(e => e.DocumentId)
                    .HasName("PK__Question__1ABEEF0FE69419DA")
                    .HasFillFactor(80);

                entity.ToTable("Questionnaire");

                entity.Property(e => e.DocumentId).ValueGeneratedNever();
                entity.Property(e => e.QuestionnaireCategoryId).HasDefaultValue(1);

                entity.HasOne(d => d.Document).WithOne(p => p.Questionnaire)
                    .HasForeignKey<Questionnaire>(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Questionnaire_Document");

                entity.HasOne(d => d.QuestionnaireCategory).WithMany(p => p.Questionnaires)
                    .HasForeignKey(d => d.QuestionnaireCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Questionnaire_QuestionnaireCategoryDIM");
            });

            modelBuilder.Entity<QuestionnaireCategoryDim>(entity =>
            {
                entity.HasKey(e => e.QuestionnaireCategoryId)
                    .HasName("PK__Question__23D210E9A29162A4")
                    .HasFillFactor(80);

                entity.ToTable("QuestionnaireCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.QuestionnaireCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_QuestionnaireCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<QuestionnaireCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionnaireCategoryDIMCodeView");

                entity.Property(e => e.QuestionnaireCategoryCode).HasMaxLength(20);
                entity.Property(e => e.QuestionnaireCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<QuestionnaireGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionnaireGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<QuestionnaireQuestion>(entity =>
            {
                entity.HasKey(e => e.QuestionnaireQuestionId)
                    .HasName("PK__Question__302244C9FD22D9B6")
                    .HasFillFactor(80);

                entity.ToTable("QuestionnaireQuestion");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.QuestionnaireQuestionGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Document).WithMany(p => p.QuestionnaireQuestions)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QuestionnaireQuestion_Document");

                entity.HasOne(d => d.Question).WithMany(p => p.QuestionnaireQuestions)
                    .HasForeignKey(d => d.QuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QuestionnaireQuestion_Question");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.QuestionnaireQuestions)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_QuestionnaireQuestion_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.QuestionnaireQuestions)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QuestionnaireQuestion_Source");
            });

            modelBuilder.Entity<QuestionnaireQuestionContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionnaireQuestionContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QuestionnaireQuestionContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionnaireQuestionContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.QuestionnaireQuestionId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QuestionnaireQuestionGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionnaireQuestionGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QuestionnaireQuestionView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionnaireQuestionView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.QuestionCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QuestionnaireView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("QuestionnaireView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DocumentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentFormatDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DocumentUri)
                    .HasMaxLength(300)
                    .HasColumnName("DocumentURI");
                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.FileBodyXml)
                    .HasColumnType("xml")
                    .HasColumnName("FileBodyXML");
                entity.Property(e => e.FileControlNumber).HasMaxLength(50);
                entity.Property(e => e.FileDateTime).HasColumnType("datetime");
                entity.Property(e => e.FileExtension).HasMaxLength(10);
                entity.Property(e => e.FileName).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.QuestionnaireCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.QuestionnaireCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<Realestate>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK_Realestate_1")
                    .HasFillFactor(80);

                entity.ToTable("Realestate");

                entity.Property(e => e.ItemId).ValueGeneratedNever();
                entity.Property(e => e.Acreage).HasMaxLength(50);
                entity.Property(e => e.Boundry).HasMaxLength(400);
                entity.Property(e => e.RealestateAttachedFacilityId).HasDefaultValue(1);
                entity.Property(e => e.RealestateCategoryId).HasDefaultValue(1);

                entity.HasOne(d => d.Item).WithOne(p => p.Realestate)
                    .HasForeignKey<Realestate>(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Realestate_FK1");

                entity.HasOne(d => d.RealestateAttachedFacility).WithMany(p => p.Realestates)
                    .HasForeignKey(d => d.RealestateAttachedFacilityId)
                    .HasConstraintName("FK_Realestate_RealestateAttachedFacilityDIM");

                entity.HasOne(d => d.RealestateCategory).WithMany(p => p.Realestates)
                    .HasForeignKey(d => d.RealestateCategoryId)
                    .HasConstraintName("RealestateTypeDIM_Realestate_FK1");

                entity.HasOne(d => d.RealestateLocation).WithMany(p => p.Realestates)
                    .HasForeignKey(d => d.RealestateLocationId)
                    .HasConstraintName("FK_Realestate_Location");
            });

            modelBuilder.Entity<RealestateAttachedFacilityDim>(entity =>
            {
                entity.HasKey(e => e.RealestateAttachedFacilityId).HasFillFactor(80);

                entity.ToTable("RealestateAttachedFacilityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RealestateAttachedFacilityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RealestateAttachedFacilityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<RealestateAttachedFacilityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RealestateAttachedFacilityDIMCodeView");

                entity.Property(e => e.RealestateAttachedFacilityCode).HasMaxLength(20);
                entity.Property(e => e.RealestateAttachedFacilityDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<RealestateCategoryDim>(entity =>
            {
                entity.HasKey(e => e.RealestateCategoryId)
                    .HasName("RealestateTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("RealestateCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RealestateCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RealestateCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<RealestateCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RealestateCategoryDIMCodeView");

                entity.Property(e => e.RealestateCategoryCode).HasMaxLength(20);
                entity.Property(e => e.RealestateCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<RealestateGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RealestateGuidView");

                entity.Property(e => e.Acreage).HasMaxLength(50);
                entity.Property(e => e.Boundry).HasMaxLength(400);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RealestateAttachedFacilityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RealestateView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RealestateView");

                entity.Property(e => e.Acreage).HasMaxLength(50);
                entity.Property(e => e.Boundry).HasMaxLength(400);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RealestateAttachedFacilityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateAttachedFacilityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RealestateCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReasonCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ReasonCategoryId).HasFillFactor(80);

                entity.ToTable("ReasonCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.IsReport).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<RecalculationReportChengeLog>(entity =>
            {
                entity.ToTable("RecalculationReportChengeLog");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ModificationDateTime).HasColumnType("datetime");
                entity.Property(e => e.NewReportNumber).HasMaxLength(50);
                entity.Property(e => e.OldReportNumber).HasMaxLength(50);

                entity.HasOne(d => d.RecalculationRequest).WithMany(p => p.RecalculationReportChengeLogs)
                    .HasForeignKey(d => d.RecalculationRequestId)
                    .HasConstraintName("FK_RecalculationReportChengeLog_RecalculationRequest");

                entity.HasOne(d => d.Report).WithMany(p => p.RecalculationReportChengeLogs)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_RecalculationReportChengeLog_Report");
            });

            modelBuilder.Entity<RecalculationRequest>(entity =>
            {
                entity.ToTable("RecalculationRequest");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ModificationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.RecalculationRequests)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Table_1_Person");

                entity.HasOne(d => d.RecalculationRequestType).WithMany(p => p.RecalculationRequests)
                    .HasForeignKey(d => d.RecalculationRequestTypeId)
                    .HasConstraintName("FK_Table_1_RecalculationRequestTypeDim");

                entity.HasOne(d => d.Report).WithMany(p => p.RecalculationRequests)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_Table_1_Report");

                entity.HasOne(d => d.RequestStatus).WithMany(p => p.RecalculationRequests)
                    .HasForeignKey(d => d.RequestStatusId)
                    .HasConstraintName("FK_Table_1_RecalculationStatusDim");
            });

            modelBuilder.Entity<RecalculationRequestAttachment>(entity =>
            {
                entity.ToTable("RecalculationRequestAttachment");

                entity.Property(e => e.AttachmentName).HasMaxLength(50);
                entity.Property(e => e.AttachmentPath).HasMaxLength(250);
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedbyNavigation).WithMany(p => p.RecalculationRequestAttachments)
                    .HasForeignKey(d => d.Createdby)
                    .HasConstraintName("FK_RecalculationRequestAttachment_Person");

                entity.HasOne(d => d.RecalculationRequest).WithMany(p => p.RecalculationRequestAttachments)
                    .HasForeignKey(d => d.RecalculationRequestId)
                    .HasConstraintName("FK_RecalculationRequestAttachment_RecalculationRequest");
            });

            modelBuilder.Entity<RecalculationRequestTypeDim>(entity =>
            {
                entity.HasKey(e => e.RecalculationRequestTypeId);

                entity.ToTable("RecalculationRequestTypeDim");

                entity.Property(e => e.RecalculationRequestTypeId).ValueGeneratedNever();
                entity.Property(e => e.ArabicDescription).HasMaxLength(500);
                entity.Property(e => e.EnglishDescription).HasMaxLength(500);
            });

            modelBuilder.Entity<RecalculationStatusDim>(entity =>
            {
                entity.HasKey(e => e.RecalculationStatusId);

                entity.ToTable("RecalculationStatusDim");

                entity.Property(e => e.RecalculationStatusId).ValueGeneratedNever();
                entity.Property(e => e.ArabicDescription).HasMaxLength(50);
                entity.Property(e => e.EnglishDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<RecentReportForMotori>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RecentReportForMotori");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PoliceTransferDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportId).ValueGeneratedOnAdd();
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ReconstructionGraph>(entity =>
            {
                entity.HasKey(e => e.ReconstructionGraphId)
                    .HasName("PK__Reconstr__D89C17FA99FD1DC4")
                    .HasFillFactor(80);

                entity.ToTable("ReconstructionGraph");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ImageName).HasMaxLength(100);
                entity.Property(e => e.ImagePath).HasMaxLength(300);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Xaxis).HasColumnName("XAxis");
                entity.Property(e => e.Yaxis).HasColumnName("YAxis");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReconstructionGraphs)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReconstructionGraph_Person");

                entity.HasOne(d => d.ReconstructionMap).WithMany(p => p.ReconstructionGraphs)
                    .HasForeignKey(d => d.ReconstructionMapId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReconstructionGraph_ReconstructionMap");
            });

            modelBuilder.Entity<ReconstructionMap>(entity =>
            {
                entity.HasKey(e => e.ReconstructionMapId)
                    .HasName("PK__Reconstr__792AFBF7BCBB4D31")
                    .HasFillFactor(80);

                entity.ToTable("ReconstructionMap");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.CurrentLocationValue).HasMaxLength(300);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.MapMode).HasMaxLength(20);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SearchAddress).HasMaxLength(3000);
                entity.Property(e => e.SelectedMap)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReconstructionMaps)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReconstructionMap_Person");
            });

            modelBuilder.Entity<ReferenceType>(entity =>
            {
                entity.ToTable("ReferenceType");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(100)
                    .HasColumnName("DescriptionAR");
            });

            modelBuilder.Entity<RegisterofAction>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("RegisterofAction");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.RegisterofActionCategoryId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.RegisterofAction)
                    .HasForeignKey<RegisterofAction>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegisterofAction_Activity");

                entity.HasOne(d => d.RegisterofActionCategory).WithMany(p => p.RegisterofActions)
                    .HasForeignKey(d => d.RegisterofActionCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RegisterofAction_RegisterofActionCategoryDIM");
            });

            modelBuilder.Entity<RegisterofActionCategoryDim>(entity =>
            {
                entity.HasKey(e => e.RegisterofActionCategoryId)
                    .HasName("PK__Register__51A2BFA043642EE1")
                    .HasFillFactor(80);

                entity.ToTable("RegisterofActionCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RegisterofActionCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RegisterofActionCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<RegisterofActionCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RegisterofActionCategoryDIMCodeView");

                entity.Property(e => e.RegisterofActionCategoryCode).HasMaxLength(50);
                entity.Property(e => e.RegisterofActionCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Release>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("Release");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();

                entity.HasOne(d => d.Activity).WithOne(p => p.Release)
                    .HasForeignKey<Release>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Release_Activity");

                entity.HasOne(d => d.ReleaseAuthorizationCategory).WithMany(p => p.Releases)
                    .HasForeignKey(d => d.ReleaseAuthorizationCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Release_ReleaseAuthorizationCategoryDIM");

                entity.HasOne(d => d.ReleaseReason).WithMany(p => p.Releases)
                    .HasForeignKey(d => d.ReleaseReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Release_ReleaseReasonDIM");
            });

            modelBuilder.Entity<ReleaseAuthorizationCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ReleaseAuthorizationCategoryId)
                    .HasName("ReleaseAuthorizationTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ReleaseAuthorizationCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ReleaseAuthorizationCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ReleaseAuthorizationCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ReleaseAuthorizationCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReleaseAuthorizationCategoryDIMCodeView");

                entity.Property(e => e.ReleaseAuthorizationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ReleaseAuthorizationCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ReleaseReasonDim>(entity =>
            {
                entity.HasKey(e => e.ReleaseReasonId)
                    .HasName("ReleaseReasonDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("ReleaseReasonDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ReleaseReasonDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ReleaseReasonDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ReleaseReasonDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReleaseReasonDIMCodeView");

                entity.Property(e => e.ReleaseReasonCode).HasMaxLength(20);
                entity.Property(e => e.ReleaseReasonDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<RemainingCompanyPatrolsAction>(entity =>
            {
                entity.ToTable("RemainingCompanyPatrolsAction");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Escort).WithMany(p => p.RemainingCompanyPatrolsActions)
                    .HasForeignKey(d => d.EscortId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RemainingCompanyPatrolsAction_Escort");

                entity.HasOne(d => d.RemainingCompanyPatrolsActionType).WithMany(p => p.RemainingCompanyPatrolsActions)
                    .HasForeignKey(d => d.RemainingCompanyPatrolsActionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RemainingCompanyPatrolsAction_RemainingCompanyPatrolsActionType");
            });

            modelBuilder.Entity<RemainingCompanyPatrolsActionType>(entity =>
            {
                entity.ToTable("RemainingCompanyPatrolsActionType");

                entity.Property(e => e.NameAr).HasMaxLength(150);
                entity.Property(e => e.NameEn).HasMaxLength(150);
            });

            modelBuilder.Entity<RepairComment>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairCo__3214EC07749AC8AD");

                entity.ToTable("RepairComment");

                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.LastModificationDate)
                    .HasDefaultValueSql("(NULL)")
                    .HasColumnType("datetime");
                entity.Property(e => e.LastModifiedBy).HasDefaultValueSql("(NULL)");

                entity.HasOne(d => d.CreatedByPerson).WithMany(p => p.RepairComments)
                    .HasForeignKey(d => d.CreatedByPersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairComment_Person");

                entity.HasOne(d => d.RepairRequest).WithMany(p => p.RepairComments)
                    .HasForeignKey(d => d.RepairRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairComment_RepairRequest");
            });

            modelBuilder.Entity<RepairCompleteLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairCo__3214EC073E0DF08B");

                entity.ToTable("RepairCompleteLog");

                entity.Property(e => e.Action).HasMaxLength(20);
                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.HasOne(d => d.RepairRequest).WithMany(p => p.RepairCompleteLogs)
                    .HasForeignKey(d => d.RepairRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairCompleteLog_RepairRequest");
            });

            modelBuilder.Entity<RepairGarage>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairGa__3214EC077EE8C289");

                entity.ToTable("RepairGarage");

                entity.Property(e => e.AddressArabic)
                    .HasMaxLength(512)
                    .HasDefaultValue("");
                entity.Property(e => e.AddressEnglish)
                    .HasMaxLength(512)
                    .HasDefaultValue("");
                entity.Property(e => e.CommunicationLanguage).HasMaxLength(5);
                entity.Property(e => e.Email).HasMaxLength(64);
                entity.Property(e => e.LocationLatitude).HasColumnType("decimal(9, 6)");
                entity.Property(e => e.LocationLongitude).HasColumnType("decimal(9, 6)");
                entity.Property(e => e.Mobile).HasMaxLength(20);
                entity.Property(e => e.NameArabic)
                    .HasMaxLength(265)
                    .HasDefaultValue("");
                entity.Property(e => e.NameEnglish)
                    .HasMaxLength(265)
                    .HasDefaultValue("");

                entity.HasOne(d => d.Area).WithMany(p => p.RepairGarages)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairGarage_Area");

                entity.HasOne(d => d.EmirateDim).WithMany(p => p.RepairGarages)
                    .HasForeignKey(d => d.EmirateDimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairGarage_EmirateDIM");
            });

            modelBuilder.Entity<RepairGaragePerson>(entity =>
            {
                entity.HasKey(e => e.PersonId).HasName("PK__RepairGa__AA2FFBE55AACEC49");

                entity.ToTable("RepairGaragePerson");

                entity.Property(e => e.PersonId).ValueGeneratedNever();

                entity.HasOne(d => d.Person).WithOne(p => p.RepairGaragePerson)
                    .HasForeignKey<RepairGaragePerson>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairGaragePerson_Person");

                entity.HasOne(d => d.RepairGarage).WithMany(p => p.RepairGaragePeople)
                    .HasForeignKey(d => d.RepairGarageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairGaragePerson_Garage");
            });

            modelBuilder.Entity<RepairImage>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairIm__3214EC07ADFDA6C1");

                entity.ToTable("RepairImage");

                entity.Property(e => e.DisplayName).HasMaxLength(265);
                entity.Property(e => e.FilePath).HasMaxLength(265);
                entity.Property(e => e.LastModificationDate).HasColumnType("datetime");
                entity.Property(e => e.UploadDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.RepairImageLastModifiedByNavigations)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehicleReciveImages_ModifiedByPerson");

                entity.HasOne(d => d.RepairQuote).WithMany(p => p.RepairImages)
                    .HasForeignKey(d => d.RepairQuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehicleReciveImages_RepairQuote");

                entity.HasOne(d => d.UploadByPerson).WithMany(p => p.RepairImageUploadByPeople)
                    .HasForeignKey(d => d.UploadByPersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehicleReciveImages_UploadByPerson");
            });

            modelBuilder.Entity<RepairInvoice>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairIn__3214EC0751A1AC15");

                entity.ToTable("RepairInvoice");

                entity.HasIndex(e => e.RepairQuoteId, "UK_RepairQuote").IsUnique();

                entity.Property(e => e.FilePath).HasMaxLength(265);
                entity.Property(e => e.LastModificationDate).HasColumnType("datetime");
                entity.Property(e => e.UploadDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RepairQuote).WithOne(p => p.RepairInvoice)
                    .HasForeignKey<RepairInvoice>(d => d.RepairQuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairInvoice_RepairQuote");

                entity.HasOne(d => d.UploadByPerson).WithMany(p => p.RepairInvoices)
                    .HasForeignKey(d => d.UploadByPersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairInvoice_Person");
            });

            modelBuilder.Entity<RepairLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairLo__3214EC074F830A87");

                entity.ToTable("RepairLog");

                entity.Property(e => e.LastModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.RepairLogs)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairLog_Person");

                entity.HasOne(d => d.RepairRequest).WithMany(p => p.RepairLogs)
                    .HasForeignKey(d => d.RepairRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairLog_RepairRequest");
            });

            modelBuilder.Entity<RepairNotification>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairNo__3214EC07AB21FF16");

                entity.ToTable("RepairNotification");

                entity.Property(e => e.Arguments).HasMaxLength(512);
                entity.Property(e => e.Language)
                    .HasMaxLength(10)
                    .HasDefaultValue("ar");
                entity.Property(e => e.Recipients).HasMaxLength(2048);
                entity.Property(e => e.SchedualTime)
                    .HasDefaultValueSql("(NULL)")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RepairRequest).WithMany(p => p.RepairNotifications)
                    .HasForeignKey(d => d.RepairRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairNotification_RepairRequest");
            });

            modelBuilder.Entity<RepairNotificationLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairNo__3214EC07044AE453");

                entity.ToTable("RepairNotificationLog");

                entity.Property(e => e.Level).HasMaxLength(20);
                entity.Property(e => e.Status).HasMaxLength(50);
                entity.Property(e => e.Timestamp).HasColumnType("datetime");

                entity.HasOne(d => d.RepairNotification).WithMany(p => p.RepairNotificationLogs)
                    .HasForeignKey(d => d.RepairNotificationId)
                    .HasConstraintName("FK_NotificationLog_RepairNotification");

                entity.HasOne(d => d.RepairRequest).WithMany(p => p.RepairNotificationLogs)
                    .HasForeignKey(d => d.RepairRequestId)
                    .HasConstraintName("FK_NotificationLog_RepairRequest");
            });

            modelBuilder.Entity<RepairPermissionReportView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RepairPermissionReportView");

                entity.Property(e => e.AccidentCountryNameArabic).HasMaxLength(100);
                entity.Property(e => e.AccidentCountryNameEnglish).HasMaxLength(100);
                entity.Property(e => e.AccidentDate).HasColumnType("datetime");
                entity.Property(e => e.ChassisNumber).HasMaxLength(100);
                entity.Property(e => e.CountryOfOriginArabic).HasMaxLength(50);
                entity.Property(e => e.CountryOfOriginEnglish).HasMaxLength(200);
                entity.Property(e => e.DamagesDescription).HasMaxLength(2000);
                entity.Property(e => e.EmirateNameArabic).HasMaxLength(200);
                entity.Property(e => e.EmirateNameEnglish)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EngineNumber).HasMaxLength(20);
                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.IssuanceDate).HasColumnType("datetime");
                entity.Property(e => e.ManufactueYear).HasMaxLength(100);
                entity.Property(e => e.OwnerName).HasMaxLength(50);
                entity.Property(e => e.PlateNumber).HasMaxLength(50);
                entity.Property(e => e.PolicyNumber).HasMaxLength(100);
                entity.Property(e => e.TrafficCode).HasMaxLength(20);
                entity.Property(e => e.TypeNameArabic).HasMaxLength(100);
                entity.Property(e => e.TypeNameEnglish).HasMaxLength(100);
                entity.Property(e => e.VehicleDesc).HasMaxLength(1000);
                entity.Property(e => e.WeightEmpty).HasMaxLength(20);
                entity.Property(e => e.WeightNonEmpty).HasMaxLength(20);
            });

            modelBuilder.Entity<RepairQuote>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairQu__3214EC07385BF67C");

                entity.ToTable("RepairQuote");

                entity.HasIndex(e => e.RepairRequestGarageId, "UK_RepairRequestGarage").IsUnique();

                entity.Property(e => e.ExpectedCompleteDate).HasColumnType("datetime");
                entity.Property(e => e.LastModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.RepairQuotes)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_RepairQuote_Person");

                entity.HasOne(d => d.RepairRequestGarage).WithOne(p => p.RepairQuote)
                    .HasForeignKey<RepairQuote>(d => d.RepairRequestGarageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairQuote_RepairRequestGarage");
            });

            modelBuilder.Entity<RepairQuoteItem>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairQu__3214EC07873BFCBA");

                entity.ToTable("RepairQuoteItem");

                entity.Property(e => e.ItemPrice).HasColumnType("decimal(9, 3)");
                entity.Property(e => e.Name).HasMaxLength(265);

                entity.HasOne(d => d.ItemType).WithMany(p => p.RepairQuoteItems)
                    .HasForeignKey(d => d.ItemTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairQuoteItem_RepairQuoteItemTypeDIM");

                entity.HasOne(d => d.RepairQuote).WithMany(p => p.RepairQuoteItems)
                    .HasForeignKey(d => d.RepairQuoteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairQuoteItem_RepairQuote");
            });

            modelBuilder.Entity<RepairQuoteItemTypeDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairQu__3214EC07C250C1AF");

                entity.ToTable("RepairQuoteItemTypeDIM");

                entity.Property(e => e.Code)
                    .HasMaxLength(64)
                    .IsUnicode(false);
                entity.Property(e => e.NameArabic).HasMaxLength(64);
                entity.Property(e => e.NameEnglish)
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RepairRating>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairRa__3213E83F1B798A87");

                entity.ToTable("RepairRating");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.Comment).HasMaxLength(200);
                entity.Property(e => e.RatingDate).HasColumnType("datetime");

                entity.HasOne(d => d.RepairRequestGarage).WithMany(p => p.RepairRatings)
                    .HasForeignKey(d => d.RepairRequestGarageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRating_RepairRequestGarageId");
            });

            modelBuilder.Entity<RepairRequest>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairRe__3214EC07A5E0BC58");

                entity.ToTable("RepairRequest");

                entity.Property(e => e.ContactEmail).HasMaxLength(100);
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");
                entity.Property(e => e.IsDelayed).HasDefaultValueSql("(NULL)");
                entity.Property(e => e.LastModificationDate).HasColumnType("datetime");
                entity.Property(e => e.PreferredCommunicationLanguage).HasMaxLength(10);

                entity.HasOne(d => d.Area).WithMany(p => p.RepairRequests)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequest_Area");

                entity.HasOne(d => d.AwarededRequestGarage).WithMany(p => p.RepairRequests)
                    .HasForeignKey(d => d.AwarededRequestGarageId)
                    .HasConstraintName("FK_RepairRequest_RepairRequestGarage");

                entity.HasOne(d => d.EmirateDim).WithMany(p => p.RepairRequests)
                    .HasForeignKey(d => d.EmirateDimId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequest_EmirateDIM");

                entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.RepairRequests)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_RepairRequest_Person");

                entity.HasOne(d => d.RepairStatus).WithMany(p => p.RepairRequests)
                    .HasForeignKey(d => d.RepairStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequest_RepairStatus");

                entity.HasOne(d => d.Report).WithMany(p => p.RepairRequests)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequest_Report");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.RepairRequests)
                    .HasForeignKey(d => d.VehicleDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequest_VehicleData");
            });

            modelBuilder.Entity<RepairRequestGarage>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairRe__3214EC079517A6FD");

                entity.ToTable("RepairRequestGarage");

                entity.HasIndex(e => new { e.RepairRequestId, e.RepairGarageId }, "UK_Request_Garage").IsUnique();

                entity.Property(e => e.LastModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.RepairGarage).WithMany(p => p.RepairRequestGarages)
                    .HasForeignKey(d => d.RepairGarageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequestGarage_RepairGarage");

                entity.HasOne(d => d.RepairRequest).WithMany(p => p.RepairRequestGarages)
                    .HasForeignKey(d => d.RepairRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequestGarage_RepairRequest");

                entity.HasOne(d => d.RepairStatus).WithMany(p => p.RepairRequestGarages)
                    .HasForeignKey(d => d.RepairStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequestGarage_RepairStatus");
            });

            modelBuilder.Entity<RepairRequestGarageStatusHistory>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairRe__3214EC070E63C7EE");

                entity.ToTable("RepairRequestGarageStatusHistory");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
                entity.Property(e => e.LastModificationDate).HasColumnType("datetime");
                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.RepairRequestGarageStatusHistories)
                    .HasForeignKey(d => d.LastModifiedBy)
                    .HasConstraintName("FK_RepairRequestGarageStatusHistory_Person");

                entity.HasOne(d => d.NewStatusNavigation).WithMany(p => p.RepairRequestGarageStatusHistoryNewStatusNavigations)
                    .HasForeignKey(d => d.NewStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequestGarageStatusHistory_NewStatus");

                entity.HasOne(d => d.OldStatusNavigation).WithMany(p => p.RepairRequestGarageStatusHistoryOldStatusNavigations)
                    .HasForeignKey(d => d.OldStatus)
                    .HasConstraintName("FK_RepairRequestGarageStatusHistory_OldStatus");

                entity.HasOne(d => d.RepairRequestGarage).WithMany(p => p.RepairRequestGarageStatusHistories)
                    .HasForeignKey(d => d.RepairRequestGarageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequestGarageStatusHistory_RepairRequestGarage");
            });

            modelBuilder.Entity<RepairRequestStatusForSaaedAdminView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RepairRequestStatusForSaaedAdminView");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");
                entity.Property(e => e.StatusArabic).HasMaxLength(64);
                entity.Property(e => e.StatusCode)
                    .HasMaxLength(64)
                    .IsUnicode(false);
                entity.Property(e => e.StatusEnglish).HasMaxLength(64);
            });

            modelBuilder.Entity<RepairRequestStatusHistory>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairRe__3214EC07E7B11B28");

                entity.ToTable("RepairRequestStatusHistory");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
                entity.Property(e => e.LastModificationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.NewStatusNavigation).WithMany(p => p.RepairRequestStatusHistoryNewStatusNavigations)
                    .HasForeignKey(d => d.NewStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequestStatusHistory_NewStatus");

                entity.HasOne(d => d.OldStatusNavigation).WithMany(p => p.RepairRequestStatusHistoryOldStatusNavigations)
                    .HasForeignKey(d => d.OldStatus)
                    .HasConstraintName("FK_RepairRequestStatusHistory_OldStatus");

                entity.HasOne(d => d.RepairRequest).WithMany(p => p.RepairRequestStatusHistories)
                    .HasForeignKey(d => d.RepairRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RepairRequestStatusHistory_RepairRequest");
            });

            modelBuilder.Entity<RepairRequestStatusPerGarageView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RepairRequestStatusPerGarageView");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("datetime");
                entity.Property(e => e.GarageNameArabic).HasMaxLength(265);
                entity.Property(e => e.GarageNameEnglishc).HasMaxLength(265);
                entity.Property(e => e.StatusArabic).HasMaxLength(64);
                entity.Property(e => e.StatusCode)
                    .HasMaxLength(64)
                    .IsUnicode(false);
                entity.Property(e => e.StatusEnglish).HasMaxLength(64);
            });

            modelBuilder.Entity<RepairStatusDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RepairSt__3214EC07E2A5D895");

                entity.ToTable("RepairStatusDIM");

                entity.Property(e => e.StatusArabic).HasMaxLength(64);
                entity.Property(e => e.StatusCode)
                    .HasMaxLength(64)
                    .IsUnicode(false);
                entity.Property(e => e.StatusEnglish).HasMaxLength(64);
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.HasKey(e => e.ReportId)
                    .HasName("PK__Report__D5BD48052ECBE8F3")
                    .HasFillFactor(80);

                entity.ToTable("Report");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsTransferedFromPolice).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PoliceTransferDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ReportGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ReportSourceType).WithMany(p => p.Reports)
                    .HasForeignKey(d => d.ReportSourceTypeId)
                    .HasConstraintName("FK__Report__ReportSo__65DBB4E1");

                entity.HasOne(d => d.ReportStatus).WithMany(p => p.Reports)
                    .HasForeignKey(d => d.ReportStatusId)
                    .HasConstraintName("FK_Report_ReportStatusDIM");

                entity.HasOne(d => d.ReportType).WithMany(p => p.Reports)
                    .HasForeignKey(d => d.ReportTypeId)
                    .HasConstraintName("FK_Report_ReportTypeDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Reports)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Report_RowStatusDIM");
            });

            modelBuilder.Entity<ReportAccessChannel>(entity =>
            {
                entity.ToTable("ReportAccessChannel");

                entity.Property(e => e.ReportAccessChannelId).ValueGeneratedNever();
                entity.Property(e => e.ReportChannelDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportAccessLog>(entity =>
            {
                entity.ToTable("ReportAccessLog");

                entity.Property(e => e.ReportAccessCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ReportAccessDatetime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportActionTaken>(entity =>
            {
                entity.ToTable("ReportActionTaken");

                entity.Property(e => e.CreationDatetime).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ActionTaken).WithMany(p => p.ReportActionTakens)
                    .HasForeignKey(d => d.ActionTakenId)
                    .HasConstraintName("FK_ReportActionTaken_ActionTakenDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportActionTakens)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportActionTaken_Person");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportActionTakens)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_ReportActionTaken_Report");
            });

            modelBuilder.Entity<ReportAmbulance>(entity =>
            {
                entity.ToTable("ReportAmbulance");

                entity.Property(e => e.AmbulanceDate).HasColumnType("datetime");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportAmbulances)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportAmbulance_Report");
            });

            modelBuilder.Entity<ReportArcReportCount>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReportArcReportCount");

                entity.Property(e => e._0).HasColumnName("0");
                entity.Property(e => e._2).HasColumnName("2");
                entity.Property(e => e._3).HasColumnName("3");
            });

            modelBuilder.Entity<ReportAreaDim>(entity =>
            {
                entity.HasKey(e => e.AreaId).HasFillFactor(80);

                entity.ToTable("ReportAreaDIM");

                entity.Property(e => e.AreaId).ValueGeneratedNever();
                entity.Property(e => e.AreaCode).HasMaxLength(50);
                entity.Property(e => e.AreaName).HasMaxLength(200);

                entity.HasOne(d => d.City).WithMany(p => p.ReportAreaDims)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportAreaDIM_CityDIM");
            });

            modelBuilder.Entity<ReportAreaView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReportAreaView");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<ReportChangeStatusLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("ReportChangeStatusLog");

                entity.Property(e => e.CreationDatetime).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportChangeStatusLogs)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportChangeStatusLog_Person");

                entity.HasOne(d => d.NewStatusNavigation).WithMany(p => p.ReportChangeStatusLogNewStatusNavigations)
                    .HasForeignKey(d => d.NewStatus)
                    .HasConstraintName("FK_ReportChangeStatusLog_ReportStatusDIM1");

                entity.HasOne(d => d.OldStatusNavigation).WithMany(p => p.ReportChangeStatusLogOldStatusNavigations)
                    .HasForeignKey(d => d.OldStatus)
                    .HasConstraintName("FK_ReportChangeStatusLog_ReportStatusDIM");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportChangeStatusLogs)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportChangeStatusLog_Report");
            });

            modelBuilder.Entity<ReportCode>(entity =>
            {
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.PlateNumber).HasMaxLength(50);
                entity.Property(e => e.RandomCode).HasMaxLength(50);
                entity.Property(e => e.ReportNumber).HasMaxLength(50);
                entity.Property(e => e.SendDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Smstext).HasColumnName("SMSText");
            });

            modelBuilder.Entity<ReportCodeViewHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReportCodeViewHelper");

                entity.Property(e => e.AdpreportNumber).HasColumnName("ADPReportNumber");
                entity.Property(e => e.AdpstatusId).HasColumnName("ADPStatusId");
                entity.Property(e => e.InEmirates).HasColumnName("inEmirates");
                entity.Property(e => e.OwnerTcn)
                    .HasMaxLength(3000)
                    .HasColumnName("OwnerTCN");
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReportCode).HasMaxLength(50);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StatusId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SystemCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportDamagedProperty>(entity =>
            {
                entity.HasKey(e => e.ReportDamagedPropertyId)
                    .HasName("PK__ReportDa__8BB367DA6B776041")
                    .HasFillFactor(80);

                entity.ToTable("ReportDamagedProperty");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportDamagedProperties)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportDamagedProperty_Person");

                entity.HasOne(d => d.DamagedProperty).WithMany(p => p.ReportDamagedProperties)
                    .HasForeignKey(d => d.DamagedPropertyId)
                    .HasConstraintName("FK_ReportDamagedProperty_DamagedProperty");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportDamagedProperties)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_ReportDamagedProperty_Report");
            });

            modelBuilder.Entity<ReportDetailsForPoliceRequest>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("ReportDetailsForPoliceRequest");

                entity.Property(e => e.AreaCode).HasMaxLength(50);
                entity.Property(e => e.AreaName).HasMaxLength(250);
                entity.Property(e => e.CityCode).HasMaxLength(50);
                entity.Property(e => e.CityName).HasMaxLength(250);
                entity.Property(e => e.EmirateCode).HasMaxLength(50);
                entity.Property(e => e.EmirateName).HasMaxLength(50);
                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
                entity.Property(e => e.ReasonCode).HasMaxLength(50);
                entity.Property(e => e.ReportNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.StreetCode).HasMaxLength(50);
                entity.Property(e => e.StreetName).HasMaxLength(500);
            });

            modelBuilder.Entity<ReportDetailsForPoliceRequestView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReportDetailsForPoliceRequestView");

                entity.Property(e => e.ReportAreaCode).HasMaxLength(50);
                entity.Property(e => e.ReportAreaName).HasMaxLength(250);
                entity.Property(e => e.ReportCityCode).HasMaxLength(50);
                entity.Property(e => e.ReportCityName).HasMaxLength(250);
                entity.Property(e => e.ReportEmirateCode).HasMaxLength(50);
                entity.Property(e => e.ReportEmirateName).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportField>(entity =>
            {
                entity.HasKey(e => e.FieldId).HasFillFactor(80);

                entity.ToTable("ReportField");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.CultureDescriptionXml).HasColumnName("CultureDescriptionXML");
                entity.Property(e => e.Dtoname).HasColumnName("DTOName");
                entity.Property(e => e.FieldName).HasMaxLength(50);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.Order).HasDefaultValueSql("(NULL)");
                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(NULL)");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportFieldCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportField_Person");

                entity.HasOne(d => d.FieldType).WithMany(p => p.ReportFields)
                    .HasForeignKey(d => d.FieldTypeId)
                    .HasConstraintName("FK_ReportField_ReportFieldTypeDIM");

                entity.HasOne(d => d.Group).WithMany(p => p.ReportFields)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_ReportField_ReportGroup");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ReportFieldModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ReportField_Person1");

                entity.HasOne(d => d.ReportType).WithMany(p => p.ReportFields)
                    .HasForeignKey(d => d.ReportTypeId)
                    .HasConstraintName("FK_ReportField_ReportTypeDIM");
            });

            modelBuilder.Entity<ReportFieldTypeDim>(entity =>
            {
                entity.HasKey(e => e.ReportFieldTypeId).HasFillFactor(80);

                entity.ToTable("ReportFieldTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ReportFile>(entity =>
            {
                entity.HasKey(e => e.ReportFileId)
                    .HasName("PK__ReportFi__3E3F4B92DAC892DC")
                    .HasFillFactor(80);

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.File).WithMany(p => p.ReportFiles)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ReportFil__FileI__4402926E");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportFiles)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ReportFil__Repor__430E6E35");
            });

            modelBuilder.Entity<ReportGroup>(entity =>
            {
                entity.HasKey(e => e.GroupId).HasFillFactor(80);

                entity.ToTable("ReportGroup");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.CultureDescriptionXml).HasColumnName("CultureDescriptionXML");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ApprovalCycle).WithMany(p => p.ReportGroups)
                    .HasForeignKey(d => d.ApprovalCycleId)
                    .HasConstraintName("FK_ReportGroup_ApprovalCycle");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportGroupCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportGroup_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ReportGroupModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ReportGroup_Person1");
            });

            modelBuilder.Entity<ReportHeatMap>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReportHeatMap");

                entity.Property(e => e.AreaName).HasMaxLength(200);
                entity.Property(e => e.CallerName).HasMaxLength(152);
                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.CallerTakerName).HasMaxLength(152);
                entity.Property(e => e.DispatcherName).HasMaxLength(152);
                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.IncidentDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TrafficExpertName).HasMaxLength(152);
            });

            modelBuilder.Entity<ReportImage>(entity =>
            {
                entity.HasKey(e => e.ReportImageId)
                    .HasName("PK__ReportIm__FC9BB45975DE3ED6")
                    .HasFillFactor(80);

                entity.ToTable("ReportImage");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportImages)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportImage_Person");

                entity.HasOne(d => d.Image).WithMany(p => p.ReportImages)
                    .HasForeignKey(d => d.ImageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportImage_Image");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportImages)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportImage_Report");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.ReportImages)
                    .HasForeignKey(d => d.VehicleDataId)
                    .HasConstraintName("FK__ReportIma__Vehic__1FBCA705");
            });

            modelBuilder.Entity<ReportInquiryLog>(entity =>
            {
                entity.ToTable("ReportInquiryLog");

                entity.Property(e => e.LogCreationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportInquiryLogs)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportInquiryLog_Report");
            });

            modelBuilder.Entity<ReportMdtAccidentBasicDetail>(entity =>
            {
                entity.HasKey(e => e.ReportMdtAccidentBasicDetailsId)
                    .HasName("PK__ReportMd__3D2AD7C3694D86F8")
                    .HasFillFactor(80);

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.MdtaccidentBasicDetailsId).HasColumnName("MDTAccidentBasicDetailsId");
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportMdtAccidentBasicDetails)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportMdtAccidentBasicDetails_Person");

                entity.HasOne(d => d.MdtaccidentBasicDetails).WithMany(p => p.ReportMdtAccidentBasicDetails)
                    .HasForeignKey(d => d.MdtaccidentBasicDetailsId)
                    .HasConstraintName("FK_ReportMdtAccidentBasicDetails_MDTAccidentBasicDetails");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportMdtAccidentBasicDetails)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_ReportMdtAccidentBasicDetails_Report");
            });

            modelBuilder.Entity<ReportModifcationLogComment>(entity =>
            {
                entity.HasKey(e => e.ReportModifcationLogCommentId).HasFillFactor(80);

                entity.ToTable("ReportModifcationLogComment");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportModifcationLogCommentCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportModifcationLogComment_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ReportModifcationLogCommentModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ReportModifcationLogComment_Person1");

                entity.HasOne(d => d.ReportModifcationLog).WithMany(p => p.ReportModifcationLogComments)
                    .HasForeignKey(d => d.ReportModifcationLogId)
                    .HasConstraintName("FK_ReportModifcationLogComment_ReportModificationLog");
            });

            modelBuilder.Entity<ReportModification>(entity =>
            {
                entity.HasKey(e => e.ReportModificationId).HasFillFactor(80);

                entity.ToTable("ReportModification");

                entity.Property(e => e.ColumnName).HasMaxLength(50);
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.Guid).HasColumnName("GUID");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.Order).HasDefaultValueSql("(NULL)");
                entity.Property(e => e.ParentId).HasMaxLength(50);
                entity.Property(e => e.TableName).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportModificationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportModification_Person");

                entity.HasOne(d => d.Field).WithMany(p => p.ReportModifications)
                    .HasForeignKey(d => d.FieldId)
                    .HasConstraintName("FK_ReportModification_ReportField");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ReportModificationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ReportModification_Person1");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportModifications)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_ReportModification_Report");

                entity.HasOne(d => d.ReportModificationStatus).WithMany(p => p.ReportModifications)
                    .HasForeignKey(d => d.ReportModificationStatusId)
                    .HasConstraintName("FK_ReportModification_ReportModificationStatus");

                entity.HasOne(d => d.ReportModificationType).WithMany(p => p.ReportModifications)
                    .HasForeignKey(d => d.ReportModificationTypeId)
                    .HasConstraintName("FK_ReportModification_ReportModificationType");

                entity.HasOne(d => d.ReportRequest).WithMany(p => p.ReportModifications)
                    .HasForeignKey(d => d.ReportRequestId)
                    .HasConstraintName("FK_ReportModification_ReportRequest");
            });

            modelBuilder.Entity<ReportModificationAssociation>(entity =>
            {
                entity.HasKey(e => e.ReportModificationAssociationId).HasFillFactor(80);

                entity.ToTable("ReportModificationAssociation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ReportModificationAssociationDescription).HasMaxLength(300);
                entity.Property(e => e.ReportModificationRelationshipTypeId).HasDefaultValue(1);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportModificationAssociationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportModificationAssociation_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ReportModificationAssociationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ReportModificationAssociation_Person1");

                entity.HasOne(d => d.RelatedReportModification).WithMany(p => p.ReportModificationAssociationRelatedReportModifications)
                    .HasForeignKey(d => d.RelatedReportModificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportModificationAssociation_ReportModification1");

                entity.HasOne(d => d.ReportModification).WithMany(p => p.ReportModificationAssociationReportModifications)
                    .HasForeignKey(d => d.ReportModificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportModificationAssociation_ReportModification");

                entity.HasOne(d => d.ReportModificationRelationshipType).WithMany(p => p.ReportModificationAssociations)
                    .HasForeignKey(d => d.ReportModificationRelationshipTypeId)
                    .HasConstraintName("FK_ReportModificationAssociation_ReportModificationRelationshipTypeDIM");
            });

            modelBuilder.Entity<ReportModificationLog>(entity =>
            {
                entity.HasKey(e => e.ReportModificationLogId).HasFillFactor(80);

                entity.ToTable("ReportModificationLog");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportModificationLogCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportModificationLog_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ReportModificationLogModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ReportModificationLog_Person1");

                entity.HasOne(d => d.ReportModification).WithMany(p => p.ReportModificationLogs)
                    .HasForeignKey(d => d.ReportModificationId)
                    .HasConstraintName("FK_ReportModificationLog_ReportModification");

                entity.HasOne(d => d.ReportModificationLogStatus).WithMany(p => p.ReportModificationLogs)
                    .HasForeignKey(d => d.ReportModificationLogStatusId)
                    .HasConstraintName("FK_ReportModificationLog_ReportModificationLogStatusDIM");

                entity.HasOne(d => d.State).WithMany(p => p.ReportModificationLogs)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_ReportModificationLog_State");
            });

            modelBuilder.Entity<ReportModificationLogStatusDim>(entity =>
            {
                entity.HasKey(e => e.ReportModificationLogStatusId).HasFillFactor(80);

                entity.ToTable("ReportModificationLogStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ReportModificationRelationshipTypeDim>(entity =>
            {
                entity.HasKey(e => e.ReportModificationRelationshipTypeId).HasFillFactor(80);

                entity.ToTable("ReportModificationRelationshipTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ReportModificationResponsibilityDim>(entity =>
            {
                entity.HasKey(e => e.ResponsibilityId).HasFillFactor(80);

                entity.ToTable("ReportModificationResponsibilityDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ReportModificationStatus>(entity =>
            {
                entity.HasKey(e => e.ReportModificationStatusId).HasFillFactor(80);

                entity.ToTable("ReportModificationStatus");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ReportModificationType>(entity =>
            {
                entity.HasKey(e => e.ReportModificationTypeId).HasFillFactor(80);

                entity.ToTable("ReportModificationType");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ReportNotifier>(entity =>
            {
                entity.HasKey(e => e.ReportNotifierId).HasFillFactor(80);

                entity.ToTable("ReportNotifier");

                entity.Property(e => e.Email).HasMaxLength(100);
                entity.Property(e => e.IsActive).HasDefaultValue(true);
                entity.Property(e => e.Name).HasMaxLength(100);
                entity.Property(e => e.TrafficCode).HasMaxLength(100);
            });

            modelBuilder.Entity<ReportNotifierLog>(entity =>
            {
                entity.ToTable("ReportNotifierLog");

                entity.Property(e => e.Email).HasMaxLength(500);
                entity.Property(e => e.SendDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReportPaymentTransaction>(entity =>
            {
                entity.ToTable("ReportPaymentTransaction");

                entity.HasIndex(e => new { e.ReportId, e.AdpreportNumber }, "UC_ReprotADPNumber").IsUnique();

                entity.Property(e => e.AdpreportNumber).HasColumnName("ADPReportNumber");
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.HasOne(d => d.EvgPaymentStatus).WithMany(p => p.ReportPaymentTransactions)
                    .HasForeignKey(d => d.EvgPaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportPaymentTransaction_EvgPaymentStatusDim");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportPaymentTransactions)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportPaymentTransaction_Report");
            });

            modelBuilder.Entity<ReportPaymentTransactionLog>(entity =>
            {
                entity.ToTable("ReportPaymentTransactionLog");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.HasOne(d => d.ReportPaymentTransaction).WithMany(p => p.ReportPaymentTransactionLogs)
                    .HasForeignKey(d => d.ReportPaymentTransactionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportPaymentTransactionLog_ReportPaymentTransaction");
            });

            modelBuilder.Entity<ReportReasonDim>(entity =>
            {
                entity.HasKey(e => e.ReportReasonId).HasFillFactor(80);

                entity.ToTable("ReportReasonDIM");

                entity.Property(e => e.ReportReasonId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Reason).HasMaxLength(500);
            });

            modelBuilder.Entity<ReportReconstructionPlan>(entity =>
            {
                entity.HasKey(e => e.ReportReconstructionPlanId)
                    .HasName("PK__ReportRe__4B94000AA4577251")
                    .HasFillFactor(80);

                entity.ToTable("ReportReconstructionPlan");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.Ismodified).HasColumnName("ISModified");
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportReconstructionPlans)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportReconstructionPlan_Person");

                entity.HasOne(d => d.ReconstructionMap).WithMany(p => p.ReportReconstructionPlans)
                    .HasForeignKey(d => d.ReconstructionMapId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportReconstructionPlan_ReconstructionMap");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportReconstructionPlans)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportReconstructionPlan_Report");
            });

            modelBuilder.Entity<ReportRequest>(entity =>
            {
                entity.HasKey(e => e.RequestId).HasFillFactor(80);

                entity.ToTable("ReportRequest");

                entity.HasIndex(e => e.ReportId, "NonClusteredIndex-ReportId");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsExternal).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.OtherCancelReason).HasMaxLength(2000);
                entity.Property(e => e.RequestNumber).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TransferDate).HasColumnType("datetime");

                entity.HasOne(d => d.CancelReason).WithMany(p => p.ReportRequests)
                    .HasForeignKey(d => d.CancelReasonId)
                    .HasConstraintName("FK_CancelReason");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportRequestCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportRequest_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ReportRequestModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ReportRequest_Person1");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportRequests)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_ReportRequest_Report");

                entity.HasOne(d => d.RequestServiceType).WithMany(p => p.ReportRequests)
                    .HasForeignKey(d => d.RequestServiceTypeId)
                    .HasConstraintName("FK_ReportRequest_ReportServiceTypeDim");

                entity.HasOne(d => d.RequestType).WithMany(p => p.ReportRequests)
                    .HasForeignKey(d => d.RequestTypeId)
                    .HasConstraintName("FK_ReportRequest_ReportRequestTypeDIM");

                entity.HasOne(d => d.Responsibility).WithMany(p => p.ReportRequests)
                    .HasForeignKey(d => d.ResponsibilityId)
                    .HasConstraintName("FK_ReportRequest_ReportModificationResponsibilityDIM");

                entity.HasOne(d => d.TransferedByNavigation).WithMany(p => p.ReportRequestTransferedByNavigations)
                    .HasForeignKey(d => d.TransferedBy)
                    .HasConstraintName("FK_ReportRequest_Person2");
            });

            modelBuilder.Entity<ReportRequestClientDatum>(entity =>
            {
                entity.HasKey(e => e.ClientId).HasFillFactor(80);

                entity.Property(e => e.ClientEmail).HasMaxLength(50);
                entity.Property(e => e.ClientName).HasMaxLength(50);
                entity.Property(e => e.ClientPhone).HasMaxLength(50);
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportRequestClientDatumCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportRequestClientData_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ReportRequestClientDatumModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ReportRequestClientData_Person1");

                entity.HasOne(d => d.Request).WithMany(p => p.ReportRequestClientData)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_ReportRequestClientData_ReportRequest");
            });

            modelBuilder.Entity<ReportRequestComment>(entity =>
            {
                entity.HasKey(e => e.ReportRequestCommentId).HasFillFactor(80);

                entity.ToTable("ReportRequestComment");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportRequestCommentCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportRequestComment_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ReportRequestCommentModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ReportRequestComment_Person1");

                entity.HasOne(d => d.ReportRequest).WithMany(p => p.ReportRequestComments)
                    .HasForeignKey(d => d.ReportRequestId)
                    .HasConstraintName("FK_ReportRequestComment_ReportRequest");
            });

            modelBuilder.Entity<ReportRequestDocument>(entity =>
            {
                entity.HasKey(e => e.RequestDocumentId).HasFillFactor(80);

                entity.ToTable("ReportRequestDocument");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.BinarySize).HasComputedColumnSql("(datalength(isnull([BinaryBase64Object],[BinaryHexObject])))", false);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DocumentName).HasMaxLength(500);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportRequestDocumentCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportRequestDocument_Person");

                entity.HasOne(d => d.DocumentType).WithMany(p => p.ReportRequestDocuments)
                    .HasForeignKey(d => d.DocumentTypeId)
                    .HasConstraintName("FK_ReportRequestDocument_DocumentCategoryDIM");

                entity.HasOne(d => d.FileFormat).WithMany(p => p.ReportRequestDocuments)
                    .HasForeignKey(d => d.FileFormatId)
                    .HasConstraintName("FK_ReportRequestDocument_DocumentFormatDIM");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ReportRequestDocumentModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ReportRequestDocument_Person1");

                entity.HasOne(d => d.Request).WithMany(p => p.ReportRequestDocuments)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK_ReportRequestDocument_ReportRequest");
            });

            modelBuilder.Entity<ReportRequestTypeDim>(entity =>
            {
                entity.HasKey(e => e.ReportRequestTypeId).HasFillFactor(80);

                entity.ToTable("ReportRequestTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CultureDescriptionXml).HasColumnName("CultureDescriptionXML");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.ImageIcon).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.Url).HasColumnName("URL");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ReportReuploadLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("ReportReuploadLog");

                entity.Property(e => e.ReasonText).HasMaxLength(500);
                entity.Property(e => e.ReuploadedTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReportSerializedDto>(entity =>
            {
                entity.HasKey(e => e.ReportId).HasName("PK_ReportDTO");

                entity.ToTable("ReportSerializedDTO");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.ReportDtostr)
                    .UseCollation("Arabic_CI_AS")
                    .HasColumnName("ReportDTOStr");
                entity.Property(e => e.ReportNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportShortCodesView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReportShortCodesView");

                entity.Property(e => e.ReportId).ValueGeneratedOnAdd();
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<ReportSourceTypeDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__ReportSo__3214EC07C7A5371D");

                entity.ToTable("ReportSourceTypeDim");

                entity.HasIndex(e => e.SourceTypeCode, "UQ__ReportSo__07C6FE967C6449EB").IsUnique();

                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.SourceTypeCode).HasMaxLength(255);
            });

            modelBuilder.Entity<ReportStatusDim>(entity =>
            {
                entity.HasKey(e => e.ReportStatusId)
                    .HasName("PK__ReportSt__9683C1065F461244")
                    .HasFillFactor(80);

                entity.ToTable("ReportStatusDIM");

                entity.HasIndex(e => e.IsDefaultForReportConstruction, "UNQ_ReportStatusDIM_IsDefaultForReportConstruction")
                    .IsUnique()
                    .HasFilter("([IsDefaultForReportConstruction]=(1))");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ActualReportStatus).WithMany(p => p.InverseActualReportStatus)
                    .HasForeignKey(d => d.ActualReportStatusId)
                    .HasConstraintName("ReportStatusDIM_ActualReportStatusId");

                entity.HasOne(d => d.MappedFinalStatus).WithMany(p => p.InverseMappedFinalStatus)
                    .HasForeignKey(d => d.MappedFinalStatusId)
                    .HasConstraintName("ReportStatusDIM_MappedFinalStatusId");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ReportStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ReportStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ReportStatusToReportTypeMap>(entity =>
            {
                entity.HasKey(e => new { e.ReportTypeId, e.ReportStatusId }).HasFillFactor(80);

                entity.ToTable("ReportStatusToReportTypeMap");

                entity.HasOne(d => d.ReportStatus).WithMany(p => p.ReportStatusToReportTypeMaps)
                    .HasForeignKey(d => d.ReportStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportStatusToReportTypeMap_ReportStatusDIM");

                entity.HasOne(d => d.ReportType).WithMany(p => p.ReportStatusToReportTypeMaps)
                    .HasForeignKey(d => d.ReportTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportStatusToReportTypeMap_ReportTypeDIM");
            });

            modelBuilder.Entity<ReportStatusToReportTypeMapTemp>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("ReportStatusToReportTypeMap_Temp");
            });

            modelBuilder.Entity<ReportTypeDim>(entity =>
            {
                entity.HasKey(e => e.ReportTypeId)
                    .HasName("PK__ReportTy__78CF8CE357346E88")
                    .HasFillFactor(80);

                entity.ToTable("ReportTypeDIM");

                entity.HasIndex(e => e.IsDefaultForReportConstruction, "UNQ_ReportTypeDIM_IsDefaultForReportConstruction")
                    .IsUnique()
                    .HasFilter("([IsDefaultForReportConstruction]=(1))");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ReportTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ReportTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ReportVehicleDataView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReportVehicleDataView");

                entity.Property(e => e.DriverDataLicenseCategoryId).HasColumnName("DriverData_LicenseCategoryId");
                entity.Property(e => e.DriverDataLicenseNumber)
                    .HasMaxLength(3000)
                    .HasColumnName("DriverData_LicenseNumber");
                entity.Property(e => e.DriverDataTrafficCode)
                    .HasMaxLength(3000)
                    .HasColumnName("DriverData_TrafficCode");
                entity.Property(e => e.DriverName)
                    .HasMaxLength(3000)
                    .HasColumnName("Driver_Name");
                entity.Property(e => e.OwnerName)
                    .HasMaxLength(3000)
                    .HasColumnName("Owner_Name");
                entity.Property(e => e.OwnerTrafficCode)
                    .HasMaxLength(3000)
                    .HasColumnName("Owner_TrafficCode");
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<ReportVehicleDatawithCode>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReportVehicleDatawithCode");

                entity.Property(e => e.Id).HasColumnName("id");
                entity.Property(e => e.InsuranceCompany).HasMaxLength(100);
                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.Reportcode)
                    .HasMaxLength(50)
                    .HasColumnName("reportcode");
                entity.Property(e => e.Role).HasMaxLength(5);
            });

            modelBuilder.Entity<ReportVehicleDatum>(entity =>
            {
                entity.HasKey(e => e.ReportVehicleDataId)
                    .HasName("PK__ReportVe__E23E129EFD47845D")
                    .HasFillFactor(80);

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportVehicleData)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportVehicleData_Person");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportVehicleData)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_ReportVehicleData_Report");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.ReportVehicleData)
                    .HasForeignKey(d => d.VehicleDataId)
                    .HasConstraintName("FK_ReportVehicleData_VehicleData");
            });

            modelBuilder.Entity<ReportWithPublicDamagedToOpenReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ReportWithPublicDamagedToOpenReport");
            });

            modelBuilder.Entity<ReportWittness>(entity =>
            {
                entity.HasKey(e => e.ReportWittnessId)
                    .HasName("PK__ReportWi__6A683E2E13F11963")
                    .HasFillFactor(80);

                entity.ToTable("ReportWittness");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ReportWittnesses)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ReportWittness_Person");

                entity.HasOne(d => d.Report).WithMany(p => p.ReportWittnesses)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_ReportWittness_Report");

                entity.HasOne(d => d.Wittness).WithMany(p => p.ReportWittnesses)
                    .HasForeignKey(d => d.WittnessId)
                    .HasConstraintName("FK_ReportWittness_Wittness");
            });

            modelBuilder.Entity<ReportsReuploadLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_ReuploadReportStatusLog");

                entity.ToTable("ReportsReuploadLog");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.ReportsReuploadReason).WithMany(p => p.ReportsReuploadLogs)
                    .HasForeignKey(d => d.ReportsReuploadReasonId)
                    .HasConstraintName("FK_ReportsReuploadLog_ReportsReuploadReasonsDim");
            });

            modelBuilder.Entity<ReportsReuploadReasonsDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_ReuploadToPoliceReasonsDim");

                entity.ToTable("ReportsReuploadReasonsDim");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Request>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__Request__45F4A791FCD7A66E")
                    .HasFillFactor(80);

                entity.ToTable("Request");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.ClassificationId).HasDefaultValue(1);
                entity.Property(e => e.EGuardianReferenceNumber)
                    .HasMaxLength(50)
                    .HasColumnName("eGuardianReferenceNumber");
                entity.Property(e => e.InputMethodId).HasDefaultValue(1);
                entity.Property(e => e.PolicyId).HasDefaultValue(1);
                entity.Property(e => e.PriorityHighLowId).HasDefaultValue(1);
                entity.Property(e => e.RequestCategoryId).HasDefaultValue(1);
                entity.Property(e => e.RequestDateTime).HasColumnType("datetime");
                entity.Property(e => e.TrackingNumber).HasMaxLength(20);
                entity.Property(e => e.VideoUri)
                    .HasMaxLength(250)
                    .HasColumnName("VideoURI");

                entity.HasOne(d => d.Activity).WithOne(p => p.Request)
                    .HasForeignKey<Request>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Request_Activity");

                entity.HasOne(d => d.Classification).WithMany(p => p.Requests)
                    .HasForeignKey(d => d.ClassificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Request_ClassificationDIM");

                entity.HasOne(d => d.InputMethod).WithMany(p => p.Requests)
                    .HasForeignKey(d => d.InputMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Request_RequestInputMethodDIM");

                entity.HasOne(d => d.Policy).WithMany(p => p.Requests)
                    .HasForeignKey(d => d.PolicyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Request_PolicyDIM");

                entity.HasOne(d => d.PriorityHighLow).WithMany(p => p.Requests)
                    .HasForeignKey(d => d.PriorityHighLowId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.RequestCategory).WithMany(p => p.Requests)
                    .HasForeignKey(d => d.RequestCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Request_RequestCategoryDIM");
            });

            modelBuilder.Entity<RequestCategoryDim>(entity =>
            {
                entity.HasKey(e => e.RequestCategoryId)
                    .HasName("PK__RequestC__901C074E97F78A7E")
                    .HasFillFactor(80);

                entity.ToTable("RequestCategoryDIM");

                entity.Property(e => e.CategorySubCode).HasMaxLength(20);
                entity.Property(e => e.CategorySubDescription).HasMaxLength(100);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RequestCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RequestCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<RequestCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestCategoryDIMCodeView");

                entity.Property(e => e.RequestCategoryCategorySubDescription).HasMaxLength(100);
                entity.Property(e => e.RequestCategoryCode).HasMaxLength(20);
                entity.Property(e => e.RequestCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<RequestCheck>(entity =>
            {
                entity.HasKey(e => e.RequestCheckId)
                    .HasName("PK__RequestC__844BB79C7E9F8F2D")
                    .HasFillFactor(80);

                entity.ToTable("RequestCheck");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.RequestCheckCategoryId).HasDefaultValue(1);
                entity.Property(e => e.RequestCheckGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Activity).WithMany(p => p.RequestChecks)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestCheck_Activity");

                entity.HasOne(d => d.RequestCheckCategory).WithMany(p => p.RequestChecks)
                    .HasForeignKey(d => d.RequestCheckCategoryId)
                    .HasConstraintName("FK_RequestCheck_RequestCheckCategoryDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RequestChecks)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RequestCheck_RowStatusDIM");
            });

            modelBuilder.Entity<RequestCheckCategoryDim>(entity =>
            {
                entity.HasKey(e => e.RequestCheckCategoryId)
                    .HasName("PK__RequestC__F6EEC619A619FF1A")
                    .HasFillFactor(80);

                entity.ToTable("RequestCheckCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RequestCheckCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RequestCheckCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<RequestCheckCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestCheckCategoryDIMCodeView");

                entity.Property(e => e.RequestCheckCategoryCode).HasMaxLength(20);
                entity.Property(e => e.RequestCheckCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<RequestCheckGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestCheckGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RequestCheckCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RequestCheckView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestCheckView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RequestCheckCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestCheckCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestCheckId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RequestInputMethodDim>(entity =>
            {
                entity.HasKey(e => e.InputMethodId)
                    .HasName("PK__RequestI__CB2EBA8EE5C5F451")
                    .HasFillFactor(80);

                entity.ToTable("RequestInputMethodDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RequestInputMethodDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RequestInputMethodDIM_RowStatusDIM");
            });

            modelBuilder.Entity<RequestInputMethodDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestInputMethodDIMCodeView");

                entity.Property(e => e.RequestInputMethodCode).HasMaxLength(20);
                entity.Property(e => e.RequestInputMethodDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<RequestOffense>(entity =>
            {
                entity.HasKey(e => e.RequestOffenseId)
                    .HasName("PK__RequestO__6CC9552F5EDD9A23")
                    .HasFillFactor(80);

                entity.ToTable("RequestOffense");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OffenseCodeId).HasDefaultValue(1);
                entity.Property(e => e.RequestOffenseCategoryId).HasDefaultValue(1);
                entity.Property(e => e.RequestOffenseGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Activity).WithMany(p => p.RequestOffenses)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestOffense_Activity");

                entity.HasOne(d => d.OffenseCode).WithMany(p => p.RequestOffenses)
                    .HasForeignKey(d => d.OffenseCodeId)
                    .HasConstraintName("FK_RequestOffense_OffenseCodeDIM");

                entity.HasOne(d => d.RequestOffenseCategory).WithMany(p => p.RequestOffenses)
                    .HasForeignKey(d => d.RequestOffenseCategoryId)
                    .HasConstraintName("FK_RequestOffense_RequestOffenseCategoryDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RequestOffenses)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RequestOffense_RowStatusDIM");
            });

            modelBuilder.Entity<RequestOffenseCategoryDim>(entity =>
            {
                entity.HasKey(e => e.RequestOffenseCategoryId)
                    .HasName("PK__RequestO__CBE640FBE496D59E")
                    .HasFillFactor(80);

                entity.ToTable("RequestOffenseCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RequestOffenseCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RequestOffenseCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<RequestOffenseCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestOffenseCategoryDIMCodeView");

                entity.Property(e => e.RequestOffenseCategoryCode).HasMaxLength(20);
                entity.Property(e => e.RequestOffenseCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<RequestOffenseGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestOffenseGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCodeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestOffenseCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RequestOffenseView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestOffenseView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCodeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OffenseCodeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestOffenseCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestOffenseCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestOffenseId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RequestService>(entity =>
            {
                entity.HasKey(e => e.RequestServiceId)
                    .HasName("PK__RequestS__0936E17317A421D2")
                    .HasFillFactor(80);

                entity.ToTable("RequestService");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.RequestServiceCategoryId).HasDefaultValue(1);
                entity.Property(e => e.RequestServiceGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Activity).WithMany(p => p.RequestServices)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestService_Activity");

                entity.HasOne(d => d.RequestServiceCategory).WithMany(p => p.RequestServices)
                    .HasForeignKey(d => d.RequestServiceCategoryId)
                    .HasConstraintName("FK_RequestService_RequestServiceCategory");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RequestServices)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RequestService_RowStatusDIM");
            });

            modelBuilder.Entity<RequestServiceCategoryDim>(entity =>
            {
                entity.HasKey(e => e.RequestServiceCategoryId)
                    .HasName("PK__RequestS__928552889E370C94")
                    .HasFillFactor(80);

                entity.ToTable("RequestServiceCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RequestServiceCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RequestServiceCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<RequestServiceCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestServiceCategoryDIMCodeView");

                entity.Property(e => e.RequestServiceCategoryCode).HasMaxLength(20);
                entity.Property(e => e.RequestServiceCategoryDescription).HasMaxLength(100);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<RequestServiceGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestServiceGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RequestServiceCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RequestServiceTypeDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_RequestServiceType");

                entity.ToTable("RequestServiceTypeDim");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.DeletedAt).HasColumnType("datetime");
            });

            modelBuilder.Entity<RequestServiceView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestServiceView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RequestServiceCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestServiceCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestServiceId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RequestStepDim>(entity =>
            {
                entity.HasKey(e => e.RequestStepId);

                entity.ToTable("RequestStepDim");

                entity.Property(e => e.RequestStepId)
                    .ValueGeneratedNever()
                    .HasColumnName("RequestStepID");
                entity.Property(e => e.DescriptionAr).HasMaxLength(100);
                entity.Property(e => e.DescriptionEn).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<RequestViolation>(entity =>
            {
                entity.HasKey(e => e.RequestViolationId)
                    .HasName("PK__RequestV__8D5BA4901FAE6843")
                    .HasFillFactor(80);

                entity.ToTable("RequestViolation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.RequestViolationCategoryId).HasDefaultValue(1);
                entity.Property(e => e.RequestViolationGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Activity).WithMany(p => p.RequestViolations)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RequestViolation_Activity");

                entity.HasOne(d => d.RequestViolationCategory).WithMany(p => p.RequestViolations)
                    .HasForeignKey(d => d.RequestViolationCategoryId)
                    .HasConstraintName("FK_RequestViolation_RequestViolationCategoryDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RequestViolations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RequestViolation_RowStatusDIM");
            });

            modelBuilder.Entity<RequestViolationCategoryDim>(entity =>
            {
                entity.HasKey(e => e.RequestViolationCategoryId)
                    .HasName("PK__RequestV__F01B314AD9FD7650")
                    .HasFillFactor(80);

                entity.ToTable("RequestViolationCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RequestViolationCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RequestViolationCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<RequestViolationCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestViolationCategoryDIMCodeView");

                entity.Property(e => e.RequestViolationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.RequestViolationCategoryDescription).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<RequestViolationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestViolationGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RequestViolationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RequestViolationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RequestViolationView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RequestViolationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestViolationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestViolationId).ValueGeneratedOnAdd();
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ResponseReConstructionPerHour>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ResponseReConstructionPerHour");
            });

            modelBuilder.Entity<ResponseReConstructionPerMonth>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ResponseReConstructionPerMonth");

                entity.Property(e => e.Month)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ResponseTime>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ResponseTime");

                entity.Property(e => e.Average).HasColumnType("decimal(16, 2)");
                entity.Property(e => e.AverageResponseWithin15).HasColumnType("decimal(16, 2)");
            });

            modelBuilder.Entity<ResponseTimeByAreasView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ResponseTimeByAreasView");

                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.AverageResponseTime).HasPrecision(0);
            });

            modelBuilder.Entity<RetrySm>(entity =>
            {
                entity.ToTable("RetrySMS");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.DateCreated).HasColumnType("datetime");
                entity.Property(e => e.LastRetryDate).HasColumnType("datetime");
                entity.Property(e => e.ReceiverMobileNumber).HasMaxLength(50);
                entity.Property(e => e.SenderName).HasMaxLength(50);
                entity.Property(e => e.SentDate).HasColumnType("datetime");
                entity.Property(e => e.Smstext).HasColumnName("SMSText");
            });

            modelBuilder.Entity<ReuploadReportsReasonsDim>(entity =>
            {
                entity.HasKey(e => e.ReasonId);

                entity.ToTable("ReuploadReportsReasonsDim");

                entity.Property(e => e.ReasonDescription).HasMaxLength(500);
                entity.Property(e => e.ReasonValue).HasMaxLength(500);
            });

            modelBuilder.Entity<RevampDatum>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccidentDateTime).HasMaxLength(255);
                entity.Property(e => e.AccidentEmirate).HasMaxLength(255);
                entity.Property(e => e.AdpId)
                    .HasMaxLength(255)
                    .HasColumnName("ADP_ID");
                entity.Property(e => e.SaaedId)
                    .HasMaxLength(255)
                    .HasColumnName("SAAED_ID");
                entity.Property(e => e.Status).HasMaxLength(255);
                entity.Property(e => e.TicketStatusDateTime).HasMaxLength(255);
                entity.Property(e => e.UploadDate).HasMaxLength(255);
            });

            modelBuilder.Entity<RiskScoreAxa>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("RiskScoreAXA");

                entity.Property(e => e.Chass)
                    .HasMaxLength(255)
                    .HasColumnName("Chass,");
                entity.Property(e => e.ClaimNo).HasColumnName("Claim No");
                entity.Property(e => e.FraudScoure).HasColumnName("Fraud Scoure");
                entity.Property(e => e.StatusInMotori)
                    .HasMaxLength(255)
                    .HasColumnName("Status in Motori");
                entity.Property(e => e.Tcn).HasColumnName("TCN");
            });

            modelBuilder.Entity<RoadAssistActivityFlowMapping>(entity =>
            {
                entity.HasKey(e => e.ActivityFlowId).HasName("PK__RoadAssi__F22287492D766C00");

                entity.ToTable("RoadAssistActivityFlowMapping");

                entity.Property(e => e.ActivityFlowId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistActivityFlowMappingCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .HasConstraintName("FK__RoadAssis__Creat__620CBAAB");

                entity.HasOne(d => d.CurrentStatus).WithMany(p => p.RoadAssistActivityFlowMappings)
                    .HasForeignKey(d => d.CurrentStatusId)
                    .HasConstraintName("FK_RoadAssis_CurrentStatus_");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistActivityFlowMappingLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK_RoadAss_ModofiedUser");

                entity.HasOne(d => d.NextActivity).WithMany(p => p.RoadAssistActivityFlowMappings)
                    .HasForeignKey(d => d.NextActivityId)
                    .HasConstraintName("FK__RoadAssis__NextA__6300DEE4");
            });

            modelBuilder.Entity<RoadAssistAppConfig>(entity =>
            {
                entity.HasKey(e => e.AppConfigId).HasName("PK__RoadAssi__3BA19DFAC8CBBF8D");

                entity.ToTable("RoadAssistAppConfig");

                entity.Property(e => e.AppConfigId).ValueGeneratedNever();
            });

            modelBuilder.Entity<RoadAssistDayPeriod>(entity =>
            {
                entity.HasKey(e => e.PeriodId).HasName("PK__RoadAssi__E521BB16918D6ADE");

                entity.Property(e => e.PeriodId).ValueGeneratedNever();
                entity.Property(e => e.PeriodNameAr)
                    .HasMaxLength(100)
                    .HasColumnName("PeriodNameAR");
                entity.Property(e => e.PeriodNameEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PeriodNameEN");
            });

            modelBuilder.Entity<RoadAssistFuelFeesPerUnit>(entity =>
            {
                entity.HasKey(e => e.FuelFeesPerUnitId).HasName("PK__RoadAssi__EA95806A405FA4E4");

                entity.ToTable("RoadAssistFuelFeesPerUnit");

                entity.Property(e => e.FuelFeesPerUnitId).ValueGeneratedNever();
                entity.Property(e => e.PricePerUnit).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistFuelFeesPerUnitCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__484B51FA");

                entity.HasOne(d => d.FuelPackage).WithMany(p => p.RoadAssistFuelFeesPerUnits)
                    .HasForeignKey(d => d.FuelPackageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__FuelP__62FF4836");

                entity.HasOne(d => d.FuelType).WithMany(p => p.RoadAssistFuelFeesPerUnits)
                    .HasForeignKey(d => d.FuelTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__FuelT__4B27BEA5");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistFuelFeesPerUnitLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__493F7633");

                entity.HasOne(d => d.ProviderBranch).WithMany(p => p.RoadAssistFuelFeesPerUnits)
                    .HasForeignKey(d => d.ProviderBranchId)
                    .HasConstraintName("FK_FuelFeesPerUnit_ProviderBranchId");

                entity.HasOne(d => d.Provider).WithMany(p => p.RoadAssistFuelFeesPerUnits)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("FK__RoadAssis__Provi__4A339A6C");
            });

            modelBuilder.Entity<RoadAssistFuelPackageDim>(entity =>
            {
                entity.HasKey(e => e.FuelPackageId);

                entity.ToTable("RoadAssistFuelPackageDIM");

                entity.Property(e => e.FuelPackageId).ValueGeneratedNever();
                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FuelPackageNameAr)
                    .HasMaxLength(100)
                    .HasColumnName("FuelPackageNameAR");
                entity.Property(e => e.FuelPackageNameEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FuelPackageNameEN");
            });

            modelBuilder.Entity<RoadAssistFuelTypeDim>(entity =>
            {
                entity.HasKey(e => e.FuelTypeId).HasName("PK__RoadAssi__048BEE37B9113E28");

                entity.ToTable("RoadAssistFuelTypeDIM");

                entity.Property(e => e.FuelTypeId).ValueGeneratedNever();
                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FuelTypeNameAr)
                    .HasMaxLength(100)
                    .HasColumnName("FuelTypeNameAR");
                entity.Property(e => e.FuelTypeNameEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FuelTypeNameEN");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistFuelTypeDimCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__6B9624E5");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistFuelTypeDimLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__6C8A491E");
            });

            modelBuilder.Entity<RoadAssistGeneralInfo>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__RoadAssi__3214EC079C4D9175");

                entity.ToTable("RoadAssistGeneralInfo");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.DescriptionAr).HasColumnName("DescriptionAR");
                entity.Property(e => e.DescriptionEn)
                    .IsUnicode(false)
                    .HasColumnName("DescriptionEN");
                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ImageURL");
                entity.Property(e => e.ProcessTimeTextAr)
                    .HasMaxLength(1000)
                    .HasColumnName("ProcessTimeTextAR");
                entity.Property(e => e.ProcessTimeTextEn)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ProcessTimeTextEN");
                entity.Property(e => e.RequiredDocumentsTextAr)
                    .HasMaxLength(1000)
                    .HasColumnName("RequiredDocumentsTextAR");
                entity.Property(e => e.RequiredDocumentsTextEn)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("RequiredDocumentsTextEN");
                entity.Property(e => e.ServiceFeesTextAr)
                    .HasMaxLength(500)
                    .HasColumnName("ServiceFeesTextAR");
                entity.Property(e => e.ServiceFeesTextEn)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ServiceFeesTextEN");
                entity.Property(e => e.TitleAr)
                    .HasMaxLength(250)
                    .HasColumnName("TitleAR");
                entity.Property(e => e.TitleEn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TitleEN");
            });

            modelBuilder.Entity<RoadAssistIntegrationTokenLog>(entity =>
            {
                entity.ToTable("RoadAssistIntegrationTokenLog");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.User).WithMany(p => p.RoadAssistIntegrationTokenLogs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoadAssistIntegrationTokenLog_RoadAssistUser");

                entity.HasOne(d => d.UserType).WithMany(p => p.RoadAssistIntegrationTokenLogs)
                    .HasForeignKey(d => d.UserTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoadAssistIntegrationTokenLog_RoadAssistUserType");
            });

            modelBuilder.Entity<RoadAssistNotificationMessageConfig>(entity =>
            {
                entity.HasKey(e => e.NotificationId).HasName("PK__RoadAssi__20CF2E12ACB57E3D");

                entity.ToTable("RoadAssistNotificationMessageConfig");

                entity.Property(e => e.NotificationId).ValueGeneratedNever();
                entity.Property(e => e.EmailBodyTemplateAr).HasColumnName("EmailBodyTemplateAR");
                entity.Property(e => e.EmailBodyTemplateEn)
                    .IsUnicode(false)
                    .HasColumnName("EmailBodyTemplateEN");
                entity.Property(e => e.EmailSubjectAr).HasMaxLength(1000);
                entity.Property(e => e.EmailSubjectEn)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("EmailSubjectEN");
                entity.Property(e => e.NotificationCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);
                entity.Property(e => e.Smsenabled).HasColumnName("SMSEnabled");
                entity.Property(e => e.SmsmessageCode).HasColumnName("SMSMessageCode");
                entity.Property(e => e.WhatsAppMessageCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistNotificationMessageConfigCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__6F66B5C9");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistNotificationMessageConfigLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__705ADA02");
            });

            modelBuilder.Entity<RoadAssistOtp>(entity =>
            {
                entity.ToTable("RoadAssistOTP");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.Otp)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("OTP");
            });

            modelBuilder.Entity<RoadAssistPaymentFee>(entity =>
            {
                entity.HasKey(e => e.PaymentFeesId).HasName("PK__RoadAssi__86C333A079FDD213");

                entity.Property(e => e.PaymentFeesId).ValueGeneratedNever();
                entity.Property(e => e.PaymentFeesPercentage).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistPaymentFeeCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .HasConstraintName("FK__RoadAssis__Creat__7D7FCAF6");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistPaymentFeeLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__7E73EF2F");
            });

            modelBuilder.Entity<RoadAssistProvider>(entity =>
            {
                entity.HasKey(e => e.ProviderId).HasName("PK__RoadAssi__B54C687DECDDC25E");

                entity.ToTable("RoadAssistProvider");

                entity.Property(e => e.ProviderId).ValueGeneratedNever();
                entity.Property(e => e.AddressAr)
                    .HasMaxLength(500)
                    .HasColumnName("AddressAR");
                entity.Property(e => e.AddressEn)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AddressEN");
                entity.Property(e => e.BeneficiaryCode).HasMaxLength(50);
                entity.Property(e => e.BeneficiaryVatCode).HasMaxLength(50);
                entity.Property(e => e.EmailAddress).HasMaxLength(250);
                entity.Property(e => e.LocationLat).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.LocationLong).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.ProviderNameAr)
                    .HasMaxLength(250)
                    .HasColumnName("ProviderNameAR");
                entity.Property(e => e.ProviderNameEn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ProviderNameEN");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistProviderCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__714EFE3B");

                entity.HasOne(d => d.Emirate).WithMany(p => p.RoadAssistProviders)
                    .HasForeignKey(d => d.EmirateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Emira__72432274");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistProviderLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__733746AD");
            });

            modelBuilder.Entity<RoadAssistProviderBranch>(entity =>
            {
                entity.HasKey(e => e.BranchId);

                entity.Property(e => e.BranchId).ValueGeneratedNever();
                entity.Property(e => e.AddressAr)
                    .HasMaxLength(500)
                    .HasColumnName("AddressAR");
                entity.Property(e => e.AddressEn)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AddressEN");
                entity.Property(e => e.BeneficiaryCode).HasMaxLength(50);
                entity.Property(e => e.BeneficiaryVatCode).HasMaxLength(50);
                entity.Property(e => e.BranchNameAr)
                    .HasMaxLength(500)
                    .HasColumnName("BranchNameAR");
                entity.Property(e => e.BranchNameEn)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("BranchNameEN");
                entity.Property(e => e.EmailAddress).HasMaxLength(250);
                entity.Property(e => e.LocationLat).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.LocationLong).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistProviderBranchCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoadAssistProviderBranches_RoadAssistUser");

                entity.HasOne(d => d.Emirate).WithMany(p => p.RoadAssistProviderBranches)
                    .HasForeignKey(d => d.EmirateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoadAssistProviderBranches_EmirateDIM");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistProviderBranchLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK_RoadAssistProviderBranches_RoadAssistUser1");

                entity.HasOne(d => d.Provider).WithMany(p => p.RoadAssistProviderBranches)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoadAssistProviderBranches_RoadAssistProvider");
            });

            modelBuilder.Entity<RoadAssistProviderPerson>(entity =>
            {
                entity.HasKey(e => new { e.ProviderId, e.PersonId });

                entity.HasOne(d => d.Provider).WithMany(p => p.RoadAssistProviderPeople)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoadAssistProviderPersons_RoadAssistProvider");
            });

            modelBuilder.Entity<RoadAssistProviderService>(entity =>
            {
                entity.HasKey(e => e.ProviderServiceId).HasName("PK__RoadAssi__BC3F6609E032824D");

                entity.ToTable("RoadAssistProviderService");

                entity.Property(e => e.ProviderServiceId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistProviderServiceCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__751F8F1F");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistProviderServiceLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__7613B358");

                entity.HasOne(d => d.ProviderBranch).WithMany(p => p.RoadAssistProviderServices)
                    .HasForeignKey(d => d.ProviderBranchId)
                    .HasConstraintName("FK__RoadAssis__Provi__12BBAA55");

                entity.HasOne(d => d.Provider).WithMany(p => p.RoadAssistProviderServices)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("FK__RoadAssis__Provi__7707D791");

                entity.HasOne(d => d.Service).WithMany(p => p.RoadAssistProviderServices)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Servi__77FBFBCA");

                entity.HasOne(d => d.ServiceStatus).WithMany(p => p.RoadAssistProviderServices)
                    .HasForeignKey(d => d.ServiceStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Servi__78F02003");
            });

            modelBuilder.Entity<RoadAssistProviderVehicle>(entity =>
            {
                entity.HasKey(e => e.ProviderVehicleId);

                entity.ToTable("RoadAssistProviderVehicle");

                entity.Property(e => e.ProviderVehicleId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistProviderVehicleCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoadAssistProviderVehicle_RoadAssistUser");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistProviderVehicleLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK_RoadAssistProviderVehicle_RoadAssistUser1");

                entity.HasOne(d => d.ProviderBranch).WithMany(p => p.RoadAssistProviderVehicles)
                    .HasForeignKey(d => d.ProviderBranchId)
                    .HasConstraintName("FK__RoadAssis__Provi__11C7861C");

                entity.HasOne(d => d.Vehicle).WithMany(p => p.RoadAssistProviderVehicles)
                    .HasForeignKey(d => d.VehicleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoadAssistProviderVehicle_RoadAssistVehicle");
            });

            modelBuilder.Entity<RoadAssistRatingNotificationLog>(entity =>
            {
                entity.HasKey(e => e.NotificationLogId).HasName("PK__RoadAssi__DD3494124A7318C6");

                entity.ToTable("RoadAssistRatingNotificationLog");

                entity.Property(e => e.NotificationLogId).ValueGeneratedNever();
                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Request).WithMany(p => p.RoadAssistRatingNotificationLogs)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Reque__5EC639AC");
            });

            modelBuilder.Entity<RoadAssistRequest>(entity =>
            {
                entity.HasKey(e => e.RequestId).HasName("PK__RoadAssi__33A8517A2B6A0059");

                entity.ToTable("RoadAssistRequest");

                entity.Property(e => e.RequestId).ValueGeneratedNever();
                entity.Property(e => e.AdditionalNotes).HasMaxLength(150);
                entity.Property(e => e.ApplicantMobileNumber).HasMaxLength(20);
                entity.Property(e => e.ApplicantProviderRateComment).HasMaxLength(1000);
                entity.Property(e => e.ApplicantServiceRateComment).HasMaxLength(1000);
                entity.Property(e => e.AppliedProviderShareCalculatedValue).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.AppliedSaaedShareCalculatedValue).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.ArrivalEtabaseDateTime).HasColumnName("ArrivalETAbaseDateTime");
                entity.Property(e => e.DriverCurrentLat).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.DriverCurrentLong).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationsDistanceKm)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("LocationsDistanceKM");
                entity.Property(e => e.PaymentRecieptDocUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PaymentRecieptDocURL");
                entity.Property(e => e.RequestNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestReferenceId).ValueGeneratedOnAdd();
                entity.Property(e => e.RequestTotalFees).HasColumnType("decimal(18, 2)");
                entity.Property(e => e.RequesterCurrentLat).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.RequesterCurrentLong).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.ServiceDeliveryDistinationLat).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.ServiceDeliveryDistinationLong).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.ServiceDeliveryDistinationName).HasMaxLength(500);
                entity.Property(e => e.ServiceDeliveryLocationLat).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.ServiceDeliveryLocationLong).HasColumnType("decimal(12, 9)");
                entity.Property(e => e.ServiceDeliveryLocationName).HasMaxLength(500);
                entity.Property(e => e.UnreachableReasonDescription).HasMaxLength(4000);
                entity.Property(e => e.VehicleCondition).HasMaxLength(500);
                entity.Property(e => e.Version)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.AppliedSaaedShareValue).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.AppliedSaaedShareValueId)
                    .HasConstraintName("FK__RoadAssis__Appli__02448013");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistRequestCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__1C6CCFBC");

                entity.HasOne(d => d.FuelFeesPerUnit).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.FuelFeesPerUnitId)
                    .HasConstraintName("FK_RoadAssistRequest_RoadAssistFuelFeesPerUnit");

                entity.HasOne(d => d.FuelPackage).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.FuelPackageId)
                    .HasConstraintName("FK__RoadAssis__FuelP__63F36C6F");

                entity.HasOne(d => d.FuelType).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.FuelTypeId)
                    .HasConstraintName("FK__RoadAssis__FuelT__64E790A8");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistRequestLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__1D60F3F5");

                entity.HasOne(d => d.ProviderBranch).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.ProviderBranchId)
                    .HasConstraintName("FK__RoadAssis__Provi__13AFCE8E");

                entity.HasOne(d => d.Provider).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("FK__RoadAssis__Provi__2225A912");

                entity.HasOne(d => d.ProviderVehicle).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.ProviderVehicleId)
                    .HasConstraintName("FK_RoadAssistRequest_RoadAssistProviderVehicle");

                entity.HasOne(d => d.RequestStatus).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.RequestStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoadAssistRequest_RoadAssistRequestStatusDIM");

                entity.HasOne(d => d.Rider).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.RiderId)
                    .HasConstraintName("FK__RoadAssis__Rider__2319CD4B");

                entity.HasOne(d => d.RoadAssistRequestRejectionReason).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.RoadAssistRequestRejectionReasonId)
                    .HasConstraintName("FK__RoadAssis__RoadA__24980169");

                entity.HasOne(d => d.ServiceDeliveryDistinationEmirate).WithMany(p => p.RoadAssistRequestServiceDeliveryDistinationEmirates)
                    .HasForeignKey(d => d.ServiceDeliveryDistinationEmirateId)
                    .HasConstraintName("FK__RoadAssis__Servi__213184D9");

                entity.HasOne(d => d.ServiceDeliveryLocationEmirate).WithMany(p => p.RoadAssistRequestServiceDeliveryLocationEmirates)
                    .HasForeignKey(d => d.ServiceDeliveryLocationEmirateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Servi__203D60A0");

                entity.HasOne(d => d.Service).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Servi__1F493C67");

                entity.HasOne(d => d.ServicePriceByDistance).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.ServicePriceByDistanceId)
                    .HasConstraintName("FK_RoadAssistRequest_RoadAssistServicePriceByDistance");

                entity.HasOne(d => d.ServicePriceByEmirate).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.ServicePriceByEmirateId)
                    .HasConstraintName("FK_RoadAssistRequest_RoadAssistServicePriceByEmirate");

                entity.HasOne(d => d.UserVehicle).WithMany(p => p.RoadAssistRequests)
                    .HasForeignKey(d => d.UserVehicleId)
                    .HasConstraintName("FK__RoadAssis__UserV__1E55182E");
            });

            modelBuilder.Entity<RoadAssistRequestActivityDim>(entity =>
            {
                entity.HasKey(e => e.RequestActivityId).HasName("PK__RoadAssi__21B89D16BBBFA72A");

                entity.ToTable("RoadAssistRequestActivityDIM");

                entity.Property(e => e.RequestActivityId).ValueGeneratedNever();
                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestActivityNameAr)
                    .HasMaxLength(100)
                    .HasColumnName("RequestActivityNameAR");
                entity.Property(e => e.RequestActivityNameEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RequestActivityNameEN");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistRequestActivityDimCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__0CF718B0");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistRequestActivityDimLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__0DEB3CE9");
            });

            modelBuilder.Entity<RoadAssistRequestComment>(entity =>
            {
                entity.HasKey(e => e.CommentId).HasName("PK__RoadAssi__C3B4DFCA642C702F");

                entity.ToTable("RoadAssistRequestComment");

                entity.Property(e => e.CommentId).ValueGeneratedNever();
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.LastModificationDate).HasColumnType("datetime");
                entity.Property(e => e.Text).HasMaxLength(500);

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistRequestCommentCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__0EDF6122");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistRequestCommentLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__0FD3855B");

                entity.HasOne(d => d.Request).WithMany(p => p.RoadAssistRequestComments)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Reque__1EDF2813");
            });

            modelBuilder.Entity<RoadAssistRequestFee>(entity =>
            {
                entity.HasKey(e => e.RequestFeesId).HasName("PK__RoadAssi__F6C6088CAD72629C");

                entity.Property(e => e.RequestFeesId).ValueGeneratedNever();
                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistRequestFeeCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__11BBCDCD");

                entity.HasOne(d => d.FeesType).WithMany(p => p.RoadAssistRequestFees)
                    .HasForeignKey(d => d.FeesTypeId)
                    .HasConstraintName("FK__RoadAssis__FeesT__12AFF206");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistRequestFeeLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__13A4163F");

                entity.HasOne(d => d.Request).WithMany(p => p.RoadAssistRequestFees)
                    .HasForeignKey(d => d.RequestId)
                    .HasConstraintName("FK__RoadAssis__Reque__2F7FA430");
            });

            modelBuilder.Entity<RoadAssistRequestFeesTypeDim>(entity =>
            {
                entity.HasKey(e => e.FeesTypeId).HasName("PK__RoadAssi__BFB1530F8B9890BF");

                entity.ToTable("RoadAssistRequestFeesTypeDIM");

                entity.Property(e => e.FeesTypeId).ValueGeneratedNever();
                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.FeesTypeNameAr)
                    .HasMaxLength(100)
                    .HasColumnName("FeesTypeNameAR");
                entity.Property(e => e.FeesTypeNameEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FeesTypeNameEN");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistRequestFeesTypeDimCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__158C5EB1");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistRequestFeesTypeDimLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__168082EA");
            });

            modelBuilder.Entity<RoadAssistRequestRejectionReasonDim>(entity =>
            {
                entity.HasKey(e => e.RejectionReasonId).HasName("PK__RoadAssi__47639770224E769D");

                entity.ToTable("RoadAssistRequestRejectionReasonDIM");

                entity.Property(e => e.RejectionReasonId).ValueGeneratedNever();
                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.LastModificationDate).HasColumnType("datetime");
                entity.Property(e => e.RejectionReasonNameAr)
                    .HasMaxLength(100)
                    .HasColumnName("RejectionReasonNameAR");
                entity.Property(e => e.RejectionReasonNameEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RejectionReasonNameEN");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistRequestRejectionReasonDimCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__1774A723");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistRequestRejectionReasonDimLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__1868CB5C");
            });

            modelBuilder.Entity<RoadAssistRequestStatusDim>(entity =>
            {
                entity.HasKey(e => e.RequestStatusId).HasName("PK__RoadAssi__7094B79BD8E9FB4C");

                entity.ToTable("RoadAssistRequestStatusDIM");

                entity.Property(e => e.RequestStatusId).ValueGeneratedNever();
                entity.Property(e => e.ActionRequestStatusNameAr)
                    .HasMaxLength(100)
                    .HasColumnName("ActionRequestStatusNameAR");
                entity.Property(e => e.ActionRequestStatusNameEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ActionRequestStatusNameEN");
                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RequestStatusColor).HasMaxLength(50);
                entity.Property(e => e.RequestStatusNameAr)
                    .HasMaxLength(100)
                    .HasColumnName("RequestStatusNameAR");
                entity.Property(e => e.RequestStatusNameEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RequestStatusNameEN");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistRequestStatusDimCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__1C395C40");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistRequestStatusDimLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__1D2D8079");
            });

            modelBuilder.Entity<RoadAssistRequestStatusLog>(entity =>
            {
                entity.HasKey(e => e.RequestStatusLogId).HasName("PK__RoadAssi__21B89D16166CF6A7");

                entity.ToTable("RoadAssistRequestStatusLog");

                entity.Property(e => e.RequestStatusLogId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistRequestStatusLogCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__39090E6A");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistRequestStatusLogLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__39FD32A3");

                entity.HasOne(d => d.ProviderBranch).WithMany(p => p.RoadAssistRequestStatusLogs)
                    .HasForeignKey(d => d.ProviderBranchId)
                    .HasConstraintName("FK__RoadAssis__Provi__14A3F2C7");

                entity.HasOne(d => d.Provider).WithMany(p => p.RoadAssistRequestStatusLogs)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("FK_RoadAssistRequestStatusLog_RoadAssistProvider");

                entity.HasOne(d => d.Request).WithMany(p => p.RoadAssistRequestStatusLogs)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Reque__3AF156DC");

                entity.HasOne(d => d.RequestStatus).WithMany(p => p.RoadAssistRequestStatusLogs)
                    .HasForeignKey(d => d.RequestStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ActivityStatus_StatusId");
            });

            modelBuilder.Entity<RoadAssistRider>(entity =>
            {
                entity.HasKey(e => e.RiderId).HasName("PK__RoadAssi__7D726C605FD9C923");

                entity.ToTable("RoadAssistRider");

                entity.Property(e => e.RiderId).ValueGeneratedNever();
                entity.Property(e => e.FullName).HasMaxLength(50);
                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistRiderCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__22E659CF");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistRiderLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__23DA7E08");

                entity.HasOne(d => d.ProviderBranch).WithMany(p => p.RoadAssistRiders)
                    .HasForeignKey(d => d.ProviderBranchId)
                    .HasConstraintName("FK__RoadAssis__Provi__10D361E3");

                entity.HasOne(d => d.Provider).WithMany(p => p.RoadAssistRiders)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("FK__RoadAssis__Provi__24CEA241");
            });

            modelBuilder.Entity<RoadAssistSaaedShareValue>(entity =>
            {
                entity.HasKey(e => e.SaaedShareValueId).HasName("PK__RoadAssi__AA21C863CC0DE6F5");

                entity.ToTable("RoadAssistSaaedShareValue");

                entity.Property(e => e.SaaedShareValueId).ValueGeneratedNever();
                entity.Property(e => e.Percentage).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistSaaedShareValueCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__25C2C67A");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistSaaedShareValueLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__26B6EAB3");

                entity.HasOne(d => d.ProviderService).WithMany(p => p.RoadAssistSaaedShareValues)
                    .HasForeignKey(d => d.ProviderServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Provi__27AB0EEC");
            });

            modelBuilder.Entity<RoadAssistService>(entity =>
            {
                entity.HasKey(e => e.ServiceId).HasName("PK__RoadAssi__C51BB00ACC135955");

                entity.ToTable("RoadAssistService");

                entity.Property(e => e.ServiceId).ValueGeneratedNever();
                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ImageURL");
                entity.Property(e => e.ServiceCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.ServiceTitleAr)
                    .HasMaxLength(250)
                    .HasColumnName("ServiceTitleAR");
                entity.Property(e => e.ServiceTitleEn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ServiceTitleEN");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistServiceCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__289F3325");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistServiceLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__2993575E");
            });

            modelBuilder.Entity<RoadAssistServicePriceByDistance>(entity =>
            {
                entity.HasKey(e => e.ServicePriceByDistanceId).HasName("PK__RoadAssi__219456F013C434B7");

                entity.ToTable("RoadAssistServicePriceByDistance");

                entity.Property(e => e.ServicePriceByDistanceId).ValueGeneratedNever();
                entity.Property(e => e.ExtraKmprice)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("ExtraKMPrice");
                entity.Property(e => e.InitialDistanceKm).HasColumnName("InitialDistanceKM");
                entity.Property(e => e.InitialDistancePrice).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistServicePriceByDistanceCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__2A877B97");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistServicePriceByDistanceLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__2B7B9FD0");

                entity.HasOne(d => d.ProviderService).WithMany(p => p.RoadAssistServicePriceByDistances)
                    .HasForeignKey(d => d.ProviderServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Provi__2C6FC409");
            });

            modelBuilder.Entity<RoadAssistServicePriceByEmirate>(entity =>
            {
                entity.HasKey(e => e.ServicePriceByEmirateId).HasName("PK__RoadAssi__ACC36E2CE5690FBB");

                entity.ToTable("RoadAssistServicePriceByEmirate");

                entity.Property(e => e.ServicePriceByEmirateId).ValueGeneratedNever();
                entity.Property(e => e.GoingPrice).HasColumnType("decimal(18, 3)");
                entity.Property(e => e.ReturningPrice).HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistServicePriceByEmirateCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__2D63E842");

                entity.HasOne(d => d.DistinationEmirate).WithMany(p => p.RoadAssistServicePriceByEmirates)
                    .HasForeignKey(d => d.DistinationEmirateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Disti__2E580C7B");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistServicePriceByEmirateLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__2F4C30B4");

                entity.HasOne(d => d.ProviderService).WithMany(p => p.RoadAssistServicePriceByEmirates)
                    .HasForeignKey(d => d.ProviderServiceId)
                    .HasConstraintName("FK__RoadAssis__Provi__00272D77");
            });

            modelBuilder.Entity<RoadAssistServiceStatusDim>(entity =>
            {
                entity.HasKey(e => e.ServiceStatusId).HasName("PK__RoadAssi__009D5ED9E65D77F0");

                entity.ToTable("RoadAssistServiceStatusDIM");

                entity.Property(e => e.ServiceStatusId).ValueGeneratedNever();
                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ServiceStatusNameAr)
                    .HasMaxLength(100)
                    .HasColumnName("ServiceStatusNameAR");
                entity.Property(e => e.ServiceStatusNameEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ServiceStatusNameEN");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistServiceStatusDimCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__31347926");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistServiceStatusDimLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__32289D5F");
            });

            modelBuilder.Entity<RoadAssistServiceStep>(entity =>
            {
                entity.HasKey(e => e.ServiceStepId).HasName("PK__RoadAssi__15B9A599DC137DD1");

                entity.ToTable("RoadAssistServiceStep");

                entity.Property(e => e.ServiceStepId).ValueGeneratedNever();
                entity.Property(e => e.StepTitleAr)
                    .HasMaxLength(250)
                    .HasColumnName("StepTitleAR");
                entity.Property(e => e.StepTitleEn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("StepTitleEN");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistServiceStepCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__331CC198");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistServiceStepLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__3410E5D1");
            });

            modelBuilder.Entity<RoadAssistStatusFlowMapping>(entity =>
            {
                entity.HasKey(e => e.StatusFlowId).HasName("PK__RoadAssi__9CF9B89868FEFD02");

                entity.ToTable("RoadAssistStatusFlowMapping");

                entity.Property(e => e.StatusFlowId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistStatusFlowMappingCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .HasConstraintName("FK__RoadAssis__Creat__35050A0A");

                entity.HasOne(d => d.CurrentStatus).WithMany(p => p.RoadAssistStatusFlowMappingCurrentStatuses)
                    .HasForeignKey(d => d.CurrentStatusId)
                    .HasConstraintName("FK__RoadAssis__Curre__35F92E43");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistStatusFlowMappingLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK_RoadAssis_ModifiedUser_");

                entity.HasOne(d => d.NextStatus).WithMany(p => p.RoadAssistStatusFlowMappingNextStatuses)
                    .HasForeignKey(d => d.NextStatusId)
                    .HasConstraintName("FK__RoadAssis__NextS__36ED527C");
            });

            modelBuilder.Entity<RoadAssistTax>(entity =>
            {
                entity.HasKey(e => e.TaxId).HasName("PK__RoadAssi__711BE0AC7B74F427");

                entity.ToTable("RoadAssistTax");

                entity.Property(e => e.TaxId).ValueGeneratedNever();
                entity.Property(e => e.TaxPercentage).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistTaxCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__3EC1E7C0");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistTaxLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__3FB60BF9");
            });

            modelBuilder.Entity<RoadAssistTimeFrameDatum>(entity =>
            {
                entity.HasKey(e => e.TimeFrameId).HasName("PK__RoadAssi__F918F41B6B5C1EC2");

                entity.Property(e => e.TimeFrameId).ValueGeneratedNever();
                entity.Property(e => e.DayNameAr)
                    .HasMaxLength(100)
                    .HasColumnName("DayNameAR");
                entity.Property(e => e.DayNameEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DayNameEN");
                entity.Property(e => e.MonthNameAr)
                    .HasMaxLength(100)
                    .HasColumnName("MonthNameAR");
                entity.Property(e => e.MonthNameEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MonthNameEN");
            });

            modelBuilder.Entity<RoadAssistUser>(entity =>
            {
                entity.HasKey(e => e.UserId).HasName("PK__RoadAssi__1788CC4C29E6B536");

                entity.ToTable("RoadAssistUser");

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.HasOne(d => d.UserType).WithMany(p => p.RoadAssistUsers)
                    .HasForeignKey(d => d.UserTypeId)
                    .HasConstraintName("FK_RoadAssistUser_RoadAssistUserType");
            });

            modelBuilder.Entity<RoadAssistUserType>(entity =>
            {
                entity.HasKey(e => e.UserTypeId);

                entity.ToTable("RoadAssistUserType");

                entity.Property(e => e.UserTypeId).ValueGeneratedNever();
                entity.Property(e => e.UserTypeCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RoadAssistUserVehicle>(entity =>
            {
                entity.HasKey(e => e.UserVehicleId).HasName("PK__RoadAssi__A7F4C099A029EB62");

                entity.ToTable("RoadAssistUserVehicle");

                entity.Property(e => e.UserVehicleId).ValueGeneratedNever();

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistUserVehicleCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__3BB20799");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistUserVehicleLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__3CA62BD2");

                entity.HasOne(d => d.User).WithMany(p => p.RoadAssistUserVehicleUsers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__UserI__3D9A500B");

                entity.HasOne(d => d.Vehicle).WithMany(p => p.RoadAssistUserVehicles)
                    .HasForeignKey(d => d.VehicleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Vehic__3E8E7444");
            });

            modelBuilder.Entity<RoadAssistVehicle>(entity =>
            {
                entity.HasKey(e => e.VehicleId).HasName("PK__RoadAssi__476B5492DCFE3BE1");

                entity.ToTable("RoadAssistVehicle");

                entity.Property(e => e.VehicleId).ValueGeneratedNever();
                entity.Property(e => e.PlateNumber).HasMaxLength(50);

                entity.HasOne(d => d.Color).WithMany(p => p.RoadAssistVehicles)
                    .HasForeignKey(d => d.ColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Color__3F82987D");

                entity.HasOne(d => d.CreatedByUser).WithMany(p => p.RoadAssistVehicleCreatedByUsers)
                    .HasForeignKey(d => d.CreatedByUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Creat__4076BCB6");

                entity.HasOne(d => d.ItemRegistrationPlateColor).WithMany(p => p.RoadAssistVehicles)
                    .HasForeignKey(d => d.ItemRegistrationPlateColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__ItemR__416AE0EF");

                entity.HasOne(d => d.LastModifiedByUser).WithMany(p => p.RoadAssistVehicleLastModifiedByUsers)
                    .HasForeignKey(d => d.LastModifiedByUserId)
                    .HasConstraintName("FK__RoadAssis__LastM__425F0528");

                entity.HasOne(d => d.PlateSource).WithMany(p => p.RoadAssistVehicles)
                    .HasForeignKey(d => d.PlateSourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Plate__43532961");

                entity.HasOne(d => d.VehicleBrand).WithMany(p => p.RoadAssistVehicles)
                    .HasForeignKey(d => d.VehicleBrandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoadAssis__Vehic__44474D9A");

                entity.HasOne(d => d.VehicleModel).WithMany(p => p.RoadAssistVehicles)
                    .HasForeignKey(d => d.VehicleModelId)
                    .HasConstraintName("FK__RoadAssis__Vehic__453B71D3");
            });

            modelBuilder.Entity<RoadSpeedDim>(entity =>
            {
                entity.HasKey(e => e.RoadSpeedId)
                    .HasName("PK__RoadSpee__86A3E6B77D505D74")
                    .HasFillFactor(80);

                entity.ToTable("RoadSpeedDIM");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RoadSpeedDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RoadSpeedDIM_RowStatusDIM");
            });

            modelBuilder.Entity<RoadSurfaceDim>(entity =>
            {
                entity.HasKey(e => e.RoadSurfaceId)
                    .HasName("PK__RoadSurf__E5E0D7BEC4873217")
                    .HasFillFactor(80);

                entity.ToTable("RoadSurfaceDIM");

                entity.HasIndex(e => e.IsDefaultForReportConstruction, "UNQ_RoadSurfaceDIM_IsDefaultForReportConstruction")
                    .IsUnique()
                    .HasFilter("([IsDefaultForReportConstruction]=(1))");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.RoadSurfaceDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_RoadSurfaceDIM_RowStatusDIM");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasKey(e => e.RoleId)
                    .HasName("PK__Roles__8AFACE1A17BA1A04")
                    .HasFillFactor(80);

                entity.Property(e => e.RoleId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(256);
                entity.Property(e => e.RoleName).HasMaxLength(256);

                entity.HasOne(d => d.Application).WithMany(p => p.Roles)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("RoleApplication");
            });

            modelBuilder.Entity<RowStatusDim>(entity =>
            {
                entity.HasKey(e => e.RowStatusId)
                    .HasName("PK__RowStatu__DD85FE93422C6B84")
                    .HasFillFactor(80);

                entity.ToTable("RowStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<RowStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("RowStatusDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.RowStatusDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<RspDamagedLevelDim>(entity =>
            {
                entity.HasKey(e => e.RspDamagedLevelId)
                    .HasName("PK__RspDamag__F97E35A77EDE155B")
                    .HasFillFactor(80);

                entity.ToTable("RspDamagedLevelDim");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
            });

            modelBuilder.Entity<RspDriverDatum>(entity =>
            {
                entity.HasKey(e => e.RspDriverDataId)
                    .HasName("PK__RspDrive__020D461DBB0D5C34")
                    .HasFillFactor(80);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.DriverName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
                entity.Property(e => e.IsDriverHasNoLicense).HasDefaultValue(false);
                entity.Property(e => e.LicenseNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTime).HasColumnType("datetime");
                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.TrafficCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Gender).WithMany(p => p.RspDriverData)
                    .HasForeignKey(d => d.GenderId)
                    .HasConstraintName("FK__RspDriver__Gende__491C4D46");

                entity.HasOne(d => d.LicenseCategory).WithMany(p => p.RspDriverData)
                    .HasForeignKey(d => d.LicenseCategoryId)
                    .HasConstraintName("FK__RspDriver__Licen__4B0495B8");

                entity.HasOne(d => d.LicenseSource).WithMany(p => p.RspDriverData)
                    .HasForeignKey(d => d.LicenseSourceId)
                    .HasConstraintName("FK__RspDriver__Licen__4A10717F");

                entity.HasOne(d => d.Nationality).WithMany(p => p.RspDriverData)
                    .HasForeignKey(d => d.NationalityId)
                    .HasConstraintName("FK__RspDriver__Natio__4BF8B9F1");

                entity.HasOne(d => d.RspVehicleData).WithMany(p => p.RspDriverData)
                    .HasForeignKey(d => d.RspVehicleDataId)
                    .HasConstraintName("FK__RspDriver__RspVe__4CECDE2A");
            });

            modelBuilder.Entity<RspProcedure>(entity =>
            {
                entity.HasKey(e => e.RspProceduresId)
                    .HasName("PK__RspProce__B2F1B8150915496D")
                    .HasFillFactor(80);

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.IsActive).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTime).HasColumnType("datetime");
                entity.Property(e => e.ProceduresList)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Report).WithMany(p => p.RspProcedures)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK__RspProced__Repor__3DDFA4C4");
            });

            modelBuilder.Entity<RspReportBasicDetail>(entity =>
            {
                entity.HasKey(e => e.RspReportBasicDetailsId)
                    .HasName("PK__RspRepor__7D000E14774AEA53")
                    .HasFillFactor(80);

                entity.Property(e => e.AffectedLanes)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Comments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.EventTypes)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.FieldsFactors)
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.DamagedLevel).WithMany(p => p.RspReportBasicDetails)
                    .HasForeignKey(d => d.DamagedLevelId)
                    .HasConstraintName("FK__RspReport__Damag__54C30A1C");

                entity.HasOne(d => d.IncidentLane).WithMany(p => p.RspReportBasicDetails)
                    .HasForeignKey(d => d.IncidentLaneId)
                    .HasConstraintName("FK__RspReport__Incid__55B72E55");

                entity.HasOne(d => d.Report).WithMany(p => p.RspReportBasicDetails)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK__RspReport__Repor__52DAC1AA");

                entity.HasOne(d => d.TrafficStatus).WithMany(p => p.RspReportBasicDetails)
                    .HasForeignKey(d => d.TrafficStatusId)
                    .HasConstraintName("FK__RspReport__Traff__53CEE5E3");
            });

            modelBuilder.Entity<RspReportsVehicleDatum>(entity =>
            {
                entity.HasKey(e => e.RspReportVehicleDataId)
                    .HasName("PK__RspRepor__7D13494962A69734")
                    .HasFillFactor(80);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.IsActive).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.Report).WithMany(p => p.RspReportsVehicleData)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK__RspReport__Repor__50BD6F0E");

                entity.HasOne(d => d.RspVehicleData).WithMany(p => p.RspReportsVehicleData)
                    .HasForeignKey(d => d.RspVehicleDataId)
                    .HasConstraintName("FK__RspReport__RspVe__51B19347");
            });

            modelBuilder.Entity<RspVehicleDatum>(entity =>
            {
                entity.HasKey(e => e.RspVehicleDataId)
                    .HasName("PK__RspVehic__9F8F0E002CB460D4")
                    .HasFillFactor(80);

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.IsActive).HasDefaultValue(false);
                entity.Property(e => e.IsInsured).HasDefaultValue(true);
                entity.Property(e => e.IsNoVehiclePresent).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTime).HasColumnType("datetime");
                entity.Property(e => e.PlateNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.TrafficCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                //entity.HasOne(d => d.ManufactureYear).WithMany(p => p.RspVehicleData)
                //    .HasForeignKey(d => d.ManufactureYearId)
                //    .HasConstraintName("FK__RspVehicl__Manuf__3BC25228");

                entity.HasOne(d => d.PlateCategory).WithMany(p => p.RspVehicleData)
                    .HasForeignKey(d => d.PlateCategoryId)
                    .HasConstraintName("FK__RspVehicl__Plate__3E9EBED3");

                entity.HasOne(d => d.PlateColor).WithMany(p => p.RspVehicleData)
                    .HasForeignKey(d => d.PlateColorId)
                    .HasConstraintName("FK__RspVehicl__Plate__3CB67661");

                entity.HasOne(d => d.PlateSource).WithMany(p => p.RspVehicleData)
                    .HasForeignKey(d => d.PlateSourceId)
                    .HasConstraintName("FK__RspVehicl__Plate__3F92E30C");

                entity.HasOne(d => d.PlateType).WithMany(p => p.RspVehicleData)
                    .HasForeignKey(d => d.PlateTypeId)
                    .HasConstraintName("FK__RspVehicl__Plate__3DAA9A9A");

                entity.HasOne(d => d.Report).WithMany(p => p.RspVehicleData)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK__RspVehicl__Repor__40870745");

                entity.HasOne(d => d.VehicleDamagedType).WithMany(p => p.RspVehicleData)
                    .HasForeignKey(d => d.VehicleDamagedTypeId)
                    .HasConstraintName("FK__RspVehicl__Vehic__44579829");

                entity.HasOne(d => d.VehicleType).WithMany(p => p.RspVehicleData)
                    .HasForeignKey(d => d.VehicleTypeId)
                    .HasConstraintName("FK__RspVehicl__Vehic__417B2B7E");
            });

            modelBuilder.Entity<Saaed360CancelledIncidentCall>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Saaed360CancelledIncidentCall");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Expr1).HasMaxLength(20);
            });

            modelBuilder.Entity<Saaed360IncidentCounter>(entity =>
            {
                entity.HasKey(e => e.Saaed360IncidentCounterId)
                    .HasName("PK__Saaed360__1266A775A1EC5059")
                    .HasFillFactor(80);

                entity.ToTable("Saaed360IncidentCounter");

                entity.Property(e => e.Saaed360IncidentCounterId).HasColumnName("Saaed360IncidentCounterID");
            });

            modelBuilder.Entity<Saaed360RequestCounter>(entity =>
            {
                entity.HasKey(e => e.Saaed360RequestCounterId)
                    .HasName("PK__Saaed360__B347AA48BBEC12EA")
                    .HasFillFactor(80);

                entity.ToTable("Saaed360RequestCounter");

                entity.Property(e => e.Saaed360RequestCounterId).HasColumnName("Saaed360RequestCounterID");
            });

            modelBuilder.Entity<Saaed360VersionInfoDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("Saaed360VersionInfoDIM");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.VersionDate).HasColumnType("datetime");
                entity.Property(e => e.VersionName).HasMaxLength(250);
                entity.Property(e => e.VersionPath).HasMaxLength(250);
            });

            modelBuilder.Entity<Saaed360ViewCancelledIncident>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Saaed360ViewCancelledIncident");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.ConvertOrganization).HasMaxLength(250);
                entity.Property(e => e.ConvertReason).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.Owner).HasMaxLength(250);
            });

            modelBuilder.Entity<Saaed360ViewCancelledIncidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Saaed360ViewCancelledIncidentDetails");

                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(20);
                entity.Property(e => e.ConvertToStationOrganization).HasMaxLength(250);
                entity.Property(e => e.ConvertToStationReason).HasMaxLength(50);
                entity.Property(e => e.EmirateId).HasColumnName("EmirateID");
                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.MapStatusIcon)
                    .HasMaxLength(24)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationName).HasMaxLength(250);
                entity.Property(e => e.SectorName).HasMaxLength(200);
                entity.Property(e => e.TelephoneCallId).HasColumnName("TelephoneCallID");
            });

            modelBuilder.Entity<Saaed360ViewDispatcherPatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Saaed360ViewDispatcherPatrol");

                entity.Property(e => e.DeviceCode).HasMaxLength(50);
                entity.Property(e => e.StatusDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<Saaed360ViewIncidentAssignedPatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Saaed360ViewIncidentAssignedPatrol");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.AreaName).HasMaxLength(200);
                entity.Property(e => e.ConvertOrganization).HasMaxLength(250);
                entity.Property(e => e.ConvertReason).HasMaxLength(100);
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentStatus).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.LandmarkName).HasMaxLength(200);
                entity.Property(e => e.Owner).HasMaxLength(250);
                entity.Property(e => e.PatrolStatus).HasMaxLength(20);
            });

            modelBuilder.Entity<Saaed360ViewIncidentDelayStatus>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Saaed360ViewIncidentDelayStatus");

                entity.Property(e => e.StatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Saaed360ViewIncidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Saaed360ViewIncidentDetails");

                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(255);
                entity.Property(e => e.AnsweringTime).HasColumnType("datetime");
                entity.Property(e => e.ConvertToStationOrganization).HasMaxLength(250);
                entity.Property(e => e.ConvertToStationReason).HasMaxLength(100);
                entity.Property(e => e.EmirateId).HasColumnName("EmirateID");
                entity.Property(e => e.IcccdispatcherId).HasColumnName("ICCCDispatcherId");
                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.MapStatusIcon)
                    .HasMaxLength(28)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationName).HasMaxLength(250);
                entity.Property(e => e.PatrolStatus).HasMaxLength(20);
                entity.Property(e => e.SectorName).HasMaxLength(200);
                entity.Property(e => e.TelephoneCallId).HasColumnName("TelephoneCallID");
            });

            modelBuilder.Entity<Saaed360ViewIncidentList>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Saaed360ViewIncidentList");

                entity.Property(e => e.AreaName).HasMaxLength(200);
                entity.Property(e => e.FirstCallerContact).HasMaxLength(100);
                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.MapStatusIcon)
                    .HasMaxLength(24)
                    .IsUnicode(false);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.PatrolStatusCode).HasMaxLength(20);
                entity.Property(e => e.SectorName).HasMaxLength(200);
            });

            modelBuilder.Entity<Saaed360ViewIncidentSearchDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Saaed360ViewIncidentSearchDetail");

                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.CallerName).HasMaxLength(152);
                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.CallerTakerName).HasMaxLength(152);
                entity.Property(e => e.ControlCenterName).HasMaxLength(250);
                entity.Property(e => e.DispatcherName).HasMaxLength(152);
                entity.Property(e => e.IncidentDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TrafficExpertName).HasMaxLength(152);
            });

            modelBuilder.Entity<Saaed360ViewPatrolAvilabilty>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("Saaed360ViewPatrolAvilabilty");

                entity.Property(e => e.AreaName).HasMaxLength(200);
                entity.Property(e => e.DeviceCode).HasMaxLength(200);
                entity.Property(e => e.LocationDate).HasColumnType("datetime");
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.StatusDescription).HasMaxLength(100);
                entity.Property(e => e.TrackerCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SaaedCommunicationPercentageReportView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedCommunicationPercentageReportView");

                entity.Property(e => e.IncidentSource).HasMaxLength(28);
            });

            modelBuilder.Entity<SaaedCompromiseDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedCompromiseDetail");

                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(255);
                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.CallerName).HasMaxLength(152);
                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.CompromiseDate).HasColumnType("datetime");
                entity.Property(e => e.CompromiseNumber).HasMaxLength(50);
                entity.Property(e => e.Emara).HasMaxLength(200);
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.Source).HasMaxLength(100);
            });

            modelBuilder.Entity<SaaedConfigLevel>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedConfigLevels");

                entity.Property(e => e.WorkflowName).HasMaxLength(50);
            });

            modelBuilder.Entity<SaaedConfiscationDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedConfiscationData");

                entity.Property(e => e.ConfiscationLocation).HasMaxLength(100);
                entity.Property(e => e.ConfiscationName).HasMaxLength(100);
                entity.Property(e => e.ConfiscationStatus).HasMaxLength(100);
                entity.Property(e => e.DriverName).HasMaxLength(3000);
                entity.Property(e => e.LicenseNumber).HasMaxLength(3000);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);
            });

            modelBuilder.Entity<SaaedCustomExceptionLog>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__SaaedCus__3214EC0787FADA43")
                    .HasFillFactor(80);

                entity.ToTable("SaaedCustomExceptionLog");

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");
                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SaaedDailyCommunicationPercentageReportView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedDailyCommunicationPercentageReportView");

                entity.Property(e => e.IncidentSource).HasMaxLength(28);
            });

            modelBuilder.Entity<SaaedGetReportList>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedGetReportList");

                entity.Property(e => e.AdpreportNumber).HasColumnName("ADPReportNumber");
                entity.Property(e => e.AmbulanceDate).HasColumnType("datetime");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(2000)
                    .HasColumnName("error msg");
                entity.Property(e => e.IncidentAreaId).HasColumnName("IncidentAreaID");
                entity.Property(e => e.IncidentId).HasColumnName("incidentId");
                entity.Property(e => e.IncidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("incident number");
                entity.Property(e => e.LastActionTaken).HasColumnName("Last action taken");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.ReportStatus).HasMaxLength(100);
                entity.Property(e => e.ReportType).HasMaxLength(100);
                entity.Property(e => e.ReportType1)
                    .HasMaxLength(250)
                    .HasColumnName("Report Type");
            });

            modelBuilder.Entity<SaaedIdamagePartsIntegrationLog>(entity =>
            {
                entity.HasKey(e => e.DamagePartIntegrationId).HasName("PK__SaaedIDa__435394DBFE969FFE");

                entity.ToTable("SaaedIDamagePartsIntegrationLog");

                entity.Property(e => e.DamagePartIntegrationId)
                    .ValueGeneratedNever()
                    .HasColumnName("damagePartIntegrationId");

                entity.HasOne(d => d.DamagePart).WithMany(p => p.SaaedIdamagePartsIntegrationLogs)
                    .HasForeignKey(d => d.DamagePartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DamagePart");

                entity.HasOne(d => d.Report).WithMany(p => p.SaaedIdamagePartsIntegrationLogs)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportData");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.SaaedIdamagePartsIntegrationLogs)
                    .HasForeignKey(d => d.VehicleDataId)
                    .HasConstraintName("FK_VehicleDataa");
            });

            modelBuilder.Entity<SaaedIimageTypeDim>(entity =>
            {
                entity.HasKey(e => e.SaaedIimageTypeId).HasName("PK__SaaedIPr__58F4EF6BE92E378F");

                entity.ToTable("SaaedIImageTypeDIM");

                entity.Property(e => e.SaaedIimageTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("SaaedIImageTypeId");
                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(100)
                    .HasColumnName("DescriptionAR");
                entity.Property(e => e.DescriptionEn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DescriptionEN");
                entity.Property(e => e.SaaedIimageTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SaaedIImageTypeCode");
            });

            modelBuilder.Entity<SaaedIncidentSupportsforMap>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedIncidentSupportsforMap");

                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.SupportStatus).HasMaxLength(50);
            });

            modelBuilder.Entity<SaaedIplateNumbersIntegrationLog>(entity =>
            {
                entity.HasKey(e => e.PlateNumberIntegrationId).HasName("PK__SaaedIPl__0A1E9473BFE6672A");

                entity.ToTable("SaaedIPlateNumbersIntegrationLog");

                entity.Property(e => e.PlateNumberIntegrationId).ValueGeneratedNever();
                entity.Property(e => e.PlateNumber).HasMaxLength(50);

                entity.HasOne(d => d.Report).WithMany(p => p.SaaedIplateNumbersIntegrationLogs)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SaaedIPla__Repor__03039A22");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.SaaedIplateNumbersIntegrationLogs)
                    .HasForeignKey(d => d.VehicleDataId)
                    .HasConstraintName("FK_VehicleDatas");
            });

            modelBuilder.Entity<SaaedIprocessedImage>(entity =>
            {
                entity.HasKey(e => e.SaaedIprocessedImageId).HasName("PK__SaaedIPr__C5312C9F28BF0660");

                entity.ToTable("SaaedIProcessedImages");

                entity.Property(e => e.SaaedIprocessedImageId)
                    .ValueGeneratedNever()
                    .HasColumnName("SaaedIProcessedImageId");

                entity.HasOne(d => d.Image).WithMany(p => p.SaaedIprocessedImages)
                    .HasForeignKey(d => d.ImageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reportt");

                entity.HasOne(d => d.ImageType).WithMany(p => p.SaaedIprocessedImages)
                    .HasForeignKey(d => d.ImageTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaaedIProcessedImagesDIM");

                entity.HasOne(d => d.Report).WithMany(p => p.SaaedIprocessedImages)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Report");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.SaaedIprocessedImages)
                    .HasForeignKey(d => d.VehicleDataId)
                    .HasConstraintName("FK_VhiclData");
            });

            modelBuilder.Entity<SaaedLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__SaaedLog__5E5499A8BF69E7C9")
                    .HasFillFactor(80);

                entity.ToTable("SaaedLog");

                entity.Property(e => e.LogId).HasColumnName("LogID");
                entity.Property(e => e.ClassName).HasMaxLength(200);
                entity.Property(e => e.LogDetails).IsUnicode(false);
                entity.Property(e => e.LogType)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.LoggedTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.MethodName).HasMaxLength(200);
            });

            modelBuilder.Entity<SaaedReportControlCenterCheckupTool>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedReportControlCenterCheckupTools");

                entity.Property(e => e.CheckupDate).HasColumnType("datetime");
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.SourceOfCheckup)
                    .HasMaxLength(14)
                    .IsUnicode(false);
                entity.Property(e => e.Tool).HasMaxLength(50);
                entity.Property(e => e.UserFullName).HasMaxLength(152);
            });

            modelBuilder.Entity<SaaedReportIncidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedReportIncidentDetail");

                entity.Property(e => e.AcknowledgeDatetime).HasColumnType("datetime");
                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(20);
                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.Arrival1).HasColumnType("datetime");
                entity.Property(e => e.Arrival1ResponseTime).HasPrecision(0);
                entity.Property(e => e.Arrival2).HasColumnType("datetime");
                entity.Property(e => e.Arrival2ResponseTime).HasPrecision(0);
                entity.Property(e => e.AssignResourceDatetime).HasColumnType("datetime");
                entity.Property(e => e.AssignedDatetime).HasColumnType("datetime");
                entity.Property(e => e.AtSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.AverageResponseTime).HasPrecision(0);
                entity.Property(e => e.CallDispatcher).HasMaxLength(152);
                entity.Property(e => e.CallReceivedOn).HasColumnType("datetime");
                entity.Property(e => e.CallReceiver).HasMaxLength(152);
                entity.Property(e => e.ClosingDatetime).HasColumnType("datetime");
                entity.Property(e => e.DispatchDateTime).HasColumnType("datetime");
                entity.Property(e => e.DispatchResponseTime).HasPrecision(0);
                entity.Property(e => e.EndArc)
                    .HasColumnType("datetime")
                    .HasColumnName("EndARC");
                entity.Property(e => e.IncidentCategory).HasMaxLength(250);
                entity.Property(e => e.IncidentCreationDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.LeftSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.LocationIdentifiedDatetime).HasColumnType("datetime");
                entity.Property(e => e.OnRoutDateTime).HasColumnType("datetime");
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.Priority)
                    .HasMaxLength(100)
                    .HasColumnName("priority");
                entity.Property(e => e.ReconstructionTime).HasPrecision(0);
                entity.Property(e => e.SavingResponseTime).HasPrecision(0);
                entity.Property(e => e.StartArc)
                    .HasColumnType("datetime")
                    .HasColumnName("StartARC");
                entity.Property(e => e.TotalResponseTime).HasPrecision(0);
                entity.Property(e => e.TransferDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SaaedReportOpenDelayedIncidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedReportOpenDelayedIncidentDetail");

                entity.Property(e => e.AcknowledgeDatetime).HasColumnType("datetime");
                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(20);
                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.Arrival1).HasColumnType("datetime");
                entity.Property(e => e.Arrival2).HasColumnType("datetime");
                entity.Property(e => e.AssignResourceDatetime).HasColumnType("datetime");
                entity.Property(e => e.AssignedDatetime).HasColumnType("datetime");
                entity.Property(e => e.AtSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.CallDispatcher).HasMaxLength(152);
                entity.Property(e => e.CallReceivedOn).HasColumnType("datetime");
                entity.Property(e => e.CallReceiver).HasMaxLength(152);
                entity.Property(e => e.CallReceiverCode).HasMaxLength(100);
                entity.Property(e => e.ClosingDatetime).HasColumnType("datetime");
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.DispatchDateTime).HasColumnType("datetime");
                entity.Property(e => e.DispatcherCode).HasMaxLength(100);
                entity.Property(e => e.EndArc)
                    .HasColumnType("datetime")
                    .HasColumnName("EndARC");
                entity.Property(e => e.IncidentCategory).HasMaxLength(250);
                entity.Property(e => e.IncidentCreationDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.LeftSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.LocationIdentifiedDatetime).HasColumnType("datetime");
                entity.Property(e => e.OnRoutDateTime).HasColumnType("datetime");
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.Priority)
                    .HasMaxLength(100)
                    .HasColumnName("priority");
                entity.Property(e => e.PriorityColor).HasMaxLength(50);
                entity.Property(e => e.RingingDateTime).HasColumnType("datetime");
                entity.Property(e => e.SaveIncidentDatetime).HasColumnType("datetime");
                entity.Property(e => e.StartArc)
                    .HasColumnType("datetime")
                    .HasColumnName("StartARC");
                entity.Property(e => e.TransferDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SaaedReportOpenIncidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedReportOpenIncidentDetail");

                entity.Property(e => e.AcknowledgeDatetime).HasColumnType("datetime");
                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(20);
                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.Arrival1).HasColumnType("datetime");
                entity.Property(e => e.Arrival2).HasColumnType("datetime");
                entity.Property(e => e.AssignResourceDatetime).HasColumnType("datetime");
                entity.Property(e => e.AssignedDatetime).HasColumnType("datetime");
                entity.Property(e => e.AtSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.CallDispatcher).HasMaxLength(152);
                entity.Property(e => e.CallReceivedOn).HasColumnType("datetime");
                entity.Property(e => e.CallReceiver).HasMaxLength(152);
                entity.Property(e => e.CallReceiverCode).HasMaxLength(100);
                entity.Property(e => e.ClosingDatetime).HasColumnType("datetime");
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.DispatchDateTime).HasColumnType("datetime");
                entity.Property(e => e.DispatcherCode).HasMaxLength(100);
                entity.Property(e => e.EndArc)
                    .HasColumnType("datetime")
                    .HasColumnName("EndARC");
                entity.Property(e => e.IncidentCategory).HasMaxLength(250);
                entity.Property(e => e.IncidentCreationDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.LeftSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.LocationIdentifiedDatetime).HasColumnType("datetime");
                entity.Property(e => e.OnRoutDateTime).HasColumnType("datetime");
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.Priority)
                    .HasMaxLength(100)
                    .HasColumnName("priority");
                entity.Property(e => e.PriorityColor).HasMaxLength(50);
                entity.Property(e => e.RingingDateTime).HasColumnType("datetime");
                entity.Property(e => e.SaveIncidentDatetime).HasColumnType("datetime");
                entity.Property(e => e.StartArc)
                    .HasColumnType("datetime")
                    .HasColumnName("StartARC");
                entity.Property(e => e.TransferDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SaaedReportTotalDelayedIncidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedReportTotalDelayedIncidentDetail");

                entity.Property(e => e.AcknowledgeDatetime).HasColumnType("datetime");
                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(20);
                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.Arrival1).HasColumnType("datetime");
                entity.Property(e => e.Arrival2).HasColumnType("datetime");
                entity.Property(e => e.AssignResourceDatetime).HasColumnType("datetime");
                entity.Property(e => e.AssignedDatetime).HasColumnType("datetime");
                entity.Property(e => e.AtSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.CallDispatcher).HasMaxLength(152);
                entity.Property(e => e.CallReceivedOn).HasColumnType("datetime");
                entity.Property(e => e.CallReceiver).HasMaxLength(152);
                entity.Property(e => e.CallReceiverCode).HasMaxLength(100);
                entity.Property(e => e.ClosingDatetime).HasColumnType("datetime");
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.DispatchDateTime).HasColumnType("datetime");
                entity.Property(e => e.DispatcherCode).HasMaxLength(100);
                entity.Property(e => e.EndArc)
                    .HasColumnType("datetime")
                    .HasColumnName("EndARC");
                entity.Property(e => e.IncidentCategory).HasMaxLength(250);
                entity.Property(e => e.IncidentCreationDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentStatus).HasMaxLength(200);
                entity.Property(e => e.IncidentStatusCode).HasMaxLength(20);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.LeftSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.LocationIdentifiedDatetime).HasColumnType("datetime");
                entity.Property(e => e.OnRoutDateTime).HasColumnType("datetime");
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.Priority)
                    .HasMaxLength(100)
                    .HasColumnName("priority");
                entity.Property(e => e.PriorityCode).HasMaxLength(20);
                entity.Property(e => e.PriorityColor).HasMaxLength(50);
                entity.Property(e => e.RingingDateTime).HasColumnType("datetime");
                entity.Property(e => e.SaveIncidentDatetime).HasColumnType("datetime");
                entity.Property(e => e.StartArc)
                    .HasColumnType("datetime")
                    .HasColumnName("StartARC");
                entity.Property(e => e.TransferDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SaaedReportTotalIncidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedReportTotalIncidentDetail");

                entity.Property(e => e.AcknowledgeDatetime).HasColumnType("datetime");
                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(20);
                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.Arrival1).HasColumnType("datetime");
                entity.Property(e => e.Arrival1ResponseTime).HasColumnType("numeric(10, 2)");
                entity.Property(e => e.Arrival2).HasColumnType("datetime");
                entity.Property(e => e.Arrival2ResponseTime).HasColumnType("numeric(10, 2)");
                entity.Property(e => e.AssignResourceDatetime).HasColumnType("datetime");
                entity.Property(e => e.AssignedDatetime).HasColumnType("datetime");
                entity.Property(e => e.AtSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.AverageAssignTime).HasColumnType("numeric(10, 2)");
                entity.Property(e => e.AverageClosedTime).HasColumnType("numeric(10, 2)");
                entity.Property(e => e.AverageResponseTime).HasColumnType("numeric(10, 2)");
                entity.Property(e => e.CallDispatcher).HasMaxLength(152);
                entity.Property(e => e.CallReceivedOn).HasColumnType("datetime");
                entity.Property(e => e.CallReceiver).HasMaxLength(152);
                entity.Property(e => e.CallReceiverCode).HasMaxLength(100);
                entity.Property(e => e.ClosingDatetime).HasColumnType("datetime");
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.DispatchDateTime).HasColumnType("datetime");
                entity.Property(e => e.DispatchResponseTime).HasColumnType("numeric(10, 2)");
                entity.Property(e => e.DispatcherCode).HasMaxLength(100);
                entity.Property(e => e.EndArc)
                    .HasColumnType("datetime")
                    .HasColumnName("EndARC");
                entity.Property(e => e.IncidentCategory).HasMaxLength(250);
                entity.Property(e => e.IncidentCreationDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentStatus).HasMaxLength(200);
                entity.Property(e => e.IncidentStatusCode).HasMaxLength(20);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.LeftSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.LocationIdentifiedDatetime).HasColumnType("datetime");
                entity.Property(e => e.OnRoutDateTime).HasColumnType("datetime");
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.Priority)
                    .HasMaxLength(100)
                    .HasColumnName("priority");
                entity.Property(e => e.PriorityCode).HasMaxLength(20);
                entity.Property(e => e.PriorityColor).HasMaxLength(50);
                entity.Property(e => e.ReconstructionTime).HasColumnType("numeric(10, 2)");
                entity.Property(e => e.RingingDateTime).HasColumnType("datetime");
                entity.Property(e => e.SaveIncidentDatetime).HasColumnType("datetime");
                entity.Property(e => e.SavingResponseTime).HasColumnType("numeric(10, 2)");
                entity.Property(e => e.StartArc)
                    .HasColumnType("datetime")
                    .HasColumnName("StartARC");
                entity.Property(e => e.TotalResponseTime).HasColumnType("numeric(10, 2)");
                entity.Property(e => e.TransferDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SaaedReportTotalNotDelayedIncidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedReportTotalNotDelayedIncidentDetail");

                entity.Property(e => e.AcknowledgeDatetime).HasColumnType("datetime");
                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(20);
                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.Arrival1).HasColumnType("datetime");
                entity.Property(e => e.Arrival2).HasColumnType("datetime");
                entity.Property(e => e.AssignResourceDatetime).HasColumnType("datetime");
                entity.Property(e => e.AssignedDatetime).HasColumnType("datetime");
                entity.Property(e => e.AtSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.CallDispatcher).HasMaxLength(152);
                entity.Property(e => e.CallReceivedOn).HasColumnType("datetime");
                entity.Property(e => e.CallReceiver).HasMaxLength(152);
                entity.Property(e => e.CallReceiverCode).HasMaxLength(100);
                entity.Property(e => e.ClosingDatetime).HasColumnType("datetime");
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.DispatchDateTime).HasColumnType("datetime");
                entity.Property(e => e.DispatcherCode).HasMaxLength(100);
                entity.Property(e => e.EndArc)
                    .HasColumnType("datetime")
                    .HasColumnName("EndARC");
                entity.Property(e => e.IncidentCategory).HasMaxLength(250);
                entity.Property(e => e.IncidentCreationDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.LeftSceneDatetime).HasColumnType("datetime");
                entity.Property(e => e.LocationIdentifiedDatetime).HasColumnType("datetime");
                entity.Property(e => e.OnRoutDateTime).HasColumnType("datetime");
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.Priority)
                    .HasMaxLength(100)
                    .HasColumnName("priority");
                entity.Property(e => e.PriorityColor).HasMaxLength(50);
                entity.Property(e => e.RingingDateTime).HasColumnType("datetime");
                entity.Property(e => e.SaveIncidentDatetime).HasColumnType("datetime");
                entity.Property(e => e.StartArc)
                    .HasColumnType("datetime")
                    .HasColumnName("StartARC");
                entity.Property(e => e.TransferDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SaaedReportsTable>(entity =>
            {
                entity.HasKey(e => e.Pkid)
                    .HasName("PK_Table_1_1")
                    .HasFillFactor(80);

                entity.ToTable("SaaedReportsTable");

                entity.Property(e => e.Pkid).HasColumnName("PKID");
                entity.Property(e => e.ReportCode).HasMaxLength(100);
                entity.Property(e => e.ReportDescription).HasMaxLength(200);
                entity.Property(e => e.ReportName).HasMaxLength(100);
            });

            modelBuilder.Entity<SaaedSsrsreportsTable>(entity =>
            {
                entity.HasKey(e => e.Pkid);

                entity.ToTable("SaaedSSRSReportsTable");

                entity.Property(e => e.Pkid).HasColumnName("PKID");
                entity.Property(e => e.FilterRelations)
                    .HasMaxLength(500)
                    .HasComment("1-EmpToCR \r\n2-ArToCR\r\n3-EmpToArToCR\r\n4-ArToEm\r\n5-EmpToArToEm");
                entity.Property(e => e.FkReportTypeId).HasColumnName("Fk_ReportTypeId");
                entity.Property(e => e.HasCrfilter).HasColumnName("HasCRFilter");
                entity.Property(e => e.ReportDescription).HasMaxLength(500);
                entity.Property(e => e.ReportName).HasMaxLength(200);
                entity.Property(e => e.ReportPath).HasMaxLength(500);
                entity.Property(e => e.Roles).HasMaxLength(500);

                entity.HasOne(d => d.FkReportType).WithMany(p => p.SaaedSsrsreportsTables)
                    .HasForeignKey(d => d.FkReportTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaaedSSRSReportsTable_SaaedSSRSReportsType");
            });

            modelBuilder.Entity<SaaedSsrsreportsType>(entity =>
            {
                entity.HasKey(e => e.Pkid);

                entity.ToTable("SaaedSSRSReportsType");

                entity.Property(e => e.Pkid).HasColumnName("PKID");
                entity.Property(e => e.ReportType).HasMaxLength(200);
            });

            modelBuilder.Entity<SaaedSupervisorMissionForTe>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedSupervisorMissionForTE");

                entity.Property(e => e.MissionEndTime).HasColumnType("datetime");
                entity.Property(e => e.MissionStartTime).HasColumnType("datetime");
                entity.Property(e => e.OrganizationName).HasMaxLength(250);
            });

            modelBuilder.Entity<SaaedTransferedReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedTransferedReport");

                entity.Property(e => e.Childs).IsUnicode(false);
                entity.Property(e => e.FirstOrgDescription).HasMaxLength(255);
                entity.Property(e => e.FirstTransferOrganizationName).HasMaxLength(250);
                entity.Property(e => e.Incidentid).HasColumnName("incidentid");
                entity.Property(e => e.LastOrgDescription).HasMaxLength(255);
                entity.Property(e => e.LastTransferOrganizationName).HasMaxLength(250);
                entity.Property(e => e.ReasonName).HasMaxLength(50);
                entity.Property(e => e.ReasonNameLast).HasMaxLength(50);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<SaaedheckupToolsReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SaaedheckupToolsReport");

                entity.Property(e => e.CheckListDate).HasColumnType("datetime");
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Comment).HasColumnName("comment");
                entity.Property(e => e.ControlCenter).HasMaxLength(250);
                entity.Property(e => e.Device).HasMaxLength(50);
                entity.Property(e => e.LoginId).HasColumnName("loginId");
                entity.Property(e => e.PatrolCode)
                    .HasMaxLength(50)
                    .HasColumnName("patrolCode");
                entity.Property(e => e.PatrolId).HasColumnName("patrolId");
                entity.Property(e => e.PersonName).HasMaxLength(50);
                entity.Property(e => e.SourceOfCheckup)
                    .HasMaxLength(6)
                    .IsUnicode(false);
                entity.Property(e => e.SourceOfCheckupText).HasMaxLength(13);
            });

            modelBuilder.Entity<SaeedLog>(entity =>
            {
                entity.HasKey(e => e.LogId).HasFillFactor(80);

                entity.ToTable("SaeedLog");
            });

            modelBuilder.Entity<SaeedOlapreportsTable>(entity =>
            {
                entity.HasKey(e => e.Pkid);

                entity.ToTable("SaeedOLAPReportsTable");

                entity.Property(e => e.Pkid).HasColumnName("PKID");
                entity.Property(e => e.FilterRelations).HasMaxLength(500);
                entity.Property(e => e.FkReportTypeId).HasColumnName("Fk_ReportTypeId");
                entity.Property(e => e.HasCrfilter).HasColumnName("HasCRFilter");
                entity.Property(e => e.ReportDescription).HasMaxLength(500);
                entity.Property(e => e.ReportName).HasMaxLength(200);
                entity.Property(e => e.ReportPath).HasMaxLength(500);

                entity.HasOne(d => d.FkReportType).WithMany(p => p.SaeedOlapreportsTables)
                    .HasForeignKey(d => d.FkReportTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaeedOLAPReportsTable_SaeedOLAPReportsTypes");
            });

            modelBuilder.Entity<SaeedOlapreportsType>(entity =>
            {
                entity.HasKey(e => e.Pkid);

                entity.ToTable("SaeedOLAPReportsTypes");

                entity.Property(e => e.Pkid).HasColumnName("PKID");
                entity.Property(e => e.ReportCategory).HasMaxLength(200);
            });

            modelBuilder.Entity<ScenarioDim>(entity =>
            {
                entity.HasKey(e => e.ScenarioId).HasFillFactor(80);

                entity.ToTable("ScenarioDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Schema>(entity =>
            {
                entity.HasKey(e => e.Version).HasName("PK_HangFire_Schema");

                entity.ToTable("Schema", "HangFire");

                entity.Property(e => e.Version).ValueGeneratedNever();
            });

            modelBuilder.Entity<Search>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__Search__45F4A791D4B900E2")
                    .HasFillFactor(80);

                entity.ToTable("Search");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.SearchDateTime).HasColumnType("datetime");
                entity.Property(e => e.SearchXml)
                    .HasColumnType("xml")
                    .HasColumnName("SearchXML");

                entity.HasOne(d => d.Activity).WithOne(p => p.Search)
                    .HasForeignKey<Search>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Search_Activity");

                entity.HasOne(d => d.AuthorizationType).WithMany(p => p.Searches)
                    .HasForeignKey(d => d.AuthorizationTypeId)
                    .HasConstraintName("FK_Search_AuthorizationTypeDIM");

                entity.HasOne(d => d.SearchCategory).WithMany(p => p.Searches)
                    .HasForeignKey(d => d.SearchCategoryId)
                    .HasConstraintName("FK_Search_SearchCategoryDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Searches)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Search_Source");
            });

            modelBuilder.Entity<SearchCategoryDim>(entity =>
            {
                entity.HasKey(e => e.SearchCategoryId)
                    .HasName("PK__SearchCa__62CF0C46BBAA66C8")
                    .HasFillFactor(80);

                entity.ToTable("SearchCategoryDIM");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SearchCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SearchCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SearchCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SearchCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SearchCategoryCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.SearchCategoryDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchCompareDim>(entity =>
            {
                entity.HasKey(e => e.CompareId)
                    .HasName("PK__SearchCo__1B61D63821BC40CB")
                    .HasFillFactor(80);

                entity.ToTable("SearchCompareDIM");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SearchCompareDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SearchCompareDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SearchCompareDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SearchCompareDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SearchCompareCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.SearchCompareDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchDataTypeDim>(entity =>
            {
                entity.HasKey(e => e.DataTypeId)
                    .HasName("PK__SearchDa__4382081F96DD6EFD")
                    .HasFillFactor(80);

                entity.ToTable("SearchDataTypeDIM");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SearchDataTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SearchDataTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SearchDataTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SearchDataTypeDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SearchDataTypeCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.SearchDataTypeDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchDetail>(entity =>
            {
                entity.HasKey(e => e.SearchDetailId)
                    .HasName("PK__SearchDe__4C3BD61F33C0737F")
                    .HasFillFactor(80);

                entity.ToTable("SearchDetail");

                entity.Property(e => e.CompareId).HasDefaultValue(1);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DataTypeId).HasDefaultValue(1);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ParameterId).HasDefaultValue(1);
                entity.Property(e => e.ParameterValue).HasMaxLength(200);
                entity.Property(e => e.SearchDetailGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Activity).WithMany(p => p.SearchDetails)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SourceDetail_Activity");

                entity.HasOne(d => d.Compare).WithMany(p => p.SearchDetails)
                    .HasForeignKey(d => d.CompareId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SearchDetail_Compare");

                entity.HasOne(d => d.DataType).WithMany(p => p.SearchDetails)
                    .HasForeignKey(d => d.DataTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SearchDetail_DataType");

                entity.HasOne(d => d.Parameter).WithMany(p => p.SearchDetails)
                    .HasForeignKey(d => d.ParameterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SearchDetail_Parameter");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SearchDetails)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SearchDetail_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.SearchDetails)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SearchDetail_Source");
            });

            modelBuilder.Entity<SearchDetailGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SearchDetailGuidView");

                entity.Property(e => e.CompareCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DataTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ParameterCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ParameterValue).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchDetailView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SearchDetailView");

                entity.Property(e => e.CompareCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CompareDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DataTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.DataTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ParameterCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ParameterDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ParameterValue).HasMaxLength(200);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SearchDetailId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SearchParameterDim>(entity =>
            {
                entity.HasKey(e => e.ParameterId)
                    .HasName("PK__SearchPa__F80C62773FA45F28")
                    .HasFillFactor(80);

                entity.ToTable("SearchParameterDIM");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SearchParameterDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SearchParameterDIM_RowStatusDIM");

                entity.HasOne(d => d.SearchCategory).WithMany(p => p.SearchParameterDims)
                    .HasForeignKey(d => d.SearchCategoryId)
                    .HasConstraintName("FK_SearchParameterDIM_SearchCategory");
            });

            modelBuilder.Entity<SearchParameterDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SearchParameterDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SearchParameterCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.SearchParameterDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SearchResponse>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__SearchRe__45F4A791CCC7C38C")
                    .HasFillFactor(80);

                entity.ToTable("SearchResponse");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.ResponseStatusId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.SearchResponse)
                    .HasForeignKey<SearchResponse>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SearchResponse_Activity");

                entity.HasOne(d => d.ResponseStatus).WithMany(p => p.SearchResponses)
                    .HasForeignKey(d => d.ResponseStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SearchResponse_ReponseStatus");

                entity.HasOne(d => d.Source).WithMany(p => p.SearchResponses)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SearchResponse_Source");
            });

            modelBuilder.Entity<SearchResponseStatusDim>(entity =>
            {
                entity.HasKey(e => e.ResponseStatusId)
                    .HasName("PK__SearchRe__CF4D4D2607004A21")
                    .HasFillFactor(80);

                entity.ToTable("SearchResponseStatusDIM");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SearchResponseStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SearchResponseStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SearchResponseStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SearchResponseStatusDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SearchResponseStatusCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.SearchResponseStatusDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SectorDim>(entity =>
            {
                entity.HasKey(e => e.SectorId).HasFillFactor(80);

                entity.ToTable("SectorDIM");

                entity.Property(e => e.SectorId).ValueGeneratedNever();
                entity.Property(e => e.SectorCode).HasMaxLength(50);
                entity.Property(e => e.SectorName).HasMaxLength(200);

                entity.HasOne(d => d.ReportArea).WithMany(p => p.SectorDims)
                    .HasForeignKey(d => d.ReportAreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SectorDIM_ReportAreaDIM");
            });

            modelBuilder.Entity<SecurityApiLog>(entity =>
            {
                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<SecuritySituation>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Security__3214EC075CBAB727");

                entity.ToTable("SecuritySituation");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);
                entity.Property(e => e.SecuritySituationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Area).WithMany(p => p.SecuritySituations)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK__SecuritySituation__AreaI__41887A7B");

                entity.HasOne(d => d.City).WithMany(p => p.SecuritySituations)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK__SecurityS__CityI__5060A9B7");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SecuritySituationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__SecurityS__Creat__5154CDF0");

                entity.HasOne(d => d.CurrentStatus).WithMany(p => p.SecuritySituations)
                    .HasForeignKey(d => d.CurrentStatusId)
                    .HasConstraintName("FK__SecurityS__Curre__5248F229");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SecuritySituationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__SecurityS__Modif__533D1662");

                entity.HasOne(d => d.SecuritySituationSource).WithMany(p => p.SecuritySituations)
                    .HasForeignKey(d => d.SecuritySituationSourceId)
                    .HasConstraintName("FK_SecuritySituation_SecuritySituationSourceDim");

                entity.HasOne(d => d.SecuritySituationType).WithMany(p => p.SecuritySituations)
                    .HasForeignKey(d => d.SecuritySituationTypeId)
                    .HasConstraintName("FK__SecurityS__Secur__54313A9B");
            });

            modelBuilder.Entity<SecuritySituationAttachement>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Security__3214EC070C42B982");

                entity.ToTable("SecuritySituationAttachement");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SecuritySituationAttachementCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__SecurityS__Creat__59EA13F1");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SecuritySituationAttachementModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__SecurityS__Modif__5ADE382A");

                entity.HasOne(d => d.SecuritySituation).WithMany(p => p.SecuritySituationAttachements)
                    .HasForeignKey(d => d.SecuritySituationId)
                    .HasConstraintName("FK__SecurityS__Secur__5BD25C63");
            });

            modelBuilder.Entity<SecuritySituationMonitorLevelDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Security__3214EC074600338E");

                entity.ToTable("SecuritySituationMonitorLevelDim");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SecuritySituationMonitorLevelDimCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__SecurityS__Creat__42128A60");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SecuritySituationMonitorLevelDimModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__SecurityS__Modif__4306AE99");
            });

            modelBuilder.Entity<SecuritySituationSourceDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Security__3214EC0734E11850");

                entity.ToTable("SecuritySituationSourceDim");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SecuritySituationSourceDimCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__SecurityS__Creat__32D046D0");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SecuritySituationSourceDimModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__SecurityS__Modif__33C46B09");
            });

            modelBuilder.Entity<SecuritySituationStatus>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Security__3214EC071C7BF36F");

                entity.ToTable("SecuritySituationStatus");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);

                entity.HasOne(d => d.SecuritySituation).WithMany(p => p.SecuritySituationStatuses)
                    .HasForeignKey(d => d.SecuritySituationId)
                    .HasConstraintName("FK_SecuritySituationStatus_SecuritySituation");

                entity.HasOne(d => d.SecuritySituationStatusNavigation).WithMany(p => p.SecuritySituationStatuses)
                    .HasForeignKey(d => d.SecuritySituationStatusId)
                    .HasConstraintName("FK_SecuritySituationStatus_SecuritySituationStatusDim");
            });

            modelBuilder.Entity<SecuritySituationStatusDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Security__3214EC07D7A98F75");

                entity.ToTable("SecuritySituationStatusDim");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SecuritySituationStatusDimCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__SecurityS__Creat__3794FBED");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SecuritySituationStatusDimModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__SecurityS__Modif__38892026");
            });

            modelBuilder.Entity<SecuritySituationTypeDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Security__3214EC0796D9CE0F");

                entity.ToTable("SecuritySituationTypeDim");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.SecuritySituationTypeDimCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__SecurityS__Creat__4AA7D061");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.SecuritySituationTypeDimModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__SecurityS__Modif__4B9BF49A");

                entity.HasOne(d => d.SecuritySituationMonitorLevel).WithMany(p => p.SecuritySituationTypeDims)
                    .HasForeignKey(d => d.SecuritySituationMonitorLevelId)
                    .HasConstraintName("FK_SecuritySituationTypeDim_SecuritySituationMonitorLevelDim");
            });

            modelBuilder.Entity<SellAnyCar>(entity =>
            {
                entity.ToTable("SellAnyCar");

                entity.Property(e => e.ChassisNumber).HasMaxLength(50);
                entity.Property(e => e.OrderDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OwnerName).HasMaxLength(200);
                entity.Property(e => e.PhoneNumber).HasMaxLength(50);
                entity.Property(e => e.PlateNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ReportNumber).HasMaxLength(50);
                entity.Property(e => e.StatusRecievedTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<Sentence>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("Sentence");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.SentenceGroupingId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.Sentence)
                    .HasForeignKey<Sentence>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sentence_Activity");

                entity.HasOne(d => d.SentenceGrouping).WithMany(p => p.Sentences)
                    .HasForeignKey(d => d.SentenceGroupingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sentence_SentenceGroupingDIM");
            });

            modelBuilder.Entity<SentenceGroupingDim>(entity =>
            {
                entity.HasKey(e => e.SentenceGroupingId)
                    .HasName("PK__Sentence__8126DA957D9A845E")
                    .HasFillFactor(80);

                entity.ToTable("SentenceGroupingDIM");

                entity.Property(e => e.SentenceGroupingId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SentenceGroupingDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SentenceGroupingDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SentenceGroupingDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SentenceGroupingDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SentenceGroupingCode).HasMaxLength(50);
                entity.Property(e => e.SentenceGroupingDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<Server>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_HangFire_Server");

                entity.ToTable("Server", "HangFire");

                entity.HasIndex(e => e.LastHeartbeat, "IX_HangFire_Server_LastHeartbeat");

                entity.Property(e => e.Id).HasMaxLength(200);
                entity.Property(e => e.LastHeartbeat).HasColumnType("datetime");
            });

            modelBuilder.Entity<ServiceCall>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__ServiceC__45F4A791BC7A967E")
                    .HasFillFactor(80);

                entity.ToTable("ServiceCall");

                entity.HasIndex(e => e.ServiceCallArrivedDate, "IX_ServiceCall_ServiceCallArrivedDate").HasFillFactor(80);

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.HasPriorsIndicator).HasDefaultValue(false);
                entity.Property(e => e.HazardCallIndicator).HasDefaultValue(false);
                entity.Property(e => e.IcccdispatcherId).HasColumnName("ICCCDispatcherId");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IsSelfInitiated).HasDefaultValue(false);
                entity.Property(e => e.OutofServiceIndicator).HasDefaultValue(false);
                entity.Property(e => e.ServiceCallArrivedDate).HasColumnType("datetime");
                entity.Property(e => e.ServiceCallCategoryId).HasDefaultValue(1);
                entity.Property(e => e.ServiceCallClearedDate).HasColumnType("datetime");
                entity.Property(e => e.ServiceCallDispatchedDate).HasColumnType("datetime");
                entity.Property(e => e.ServiceCallEnrouteDate).HasColumnType("datetime");
                entity.Property(e => e.ServiceCallInControlDate).HasColumnType("datetime");
                entity.Property(e => e.ServiceCallPriorityId).HasDefaultValue(1);
                entity.Property(e => e.ServiceCallReceivedDate).HasColumnType("datetime");
                entity.Property(e => e.ServiceCallSourceId).HasDefaultValue(1);
                entity.Property(e => e.ServiceCallStagedDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Activity).WithOne(p => p.ServiceCall)
                    .HasForeignKey<ServiceCall>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceCall_Activity");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ServiceCallCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ServiceCall_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ServiceCallModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_ServiceCall_Person1");

                entity.HasOne(d => d.ServiceCallCategory).WithMany(p => p.ServiceCalls)
                    .HasForeignKey(d => d.ServiceCallCategoryId)
                    .HasConstraintName("FK_ServiceCall_ServiceCallCategoryDIM");

                entity.HasOne(d => d.ServiceCallIncidentType).WithMany(p => p.ServiceCalls)
                    .HasForeignKey(d => d.ServiceCallIncidentTypeId)
                    .HasConstraintName("FK_ServiceCall_ServiceCallIncidentTypeDIM");

                entity.HasOne(d => d.ServiceCallPriority).WithMany(p => p.ServiceCalls)
                    .HasForeignKey(d => d.ServiceCallPriorityId)
                    .HasConstraintName("FK_ServiceCall_ServiceCallPriorityDIM");

                entity.HasOne(d => d.ServiceCallSource).WithMany(p => p.ServiceCalls)
                    .HasForeignKey(d => d.ServiceCallSourceId)
                    .HasConstraintName("FK_ServiceCall_ServiceCallSourceDIM");
            });

            modelBuilder.Entity<ServiceCallCategoryDim>(entity =>
            {
                entity.HasKey(e => e.ServiceCallCategoryId)
                    .HasName("PK__ServiceC__E1BDDA8C6BAF8451")
                    .HasFillFactor(80);

                entity.ToTable("ServiceCallCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ServiceCallCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ServiceCallCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ServiceCallCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ServiceCallCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.ServiceCallCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ServiceCallCategoryDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<ServiceCallClearanceDim>(entity =>
            {
                entity.HasKey(e => e.ServiceCallClearanceId)
                    .HasName("PK__ServiceC__BE72C025BF855AD3")
                    .HasFillFactor(80);

                entity.ToTable("ServiceCallClearanceDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ServiceCallClearanceDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ServiceCallClearanceDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ServiceCallClearanceDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ServiceCallClearanceDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.ServiceCallClearanceCode).HasMaxLength(20);
                entity.Property(e => e.ServiceCallClearanceDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<ServiceCallDispositionDim>(entity =>
            {
                entity.HasKey(e => e.ServiceCallDispositionId)
                    .HasName("PK__ServiceC__EE1F5FD8DA56A8EC")
                    .HasFillFactor(80);

                entity.ToTable("ServiceCallDispositionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ServiceCallDispositionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ServiceCallDispositionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ServiceCallDispositionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ServiceCallDispositionDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.ServiceCallDispositionCode).HasMaxLength(20);
                entity.Property(e => e.ServiceCallDispositionDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<ServiceCallIncidentTypeDim>(entity =>
            {
                entity.HasKey(e => e.ServiceCallIncidentTypeId)
                    .HasName("PK__ServiceC__D557464E4D1804C1")
                    .HasFillFactor(80);

                entity.ToTable("ServiceCallIncidentTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Organization).WithMany(p => p.ServiceCallIncidentTypeDims)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceCallIncidentTypeDIM_Organization");
            });

            modelBuilder.Entity<ServiceCallMechanismDim>(entity =>
            {
                entity.HasKey(e => e.ServiceCallMechanismId)
                    .HasName("PK__ServiceC__7222D7003EC6132C")
                    .HasFillFactor(80);

                entity.ToTable("ServiceCallMechanismDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsOutOfServiceType).HasDefaultValue(false);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ServiceCallMechanismDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ServiceCallMechanismDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ServiceCallMechanismDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ServiceCallMechanismDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.ServiceCallMechanismCode).HasMaxLength(20);
                entity.Property(e => e.ServiceCallMechanismDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<ServiceCallPriorityDim>(entity =>
            {
                entity.HasKey(e => e.ServiceCallPriorityId)
                    .HasName("PK__ServiceC__DF225D4D6C9AE837")
                    .HasFillFactor(80);

                entity.ToTable("ServiceCallPriorityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Color).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ServiceCallPriorityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ServiceCallPriorityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ServiceCallPriorityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ServiceCallPriorityDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.ServiceCallPriorityCode).HasMaxLength(20);
                entity.Property(e => e.ServiceCallPriorityDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<ServiceCallPriorityReasonDim>(entity =>
            {
                entity.HasKey(e => e.ServiceCallPriorityReasonId)
                    .HasName("PK_ServiceCallPriorityReason")
                    .HasFillFactor(80);

                entity.ToTable("ServiceCallPriorityReasonDIM");

                entity.Property(e => e.ArabicDescription).HasMaxLength(200);
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.EnglishDescription).HasMaxLength(200);

                entity.HasOne(d => d.ServiceCallPriority).WithMany(p => p.ServiceCallPriorityReasonDims).HasForeignKey(d => d.ServiceCallPriorityId);
            });

            modelBuilder.Entity<ServiceCallSourceDim>(entity =>
            {
                entity.HasKey(e => e.ServiceCallSourceId)
                    .HasName("PK__ServiceC__96944088EE0FAF44")
                    .HasFillFactor(80);

                entity.ToTable("ServiceCallSourceDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ServiceCallSourceDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ServiceCallSourceDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ServiceCallSourceDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ServiceCallSourceDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.ServiceCallSourceCode).HasMaxLength(20);
                entity.Property(e => e.ServiceCallSourceDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<ServiceCenterLookup>(entity =>
            {
                entity.HasKey(e => e.ServiceCenterId)
                    .HasName("PK__ServiceC__71B62BE3CD9A4D2C")
                    .HasFillFactor(80);

                entity.ToTable("ServiceCenterLookup");

                entity.Property(e => e.ServiceCenterId).ValueGeneratedNever();
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.IsActive).HasDefaultValue(false);
                entity.Property(e => e.ServiceCenterName)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ServiceClassDim>(entity =>
            {
                entity.HasKey(e => e.ServiceClassId)
                    .HasName("PK__ServiceC__4C699563FFC6CA32")
                    .HasFillFactor(80);

                entity.ToTable("ServiceClassDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.ServiceClassDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_ServiceClassDIM_RowStatusDIM");
            });

            modelBuilder.Entity<ServiceClassDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ServiceClassDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.ServiceClassCode).HasMaxLength(20);
                entity.Property(e => e.ServiceClassDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<ServiceLogTable>(entity =>
            {
                entity.HasKey(e => e.LogId).HasFillFactor(80);

                entity.ToTable("ServiceLogTable");

                entity.Property(e => e.LogId).HasColumnName("LogID");
                entity.Property(e => e.LogType).HasComment("1- Info message  2- return error message  3- exception message");
                entity.Property(e => e.ServicesName).HasComment("1- for Report Upload Service  2- Saaed360 Reporting Service");
                entity.Property(e => e.TimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ServiceRequestResponseLogger>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__ServiceR__5E5486482305F871")
                    .HasFillFactor(80);

                entity.ToTable("ServiceRequestResponseLogger");

                entity.Property(e => e.AccidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.RequestXml).HasColumnType("xml");
                entity.Property(e => e.RequestedTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ResponseXml).HasColumnType("xml");

                entity.HasOne(d => d.RequestedByNavigation).WithMany(p => p.ServiceRequestResponseLoggers)
                    .HasForeignKey(d => d.RequestedBy)
                    .HasConstraintName("FK__ServiceRe__Reque__01C0991C");
            });

            modelBuilder.Entity<Set>(entity =>
            {
                entity.HasKey(e => new { e.Key, e.Value }).HasName("PK_HangFire_Set");

                entity.ToTable("Set", "HangFire");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Set_ExpireAt").HasFilter("([ExpireAt] IS NOT NULL)");

                entity.HasIndex(e => new { e.Key, e.Score }, "IX_HangFire_Set_Score");

                entity.Property(e => e.Key).HasMaxLength(100);
                entity.Property(e => e.Value).HasMaxLength(256);
                entity.Property(e => e.ExpireAt).HasColumnType("datetime");
            });


            modelBuilder.Entity<SmartDispatchingAreaConfiguration>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__SmartDis__3214EC07C7EA08E9");

                entity.ToTable("SmartDispatchingAreaConfiguration");

                entity.HasIndex(e => e.AreaId, "UQ__SmartDis__70B820493C656800").IsUnique();

                entity.HasOne(d => d.Area).WithOne(p => p.SmartDispatchingAreaConfiguration)
                    .HasForeignKey<SmartDispatchingAreaConfiguration>(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AreaConfiguration_Area");
            });

            modelBuilder.Entity<SmartDispatchingConfiguration>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__SmartDis__3214EC07D430FB02");

                entity.ToTable("SmartDispatchingConfiguration");

                entity.HasIndex(e => e.Code, "UQ__SmartDis__A25C5AA7A21D509C").IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(100);
                entity.Property(e => e.Comment).HasMaxLength(250);
                entity.Property(e => e.Value).HasMaxLength(100);
            });

            modelBuilder.Entity<SmartDispatchingEmirateConfiguration>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__SmartDis__3214EC07C413DC13");

                entity.ToTable("SmartDispatchingEmirateConfiguration");

                entity.HasIndex(e => e.EmirateId, "UQ__SmartDis__0884479D2D10C3E9").IsUnique();

                entity.HasOne(d => d.Emirate).WithOne(p => p.SmartDispatchingEmirateConfiguration)
                    .HasForeignKey<SmartDispatchingEmirateConfiguration>(d => d.EmirateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AreaConfiguration_Emirate");
            });

            modelBuilder.Entity<SmartDispatchingIncidentStatusDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__SmartDis__3214EC073A23C58F");

                entity.ToTable("SmartDispatchingIncidentStatusDIM");

                entity.HasIndex(e => e.Code, "UQ__SmartDis__A25C5AA73B82D710").IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<SmartDispatchingIncidentStatusLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__SmartDis__3214EC072330ECA9");

                entity.ToTable("SmartDispatchingIncidentStatusLog");

                entity.Property(e => e.LogDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Notes).HasMaxLength(250);

                entity.HasOne(d => d.IncidentRequest).WithMany(p => p.SmartDispatchingIncidentStatusLogs)
                    .HasForeignKey(d => d.IncidentRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentStatusLog_IncidentRequest");

                entity.HasOne(d => d.NewStatusNavigation).WithMany(p => p.SmartDispatchingIncidentStatusLogNewStatusNavigations)
                    .HasForeignKey(d => d.NewStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentStatusLog_Status2");

                entity.HasOne(d => d.OldStatusNavigation).WithMany(p => p.SmartDispatchingIncidentStatusLogOldStatusNavigations)
                    .HasForeignKey(d => d.OldStatus)
                    .HasConstraintName("FK_IncidentStatusLog_Status1");

                entity.HasOne(d => d.Patrol).WithMany(p => p.SmartDispatchingIncidentStatusLogs)
                    .HasForeignKey(d => d.PatrolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IncidentStatusLog_Item");

                entity.HasOne(d => d.Person).WithMany(p => p.SmartDispatchingIncidentStatusLogs)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_IncidentStatusLog_Person");
            });

            modelBuilder.Entity<SmartDispatchingReturnToOperationRoomLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__SmartDis__3214EC077B4CA8F7");

                entity.ToTable("SmartDispatchingReturnToOperationRoomLog");

                entity.Property(e => e.LogDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ReasonDescription).HasMaxLength(1000);

                entity.HasOne(d => d.IncidentRequest).WithMany(p => p.SmartDispatchingReturnToOperationRoomLogs)
                    .HasForeignKey(d => d.IncidentRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReturnLog_IncidentRequest");

                entity.HasOne(d => d.Patrol).WithMany(p => p.SmartDispatchingReturnToOperationRoomLogs)
                    .HasForeignKey(d => d.PatrolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReturnLog_Item");

                entity.HasOne(d => d.Person).WithMany(p => p.SmartDispatchingReturnToOperationRoomLogs)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReturnLog_Person");

                entity.HasOne(d => d.Reason).WithMany(p => p.SmartDispatchingReturnToOperationRoomLogs)
                    .HasForeignKey(d => d.ReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReturnLog_Reason");
            });

            modelBuilder.Entity<SmsMessageLog>(entity =>
            {
                entity.ToTable("SmsMessageLog");

                entity.HasIndex(e => e.MobileNumber, "IX_SmsMessageLog_MobileNumber");

                entity.HasIndex(e => e.TemplateId, "IX_SmsMessageLog_TemplateId");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.MobileNumber).HasMaxLength(500);
            });

            modelBuilder.Entity<Smslog>(entity =>
            {
                entity.ToTable("SMSLog");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");
                entity.Property(e => e.MobileNumber).HasMaxLength(250);
            });

            modelBuilder.Entity<SmstoWhatsDetail>(entity =>
            {
                entity.HasKey(e => e.SmstoWhatsDetailsId);

                entity.ToTable("SMSToWhatsDetails");

                entity.Property(e => e.SmstoWhatsDetailsId).HasColumnName("SMSToWhatsDetailsId");
                entity.Property(e => e.Lang).HasMaxLength(50);
                entity.Property(e => e.SmstemplateParameterKey)
                    .HasMaxLength(50)
                    .HasColumnName("SMSTemplateParameterKey");
                entity.Property(e => e.SmstoWhatsupId).HasColumnName("SMSToWhatsupId");
                entity.Property(e => e.WhatsTemplateParameterKey).HasMaxLength(50);

                entity.HasOne(d => d.SmstoWhatsup).WithMany(p => p.SmstoWhatsDetails)
                    .HasForeignKey(d => d.SmstoWhatsupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SMSToWhatsDetails_SMSToWhatsMapping");
            });

            modelBuilder.Entity<SmstoWhatsMapping>(entity =>
            {
                entity.HasKey(e => e.SmstoWhatsupId);

                entity.ToTable("SMSToWhatsMapping");

                entity.Property(e => e.SmstoWhatsupId).HasColumnName("SMSToWhatsupId");
                entity.Property(e => e.IsSmsretry).HasColumnName("IsSMSRetry");
                entity.Property(e => e.SmsarabicLangToWhatsLang)
                    .HasMaxLength(50)
                    .HasColumnName("SMSArabicLangToWhatsLang");
                entity.Property(e => e.SmsenglishLangToWhatsLang)
                    .HasMaxLength(50)
                    .HasColumnName("SMSEnglishLangToWhatsLang");
                entity.Property(e => e.SmsretryPeriodSecs).HasColumnName("SMSRetryPeriodSecs");
                entity.Property(e => e.SmstemplateId).HasColumnName("SMSTemplateId");

                entity.HasOne(d => d.WhatsUpTemplate).WithMany(p => p.SmstoWhatsMappings)
                    .HasForeignKey(d => d.WhatsUpTemplateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SMSToWhatsMapping_NotificationMessageTemplate");
            });

            modelBuilder.Entity<SocialMediaAuthorization>(entity =>
            {
                entity.HasKey(e => e.SocialMediaAuthorizationId)
                    .HasName("PK__SocialMe__ED9A2E6AB076A5EA")
                    .HasFillFactor(80);

                entity.ToTable("SocialMediaAuthorization");

                entity.Property(e => e.AuthorizationCode).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SocialMediaAuthorizationDescription).HasMaxLength(300);
                entity.Property(e => e.SocialMediaAuthorizationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.Value).HasMaxLength(50);

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SocialMediaAuthorizations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SocialMediaAuthorization_RowStatusDIM");

                entity.HasOne(d => d.SocialMedia).WithMany(p => p.SocialMediaAuthorizations)
                    .HasForeignKey(d => d.SocialMediaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaAuthorization_SocialMedia");

                entity.HasOne(d => d.Source).WithMany(p => p.SocialMediaAuthorizations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaAuthorization_Source");
            });

            modelBuilder.Entity<SocialMediaAuthorizationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaAuthorizationGuidView");

                entity.Property(e => e.AuthorizationCode).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaAuthorizationDescription).HasMaxLength(300);
                entity.Property(e => e.Value).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaAuthorizationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaAuthorizationView");

                entity.Property(e => e.AuthorizationCode).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaAuthorizationDescription).HasMaxLength(300);
                entity.Property(e => e.SocialMediaAuthorizationId).ValueGeneratedOnAdd();
                entity.Property(e => e.Value).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaCategoryDim>(entity =>
            {
                entity.HasKey(e => e.SocialMediaCategoryId)
                    .HasName("SocialMediaTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("SocialMediaCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SocialMediaCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SocialMediaCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SocialMediaCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SocialMediaCategoryCode).HasMaxLength(20);
                entity.Property(e => e.SocialMediaCategoryDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<SocialMediaComment>(entity =>
            {
                entity.HasKey(e => e.SocialMediaCommentId)
                    .HasName("PK__SocialMe__D6A8AF381E2083E4")
                    .HasFillFactor(80);

                entity.ToTable("SocialMediaComment");

                entity.Property(e => e.CommentInvolvementId).HasDefaultValue(1);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SocialMediaCommentGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Comment).WithMany(p => p.SocialMediaComments)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaComment_Comment");

                entity.HasOne(d => d.CommentInvolvement).WithMany(p => p.SocialMediaComments)
                    .HasForeignKey(d => d.CommentInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaComment_CommentInvolvement");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SocialMediaComments)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SocialMediaComment_RowStatusDIM");

                entity.HasOne(d => d.SocialMedia).WithMany(p => p.SocialMediaComments)
                    .HasForeignKey(d => d.SocialMediaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaComment_SocialMedia");

                entity.HasOne(d => d.Source).WithMany(p => p.SocialMediaComments)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaComment_Source");
            });

            modelBuilder.Entity<SocialMediaCommentContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaCommentContainerGuidView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaCommentContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaCommentContainerView");

                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCommentId).ValueGeneratedOnAdd();
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaCommentGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaCommentGuidView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaCommentView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaCommentView");

                entity.Property(e => e.CommentCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CommentName).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EntryDateTime).HasColumnType("datetime");
                entity.Property(e => e.ImportanceHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ImportanceHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PriorityHighLowCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PriorityHighLowDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaEnforcementOfficialContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaEnforcementOfficialContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaEnforcementOfficialGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaEnforcementOfficialGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EnforcementOfficialAsnCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialBadgeIdentification).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialPostLicenseIdent).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialUnit).HasMaxLength(50);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaEnforcementOfficialView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaEnforcementOfficialView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.EnforcementOfficialAsnCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialAsnCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialBadgeIdentification).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.EnforcementOfficialPostLicenseIdent).HasMaxLength(50);
                entity.Property(e => e.EnforcementOfficialUnit).HasMaxLength(50);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaGuidView");

                entity.Property(e => e.Account).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
                entity.Property(e => e.Uri)
                    .HasMaxLength(500)
                    .HasColumnName("URI");
            });

            modelBuilder.Entity<SocialMediaInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.SocialMediaInvolvementId)
                    .HasName("PK__SocialMe__66D7AA34ECBE5B31")
                    .HasFillFactor(80);

                entity.ToTable("SocialMediaInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SocialMediaInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SocialMediaInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SocialMediaInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaInvolvementDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SocialMediaInvolvementCode).HasMaxLength(20);
                entity.Property(e => e.SocialMediaInvolvementDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<SocialMediaJudicialOfficialContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaJudicialOfficialContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaJudicialOfficialGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaJudicialOfficialGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IdentificationJurisdiction).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarIdentification).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialRegIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaJudicialOfficialView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaJudicialOfficialView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IdentificationJurisdiction).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarIdentification).HasMaxLength(50);
                entity.Property(e => e.JudicialOfficialBarStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialBarStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialPanelDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JudicialOfficialRegIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaJurorContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaJurorContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaJurorGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaJurorGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.JurorDismissedDate).HasColumnType("datetime");
                entity.Property(e => e.JurorDismissedReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorIdentification).HasMaxLength(50);
                entity.Property(e => e.JurorPanelIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaJurorView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaJurorView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.JurorDismissedDate).HasColumnType("datetime");
                entity.Property(e => e.JurorDismissedReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorDismissedReasonDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.JurorIdentification).HasMaxLength(50);
                entity.Property(e => e.JurorPanelIdentification).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaLocation>(entity =>
            {
                entity.HasKey(e => e.SocialMediaLocationId)
                    .HasName("PK__SocialMe__FAF4576377950C59")
                    .HasFillFactor(80);

                entity.ToTable("SocialMediaLocation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.LocationGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.LocationInvolvementId).HasDefaultValue(1);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SocialMediaLocationDescription).HasMaxLength(300);
                entity.Property(e => e.SocialMediaLocationGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Location).WithMany(p => p.SocialMediaLocations)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaLocation_Location");

                entity.HasOne(d => d.LocationInvolvement).WithMany(p => p.SocialMediaLocations)
                    .HasForeignKey(d => d.LocationInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaLocation_LocationInvolvement");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SocialMediaLocations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SocialMediaLocation_RowStatusDIM");

                entity.HasOne(d => d.SocialMedia).WithMany(p => p.SocialMediaLocations)
                    .HasForeignKey(d => d.SocialMediaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaLocation_SocialMedia");

                entity.HasOne(d => d.Source).WithMany(p => p.SocialMediaLocations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaLocation_Source");
            });

            modelBuilder.Entity<SocialMediaLocationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaLocationContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaLocationDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaLocationContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaLocationContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaLocationDescription).HasMaxLength(300);
                entity.Property(e => e.SocialMediaLocationId).ValueGeneratedOnAdd();
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaMissingPersonContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaMissingPersonContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaMissingPersonGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaMissingPersonGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DeclarationDate).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.FoundDate).HasColumnType("datetime");
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.LastSeenDate).HasColumnType("datetime");
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.MissingPersonCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaMissingPersonView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaMissingPersonView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.DeclarationDate).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.FoundDate).HasColumnType("datetime");
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.LastSeenDate).HasColumnType("datetime");
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.MissingPersonCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonCircumstanceDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MissingPersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaPerson>(entity =>
            {
                entity.HasKey(e => e.SocialMediaPersonId)
                    .HasName("PK__SocialMe__FF45A5606F496624")
                    .HasFillFactor(80);

                entity.ToTable("SocialMediaPerson");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementId).HasDefaultValue(1);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SocialMediaPersonGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Person).WithMany(p => p.SocialMediaPeople)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaPerson_Person");

                entity.HasOne(d => d.PersonInvolvement).WithMany(p => p.SocialMediaPeople)
                    .HasForeignKey(d => d.PersonInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaPerson_PersonInvolvement");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SocialMediaPeople)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SocialMediaPerson_RowStatusDIM");

                entity.HasOne(d => d.SocialMedia).WithMany(p => p.SocialMediaPeople)
                    .HasForeignKey(d => d.SocialMediaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaPerson_SocialMedia");

                entity.HasOne(d => d.Source).WithMany(p => p.SocialMediaPeople)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMediaPerson_Source");
            });

            modelBuilder.Entity<SocialMediaPersonContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaPersonContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaPersonContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaPersonContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SocialMediaPersonId).ValueGeneratedOnAdd();
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaPersonGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaPersonGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaPersonView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaPersonView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaSubjectContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaSubjectContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaSubjectGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaSubjectGuidView");

                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalOrganizationGuid).HasColumnName("CriminalOrganizationGUID");
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DnacollectionStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusCode");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.MultiSourceOffenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.SubjectCorrectionIdentification).HasMaxLength(50);
                entity.Property(e => e.SubjectDisciplinaryActionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(20);
                entity.Property(e => e.SubjectJacketNumber).HasMaxLength(50);
                entity.Property(e => e.SubjectSpecialHandlingGuid).HasColumnName("SubjectSpecialHandlingGUID");
                entity.Property(e => e.SubjectStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.TheftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaSubjectView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaSubjectView");

                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CautionInformationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DnacollectionStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusCode");
                entity.Property(e => e.DnacollectionStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusDescription");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.MultiSourceOffenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MultiSourceOffenderDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.SubjectCorrectionIdentification).HasMaxLength(50);
                entity.Property(e => e.SubjectDisciplinaryActionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectDisciplinaryActionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(20);
                entity.Property(e => e.SubjectJacketNumber).HasMaxLength(50);
                entity.Property(e => e.SubjectStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.TheftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.TheftCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaUserContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaUserContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaUserGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaUserGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DirectoryDomain).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceDirectoryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaUserView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaUserView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DirectoryDomain).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceDirectoryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceDirectoryCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<SocialMediaVictimContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaVictimContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaVictimGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaVictimGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.VictimCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaVictimView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaVictimView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaPersonDescription).HasMaxLength(300);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.VictimCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SocialMediaView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SocialMediaView");

                entity.Property(e => e.Account).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaId).ValueGeneratedOnAdd();
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Title).HasMaxLength(200);
                entity.Property(e => e.Uri)
                    .HasMaxLength(500)
                    .HasColumnName("URI");
            });

            modelBuilder.Entity<SocialMedium>(entity =>
            {
                entity.HasKey(e => e.SocialMediaId)
                    .HasName("PK__SocialMe__3B026C1B7F9B9620")
                    .HasFillFactor(80);

                entity.Property(e => e.Account).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.SocialMediaCategoryId).HasDefaultValue(1);
                entity.Property(e => e.SocialMediaGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.Title).HasMaxLength(200);
                entity.Property(e => e.Uri)
                    .HasMaxLength(500)
                    .HasColumnName("URI");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SocialMedia)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SocialMedia_RowStatusDIM");

                entity.HasOne(d => d.SocialMediaCategory).WithMany(p => p.SocialMedia)
                    .HasForeignKey(d => d.SocialMediaCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMedia_SocialCategory");

                entity.HasOne(d => d.Source).WithMany(p => p.SocialMedia)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SocialMedia_Social");
            });

            modelBuilder.Entity<Source>(entity =>
            {
                entity.HasKey(e => e.SourceId).HasFillFactor(80);

                entity.ToTable("Source");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.RetentionPeriodEnforcedIndicator).HasDefaultValue(false);
                entity.Property(e => e.SourceCategoryId).HasDefaultValue(1);
                entity.Property(e => e.SourceGuid).HasDefaultValueSql("(newid())");
                entity.Property(e => e.SourceName).HasMaxLength(100);
                entity.Property(e => e.SourcePolicyId).HasDefaultValue(1);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Sources)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Source_RowStatusDIM");

                entity.HasOne(d => d.SourceCategory).WithMany(p => p.Sources)
                    .HasForeignKey(d => d.SourceCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SourceTypeDIM_Source_FK1");

                entity.HasOne(d => d.SourcePolicy).WithMany(p => p.Sources)
                    .HasForeignKey(d => d.SourcePolicyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Source_SourcePolicy");
            });

            modelBuilder.Entity<SourceCategoryDim>(entity =>
            {
                entity.HasKey(e => e.SourceCategoryId)
                    .HasName("SourceTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("SourceCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SourceCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SourceCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SourceCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SourceCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SourceCategoryCode).HasMaxLength(20);
                entity.Property(e => e.SourceCategoryDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<SourceDetail>(entity =>
            {
                entity.HasKey(e => e.SourceDetailId).HasFillFactor(80);

                entity.ToTable("SourceDetail");

                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(255);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Source).WithMany(p => p.SourceDetails)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SourceDetail_Source");
            });

            modelBuilder.Entity<SourceDirectoryCategoryDim>(entity =>
            {
                entity.HasKey(e => e.SourceDirectoryCategoryId)
                    .HasName("PK__SourceDi__CAACB40315EB8AE7")
                    .HasFillFactor(80);

                entity.ToTable("SourceDirectoryCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SourceDirectoryCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SourceDirectoryCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SourceDirectoryCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SourceDirectoryCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SourceDirectoryCategoryCode).HasMaxLength(20);
                entity.Property(e => e.SourceDirectoryCategoryDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<SourceOfModificationDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("SourceOfModificationDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SourcePolicyDim>(entity =>
            {
                entity.HasKey(e => e.SourcePolicyId)
                    .HasName("PK__SourcePo__2E9D81036A02EB1F")
                    .HasFillFactor(80);

                entity.ToTable("SourcePolicyDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SourcePolicyDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SourcePolicyDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SourcePolicyDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SourcePolicyDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SourcePolicyCode).HasMaxLength(20);
                entity.Property(e => e.SourcePolicyDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.HasKey(e => e.StateId).HasFillFactor(80);

                entity.ToTable("State");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ForExternalUsers).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ApprovalCycle).WithMany(p => p.States)
                    .HasForeignKey(d => d.ApprovalCycleId)
                    .HasConstraintName("FK_State_ApprovalCycle");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.StateCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_State_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.StateModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_State_Person1");

                entity.HasOne(d => d.ResponsibleRole).WithMany(p => p.States)
                    .HasForeignKey(d => d.ResponsibleRoleId)
                    .HasConstraintName("FK_State_aspnet_Roles");
            });

            modelBuilder.Entity<State1>(entity =>
            {
                entity.HasKey(e => new { e.JobId, e.Id }).HasName("PK_HangFire_State");

                entity.ToTable("State", "HangFire");

                entity.HasIndex(e => e.CreatedAt, "IX_HangFire_State_CreatedAt");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.CreatedAt).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(20);
                entity.Property(e => e.Reason).HasMaxLength(100);

                entity.HasOne(d => d.Job).WithMany(p => p.State1s)
                    .HasForeignKey(d => d.JobId)
                    .HasConstraintName("FK_HangFire_State_Job");
            });

            modelBuilder.Entity<StateNotificationRole>(entity =>
            {
                entity.HasKey(e => e.StateNotificationRoleId).HasFillFactor(80);

                entity.ToTable("StateNotificationRole");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.StateNotificationRoleCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_StateNotificationRole_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.StateNotificationRoleModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_StateNotificationRole_Person1");

                entity.HasOne(d => d.RelationType).WithMany(p => p.StateNotificationRoles)
                    .HasForeignKey(d => d.RelationTypeId)
                    .HasConstraintName("FK_StateNotificationRole_StateNotificationRoleRelationTypeDIM");

                entity.HasOne(d => d.Role).WithMany(p => p.StateNotificationRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_StateNotificationRole_aspnet_Roles");

                entity.HasOne(d => d.State).WithMany(p => p.StateNotificationRoles)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK_StateNotificationRole_State");
            });

            modelBuilder.Entity<StateNotificationRoleRelationTypeDim>(entity =>
            {
                entity.HasKey(e => e.RelationTypeId).HasFillFactor(80);

                entity.ToTable("StateNotificationRoleRelationTypeDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.HasKey(e => e.StatusId)
                    .HasName("Status_PK")
                    .HasFillFactor(80);

                entity.ToTable("Status");

                entity.Property(e => e.StatusId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Enityt).WithMany(p => p.Statuses)
                    .HasForeignKey(d => d.EnitytId)
                    .HasConstraintName("FK_Status_Entity");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Statuses)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Status_RowStatusDIM");
            });

            modelBuilder.Entity<StatusDim>(entity =>
            {
                entity.HasKey(e => e.StatusId)
                    .HasName("StatusDIM1_PK")
                    .HasFillFactor(80);

                entity.ToTable("StatusDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.StatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_StatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<StatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("StatusDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.StatusCode).HasMaxLength(50);
                entity.Property(e => e.StatusDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<StatuteDim>(entity =>
            {
                entity.HasKey(e => e.StatuteId)
                    .HasName("ChargeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("StatuteDIM");

                entity.Property(e => e.Applicability).HasMaxLength(100);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.LegalDescription).HasMaxLength(100);
                entity.Property(e => e.Nciccode)
                    .HasMaxLength(20)
                    .HasColumnName("NCICCode");
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
                entity.Property(e => e.StatuteDescription).HasMaxLength(200);
                entity.Property(e => e.StatuteSection).HasMaxLength(20);
                entity.Property(e => e.UcrcrimeType)
                    .HasMaxLength(50)
                    .HasColumnName("UCRCrimeType");
                entity.Property(e => e.Urccode)
                    .HasMaxLength(20)
                    .HasColumnName("URCCode");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.StatuteDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_StatuteDIM_RowStatusDIM");
            });

            modelBuilder.Entity<StatuteDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("StatuteDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.StatuteCode).HasMaxLength(20);
                entity.Property(e => e.StatuteDescription).HasMaxLength(100);
                entity.Property(e => e.StatuteStatuteDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<StatuteSeverityDim>(entity =>
            {
                entity.HasKey(e => e.StatuteSeverityId)
                    .HasName("PK__StatuteS__8065C734876A9CEA")
                    .HasFillFactor(80);

                entity.ToTable("StatuteSeverityDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.StatuteSeverityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_StatuteSeverityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<StatuteSeverityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("StatuteSeverityDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.StatuteSeverityCode).HasMaxLength(50);
                entity.Property(e => e.StatuteSeverityDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<StreetCrossStreet>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__StreetCr__3214EC2740365097")
                    .HasFillFactor(80);

                entity.ToTable("StreetCrossStreet");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.CrossStreetId).HasColumnName("crossStreetID");
                entity.Property(e => e.StreetId).HasColumnName("streetID");

                entity.HasOne(d => d.CrossStreet).WithMany(p => p.StreetCrossStreets)
                    .HasForeignKey(d => d.CrossStreetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__StreetCro__cross__3FF2D5BF");

                entity.HasOne(d => d.Street).WithMany(p => p.StreetCrossStreets)
                    .HasForeignKey(d => d.StreetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__StreetCro__stree__3EFEB186");
            });

            modelBuilder.Entity<StreetDim>(entity =>
            {
                entity.HasKey(e => e.StreetId).HasFillFactor(80);

                entity.ToTable("StreetDIM");

                entity.Property(e => e.StreetId).ValueGeneratedNever();
                entity.Property(e => e.StreetCode).HasMaxLength(50);
                entity.Property(e => e.StreetName).HasMaxLength(200);

                entity.HasOne(d => d.Sector).WithMany(p => p.StreetDims)
                    .HasForeignKey(d => d.SectorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StreetDIM_SectorDIM");
            });

            modelBuilder.Entity<Subject>(entity =>
            {
                entity.HasKey(e => e.PersonId)
                    .HasName("PK_Subject_1")
                    .HasFillFactor(80);

                entity.ToTable("Subject");

                entity.Property(e => e.PersonId).ValueGeneratedNever();
                entity.Property(e => e.ArmedIndicator).HasDefaultValue(false);
                entity.Property(e => e.CriminalOrganizationGuid).HasColumnName("CriminalOrganizationGUID");
                entity.Property(e => e.DnacollectionStatusId)
                    .HasDefaultValue(1)
                    .HasColumnName("DNACollectionStatusId");
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.StatementIndicator).HasComputedColumnSql("(case when [StatementDate] IS NULL then (0) else (1) end)", false);
                entity.Property(e => e.SubjectCorrectionIdentification).HasMaxLength(50);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(20);
                entity.Property(e => e.SubjectJacketNumber).HasMaxLength(50);
                entity.Property(e => e.SubjectSpecialHandlingGuid).HasColumnName("SubjectSpecialHandlingGUID");

                entity.HasOne(d => d.CautionInformation).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CautionInformationId)
                    .HasConstraintName("FK_Subject_CautionInformationDIM");

                entity.HasOne(d => d.CriminalInvolvement).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalInvolvementId)
                    .HasConstraintName("FK_Subject_CriminalInvolvementDIM");

                entity.HasOne(d => d.CriminalOrganization).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalOrganizationId)
                    .HasConstraintName("FK_Subject_Organization");

                entity.HasOne(d => d.CriminalTraitActivity).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalTraitActivityId)
                    .HasConstraintName("FK_Subject_CriminalTraitActivityDIM");

                entity.HasOne(d => d.CriminalTraitColor).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalTraitColorId)
                    .HasConstraintName("FK_Subject_CriminalTraitColorDIM");

                entity.HasOne(d => d.CriminalTraitCommunication).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalTraitCommunicationId)
                    .HasConstraintName("FK_Subject_CriminalTraitCommunicationDIM");

                entity.HasOne(d => d.CriminalTraitDress).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalTraitDressId)
                    .HasConstraintName("FK_Subject_CriminalTraitDressDIM");

                entity.HasOne(d => d.CriminalTraitEthnicity).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalTraitEthnicityId)
                    .HasConstraintName("FK_Subject_EthnicityDIM");

                entity.HasOne(d => d.CriminalTraitGraffitiImage).WithMany(p => p.SubjectCriminalTraitGraffitiImages)
                    .HasForeignKey(d => d.CriminalTraitGraffitiImageId)
                    .HasConstraintName("FK_Subject_Image-Graffiti");

                entity.HasOne(d => d.CriminalTraitHandSignal).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalTraitHandSignalId)
                    .HasConstraintName("FK_Subject_CriminalTraitHandSignalDIM");

                entity.HasOne(d => d.CriminalTrait).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalTraitId)
                    .HasConstraintName("FK_Subject_CriminalTraitDIM");

                entity.HasOne(d => d.CriminalTraitModusOperation).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalTraitModusOperationId)
                    .HasConstraintName("FK_Subject_CriminalTraitModusOperandiDIM");

                entity.HasOne(d => d.CriminalTraitTarget).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalTraitTargetId)
                    .HasConstraintName("FK_Subject_CriminalTraitTargetDIM");

                entity.HasOne(d => d.CriminalTraitTattooImage).WithMany(p => p.SubjectCriminalTraitTattooImages)
                    .HasForeignKey(d => d.CriminalTraitTattooImageId)
                    .HasConstraintName("FK_Subject_Image-Tattoo");

                entity.HasOne(d => d.CriminalTraitTurfLocaiton).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.CriminalTraitTurfLocaitonId)
                    .HasConstraintName("FK_Subject_Location-TurffLocation");

                entity.HasOne(d => d.DnacollectionStatus).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.DnacollectionStatusId)
                    .HasConstraintName("FK_Subject_DNACollectionStatusDIM");

                entity.HasOne(d => d.MultiSourceOffender).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.MultiSourceOffenderId)
                    .HasConstraintName("FK_Subject_MultiSourceOffenderDIM");

                entity.HasOne(d => d.Person).WithOne(p => p.Subject)
                    .HasForeignKey<Subject>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Subject_Person");

                entity.HasOne(d => d.Statement).WithMany(p => p.SubjectStatements)
                    .HasForeignKey(d => d.StatementId)
                    .HasConstraintName("FK_Subject_PersonComment-Statement");

                entity.HasOne(d => d.SubjectDisciplinaryAction).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.SubjectDisciplinaryActionId)
                    .HasConstraintName("FK_Subject_DisciplinaryActionDIM");

                entity.HasOne(d => d.SubjectExtradition).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.SubjectExtraditionId)
                    .HasConstraintName("FK_Subject_ExtraditionDIM");

                entity.HasOne(d => d.SubjectNotice).WithMany(p => p.SubjectSubjectNotices)
                    .HasForeignKey(d => d.SubjectNoticeId)
                    .HasConstraintName("FK_Subject_PersonComment-Notice");

                entity.HasOne(d => d.SubjectSpecialHandling).WithMany(p => p.SubjectSubjectSpecialHandlings)
                    .HasForeignKey(d => d.SubjectSpecialHandlingId)
                    .HasConstraintName("FK_Subject_PersonComment-SpecialHandling");

                entity.HasOne(d => d.SubjectStatus).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.SubjectStatusId)
                    .HasConstraintName("FK_Subject_StatusDIM");

                entity.HasOne(d => d.TheftCategory).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.TheftCategoryId)
                    .HasConstraintName("FK_Subject_TheftCategoryDIM");

                entity.HasOne(d => d.WarrantCategory).WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.WarrantCategoryId)
                    .HasConstraintName("FK_Subject_WarrantCategoryDIM");
            });

            modelBuilder.Entity<SubjectDisciplinaryActionDim>(entity =>
            {
                entity.HasKey(e => e.SubjectDisciplinaryActionId)
                    .HasName("PK_DisciplinaryActionDIM")
                    .HasFillFactor(80);

                entity.ToTable("SubjectDisciplinaryActionDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubjectDisciplinaryActionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubjectDisciplinaryActionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SubjectDisciplinaryActionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubjectDisciplinaryActionDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SubjectDisciplinaryActionCode).HasMaxLength(20);
                entity.Property(e => e.SubjectDisciplinaryActionDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<SubjectExtraditionDim>(entity =>
            {
                entity.HasKey(e => e.SubjectExtraditionId)
                    .HasName("PK__SubjectE__0467964124C21D72")
                    .HasFillFactor(80);

                entity.ToTable("SubjectExtraditionDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubjectExtraditionDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubjectExtraditionDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SubjectExtraditionDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubjectExtraditionDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SubjectExtraditionCode).HasMaxLength(50);
                entity.Property(e => e.SubjectExtraditionDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<SubjectGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubjectGuidView");

                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalOrganizationGuid).HasColumnName("CriminalOrganizationGUID");
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DnacollectionStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusCode");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.MultiSourceOffenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.SubjectCorrectionIdentification).HasMaxLength(50);
                entity.Property(e => e.SubjectDisciplinaryActionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(20);
                entity.Property(e => e.SubjectJacketNumber).HasMaxLength(50);
                entity.Property(e => e.SubjectSpecialHandlingGuid).HasColumnName("SubjectSpecialHandlingGUID");
                entity.Property(e => e.SubjectStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.TheftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SubjectOrganization>(entity =>
            {
                entity.HasKey(e => e.OrganizationId)
                    .HasName("PK_SubjectOrganization_1")
                    .HasFillFactor(80);

                entity.ToTable("SubjectOrganization");

                entity.Property(e => e.OrganizationId).ValueGeneratedNever();
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.StatementIndicator).HasComputedColumnSql("(case when [StatementDate] IS NULL then (0) else (1) end)", false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(50);

                entity.HasOne(d => d.CautionInformation).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CautionInformationId)
                    .HasConstraintName("FK_SubjectOrganization_CautionInformationDIM");

                entity.HasOne(d => d.CriminalInvolvement).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CriminalInvolvementId)
                    .HasConstraintName("FK_SubjectOrganization_CriminalInvolvementDIM");

                entity.HasOne(d => d.CriminalTraitActivity).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CriminalTraitActivityId)
                    .HasConstraintName("FK_SubjectOrganization_CriminalTraitActivityDIM");

                entity.HasOne(d => d.CriminalTraitColor).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CriminalTraitColorId)
                    .HasConstraintName("FK_SubjectOrganization_CriminalTraitColorDIM");

                entity.HasOne(d => d.CriminalTraitCommunication).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CriminalTraitCommunicationId)
                    .HasConstraintName("FK_SubjectOrganization_CriminalTraitCommunicationDIM");

                entity.HasOne(d => d.CriminalTraitDress).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CriminalTraitDressId)
                    .HasConstraintName("FK_SubjectOrganization_CriminalTraitDressDIM");

                entity.HasOne(d => d.CriminalTraitEthnicity).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CriminalTraitEthnicityId)
                    .HasConstraintName("FK_SubjectOrganization_EthnicityDIM");

                entity.HasOne(d => d.CriminalTraitGraffitiImage).WithMany(p => p.SubjectOrganizationCriminalTraitGraffitiImages)
                    .HasForeignKey(d => d.CriminalTraitGraffitiImageId)
                    .HasConstraintName("FK_SubjectOrganization_Image-Graffiti");

                entity.HasOne(d => d.CriminalTraitHandSignal).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CriminalTraitHandSignalId)
                    .HasConstraintName("FK_SubjectOrganization_CriminalTraitHandSignalDIM");

                entity.HasOne(d => d.CriminalTrait).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CriminalTraitId)
                    .HasConstraintName("FK_SubjectOrganization_CriminalTraitDIM");

                entity.HasOne(d => d.CriminalTraitModusOperation).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CriminalTraitModusOperationId)
                    .HasConstraintName("FK_SubjectOrganization_CriminalTraitModusOperandiDIM");

                entity.HasOne(d => d.CriminalTraitTarget).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CriminalTraitTargetId)
                    .HasConstraintName("FK_SubjectOrganization_CriminalTraitTargetDIM");

                entity.HasOne(d => d.CriminalTraitTattooImage).WithMany(p => p.SubjectOrganizationCriminalTraitTattooImages)
                    .HasForeignKey(d => d.CriminalTraitTattooImageId)
                    .HasConstraintName("FK_SubjectOrganization_Image-Tattoo");

                entity.HasOne(d => d.CriminalTraitTurfLocaiton).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.CriminalTraitTurfLocaitonId)
                    .HasConstraintName("FK_SubjectOrganization_Location");

                entity.HasOne(d => d.Organization).WithOne(p => p.SubjectOrganization)
                    .HasForeignKey<SubjectOrganization>(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubjectOrganization_Organization");

                entity.HasOne(d => d.Statement).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.StatementId)
                    .HasConstraintName("FK_SubjectOrganization_OrganizationComment");

                entity.HasOne(d => d.Status).WithMany(p => p.SubjectOrganizations)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_SubjectOrganization_StatusDIM");
            });

            modelBuilder.Entity<SubjectOrganizationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubjectOrganizationGuidView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.StatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(50);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SubjectOrganizationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubjectOrganizationView");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CautionInformationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OrganizationStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.StatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.StatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(50);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SubjectRegistration>(entity =>
            {
                entity.HasKey(e => e.SubjectRegistrationId)
                    .HasName("PK__SubjectR__184A3F26E4466582")
                    .HasFillFactor(80);

                entity.ToTable("SubjectRegistration");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SourceId).HasDefaultValue(1L);
                entity.Property(e => e.SubjectRegistrationCategoryId).HasDefaultValue(1);
                entity.Property(e => e.SubjectRegistrationGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Activity).WithMany(p => p.SubjectRegistrations)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubjectRegistration_Activity");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubjectRegistrations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubjectRegistration_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.SubjectRegistrations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubjectRegistration_Source");

                entity.HasOne(d => d.SubjectRegistrationCategory).WithMany(p => p.SubjectRegistrations)
                    .HasForeignKey(d => d.SubjectRegistrationCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubjectRegistration_SubjectRegistrationCategory");
            });

            modelBuilder.Entity<SubjectRegistrationCategoryDim>(entity =>
            {
                entity.HasKey(e => e.SubjectRegistrationCategoryId)
                    .HasName("PK__SubjectR__3B1436FED1F80C04")
                    .HasFillFactor(80);

                entity.ToTable("SubjectRegistrationCategoryDIM");

                entity.Property(e => e.SubjectRegistrationCategoryId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubjectRegistrationCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubjectRegistrationCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SubjectRegistrationCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubjectRegistrationCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SubjectRegistrationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.SubjectRegistrationCategoryDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<SubjectRegistrationGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubjectRegistrationGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectRegistrationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SubjectRegistrationView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubjectRegistrationView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectRegistrationCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectRegistrationCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectRegistrationId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SubjectStatusDim>(entity =>
            {
                entity.HasKey(e => e.SubjectStatusId)
                    .HasName("PK__SubjectS__229C2C272C9C4E92")
                    .HasFillFactor(80);

                entity.ToTable("SubjectStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubjectStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubjectStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SubjectStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubjectStatusDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SubjectStatusCode).HasMaxLength(50);
                entity.Property(e => e.SubjectStatusDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<SubjectView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubjectView");

                entity.Property(e => e.CautionInformationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CautionInformationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.CriminalInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitActivityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitCommunicationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitDressDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitEthnicityDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitHandSignalDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitModusOperationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CriminalTraitTargetDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DnacollectionStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusCode");
                entity.Property(e => e.DnacollectionStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DNACollectionStatusDescription");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.MultiSourceOffenderCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MultiSourceOffenderDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.StatementDate).HasColumnType("datetime");
                entity.Property(e => e.SubjectCorrectionIdentification).HasMaxLength(50);
                entity.Property(e => e.SubjectDisciplinaryActionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectDisciplinaryActionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectExtraditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectIdentificaiton).HasMaxLength(20);
                entity.Property(e => e.SubjectJacketNumber).HasMaxLength(50);
                entity.Property(e => e.SubjectStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubjectStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.TheftCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.TheftCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Subscription>(entity =>
            {
                entity.HasKey(e => e.SubscriptionId)
                    .HasName("PK__Subscrip__9A2B249DD57CAD68")
                    .HasFillFactor(80);

                entity.ToTable("Subscription");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.SubscriptionCategoryId).HasDefaultValue(1);
                entity.Property(e => e.SubscriptionGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.Subscriptions)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_Subscription_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.Subscriptions)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Subscription_Source");

                entity.HasOne(d => d.SubscriptionCategory).WithMany(p => p.Subscriptions)
                    .HasForeignKey(d => d.SubscriptionCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Subscription_SubscriptionCategoryDIM");
            });

            modelBuilder.Entity<SubscriptionCategoryDim>(entity =>
            {
                entity.HasKey(e => e.SubscriptionCategoryId)
                    .HasName("PK__Subscrip__C081EF52B16B9273")
                    .HasFillFactor(80);

                entity.ToTable("SubscriptionCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubscriptionCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubscriptionCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SubscriptionCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SubscriptionCategoryCode).HasMaxLength(50);
                entity.Property(e => e.SubscriptionCategoryDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<SubscriptionGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SubscriptionInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.SubscriptionInvolvementId)
                    .HasName("PK__Subscrip__BBA68C88CB25B6A5")
                    .HasFillFactor(80);

                entity.ToTable("SubscriptionInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubscriptionInvolvementDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubscriptionInvolvementDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SubscriptionInvolvementDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionInvolvementDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SubscriptionInvolvementCode).HasMaxLength(20);
                entity.Property(e => e.SubscriptionInvolvementDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<SubscriptionLocation>(entity =>
            {
                entity.HasKey(e => e.SubscriptionLocationId).HasFillFactor(80);

                entity.ToTable("SubscriptionLocation");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SubscriptionLocationDescription).HasMaxLength(300);
                entity.Property(e => e.SubscriptionLocationGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Location).WithMany(p => p.SubscriptionLocations)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionLocation_Location");

                entity.HasOne(d => d.LocationInvolvement).WithMany(p => p.SubscriptionLocations)
                    .HasForeignKey(d => d.LocationInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionLocation_LocationInvolvementDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubscriptionLocations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubscriptionLocation_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.SubscriptionLocations)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionLocation_Source");

                entity.HasOne(d => d.Subscription).WithMany(p => p.SubscriptionLocations)
                    .HasForeignKey(d => d.SubscriptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionLocation_Subscription");
            });

            modelBuilder.Entity<SubscriptionLocationContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionLocationContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionLocationDescription).HasMaxLength(300);
            });

            modelBuilder.Entity<SubscriptionLocationContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionLocationContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.LocationInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LocationInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionLocationDescription).HasMaxLength(300);
                entity.Property(e => e.SubscriptionLocationId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SubscriptionPolygon>(entity =>
            {
                entity.HasKey(e => e.SubscriptionPolygonId).HasFillFactor(80);

                entity.ToTable("SubscriptionPolygon");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SubscriptionPolygonDescription).HasMaxLength(300);
                entity.Property(e => e.SubscriptionPolygonGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubscriptionPolygons)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubscriptionPolygon_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.SubscriptionPolygons)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionPolygon_Source");

                entity.HasOne(d => d.SubscriptionPolygonCategory).WithMany(p => p.SubscriptionPolygons)
                    .HasForeignKey(d => d.SubscriptionPolygonCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionPolygon_SubscriptionPolygonCategoryDIM");

                entity.HasOne(d => d.Subscription).WithMany(p => p.SubscriptionPolygons)
                    .HasForeignKey(d => d.Subscriptionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionPolygon_Subscription");
            });

            modelBuilder.Entity<SubscriptionPolygonCategoryDim>(entity =>
            {
                entity.HasKey(e => e.SubscriptionPolygonCategoryId).HasFillFactor(80);

                entity.ToTable("SubscriptionPolygonCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.SourceTable).HasMaxLength(100);
                entity.Property(e => e.SourceTableIdColumn).HasMaxLength(100);
                entity.Property(e => e.SourceTablePolygonColumn).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubscriptionPolygonCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubscriptionPolygonCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SubscriptionPolygonCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionPolygonCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SubscriptionPolygonCategoryCode).HasMaxLength(50);
                entity.Property(e => e.SubscriptionPolygonCategoryDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<SubscriptionPolygonGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionPolygonGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionPolygonCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionPolygonDescription).HasMaxLength(300);
            });

            modelBuilder.Entity<SubscriptionPolygonView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionPolygonView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionPolygonCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionPolygonCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionPolygonDescription).HasMaxLength(300);
                entity.Property(e => e.SubscriptionPolygonId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SubscriptionSocialMediaContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionSocialMediaContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionSocialMediaDescription).HasMaxLength(300);
            });

            modelBuilder.Entity<SubscriptionSocialMediaContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionSocialMediaContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.SubscriptionSocialMediaId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SubscriptionSocialMediaGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionSocialMediaGuidView");

                entity.Property(e => e.Account).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.Title).HasMaxLength(200);
                entity.Property(e => e.Uri)
                    .HasMaxLength(500)
                    .HasColumnName("URI");
            });

            modelBuilder.Entity<SubscriptionSocialMediaView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionSocialMediaView");

                entity.Property(e => e.Account).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SocialMediaInvolvementDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.Title).HasMaxLength(200);
                entity.Property(e => e.Uri)
                    .HasMaxLength(500)
                    .HasColumnName("URI");
            });

            modelBuilder.Entity<SubscriptionSocialMedium>(entity =>
            {
                entity.HasKey(e => e.SubscriptionSocialMediaId)
                    .HasName("PK_SubscriptionSocialMedia_SubscriptionSocialMediaId")
                    .HasFillFactor(80);

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SubscriptionSocialMediaDescription).HasMaxLength(300);
                entity.Property(e => e.SubscriptionSocialMediaGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubscriptionSocialMedia)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubscriptionSocialMedia_RowStatusDIM");

                entity.HasOne(d => d.SocialMedia).WithMany(p => p.SubscriptionSocialMedia)
                    .HasForeignKey(d => d.SocialMediaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionSocialMedia_SocialMedia");

                entity.HasOne(d => d.SocialMediaInvolvement).WithMany(p => p.SubscriptionSocialMedia)
                    .HasForeignKey(d => d.SocialMediaInvolvementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionSocialMedia_SocialMediaInvolvementDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.SubscriptionSocialMedia)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionSocialMedia_Source");

                entity.HasOne(d => d.Subscription).WithMany(p => p.SubscriptionSocialMedia)
                    .HasForeignKey(d => d.SubscriptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionSocialMedia_Subscription");
            });

            modelBuilder.Entity<SubscriptionSubdivision>(entity =>
            {
                entity.HasKey(e => e.SubscriptionSubdivisionId).HasFillFactor(80);

                entity.ToTable("SubscriptionSubdivision");

                entity.Property(e => e.SubscriptionSubdivisionId).ValueGeneratedNever();
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.SubscriptionSubdivisionDescription).HasMaxLength(300);
                entity.Property(e => e.SubscriptionSubdivisionGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.GeoLocationSubDivision).WithMany(p => p.SubscriptionSubdivisions)
                    .HasForeignKey(d => d.GeoLocationSubDivisionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionSubdivision_GeoLocationSubDivision");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SubscriptionSubdivisions)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SubscriptionSubdivision_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.SubscriptionSubdivisions)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionSubdivision_Source");

                entity.HasOne(d => d.Subscription).WithMany(p => p.SubscriptionSubdivisions)
                    .HasForeignKey(d => d.SubscriptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionSubdivision_Subscription");
            });

            modelBuilder.Entity<SubscriptionSubdivisionGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionSubdivisionGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionSubdivisionDescription).HasMaxLength(300);
            });

            modelBuilder.Entity<SubscriptionSubdivisionView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionSubdivisionView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.GeoLocationSubDivisionCity).HasMaxLength(100);
                entity.Property(e => e.GeoLocationSubDivisionCounty).HasMaxLength(50);
                entity.Property(e => e.GeoLocationSubDivisionState).HasMaxLength(50);
                entity.Property(e => e.GeoLocationSubDivisionSubDivision).HasMaxLength(100);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionSubdivisionDescription).HasMaxLength(300);
            });

            modelBuilder.Entity<SubscriptionView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SubscriptionView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SubscriptionId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Supervision>(entity =>
            {
                entity.HasKey(e => e.ActivityId).HasFillFactor(80);

                entity.ToTable("Supervision");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();

                entity.HasOne(d => d.Activity).WithOne(p => p.Supervision)
                    .HasForeignKey<Supervision>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supervision_Activity");

                entity.HasOne(d => d.FacilityBedAssignment).WithMany(p => p.Supervisions)
                    .HasForeignKey(d => d.FacilityBedAssignmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supervision_FacilityBedAssignementDIM");

                entity.HasOne(d => d.SupervisionCategory).WithMany(p => p.Supervisions)
                    .HasForeignKey(d => d.SupervisionCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supervision_SupervisionCategoryDIM");

                entity.HasOne(d => d.SupervisionCustodyStatus).WithMany(p => p.Supervisions)
                    .HasForeignKey(d => d.SupervisionCustodyStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supervision_SupervisionCustodyStatusDIM");

                entity.HasOne(d => d.SupervisionStatus).WithMany(p => p.Supervisions)
                    .HasForeignKey(d => d.SupervisionStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supervision_SupervisionStatusDIM");
            });

            modelBuilder.Entity<SupervisionCategoryDim>(entity =>
            {
                entity.HasKey(e => e.SupervisionCategoryId)
                    .HasName("PK__Supervis__9342E11F9A6DCA83")
                    .HasFillFactor(80);

                entity.ToTable("SupervisionCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SupervisionCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SupervisionCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SupervisionCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SupervisionCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SupervisionCategoryCode).HasMaxLength(50);
                entity.Property(e => e.SupervisionCategoryDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<SupervisionCustodyStatusDim>(entity =>
            {
                entity.HasKey(e => e.SupervisionCustodyStatusId)
                    .HasName("PK__Supervis__95AF52F80E852077")
                    .HasFillFactor(80);

                entity.ToTable("SupervisionCustodyStatusDIM");

                entity.Property(e => e.SupervisionCustodyStatusId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SupervisionCustodyStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SupervisionCustodyStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SupervisionCustodyStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SupervisionCustodyStatusDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SupervisionCustodyStatusCode).HasMaxLength(50);
                entity.Property(e => e.SupervisionCustodyStatusDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<SupervisionStatusDim>(entity =>
            {
                entity.HasKey(e => e.SupervisionStatusId)
                    .HasName("PK__Supervis__B6443087A7C0E76F")
                    .HasFillFactor(80);

                entity.ToTable("SupervisionStatusDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SupervisionStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SupervisionStatusDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SupervisionStatusDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SupervisionStatusDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.SupervisionStatusCode).HasMaxLength(50);
                entity.Property(e => e.SupervisionStatusDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<SupportAuditDim>(entity =>
            {
                entity.HasKey(e => e.SupportAuditId).HasFillFactor(80);

                entity.ToTable("SupportAuditDIM");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.Dimid).HasColumnName("DIMId");
                entity.Property(e => e.TableName).HasMaxLength(100);

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SupportAuditDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SupportAuditDIM_RowStatusDIM");
            });

            modelBuilder.Entity<SupportExceptionDimtable>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("SupportExceptionDIMTable");

                entity.Property(e => e.SpecialTableName).HasMaxLength(100);

                entity.HasOne(d => d.RowStatus).WithMany()
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SupportExceptionDIMTable_RowStatusDIM");
            });

            modelBuilder.Entity<SupportSupportExceptionDimtableDescriptionCodeColumnDetail>(entity =>
            {
                entity.HasKey(e => new { e.Table, e.ExpectedColumn, e.OriginalColumn }).HasFillFactor(80);

                entity.ToTable("SupportSupportExceptionDIMTableDescriptionCodeColumnDetail");

                entity.Property(e => e.Table).HasMaxLength(100);
                entity.Property(e => e.ExpectedColumn).HasMaxLength(100);
                entity.Property(e => e.OriginalColumn).HasMaxLength(100);

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SupportSupportExceptionDimtableDescriptionCodeColumnDetails)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SupportSupportExceptionDIMTableDescriptionCodeColumnDetail_RowStatusDIM");
            });

            modelBuilder.Entity<SupportTableForExtraAssociationTableColumn>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AssociationTableName).HasMaxLength(100);
                entity.Property(e => e.ExtraColumnName).HasMaxLength(100);

                entity.HasOne(d => d.RowStatus).WithMany()
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SupportTableForExtraAssociationTableColumns_RowStatusDIM");
            });

            modelBuilder.Entity<SupportTableSpsFunctionsAndView>(entity =>
            {
                entity.HasKey(e => new { e.Table, e.ProcName }).HasFillFactor(80);

                entity.ToTable("SupportTableSPsFunctionsAndViews");

                entity.Property(e => e.Table).HasMaxLength(100);
                entity.Property(e => e.ProcName).HasMaxLength(250);
                entity.Property(e => e.Error).HasMaxLength(500);
                entity.Property(e => e.ExecutedDateTimeStamp).HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SupportTableSpsFunctionsAndViews)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SupportTableSPsFunctionsAndViews_RowStatusDIM");
            });

            modelBuilder.Entity<SupportTablesAndRelation>(entity =>
            {
                entity.HasKey(e => e.Table).HasFillFactor(80);

                entity.Property(e => e.Table).HasMaxLength(100);
                entity.Property(e => e.AssociatedParentTable).HasMaxLength(100);
                entity.Property(e => e.AssociationType).HasMaxLength(100);
                entity.Property(e => e.ParentTable).HasMaxLength(100);
                entity.Property(e => e.RowNo).ValueGeneratedOnAdd();

                entity.HasOne(d => d.RowStatus).WithMany(p => p.SupportTablesAndRelations)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_SupportTablesAndRelations_RowStatusDIM");
            });

            modelBuilder.Entity<Survey>(entity =>
            {
                entity.ToTable("Survey");

                entity.HasIndex(e => e.SurveyAnswerId, "IX_Survey_SurveyAnswerId");

                entity.HasIndex(e => e.SurveyLanguageId, "IX_Survey_SurveyLanguageId");

                entity.HasIndex(e => e.SurveyStatusId, "IX_Survey_SurveyStatusId");

                entity.Property(e => e.Comment).HasMaxLength(4000);
                entity.Property(e => e.Ipaddress).HasColumnName("IPAddress");
                entity.Property(e => e.MobileNumber).HasMaxLength(100);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);

                entity.HasOne(d => d.SurveyAnswer).WithMany(p => p.Surveys).HasForeignKey(d => d.SurveyAnswerId);

                entity.HasOne(d => d.SurveyLanguage).WithMany(p => p.Surveys)
                    .HasForeignKey(d => d.SurveyLanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.SurveyMessage).WithMany(p => p.Surveys)
                    .HasForeignKey(d => d.SurveyMessageId)
                    .HasConstraintName("FK__Survey__SurveyMe__77AEB5AB");

                entity.HasOne(d => d.SurveyStatus).WithMany(p => p.Surveys)
                    .HasForeignKey(d => d.SurveyStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<SurveyAnswer>(entity =>
            {
                entity.HasIndex(e => e.ServiceQuestionId, "IX_SurveyAnswers_ServiceQuestionId");

                entity.HasIndex(e => e.SurveyAnswerGroupId, "IX_SurveyAnswers_SurveyAnswerGroupId");

                entity.HasIndex(e => e.SurveyLanguageId, "IX_SurveyAnswers_SurveyLanguageId");

                entity.HasIndex(e => e.SurveyParentAnswerId, "IX_SurveyAnswers_SurveyParentAnswerId");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.ArName).HasMaxLength(2000);
                entity.Property(e => e.EnName).HasMaxLength(4000);
                entity.Property(e => e.Image).HasMaxLength(4000);
                entity.Property(e => e.Ipaddress).HasColumnName("IPAddress");

                entity.HasOne(d => d.ServiceQuestion).WithMany(p => p.SurveyAnswers).HasForeignKey(d => d.ServiceQuestionId);

                entity.HasOne(d => d.SurveyAnswerGroup).WithMany(p => p.SurveyAnswers).HasForeignKey(d => d.SurveyAnswerGroupId);

                entity.HasOne(d => d.SurveyLanguage).WithMany(p => p.SurveyAnswers).HasForeignKey(d => d.SurveyLanguageId);

                entity.HasOne(d => d.SurveyParentAnswer).WithMany(p => p.InverseSurveyParentAnswer).HasForeignKey(d => d.SurveyParentAnswerId);
            });

            modelBuilder.Entity<SurveyAnswerGroup>(entity =>
            {
                entity.ToTable("SurveyAnswerGroup");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(100);
                entity.Property(e => e.Ipaddress).HasColumnName("IPAddress");
            });

            modelBuilder.Entity<SurveyDetail>(entity =>
            {
                entity.HasIndex(e => e.SurveyAnswerId, "IX_SurveyDetails_SurveyAnswerId");

                entity.HasIndex(e => e.SurveyId, "IX_SurveyDetails_SurveyId");

                entity.HasIndex(e => e.SurveyStatusId, "IX_SurveyDetails_SurveyStatusId");

                entity.Property(e => e.Ipaddress).HasColumnName("IPAddress");

                entity.HasOne(d => d.SurveyAnswer).WithMany(p => p.SurveyDetails)
                    .HasForeignKey(d => d.SurveyAnswerId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Survey).WithMany(p => p.SurveyDetails)
                    .HasForeignKey(d => d.SurveyId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.SurveyStatus).WithMany(p => p.SurveyDetails)
                    .HasForeignKey(d => d.SurveyStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<SurveyDetailedView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SurveyDetailedView");

                entity.Property(e => e.Customer).HasMaxLength(3000);
                entity.Property(e => e.Emirate).HasMaxLength(200);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.SurveyAnswer).HasMaxLength(2000);
                entity.Property(e => e.SurveyDetailAnswer).HasMaxLength(2000);
            });

            modelBuilder.Entity<SurveyLanguage>(entity =>
            {
                entity.ToTable("SurveyLanguage");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Ipaddress).HasColumnName("IPAddress");
                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<SurveyLog>(entity =>
            {
                entity.ToTable("SurveyLog");

                entity.Property(e => e.ClassName).HasMaxLength(100);
                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(100)
                    .HasColumnName("IPAddress");
                entity.Property(e => e.MethodName).HasMaxLength(100);
            });

            modelBuilder.Entity<SurveyMessageLog>(entity =>
            {
                entity.ToTable("SurveyMessageLog");

                entity.Property(e => e.Error).HasColumnName("error");
                entity.Property(e => e.MobileNumber).HasMaxLength(100);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Url)
                    .HasMaxLength(500)
                    .HasColumnName("URL");
            });

            modelBuilder.Entity<SurveyMessageTrace>(entity =>
            {
                entity.ToTable("SurveyMessageTrace");

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<SurveyMessege>(entity =>
            {
                entity.ToTable("SurveyMessege");

                entity.Property(e => e.MobileNumber).HasMaxLength(100);
                entity.Property(e => e.PlateNumber).HasMaxLength(100);
                entity.Property(e => e.ReporNumber).HasMaxLength(100);
                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<SurveyQuestion>(entity =>
            {
                entity.ToTable("SurveyQuestion");

                entity.HasIndex(e => e.SurveyAnswerGroupId, "IX_SurveyQuestion_SurveyAnswerGroupId");

                entity.HasIndex(e => e.SurveyLanguageId, "IX_SurveyQuestion_SurveyLanguageId");

                entity.HasIndex(e => e.SurveyQuestionTypeId, "IX_SurveyQuestion_SurveyQuestionTypeId");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.ArName).HasMaxLength(2000);
                entity.Property(e => e.EnName).HasMaxLength(4000);
                entity.Property(e => e.Ipaddress).HasColumnName("IPAddress");

                entity.HasOne(d => d.SurveyAnswerGroup).WithMany(p => p.SurveyQuestions).HasForeignKey(d => d.SurveyAnswerGroupId);

                entity.HasOne(d => d.SurveyLanguage).WithMany(p => p.SurveyQuestions).HasForeignKey(d => d.SurveyLanguageId);

                entity.HasOne(d => d.SurveyQuestionType).WithMany(p => p.SurveyQuestions)
                    .HasForeignKey(d => d.SurveyQuestionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<SurveyQuestionType>(entity =>
            {
                entity.ToTable("SurveyQuestionType");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Ipaddress).HasColumnName("IPAddress");
                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<SurveySecondaryStatusView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SurveySecondaryStatusView");

                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.SurveyAnswer).HasMaxLength(4000);
                entity.Property(e => e.SurveyAnswerGroupCode).HasMaxLength(100);
            });

            modelBuilder.Entity<SurveyStatus>(entity =>
            {
                entity.ToTable("SurveyStatus");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Ipaddress).HasColumnName("IPAddress");
                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<SurveyStatusView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SurveyStatusView");

                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.SurveyAnswer).HasMaxLength(4000);
                entity.Property(e => e.SurveyAnswerGroupCode).HasMaxLength(100);
            });

            modelBuilder.Entity<SyncOrganizationHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("SyncOrganizationHelper");

                entity.Property(e => e.AbbreviationText).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DoingBusinessAs).HasMaxLength(250);
                entity.Property(e => e.EstablishedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Image).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.OrganizationId).ValueGeneratedOnAdd();
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.TerminationDateTime).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SysKey>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("SysKey");

                entity.Property(e => e.Key).HasMaxLength(255);
            });

            //modelBuilder.Entity<Task>(entity =>
            //{
            //    entity.HasKey(e => e.TaskId).HasFillFactor(80);

            //    entity.ToTable("Task");

            //    entity.Property(e => e.CreationDate).HasColumnType("datetime");
            //    entity.Property(e => e.Description).HasMaxLength(50);
            //    entity.Property(e => e.EndDate).HasColumnType("datetime");
            //    entity.Property(e => e.StartDate).HasColumnType("datetime");
            //    entity.Property(e => e.TaskCategoryId).HasColumnName("TaskCategoryID");
            //    entity.Property(e => e.TaskDate).HasColumnType("datetime");
            //    entity.Property(e => e.TaskName).HasMaxLength(50);
            //    entity.Property(e => e.TimeStamp)
            //        .IsRowVersion()
            //        .IsConcurrencyToken();

            //    entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Tasks)
            //        .HasForeignKey(d => d.CreatedBy)
            //        .HasConstraintName("FK_Task_Person");

            //    entity.HasOne(d => d.TaskCategory).WithMany(p => p.Tasks)
            //        .HasForeignKey(d => d.TaskCategoryId)
            //        .HasConstraintName("FK_Task_TaskCategoryDIM");
            //});

            modelBuilder.Entity<TaskCategoryDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("TaskCategoryDIM");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(50);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TaskInvolvementDim>(entity =>
            {
                entity.HasKey(e => e.TaskInvolvementId).HasFillFactor(80);

                entity.ToTable("TaskInvolvementDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.TimpStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TaskItem>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("TaskItem");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.HasOne(d => d.Item).WithMany(p => p.TaskItems)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_TaskItem_Item");

                entity.HasOne(d => d.Task).WithMany(p => p.TaskItems)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_TaskItem_Task");
            });

            modelBuilder.Entity<TelephonyCall>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("TelephonyCall");

                entity.HasIndex(e => e.Wfid, "IndexTelephonyCall").HasFillFactor(80);

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Address).HasMaxLength(150);
                entity.Property(e => e.CallerName).HasMaxLength(100);
                entity.Property(e => e.CallerNumber).HasMaxLength(50);
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.Latitude).HasMaxLength(50);
                entity.Property(e => e.Longitude).HasMaxLength(50);
                entity.Property(e => e.MaritialStatus).HasMaxLength(50);
                entity.Property(e => e.NationalityId).HasMaxLength(50);
                entity.Property(e => e.Occupation).HasMaxLength(50);
                entity.Property(e => e.SmsContent).HasMaxLength(500);
                entity.Property(e => e.Wfid).HasColumnName("WFID");
            });

            modelBuilder.Entity<TelephonyCallLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("TelephonyCallLog");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.TelephonyCallId).HasColumnName("TelephonyCallID");

                entity.HasOne(d => d.TelephonyCall).WithMany(p => p.TelephonyCallLogs)
                    .HasForeignKey(d => d.TelephonyCallId)
                    .HasConstraintName("FK_TelephonyCallLog_TelephonyCall");
            });

            modelBuilder.Entity<TfaenqueryLog>(entity =>
            {
                entity.ToTable("TFAEnqueryLog");

                entity.Property(e => e.EnqueryDateTime).HasColumnType("datetime");
                entity.Property(e => e.PlateNo).HasMaxLength(50);
                entity.Property(e => e.VehicleChassisNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<TheftCategoryDim>(entity =>
            {
                entity.HasKey(e => e.TheftCategoryId).HasFillFactor(80);

                entity.ToTable("TheftCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.TheftCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_TheftCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<TheftCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("TheftCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.TheftCategoryCode).HasMaxLength(50);
                entity.Property(e => e.TheftCategoryDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<TicketRequest>(entity =>
            {
                entity.ToTable("TicketRequest");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<TicketRequestInfo>(entity =>
            {
                entity.ToTable("TicketRequestInfo");

                entity.Property(e => e.InsuranceExpiry).HasColumnType("datetime");
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.PlateNumber).HasMaxLength(50);
                entity.Property(e => e.ReportCode).HasMaxLength(50);

                entity.HasOne(d => d.TicketRequest).WithMany(p => p.TicketRequestInfos)
                    .HasForeignKey(d => d.TicketRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TicketRequestInfo_TicketRequest");
            });

            modelBuilder.Entity<TimeCategoryDim>(entity =>
            {
                entity.HasKey(e => e.TimeCategoryId).HasFillFactor(80);

                entity.ToTable("TimeCategoryDIM");

                entity.Property(e => e.HoursRange).HasMaxLength(50);
                entity.Property(e => e.MinutesRange).HasMaxLength(50);

                entity.HasOne(d => d.RowStatus).WithMany(p => p.TimeCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_TimeCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<TimeDim>(entity =>
            {
                entity.HasKey(e => e.TimeId).HasFillFactor(80);

                entity.ToTable("TimeDIM");

                entity.Property(e => e.DayNight).HasMaxLength(50);
                entity.Property(e => e.Period).HasMaxLength(50);
                entity.Property(e => e.Time).HasPrecision(1);

                entity.HasOne(d => d.RowStatus).WithMany(p => p.TimeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_TimeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<TipLead>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__TipLead__45F4A791EFC45DF2")
                    .HasFillFactor(80);

                entity.ToTable("TipLead");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.NisdateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("NISDateTime");
                entity.Property(e => e.NistrackingNumber)
                    .HasMaxLength(20)
                    .HasColumnName("NISTrackingNumber");
                entity.Property(e => e.Nisuri)
                    .HasMaxLength(300)
                    .HasColumnName("NISURI");
                entity.Property(e => e.PolicyId).HasDefaultValue(1);
                entity.Property(e => e.PriorityHighLowId).HasDefaultValue(1);
                entity.Property(e => e.PrivacyIndicator).HasDefaultValue(true);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.TargetFileNumber).HasMaxLength(20);
                entity.Property(e => e.TipLeadCategoryId).HasDefaultValue(1);
                entity.Property(e => e.TipLeadContentValidityId).HasDefaultValue(1);
                entity.Property(e => e.TipLeadDateTime).HasColumnType("datetime");
                entity.Property(e => e.TipLeadReliablityId).HasDefaultValue(1);
                entity.Property(e => e.TipLeadSourceCategoryId).HasDefaultValue(1);
                entity.Property(e => e.TipLeadSourceMethodContactId).HasDefaultValue(1);
                entity.Property(e => e.TrackingNumber).HasMaxLength(20);

                entity.HasOne(d => d.Activity).WithOne(p => p.TipLead)
                    .HasForeignKey<TipLead>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipLead_Activity");

                entity.HasOne(d => d.Policy).WithMany(p => p.TipLeads)
                    .HasForeignKey(d => d.PolicyId)
                    .HasConstraintName("FK_TipLead_PolicyDIM");

                entity.HasOne(d => d.PriorityHighLow).WithMany(p => p.TipLeads).HasForeignKey(d => d.PriorityHighLowId);

                entity.HasOne(d => d.TipLeadCategory).WithMany(p => p.TipLeads)
                    .HasForeignKey(d => d.TipLeadCategoryId)
                    .HasConstraintName("FK_TipLead_TipLeadCategoryDIM");

                entity.HasOne(d => d.TipLeadContentValidity).WithMany(p => p.TipLeads)
                    .HasForeignKey(d => d.TipLeadContentValidityId)
                    .HasConstraintName("FK_TipLead_TipLeadContentValidityDIM");

                entity.HasOne(d => d.TipLeadReliablity).WithMany(p => p.TipLeads)
                    .HasForeignKey(d => d.TipLeadReliablityId)
                    .HasConstraintName("FK_TipLead_TipLeadReliabilityDIM");

                entity.HasOne(d => d.TipLeadSourceCategory).WithMany(p => p.TipLeads)
                    .HasForeignKey(d => d.TipLeadSourceCategoryId)
                    .HasConstraintName("FK_TipLead_TipLeadSourceCategoryDIM");

                entity.HasOne(d => d.TipLeadSourceMethodContact).WithMany(p => p.TipLeads)
                    .HasForeignKey(d => d.TipLeadSourceMethodContactId)
                    .HasConstraintName("FK_TipLead_TipLeadSourceMethodContactDIM");
            });

            modelBuilder.Entity<TipLeadCategoryDim>(entity =>
            {
                entity.HasKey(e => e.TipLeadCategoryId)
                    .HasName("PK__TipLeadC__0CCFAECC806ADF3C")
                    .HasFillFactor(80);

                entity.ToTable("TipLeadCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.TipLeadCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_TipLeadCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<TipLeadCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("TipLeadCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.TipLeadCategoryCode).HasMaxLength(20);
                entity.Property(e => e.TipLeadCategoryDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<TipLeadContentValidityDim>(entity =>
            {
                entity.HasKey(e => e.TipLeadContentValidityId)
                    .HasName("PK__TipLeadC__F752A56A7DDE3ED2")
                    .HasFillFactor(80);

                entity.ToTable("TipLeadContentValidityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.TipLeadContentValidityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_TipLeadContentValidityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<TipLeadContentValidityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("TipLeadContentValidityDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.TipLeadContentValidityCode).HasMaxLength(20);
                entity.Property(e => e.TipLeadContentValidityDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<TipLeadOffense>(entity =>
            {
                entity.HasKey(e => e.TipLeadOffenseId)
                    .HasName("PK__TipLeadO__76A17FCA5C2EB8C6")
                    .HasFillFactor(80);

                entity.ToTable("TipLeadOffense");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsPrimary).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OffenseCodeId).HasDefaultValue(1);
                entity.Property(e => e.TipLeadOffenseGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Activity).WithMany(p => p.TipLeadOffenses)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipLeadOffense_Activity");

                entity.HasOne(d => d.OffenseCode).WithMany(p => p.TipLeadOffenses)
                    .HasForeignKey(d => d.OffenseCodeId)
                    .HasConstraintName("FK_TipLeadOffense_OffenseCodeDIM");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.TipLeadOffenses)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_TipLeadOffense_RowStatusDIM");
            });

            modelBuilder.Entity<TipLeadOffenseGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("TipLeadOffenseGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCodeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TipLeadOffenseView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("TipLeadOffenseView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OffenseCodeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.OffenseCodeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.TipLeadOffenseId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TipLeadReliabilityDim>(entity =>
            {
                entity.HasKey(e => e.TipLeadReliablityId)
                    .HasName("PK__TipLeadR__EB2B21DA3FE859F2")
                    .HasFillFactor(80);

                entity.ToTable("TipLeadReliabilityDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.TipLeadReliabilityDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_TipLeadReliabilityDIM_RowStatusDIM");
            });

            modelBuilder.Entity<TipLeadReliabilityDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("TipLeadReliabilityDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.TipLeadReliabilityCode).HasMaxLength(20);
                entity.Property(e => e.TipLeadReliabilityDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<TipLeadSourceCategoryDim>(entity =>
            {
                entity.HasKey(e => e.TipLeadSourceCategoryId)
                    .HasName("PK__TipLeadS__FD0DF136989E95F9")
                    .HasFillFactor(80);

                entity.ToTable("TipLeadSourceCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.TipLeadSourceCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_TipLeadSourceCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<TipLeadSourceCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("TipLeadSourceCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.TipLeadSourceCategoryCode).HasMaxLength(20);
                entity.Property(e => e.TipLeadSourceCategoryDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<TipLeadSourceMethodContactDim>(entity =>
            {
                entity.HasKey(e => e.TipLeadSourceMethodContactId)
                    .HasName("PK__TipLeadS__2E7903FF1321526E")
                    .HasFillFactor(80);

                entity.ToTable("TipLeadSourceMethodContactDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.TipLeadSourceMethodContactDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_TipLeadSourceMethodContractDIM_RowStatusDIM");
            });

            modelBuilder.Entity<TipLeadSourceMethodContactDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("TipLeadSourceMethodContactDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.TipLeadSourceMethodContactCode).HasMaxLength(20);
                entity.Property(e => e.TipLeadSourceMethodContactDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<TrackingHelpView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("TrackingHelpView");

                entity.Property(e => e.PatrolName).HasMaxLength(50);
            });

            modelBuilder.Entity<TrafficCode>(entity =>
            {
                entity.HasKey(e => e.TrafficCodeId).HasFillFactor(80);

                entity.ToTable("TrafficCode");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DriverName).HasMaxLength(150);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.LicenseNumber).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.OwnerName).HasMaxLength(150);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TrafficCode1)
                    .HasMaxLength(50)
                    .HasColumnName("TrafficCode");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TrafficCodeCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_TrafficCode_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.TrafficCodeModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_TrafficCode_Person1");
            });

            modelBuilder.Entity<TrafficStatusDim>(entity =>
            {
                entity.HasKey(e => e.TrafficStatusId)
                    .HasName("PK__TrafficS__CE589C8E0E731DFB")
                    .HasFillFactor(80);

                entity.ToTable("TrafficStatusDim");

                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(500);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
            });

            modelBuilder.Entity<TrafficViolation>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__TrafficV__3214EC0734DBDCD4");

                entity.ToTable("TrafficViolation");

                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TrafficViolationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrafficViolation_Person_Create");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.TrafficViolationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_TrafficViolation_Person_Modify");

                entity.HasOne(d => d.Report).WithMany(p => p.TrafficViolations)
                    .HasForeignKey(d => d.ReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrafficViolation_ReportId");

                entity.HasOne(d => d.Status).WithMany(p => p.TrafficViolations)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrafficViolation_StatusId");

                entity.HasOne(d => d.Type).WithMany(p => p.TrafficViolations)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrafficViolation_TypeId");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.TrafficViolations)
                    .HasForeignKey(d => d.VehicleDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrafficViolation_VehicleDataId");
            });

            modelBuilder.Entity<TrafficViolationRejectionReason>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__TrafficV__3214EC0705A86926");

                entity.ToTable("TrafficViolationRejectionReason");

                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.Reason).HasMaxLength(2000);

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TrafficViolationRejectionReasonCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RejectionReason_CreatedBy");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.TrafficViolationRejectionReasonModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_RejectionReason_ModifiedBy");

                entity.HasOne(d => d.Violation).WithMany(p => p.TrafficViolationRejectionReasons)
                    .HasForeignKey(d => d.ViolationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RejectionReason_TrafficViolation");
            });

            modelBuilder.Entity<TrafficViolationStatusDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__TrafficV__3214EC0755E1FEE3");

                entity.ToTable("TrafficViolationStatusDIM");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DescriptionAr).HasMaxLength(250);
                entity.Property(e => e.DescriptionEn).HasMaxLength(250);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.PoliceDescriptionAr).HasMaxLength(250);
                entity.Property(e => e.PoliceDescriptionEn).HasMaxLength(250);
            });

            modelBuilder.Entity<TrafficViolationStatusLog>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__TrafficV__3214EC07BCDD9AF6");

                entity.ToTable("TrafficViolationStatusLog");

                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TrafficViolationStatusLogs)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_ViolationStatusLog_CreatedBy");

                entity.HasOne(d => d.NewStatusNavigation).WithMany(p => p.TrafficViolationStatusLogNewStatusNavigations)
                    .HasForeignKey(d => d.NewStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ViolationStatusLog_NewStatus");

                entity.HasOne(d => d.OldStatusNavigation).WithMany(p => p.TrafficViolationStatusLogOldStatusNavigations)
                    .HasForeignKey(d => d.OldStatus)
                    .HasConstraintName("FK_ViolationStatusLog_OldStatus");

                entity.HasOne(d => d.Violation).WithMany(p => p.TrafficViolationStatusLogs)
                    .HasForeignKey(d => d.ViolationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ViolationStatusLog_Violation");
            });

            modelBuilder.Entity<TrafficViolationTypeDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__TrafficV__3214EC074BA28934");

                entity.ToTable("TrafficViolationTypeDIM");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DescriptionAr).HasMaxLength(250);
                entity.Property(e => e.DescriptionEn).HasMaxLength(250);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TrafficViolationUploadStatusDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__TrafficV__3214EC0700BE2A0C");

                entity.ToTable("TrafficViolationUploadStatusDIM");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.CreationDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DescriptionAr).HasMaxLength(250);
                entity.Property(e => e.DescriptionEn).HasMaxLength(250);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TransactionType>(entity =>
            {
                entity.HasKey(e => e.TransactionTypeId)
                    .HasName("PK_TransationType")
                    .HasFillFactor(80);

                entity.ToTable("TransactionType");

                entity.Property(e => e.TransactionTypeId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.Description).HasMaxLength(50);
            });

            modelBuilder.Entity<TransferStatusDim>(entity =>
            {
                entity.HasKey(e => e.TransferStatusId);

                entity.ToTable("TransferStatusDim");

                entity.Property(e => e.TransferStatusId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TransferedReportDocument>(entity =>
            {
                entity.HasKey(e => e.TransferedReportDocumentId).HasFillFactor(80);

                entity.ToTable("TransferedReportDocument");

                entity.Property(e => e.BinaryDescriptionText).HasMaxLength(200);
                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DocumentName).HasMaxLength(50);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TransferedReportDocumentCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_TransferedReportDocument_Person");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.TransferedReportDocumentModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK_TransferedReportDocument_Person1");

                entity.HasOne(d => d.Report).WithMany(p => p.TransferedReportDocuments)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_TransferedReportDocument_Report");
            });

            modelBuilder.Entity<TransferedReportStatusList>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("TransferedReportStatusList");

                entity.Property(e => e.CurrentOrganizationName).HasMaxLength(255);
                entity.Property(e => e.IsTs).HasColumnName("IsTS");
                entity.Property(e => e.Reason).HasMaxLength(100);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StatusDescEn).HasColumnName("StatusDescEN");
                entity.Property(e => e.TransferStatusCode).HasMaxLength(50);
                entity.Property(e => e.TransferTime).HasColumnType("datetime");
                entity.Property(e => e.TransferedByName).HasMaxLength(50);
            });

            modelBuilder.Entity<TranslationReport>(entity =>
            {
                entity.HasKey(e => e.TranslationId);

                entity.ToTable("TranslationReport");

                entity.Property(e => e.DescriptionAr).HasColumnName("DescriptionAR");
                entity.Property(e => e.DescriptionEn).HasColumnName("DescriptionEN");

                entity.HasOne(d => d.TranslationTableType).WithMany(p => p.TranslationReports)
                    .HasForeignKey(d => d.TranslationTableTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TranslationReport_TranslationTablesTypes");
            });

            modelBuilder.Entity<TranslationTablesType>(entity =>
            {
                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");
                entity.Property(e => e.TableName).HasMaxLength(50);
            });

            modelBuilder.Entity<TrueFalseDim>(entity =>
            {
                entity.HasKey(e => e.TrueFalseId)
                    .HasName("TrueFalseDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("TrueFalseDIM");

                entity.Property(e => e.TrueFalse).HasMaxLength(5);
                entity.Property(e => e.YesNo).HasMaxLength(3);

                entity.HasOne(d => d.RowStatus).WithMany(p => p.TrueFalseDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_TrueFalseDIM_RowStatusDIM");
            });

            modelBuilder.Entity<TsviewIncidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("TSViewIncidentDetails");

                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(255);
                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.ConvertToStationOrganization).HasMaxLength(250);
                entity.Property(e => e.ConvertToStationReason).HasMaxLength(100);
                entity.Property(e => e.Emirate).HasMaxLength(200);
                entity.Property(e => e.EmirateId).HasColumnName("EmirateID");
                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.IsAml).HasColumnName("isAML");
                entity.Property(e => e.LandMark).HasMaxLength(200);
                entity.Property(e => e.OrganizationName).HasMaxLength(250);
                entity.Property(e => e.Priority).HasMaxLength(100);
                entity.Property(e => e.SectorName).HasMaxLength(200);
                entity.Property(e => e.SourceName).HasMaxLength(100);
                entity.Property(e => e.TelephoneCallId).HasColumnName("TelephoneCallID");
            });

            modelBuilder.Entity<TunnelReportBasicDetail>(entity =>
            {
                entity.HasKey(e => e.TunnelReportBasicDetailsId)
                    .HasName("PK__TunnelRe__DC86E6F583633CB4")
                    .HasFillFactor(80);

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.ReportDescription).HasMaxLength(3000);

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TunnelReportBasicDetails)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__TunnelRep__Creat__21835D38");

                entity.HasOne(d => d.Report).WithMany(p => p.TunnelReportBasicDetails)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK__TunnelRep__Repor__22778171");
            });

            modelBuilder.Entity<UaepassLog>(entity =>
            {
                entity.ToTable("UAEPassLog");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.AssuranceLevel).HasMaxLength(250);
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.Email).HasMaxLength(500);
                entity.Property(e => e.EmirateId)
                    .HasMaxLength(500)
                    .HasColumnName("EmirateID");
                entity.Property(e => e.FullnameAr)
                    .HasMaxLength(500)
                    .HasColumnName("FullnameAR");
                entity.Property(e => e.FullnameEn)
                    .HasMaxLength(500)
                    .HasColumnName("FullnameEN");
                entity.Property(e => e.Gender).HasMaxLength(250);
                entity.Property(e => e.Mobile).HasMaxLength(250);
                entity.Property(e => e.NationalityAr)
                    .HasMaxLength(500)
                    .HasColumnName("NationalityAR");
                entity.Property(e => e.NationalityEn)
                    .HasMaxLength(500)
                    .HasColumnName("NationalityEN");
                entity.Property(e => e.Spuuid)
                    .HasMaxLength(500)
                    .HasColumnName("SPUUID");
                entity.Property(e => e.TitleAr)
                    .HasMaxLength(500)
                    .HasColumnName("TitleAR");
                entity.Property(e => e.TitleEn)
                    .HasMaxLength(500)
                    .HasColumnName("TitleEN");
                entity.Property(e => e.TypeId).HasMaxLength(250);
                entity.Property(e => e.Uuid)
                    .HasMaxLength(500)
                    .HasColumnName("UUID");
            });

            modelBuilder.Entity<UnderProcessConvertLog>(entity =>
            {
                entity.ToTable("UnderProcessConvertLog");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<UploadAdpreportStatus>(entity =>
            {
                entity.ToTable("UploadADPReportStatus");

                entity.Property(e => e.AdpreportNumber).HasColumnName("ADPReportNumber");
                entity.Property(e => e.AdpstatusId).HasColumnName("ADPStatusId");
                entity.Property(e => e.ErrorMessgae)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
                entity.Property(e => e.LastSyncTime).HasColumnType("datetime");
                entity.Property(e => e.PayDate).HasColumnType("datetime");
                entity.Property(e => e.StatusId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UploadReportServiceLogger>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK__UploadRe__5E5486484EE0375E")
                    .HasFillFactor(80);

                entity.ToTable("UploadReportServiceLogger");

                entity.Property(e => e.Adpnumber)
                    .HasMaxLength(50)
                    .HasColumnName("ADPNumber");
                entity.Property(e => e.RequestXml).HasColumnType("xml");
                entity.Property(e => e.RequestedTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.ResponseXml).HasColumnType("xml");
            });

            modelBuilder.Entity<UploadedReportStatus>(entity =>
            {
                entity.HasKey(e => e.UploadedReportStatusId)
                    .HasName("PK__Uploaded__3492B4309B2A1F96")
                    .HasFillFactor(80);

                entity.ToTable("UploadedReportStatus");

                entity.Property(e => e.AdpreportNumber).HasColumnName("ADPReportNumber");
                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.ErrorMessgae).HasMaxLength(2000);
                entity.Property(e => e.IsUploaded).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDatetime).HasColumnType("datetime");
                entity.Property(e => e.SystemCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Report).WithMany(p => p.UploadedReportStatuses)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("fk_UploadedReportStatus_Report");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.PersonId);

                entity.ToTable("User");

                entity.Property(e => e.PersonId).ValueGeneratedNever();
                entity.Property(e => e.DirectoryDomain).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.Person).WithOne(p => p.User)
                    .HasForeignKey<User>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Person");

                entity.HasOne(d => d.PrimaryPersonAlias).WithMany(p => p.Users)
                    .HasForeignKey(d => d.PrimaryPersonAliasId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_PersonAlias");

                entity.HasOne(d => d.SourceDirectoryCategory).WithMany(p => p.Users)
                    .HasForeignKey(d => d.SourceDirectoryCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_SourceDirectoryCategory");
            });

            modelBuilder.Entity<User1>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__Users__1788CC4CCEBC58F0")
                    .HasFillFactor(80);

                entity.ToTable("Users");

                entity.Property(e => e.UserId).ValueGeneratedNever();
                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");
                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.HasOne(d => d.Application).WithMany(p => p.User1s)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UserApplication");

                entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                    .UsingEntity<Dictionary<string, object>>(
                        "UsersInRole",
                        r => r.HasOne<Role>().WithMany()
                            .HasForeignKey("RoleId")
                            .OnDelete(DeleteBehavior.ClientSetNull)
                            .HasConstraintName("UsersInRoleRole"),
                        l => l.HasOne<User1>().WithMany()
                            .HasForeignKey("UserId")
                            .OnDelete(DeleteBehavior.ClientSetNull)
                            .HasConstraintName("UsersInRoleUser"),
                        j =>
                        {
                            j.HasKey("UserId", "RoleId")
                                .HasName("PK__UsersInR__AF2760AD36C6D442")
                                .HasFillFactor(80);
                            j.ToTable("UsersInRoles");
                        });
            });

            modelBuilder.Entity<UserAttandanceInspection>(entity =>
            {
                entity.ToTable("UserAttandanceInspection");

                entity.Property(e => e.InsertionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<UserAttendance>(entity =>
            {
                entity.ToTable("UserAttendance");

                entity.HasIndex(e => e.UserId, "NonClusteredIndex-20200607-145910");

                entity.Property(e => e.CheckOutTime).HasColumnType("datetime");
                entity.Property(e => e.DeletionDate).HasColumnType("datetime");
                entity.Property(e => e.FirstCheckInTime).HasColumnType("datetime");
                entity.Property(e => e.InsertionDate).HasColumnType("datetime");
                entity.Property(e => e.LastModifyDate).HasColumnType("datetime");
                entity.Property(e => e.ModifyDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<UserAttendanceArea>(entity =>
            {
                entity.ToTable("UserAttendanceArea");

                entity.HasIndex(e => e.UserAttendanceId, "NonClusteredIndex-20200607-150323");
            });

            modelBuilder.Entity<UserAttendanceControlCenter>(entity =>
            {
                entity.ToTable("UserAttendanceControlCenter");
            });

            modelBuilder.Entity<UserAttendanceLog>(entity =>
            {
                entity.ToTable("UserAttendanceLog");

                entity.Property(e => e.NewCheckInTime).HasColumnType("datetime");
                entity.Property(e => e.NewCheckoOutTime).HasColumnType("datetime");
                entity.Property(e => e.OldCheckInTime).HasColumnType("datetime");
                entity.Property(e => e.OldCheckOutTime).HasColumnType("datetime");
                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<UserAttendanceModificationReason>(entity =>
            {
                entity.ToTable("UserAttendanceModificationReason");

                entity.Property(e => e.Id).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(500);
            });

            modelBuilder.Entity<UserAttendanceReportView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("UserAttendanceReportView");

                entity.Property(e => e.CheckInTime).HasColumnType("datetime");
                entity.Property(e => e.CheckoutTime).HasColumnType("datetime");
                entity.Property(e => e.FullName).HasMaxLength(152);
                entity.Property(e => e.Role).HasMaxLength(256);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<UserAttendanceTrace>(entity =>
            {
                entity.ToTable("UserAttendanceTrace");

                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<UserCodesForgetPassword>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__UserCode__3214EC27D734928F");

                entity.ToTable("UserCodesForgetPassword");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Code)
                    .HasMaxLength(15)
                    .IsUnicode(false);
                entity.Property(e => e.CodeGenerationDate).HasColumnType("datetime");

                entity.HasOne(d => d.User).WithMany(p => p.UserCodesForgetPasswords)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK__UserCodes__UserI__303DF2E8");
            });

            modelBuilder.Entity<UserGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("UserGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DirectoryDomain).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceDirectoryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<UserNationalityCategoryDim>(entity =>
            {
                entity.HasKey(e => e.UserNationalityCategoryId);

                entity.ToTable("UserNationalityCategoryDim");

                entity.Property(e => e.UserNationalityCategoryId).ValueGeneratedNever();
                entity.Property(e => e.Code).HasMaxLength(255);
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.DescriptionAr)
                    .HasMaxLength(255)
                    .HasColumnName("DescriptionAR");
            });



            modelBuilder.Entity<UserReportsView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("UserReportsView");

                entity.Property(e => e.CategoryCode).HasMaxLength(20);
                entity.Property(e => e.CategoryDescription).HasMaxLength(200);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReportCode).HasMaxLength(50);
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.ReportStatus).HasMaxLength(100);
                entity.Property(e => e.SourceDescription).HasMaxLength(100);
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);
                entity.Property(e => e.TypeCode).HasMaxLength(50);
                entity.Property(e => e.TypeDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<UserType>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__UserType__3214EC07EAF7DB44");

                entity.ToTable("UserType");

                entity.HasIndex(e => e.Code, "UK_UserType_Code").IsUnique();

                entity.HasIndex(e => e.Name, "UQ__UserType__737584F6375A392E").IsUnique();

                entity.Property(e => e.Code).HasMaxLength(100);
                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<UserView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("UserView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DirectoryDomain).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceDirectoryCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceDirectoryCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
            });

            modelBuilder.Entity<VEditIncidentAdp>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_EditIncidentADP");

                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(255);
                entity.Property(e => e.CallerName).HasMaxLength(152);
                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.IncidentDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<VEscortForOp>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_EscortForOp");

                entity.Property(e => e.Company).HasMaxLength(150);
                entity.Property(e => e.CurrentStatus).HasMaxLength(100);
                entity.Property(e => e.EmployeeName).HasMaxLength(101);
                entity.Property(e => e.EscortDateFrom).HasColumnType("datetime");
                entity.Property(e => e.EscortDateTo).HasColumnType("datetime");
                entity.Property(e => e.EscortMissionId).HasColumnName("EscortMissionID");
                entity.Property(e => e.EscortMissionPatrolId).HasColumnName("EscortMissionPatrolID");
                entity.Property(e => e.LocationFrom).HasMaxLength(150);
                entity.Property(e => e.LocationTo).HasMaxLength(150);
                entity.Property(e => e.MissionDate).HasColumnType("datetime");
                entity.Property(e => e.Notes).HasMaxLength(4000);
                entity.Property(e => e.Patrol).HasMaxLength(50);
                entity.Property(e => e.RejectionReason).HasMaxLength(100);
            });

            modelBuilder.Entity<VFinancialInquiryReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_FinancialInquiryReport");

                entity.Property(e => e.AdpStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("adpStatus");
                entity.Property(e => e.AdpreportNumber).HasColumnName("ADPReportNumber");
                entity.Property(e => e.AdpstatusId).HasColumnName("ADPStatusId");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.ErrorMessgae).HasMaxLength(2000);
                entity.Property(e => e.FinancialStatus).HasMaxLength(12);
                entity.Property(e => e.IncidentId).HasColumnName("incidentId");
                entity.Property(e => e.IncidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("incidentNumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.ReportStatus).HasMaxLength(100);
                entity.Property(e => e.ReportType).HasMaxLength(100);
            });

            modelBuilder.Entity<VGetDispatcherName>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_GetDispatcherName");

                entity.Property(e => e.DispatcherName).HasMaxLength(152);
            });

            modelBuilder.Entity<VGetIncidentAreaByreport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_GetIncidentAreaByreport");
            });

            modelBuilder.Entity<VGetIncidentReason>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_GetIncidentReasons");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Reason).HasMaxLength(100);
            });

            modelBuilder.Entity<VGetReportCustomerChanel>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_GetReportCustomerChanel");

                entity.Property(e => e.Myedmxid).HasColumnName("MYEDMXID");
            });

            modelBuilder.Entity<VGetReportCustomerChanelDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_GetReportCustomerChanelDetails");

                entity.Property(e => e.CustomerName).HasMaxLength(3000);
                entity.Property(e => e.Email)
                    .HasMaxLength(2)
                    .IsUnicode(false);
                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.Nationality).HasMaxLength(100);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportSource).HasMaxLength(21);
                entity.Property(e => e.ServiceName).HasMaxLength(100);
                entity.Property(e => e.Tcn)
                    .HasMaxLength(3000)
                    .HasColumnName("TCN");
            });

            modelBuilder.Entity<VGetReportCustomerChanelDetailsObjection>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_GetReportCustomerChanelDetailsObjections");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.CustomerName).HasMaxLength(3000);
                entity.Property(e => e.Email)
                    .HasMaxLength(2)
                    .IsUnicode(false);
                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.Nationality).HasMaxLength(100);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportSource).HasMaxLength(21);
                entity.Property(e => e.Tcn)
                    .HasMaxLength(3000)
                    .HasColumnName("TCN");
            });

            modelBuilder.Entity<VGetReportCustomerChanelObjection>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_GetReportCustomerChanelObjection");

                entity.Property(e => e.Myedmxid).HasColumnName("MYEDMXID");
            });

            modelBuilder.Entity<VGetRequestsList>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_GetRequestsList");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.CreationPerson).HasMaxLength(152);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.ModifiedPerson).HasMaxLength(152);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.RequestNumber).HasMaxLength(50);
                entity.Property(e => e.SourceOfModification).HasMaxLength(50);
            });

            modelBuilder.Entity<VGetWhatsSmsretryLog>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_GetWhatsSMSRetryLogs");

                entity.Property(e => e.Lang).HasMaxLength(50);
                entity.Property(e => e.ReceiverMobileNumber).HasMaxLength(500);
                entity.Property(e => e.ReferenceRequestId).HasMaxLength(100);
                entity.Property(e => e.Smstext).HasColumnName("SMSText");
            });

            modelBuilder.Entity<VIncidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_IncidentDetails");

                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(101);
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.StatusCode).HasMaxLength(50);
                entity.Property(e => e.StatusDescription).HasMaxLength(100);
                entity.Property(e => e.Teid).HasColumnName("TEID");
                entity.Property(e => e.Tename)
                    .HasMaxLength(101)
                    .HasColumnName("TEName");
            });

            modelBuilder.Entity<VIncidentWithAreaGroupList>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_IncidentWithAreaGroupList");

                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(255);
                entity.Property(e => e.AreaGroupName).HasMaxLength(500);
                entity.Property(e => e.AreaName).HasMaxLength(200);
                entity.Property(e => e.CallerName).HasMaxLength(152);
                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.CallerTakerName).HasMaxLength(152);
                entity.Property(e => e.ControlCenterName).HasMaxLength(250);
                entity.Property(e => e.DispatcherName).HasMaxLength(152);
                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.GroupCode).HasMaxLength(50);
                entity.Property(e => e.GroupCodeName).HasMaxLength(6);
                entity.Property(e => e.IncidentDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentPriority).HasMaxLength(100);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.SourceName).HasMaxLength(100);
                entity.Property(e => e.TrafficExpertName).HasMaxLength(152);
            });

            modelBuilder.Entity<VMdtConsentViewVehicleData>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_MdtConsentViewVehicleDatas");

                entity.Property(e => e.PlateCategorDesc).HasMaxLength(200);
                entity.Property(e => e.PlateColorDesc).HasMaxLength(200);
                entity.Property(e => e.PlateKindDesc).HasMaxLength(200);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.PlateSourceDesc).HasMaxLength(100);
                entity.Property(e => e.VehicleDataTypeDesc).HasMaxLength(100);
                entity.Property(e => e.VehicleDescription).HasMaxLength(3000);
                entity.Property(e => e.VehicleTypeDesc).HasMaxLength(150);
            });

            modelBuilder.Entity<VMdtViewReportDamagedProperty>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_MdtViewReportDamagedProperties");

                entity.Property(e => e.ImpactLevel).HasMaxLength(100);
                entity.Property(e => e.ImpactType).HasMaxLength(100);
                entity.Property(e => e.Item).HasMaxLength(50);
                entity.Property(e => e.Note)
                    .HasMaxLength(3000)
                    .HasColumnName("NOTE");
                entity.Property(e => e.Organization).HasMaxLength(250);
            });

            modelBuilder.Entity<VMdtViewReportWittness>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_MdtViewReportWittness");

                entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
                entity.Property(e => e.MobileNumber).HasMaxLength(100);
                entity.Property(e => e.Nationality).HasMaxLength(100);
                entity.Property(e => e.TrafficCode).HasMaxLength(100);
                entity.Property(e => e.WittnessName).HasMaxLength(100);
                entity.Property(e => e.WittnessTestimony).HasMaxLength(300);
            });

            modelBuilder.Entity<VMdtViewVehicleData>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_MdtViewVehicleDatas");

                entity.Property(e => e.Career).HasMaxLength(100);
                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.Chemical).HasMaxLength(100);
                entity.Property(e => e.Collision).HasMaxLength(100);
                entity.Property(e => e.Color).HasMaxLength(100);
                entity.Property(e => e.CombinedPlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ConfiscationDocumentType).HasMaxLength(100);
                entity.Property(e => e.ConfiscationLocation).HasMaxLength(100);
                entity.Property(e => e.DeliveryCompanyCode).HasMaxLength(20);
                entity.Property(e => e.DeliveryCompanyOthers).HasMaxLength(150);
                entity.Property(e => e.DriverDataAddress)
                    .HasMaxLength(3000)
                    .HasColumnName("DriverData_Address");
                entity.Property(e => e.DriverDataBirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DriverData_BirthDate");
                entity.Property(e => e.DriverDataExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DriverData_ExpiryDate");
                entity.Property(e => e.DriverDataId).HasColumnName("DriverData_Id");
                entity.Property(e => e.DriverDataIssueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DriverData_IssueDate");
                entity.Property(e => e.DriverDataLicenseCategoryId).HasColumnName("DriverData_LicenseCategoryId");
                entity.Property(e => e.DriverDataLicenseNumber)
                    .HasMaxLength(3000)
                    .HasColumnName("DriverData_LicenseNumber");
                entity.Property(e => e.DriverDataMobileNumber)
                    .HasMaxLength(20)
                    .HasColumnName("DriverData_MobileNumber");
                entity.Property(e => e.DriverDataName)
                    .HasMaxLength(3000)
                    .HasColumnName("DriverData_Name");
                entity.Property(e => e.DriverDataNationalityId).HasColumnName("DriverData_NationalityId");
                entity.Property(e => e.DriverDataTrafficCode)
                    .HasMaxLength(3000)
                    .HasColumnName("DriverData_TrafficCode");
                entity.Property(e => e.DriverDrinkingStatus).HasMaxLength(100);
                entity.Property(e => e.DriverNationality).HasMaxLength(100);
                entity.Property(e => e.DriverStatus).HasMaxLength(100);
                entity.Property(e => e.EducationStatus).HasMaxLength(200);
                entity.Property(e => e.EngineNumber).HasMaxLength(3000);
                entity.Property(e => e.EscapedStatus).HasMaxLength(100);
                entity.Property(e => e.Gender).HasMaxLength(100);
                entity.Property(e => e.GeoCountry).HasMaxLength(50);
                entity.Property(e => e.InsuranceCompany).HasMaxLength(100);
                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(3000);
                entity.Property(e => e.InsuranceType).HasMaxLength(100);
                entity.Property(e => e.InsuranceTypeId).HasColumnName("InsuranceTypeID");
                entity.Property(e => e.ItemRegistrationPlateCategory).HasMaxLength(200);
                entity.Property(e => e.ItemRegistrationPlateColor).HasMaxLength(200);
                entity.Property(e => e.ItemRegistrationPlateKind).HasMaxLength(200);
                entity.Property(e => e.LicenseCategory).HasMaxLength(100);
                entity.Property(e => e.LicensePlateListSource).HasMaxLength(100);
                entity.Property(e => e.ManufactureYear).HasMaxLength(100);
                entity.Property(e => e.OwnerDataAddress)
                    .HasMaxLength(3000)
                    .HasColumnName("OwnerData_Address");
                entity.Property(e => e.OwnerDataId).HasColumnName("OwnerData_Id");
                entity.Property(e => e.OwnerDataName)
                    .HasMaxLength(3000)
                    .HasColumnName("OwnerData_Name");
                entity.Property(e => e.OwnerDataNationalityId).HasColumnName("OwnerData_NationalityId");
                entity.Property(e => e.OwnerDataTrafficCode)
                    .HasMaxLength(3000)
                    .HasColumnName("OwnerData_TrafficCode");
                entity.Property(e => e.OwnerNationality).HasMaxLength(100);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.PlateSource).HasMaxLength(100);
                entity.Property(e => e.ReasonCategory).HasMaxLength(500);
                entity.Property(e => e.ReasonCategoryCode).HasMaxLength(50);
                entity.Property(e => e.ReportCode).HasMaxLength(50);
                entity.Property(e => e.SelectedCausedVehicleType).HasMaxLength(150);
                entity.Property(e => e.VehicleBrand).HasMaxLength(100);
                entity.Property(e => e.VehicleBrandId).HasColumnName("VehicleBrandID");
                entity.Property(e => e.VehicleCategory).HasMaxLength(100);
                entity.Property(e => e.VehicleCategoryId).HasColumnName("VehicleCategoryID");
                entity.Property(e => e.VehicleColor).HasMaxLength(100);
                entity.Property(e => e.VehicleDataCausingType)
                    .HasMaxLength(100)
                    .HasColumnName("VehicleData_CausingType");
                entity.Property(e => e.VehicleDataComments)
                    .HasMaxLength(3000)
                    .HasColumnName("VehicleData_Comments");
                entity.Property(e => e.VehicleDataExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VehicleData_ExpiryDate");
                entity.Property(e => e.VehicleDataType).HasMaxLength(100);
                entity.Property(e => e.VehicleDescription).HasMaxLength(3000);
                entity.Property(e => e.VehicleModel).HasMaxLength(100);
                entity.Property(e => e.VehicleModelId).HasColumnName("VehicleModelID");
                entity.Property(e => e.VehicleStatus).HasMaxLength(100);
                entity.Property(e => e.VehicleStatusCode).HasMaxLength(50);
                entity.Property(e => e.VehicleType).HasMaxLength(150);
                entity.Property(e => e.VehicleTypeId).HasColumnName("VehicleTypeID");
                entity.Property(e => e.WeightEmpty).HasMaxLength(3000);
                entity.Property(e => e.WeightNonEmpty).HasMaxLength(3000);
            });

            modelBuilder.Entity<VMdtaccidentReportBasicDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_MDTAccidentReportBasicDetails");

                entity.Property(e => e.AccidentType).HasMaxLength(100);
                entity.Property(e => e.AccidentTypeCode).HasMaxLength(20);
                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.ActivityReason).HasMaxLength(100);
                entity.Property(e => e.ActualAccidentDate).HasColumnType("datetime");
                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.City).HasMaxLength(200);
                entity.Property(e => e.CrossStreet).HasMaxLength(200);
                entity.Property(e => e.EasternCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.Emirate).HasMaxLength(200);
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.Intersection).HasMaxLength(100);
                entity.Property(e => e.IntersectionCode).HasMaxLength(50);
                entity.Property(e => e.LocationDescription).HasMaxLength(3000);
                entity.Property(e => e.MdtaccidentBasicDetailsId).HasColumnName("MDTAccidentBasicDetailsId");
                entity.Property(e => e.NorthernCoOrdinate).HasMaxLength(3000);
                entity.Property(e => e.Organization).HasMaxLength(250);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.ReportSourceTypeCode).HasMaxLength(255);
                entity.Property(e => e.ReportStatus).HasMaxLength(100);
                entity.Property(e => e.ReportStatusCode).HasMaxLength(20);
                entity.Property(e => e.ReportType).HasMaxLength(100);
                entity.Property(e => e.ReportTypeCode).HasMaxLength(20);
                entity.Property(e => e.RoadSpeed).HasMaxLength(100);
                entity.Property(e => e.RoadSurface).HasMaxLength(100);
                entity.Property(e => e.ScenarioCode).HasMaxLength(20);
                entity.Property(e => e.Sector).HasMaxLength(200);
                entity.Property(e => e.Street).HasMaxLength(200);
                entity.Property(e => e.Weather).HasMaxLength(100);
            });

            modelBuilder.Entity<VMissionPatrolStatusLogsForOperation>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_MissionPatrolStatusLogsForOperation");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.EscortMissionPatrolId).HasColumnName("EscortMissionPatrolID");
                entity.Property(e => e.EscortMissionPatrolStepId).HasColumnName("EscortMissionPatrolStepID");
                entity.Property(e => e.Person).HasMaxLength(101);
                entity.Property(e => e.Status).HasMaxLength(100);
            });

            modelBuilder.Entity<VMobileRequestList>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("v_MobileRequestList");

                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.Date).HasColumnType("datetime");
                entity.Property(e => e.EmirateAr)
                    .HasMaxLength(200)
                    .HasColumnName("EmirateAR");
                entity.Property(e => e.EmirateEn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EmirateEN");
                entity.Property(e => e.PhoneNumber).HasMaxLength(50);
                entity.Property(e => e.PlanningStatusAr)
                    .HasMaxLength(50)
                    .HasColumnName("PlanningStatusAR");
                entity.Property(e => e.PlanningStatusCode).HasMaxLength(50);
                entity.Property(e => e.PlanningStatusDisplayAr)
                    .HasMaxLength(50)
                    .HasColumnName("PlanningStatusDisplayAR");
                entity.Property(e => e.PlanningStatusDisplayEn)
                    .HasMaxLength(50)
                    .HasColumnName("PlanningStatusDisplayEN");
                entity.Property(e => e.PlanningStatusEn)
                    .HasMaxLength(50)
                    .HasColumnName("PlanningStatusEN");
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.ReportStatusAr)
                    .HasMaxLength(100)
                    .HasColumnName("ReportStatusAR");
                entity.Property(e => e.ReportStatusCode).HasMaxLength(20);
                entity.Property(e => e.StatusAr)
                    .HasMaxLength(100)
                    .HasColumnName("StatusAR");
                entity.Property(e => e.StatusEn)
                    .HasMaxLength(100)
                    .HasColumnName("StatusEN");
            });

            modelBuilder.Entity<VObjectionFinancialReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_ObjectionFinancialReport");

                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.ObjectionDate).HasColumnType("datetime");
                entity.Property(e => e.PaymentDate).HasColumnType("datetime");
                entity.Property(e => e.PaymentStatusId).HasColumnName("PaymentStatusID");
                entity.Property(e => e.PaymentStatusName).HasMaxLength(150);
                entity.Property(e => e.RequestTypeId).HasColumnName("requestTypeId");
            });

            modelBuilder.Entity<VObjectionStatisticsForIndividual>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_ObjectionStatisticsForIndividuals");

                entity.Property(e => e.LogDateTime).HasColumnType("datetime");
                entity.Property(e => e.ObjectionDate).HasColumnType("datetime");
                entity.Property(e => e.RequestTypeId).HasColumnName("requestTypeId");
            });

            modelBuilder.Entity<VRenewReportDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_RenewReportDetails");

                entity.Property(e => e.NewPaymentStatusId).HasColumnName("NewPaymentStatusID");
                entity.Property(e => e.NewStatusId).HasColumnName("NewStatusID");
                entity.Property(e => e.ObjectionDate).HasColumnType("datetime");
                entity.Property(e => e.ObjectionStatusId).HasColumnName("objectionStatusId");
                entity.Property(e => e.PaymentStatusId).HasColumnName("PaymentStatusID");
                entity.Property(e => e.RequestTypeId).HasColumnName("requestTypeId");
                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
            });

            modelBuilder.Entity<VReportAccessLog>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_ReportAccessLog");

                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReportAccessDatetime).HasColumnType("datetime");
                entity.Property(e => e.ReportChannelDesc).HasMaxLength(50);
                entity.Property(e => e.ReportCode).HasMaxLength(50);
                entity.Property(e => e.ReportNumber).HasMaxLength(50);
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);
            });

            modelBuilder.Entity<VReportDriverNumber>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_ReportDriverNumbers");

                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<VReportsForUploading>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_ReportsForUploading");
            });

            modelBuilder.Entity<VReportsStatusAugust>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_ReportsStatusAugust");

                entity.Property(e => e.AdpreportNumber).HasColumnName("ADPReportNumber");
                entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
                entity.Property(e => e.ErrorMessgae).HasMaxLength(2000);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<VSaaedGetConsentIncidentList>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_SaaedGetConsentIncidentList");

                entity.Property(e => e.Adpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("adpdate");
                entity.Property(e => e.Adpnumber)
                    .HasMaxLength(255)
                    .HasColumnName("adpnumber");
                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.CallerName).HasMaxLength(152);
                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.CallerTakerName).HasMaxLength(152);
                entity.Property(e => e.CompromiseNumber).HasMaxLength(50);
                entity.Property(e => e.ControlCenterName).HasMaxLength(250);
                entity.Property(e => e.Emirate).HasMaxLength(200);
                entity.Property(e => e.IncidentDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.Sourceid).HasColumnName("sourceid");
                entity.Property(e => e.Sourcename)
                    .HasMaxLength(100)
                    .HasColumnName("sourcename");
            });

            modelBuilder.Entity<VSaaedTsgetCanceledIncident>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_SaaedTSGetCanceledIncident");

                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(255);
                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.CallerName).HasMaxLength(100);
                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.CallerTakerName).HasMaxLength(152);
                entity.Property(e => e.CancelationReason).HasMaxLength(100);
                entity.Property(e => e.ControlCenterName).HasMaxLength(250);
                entity.Property(e => e.Emirate).HasMaxLength(200);
                entity.Property(e => e.IncidentDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentPriority).HasMaxLength(100);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.SourceName).HasMaxLength(100);
            });

            modelBuilder.Entity<VSaaedTsgetClosedIncidentList>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_SaaedTSGetClosedIncidentList");

                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.CallerName).HasMaxLength(152);
                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.CallerTakerName).HasMaxLength(152);
                entity.Property(e => e.ClosedIncidentActivityId).HasColumnName("ClosedIncidentActivityID");
                entity.Property(e => e.ControlCenterName).HasMaxLength(250);
                entity.Property(e => e.DispatcherName).HasMaxLength(152);
                entity.Property(e => e.Emirate).HasMaxLength(200);
                entity.Property(e => e.IncidentDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentPriority).HasMaxLength(100);
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TrafficExpertName).HasMaxLength(152);
            });

            modelBuilder.Entity<VSaaedTsgetClosedIncidentListOld>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_SaaedTSGetClosedIncidentList_old");

                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.CallerName).HasMaxLength(152);
                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.CallerTakerName).HasMaxLength(152);
                entity.Property(e => e.ControlCenterName).HasMaxLength(250);
                entity.Property(e => e.DispatcherName).HasMaxLength(152);
                entity.Property(e => e.Emirate).HasMaxLength(200);
                entity.Property(e => e.IncidentDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentPriority).HasMaxLength(100);
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TrafficExpertName).HasMaxLength(152);
            });

            modelBuilder.Entity<VSaaedTsgetClosedIncidentListTest>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_SaaedTSGetClosedIncidentList_Test");

                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.CallerName).HasMaxLength(152);
                entity.Property(e => e.CallerNumber).HasMaxLength(100);
                entity.Property(e => e.CallerTakerName).HasMaxLength(152);
                entity.Property(e => e.ClosedIncidentActivityId).HasColumnName("ClosedIncidentActivityID");
                entity.Property(e => e.ControlCenterName).HasMaxLength(250);
                entity.Property(e => e.DispatcherName).HasMaxLength(152);
                entity.Property(e => e.Emirate).HasMaxLength(200);
                entity.Property(e => e.IncidentDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentPriority).HasMaxLength(100);
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TrafficExpertName).HasMaxLength(152);
            });

            modelBuilder.Entity<VSketchReportDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("v_SketchReportData");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(255);
                entity.Property(e => e.Arcdelay)
                    .HasMaxLength(100)
                    .HasColumnName("ARCDelay");
                entity.Property(e => e.Arrival1DateTime).HasColumnType("datetime");
                entity.Property(e => e.Arrival2DateTime).HasColumnType("datetime");
                entity.Property(e => e.ArrivalToEndErc).HasColumnName("ArrivalToEndERC");
                entity.Property(e => e.CallTaker).HasMaxLength(50);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CustomerDateTime).HasColumnType("datetime");
                entity.Property(e => e.Dispatcher).HasMaxLength(50);
                entity.Property(e => e.EmirateId).HasColumnName("EmirateID");
                entity.Property(e => e.EndArcdateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("EndARCDateTime");
                entity.Property(e => e.HasSupport)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.PoliceIncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.RequestToCloseDateTime).HasColumnType("datetime");
                entity.Property(e => e.StartArcdateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("StartARCDateTime");
                entity.Property(e => e.StartToEndErc).HasColumnName("StartToEndERC");
                entity.Property(e => e.TrafficExpert).HasMaxLength(50);
            });

            modelBuilder.Entity<VSmartDispatchingAreaConfiguration>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("v_SmartDispatchingAreaConfiguration");

                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.EmirateNameArabic).HasMaxLength(200);
                entity.Property(e => e.EmirateNameEnglish)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VSmartDispatchingIncidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("v_SmartDispatchingIncidentDetails");

                entity.Property(e => e.AreaName).HasMaxLength(200);
                entity.Property(e => e.CallerName).HasMaxLength(100);
                entity.Property(e => e.CallerPhone).HasMaxLength(250);
                entity.Property(e => e.ConfirmationTime).HasColumnType("datetime");
                entity.Property(e => e.DispatchTime).HasColumnType("datetime");
                entity.Property(e => e.EmirateId).HasColumnName("EmirateID");
                entity.Property(e => e.EmirateName).HasMaxLength(200);
                entity.Property(e => e.ExpectedTime).HasColumnType("decimal(10, 2)");
                entity.Property(e => e.IcccincidentId).HasColumnName("ICCCIncidentId");
                entity.Property(e => e.IcccincidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ICCCIncidentNumber");
                entity.Property(e => e.IcccrequestStatus)
                    .HasMaxLength(50)
                    .HasColumnName("ICCCRequestStatus");
                entity.Property(e => e.IcccrequestStatusCode)
                    .HasMaxLength(10)
                    .HasColumnName("ICCCRequestStatusCode");
                entity.Property(e => e.IcccrequestStatusId).HasColumnName("ICCCRequestStatusId");
                entity.Property(e => e.RequestTime).HasColumnType("datetime");
                entity.Property(e => e.SourceOperationRoomId).HasColumnName("SourceOperationRoomID");
                entity.Property(e => e.Status).HasMaxLength(100);
                entity.Property(e => e.StatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<VSmstoWhatsMapping>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_SMSToWhatsMapping");

                entity.Property(e => e.IsSmsretry).HasColumnName("IsSMSRetry");
                entity.Property(e => e.MessageTemplateCode).HasMaxLength(100);
                entity.Property(e => e.SmsarabicLangToWhatsLang)
                    .HasMaxLength(50)
                    .HasColumnName("SMSArabicLangToWhatsLang");
                entity.Property(e => e.SmsenglishLangToWhatsLang)
                    .HasMaxLength(50)
                    .HasColumnName("SMSEnglishLangToWhatsLang");
                entity.Property(e => e.SmsretryPeriodSecs).HasColumnName("SMSRetryPeriodSecs");
                entity.Property(e => e.SmstemplateId).HasColumnName("SMSTemplateId");
                entity.Property(e => e.SmstoWhatsupId).HasColumnName("SMSToWhatsupId");
            });

            modelBuilder.Entity<VTeattendance>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_TEAttendance");

                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LoginActivityId).HasColumnName("LoginActivityID");
                entity.Property(e => e.LoginDate).HasColumnType("datetime");
                entity.Property(e => e.LogoutDate).HasColumnType("datetime");
                entity.Property(e => e.PatrolName).HasMaxLength(50);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<VTerolsDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_TERolsDetails");

                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.Terole).HasColumnName("TERole");
            });

            modelBuilder.Entity<VTrafficViolation>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_TrafficViolations");

                entity.Property(e => e.PlateColorAr).HasMaxLength(200);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.PlateSourceAr).HasMaxLength(100);
                entity.Property(e => e.PoliceViolationStatusAr).HasMaxLength(250);
                entity.Property(e => e.PoliceViolationStatusEn).HasMaxLength(250);
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TechnicalSupportViolationStatusAr).HasMaxLength(250);
                entity.Property(e => e.TechnicalSupportViolationStatusEn).HasMaxLength(250);
                entity.Property(e => e.TrafficExpertCode).HasMaxLength(100);
                entity.Property(e => e.TrafficExpertMobileNumber).HasMaxLength(4000);
                entity.Property(e => e.TrafficExpertName).HasMaxLength(50);
                entity.Property(e => e.ViolationStatusCode).HasMaxLength(50);
                entity.Property(e => e.ViolationTypeAr).HasMaxLength(250);
                entity.Property(e => e.ViolationTypeCode).HasMaxLength(50);
                entity.Property(e => e.ViolationTypeEn).HasMaxLength(250);
            });

            modelBuilder.Entity<VTrafficViolationDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_TrafficViolationDetails");

                entity.Property(e => e.DriverMobileNumber).HasMaxLength(20);
                entity.Property(e => e.DriverName).HasMaxLength(3000);
                entity.Property(e => e.PlateColorAr).HasMaxLength(200);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.PlateSourceAr).HasMaxLength(100);
                entity.Property(e => e.PoliceViolationStatusAr).HasMaxLength(250);
                entity.Property(e => e.PoliceViolationStatusEn).HasMaxLength(250);
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TechnicalSupportViolationStatusAr).HasMaxLength(250);
                entity.Property(e => e.TechnicalSupportViolationStatusEn).HasMaxLength(250);
                entity.Property(e => e.TrafficExperMobileNumber).HasMaxLength(100);
                entity.Property(e => e.TrafficExpertCode).HasMaxLength(100);
                entity.Property(e => e.TrafficExpertName).HasMaxLength(50);
                entity.Property(e => e.ViolationStatusCode).HasMaxLength(50);
                entity.Property(e => e.ViolationTypeAr).HasMaxLength(250);
                entity.Property(e => e.ViolationTypeCode).HasMaxLength(50);
                entity.Property(e => e.ViolationTypeEn).HasMaxLength(250);
            });

            modelBuilder.Entity<VTranslatedPlateColorDim>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_TranslatedPlateColorDim");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.DescriptionAr).HasMaxLength(200);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VTranslatedPlateSourceDim>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_TranslatedPlateSourceDim");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.DescriptionAr).HasMaxLength(100);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VTsincidentDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_TSIncidentDetails");

                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.CreatedBy).HasMaxLength(101);
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.StatusDescription).HasMaxLength(100);
                entity.Property(e => e.Teid).HasColumnName("TEID");
                entity.Property(e => e.Tename)
                    .HasMaxLength(101)
                    .HasColumnName("TEName");
            });

            modelBuilder.Entity<VUnpaidreportFee>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_unpaidreportFees");

                entity.Property(e => e.AdpreportNumber).HasColumnName("ADPReportNumber");
                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.ReportCode).HasMaxLength(50);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.UploadedTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<VUploadAccidentCauseDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_UploadAccidentCauseData");

                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StrMainCause)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VUploadAccidentDamagedGov>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_UploadAccidentDamagedGov");

                entity.Property(e => e.GovAuthorityCode).HasMaxLength(50);
                entity.Property(e => e.GovPropertyCode).HasMaxLength(50);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<VUploadAccidentDamagedPart>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_UploadAccidentDamagedPart");

                entity.Property(e => e.LngSerial)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<VUploadAccidentInvolvedDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_UploadAccidentInvolvedData");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");
                entity.Property(e => e.CountryCode).HasMaxLength(50);
                entity.Property(e => e.DtDrivingLicenseExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.DtInsuranceExpiry).HasColumnType("datetime");
                entity.Property(e => e.EngineNumber).HasMaxLength(3000);
                entity.Property(e => e.InsuranceTypeId).HasColumnName("InsuranceTypeID");
                entity.Property(e => e.IntPcolorCode).HasColumnName("IntPColorCode");
                entity.Property(e => e.IntPkindCode).HasColumnName("IntPKindCode");
                entity.Property(e => e.IntPsourceCode).HasColumnName("IntPSourceCode");
                entity.Property(e => e.IntPtypeCode).HasColumnName("IntPTypeCode");
                entity.Property(e => e.IntVehYearFull).HasMaxLength(100);
                entity.Property(e => e.IssueDate).HasColumnType("datetime");
                entity.Property(e => e.LngDrivingLicenseNumber).HasMaxLength(3000);
                entity.Property(e => e.LngOwnTcfNumber).HasMaxLength(3000);
                entity.Property(e => e.LngTcfNumber).HasMaxLength(3000);
                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StrChaseNumber).HasMaxLength(3000);
                entity.Property(e => e.StrDriverName).HasMaxLength(3000);
                entity.Property(e => e.StrDrvAwarenessDesc)
                    .HasMaxLength(6)
                    .IsUnicode(false);
                entity.Property(e => e.StrInsurancePolicy).HasMaxLength(15);
                entity.Property(e => e.StrIsChemicalDanger)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.StrIsWinTinted)
                    .HasMaxLength(1)
                    .IsUnicode(false);
                entity.Property(e => e.StrOwnerName).HasMaxLength(3000);
                entity.Property(e => e.StrPno)
                    .HasMaxLength(3000)
                    .HasColumnName("StrPNo");
                entity.Property(e => e.WeightEmpty).HasMaxLength(3000);
                entity.Property(e => e.WeightNonEmpty).HasMaxLength(3000);
            });

            modelBuilder.Entity<VUploadAccidentMasterDatum>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_UploadAccidentMasterData");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.CrossingStreetCode).HasMaxLength(50);
                entity.Property(e => e.IntSctcode).HasColumnName("IntSCTCode");
                entity.Property(e => e.ReportDatetime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.RoadSpeed).HasMaxLength(100);
                entity.Property(e => e.StrStSurfaceDesc)
                    .HasMaxLength(6)
                    .IsUnicode(false);
                entity.Property(e => e.StreetCode).HasMaxLength(50);
            });

            modelBuilder.Entity<VUserandRoleContact>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("V_UserandRoleContacts");

                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.Email).HasMaxLength(256);
            });

            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.HasKey(e => e.ItemId).HasFillFactor(80);

                entity.ToTable("Vehicle");

                entity.Property(e => e.ItemId).ValueGeneratedNever();
                entity.Property(e => e.DoorQuantity).HasDefaultValue(0);
                entity.Property(e => e.EngineCylinderQuantity).HasDefaultValue(0);
                entity.Property(e => e.EngineQuantity).HasDefaultValue(0);
                entity.Property(e => e.Identification).HasMaxLength(20);
                entity.Property(e => e.MotorCarrierIdentification).HasMaxLength(20);
                entity.Property(e => e.SeatQuantity).HasDefaultValue(1);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VehicleTypeId).HasDefaultValue(1);

                entity.HasOne(d => d.Item).WithOne(p => p.Vehicle)
                    .HasForeignKey<Vehicle>(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Vehicle_FK1");

                entity.HasOne(d => d.VehicleType).WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.VehicleTypeId)
                    .HasConstraintName("VehicleTypeDIM_Vehicle_FK1");
            });

            modelBuilder.Entity<VehicleBrandDim>(entity =>
            {
                entity.HasKey(e => e.VehicleBrandId)
                    .HasName("PK__VehicleB__12DA48D90C425443")
                    .HasFillFactor(80);

                entity.ToTable("VehicleBrandDim");

                entity.Property(e => e.VehicleBrandId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VehicleBrandDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VehicleBrandDIM_RowStatusDIM");
            });

            modelBuilder.Entity<VehicleCategoryDim>(entity =>
            {
                entity.HasKey(e => e.VehicleCategoryId)
                    .HasName("PK__VehicleC__55CCA5674E31F985")
                    .HasFillFactor(80);

                entity.ToTable("VehicleCategoryDim");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VehicleCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VehicleCategoryDim_RowStatusDIM");
            });

            modelBuilder.Entity<VehicleCategoryToLicenseCategoryMap>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__VehicleC__3214EC076DB209D3");

                entity.ToTable("VehicleCategoryToLicenseCategoryMap");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.LicenseCategory).WithMany(p => p.VehicleCategoryToLicenseCategoryMaps)
                    .HasForeignKey(d => d.LicenseCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__VehicleCa__Licen__07079E82");

                entity.HasOne(d => d.VehicleCategory).WithMany(p => p.VehicleCategoryToLicenseCategoryMaps)
                    .HasForeignKey(d => d.VehicleCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__VehicleCa__Vehic__07FBC2BB");
            });

            modelBuilder.Entity<VehicleCategoryToVehicleTypeMap>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__VehicleC__3214EC076C211024")
                    .HasFillFactor(80);

                entity.ToTable("VehicleCategoryToVehicleTypeMap");

                entity.Property(e => e.IsActive).HasDefaultValue(false);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.VehicleCategory).WithMany(p => p.VehicleCategoryToVehicleTypeMaps)
                    .HasForeignKey(d => d.VehicleCategoryId)
                    .HasConstraintName("FK__VehicleCa__Vehic__46E9EC11");

                entity.HasOne(d => d.VehicleType).WithMany(p => p.VehicleCategoryToVehicleTypeMaps)
                    .HasForeignKey(d => d.VehicleTypeId)
                    .HasConstraintName("FK__VehicleCa__Vehic__47DE104A");
            });

            modelBuilder.Entity<VehicleDamagePart>(entity =>
            {
                entity.HasKey(e => e.VehicleDamagePartId).HasFillFactor(80);

                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VehicleDamagePartCreatinDate).HasColumnType("datetime");

                entity.HasOne(d => d.DamagePart).WithMany(p => p.VehicleDamageParts)
                    .HasForeignKey(d => d.DamagePartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehicleDamageParts_DamagePartsDIM");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.VehicleDamageParts)
                    .HasForeignKey(d => d.VehicleDataId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VehicleDamageParts_VehicleData");
            });

            modelBuilder.Entity<VehicleDamagedPart>(entity =>
            {
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.DamagedPartName).HasMaxLength(50);
                entity.Property(e => e.ModificationDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.DamagedPartSeverity).WithMany(p => p.VehicleDamagedParts)
                    .HasForeignKey(d => d.DamagedPartSeverityId)
                    .HasConstraintName("FK_VehicleDamagedParts_DamagedPartSeverity");

                entity.HasOne(d => d.VehicleData).WithMany(p => p.VehicleDamagedParts)
                    .HasForeignKey(d => d.VehicleDataId)
                    .HasConstraintName("FK_VehicleDamagedParts_VehicleData");
            });

            modelBuilder.Entity<VehicleDamagedTypeDim>(entity =>
            {
                entity.HasKey(e => e.VehicleDamagedTypeId)
                    .HasName("PK__VehicleD__CDDFF3B37CA6AFF3")
                    .HasFillFactor(80);

                entity.ToTable("VehicleDamagedTypeDim");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(300);
                entity.Property(e => e.IsActive).HasDefaultValue(false);
            });

            modelBuilder.Entity<VehicleDataTypeDim>(entity =>
            {
                entity.HasKey(e => e.VehicleDataTypeId)
                    .HasName("PK__VehicleD__5DDEB782316C1CE1")
                    .HasFillFactor(80);

                entity.ToTable("VehicleDataTypeDim");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TypeCode).HasMaxLength(50);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VehicleDataTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VehicleDataTypeDim_RowStatusDIM");
            });

            modelBuilder.Entity<VehicleDatum>(entity =>
            {
                entity.HasKey(e => e.VehicleDataId)
                    .HasName("PK__VehicleD__250CE72879D42E07")
                    .HasFillFactor(80);

                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.CombinedPlateNumber).HasMaxLength(3000);
                entity.Property(e => e.Comments).HasMaxLength(3000);
                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DeliveryCompanyOthers).HasMaxLength(150);
                entity.Property(e => e.EngineNumber).HasMaxLength(3000);
                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
                entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");
                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(3000);
                entity.Property(e => e.InsuranceTypeId).HasColumnName("InsuranceTypeID");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsVehicleWithoutPlateNumber).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.ReportCode).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VehicleBrandId).HasColumnName("VehicleBrandID");
                entity.Property(e => e.VehicleCategoryId).HasColumnName("VehicleCategoryID");
                entity.Property(e => e.VehicleDescription).HasMaxLength(3000);
                entity.Property(e => e.VehicleModelId).HasColumnName("VehicleModelID");
                entity.Property(e => e.VehicleTypeId).HasColumnName("VehicleTypeID");
                entity.Property(e => e.WeightEmpty).HasMaxLength(3000);
                entity.Property(e => e.WeightNonEmpty).HasMaxLength(3000);

                entity.HasOne(d => d.Chemical).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.ChemicalId)
                    .HasConstraintName("FK_VehicleData_ChemicalDIM");

                entity.HasOne(d => d.Collision).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.CollisionId)
                    .HasConstraintName("FK_VehicleData_CollisionDIM");

                entity.HasOne(d => d.CountryOfOrigin).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.CountryOfOriginId)
                    .HasConstraintName("FK_VehicleDataCountry_GeoCountryDIM");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_VehicleData_Person");

                entity.HasOne(d => d.DeliveryCompany).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.DeliveryCompanyId)
                    .HasConstraintName("FK__VehicleDa__Deliv__53872F25");

                entity.HasOne(d => d.GlassColor).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.GlassColorId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_VehicleDataGlassColor_ColorDIM");

                entity.HasOne(d => d.InsuranceCompany).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.InsuranceCompanyId)
                    .HasConstraintName("FK_VehicleData_InsuranceCompanyDIM");

                entity.HasOne(d => d.InsuranceType).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.InsuranceTypeId)
                    .HasConstraintName("FK_VehicleData_InsuranceTypeDIM");

                entity.HasOne(d => d.ItemRegistrationPlateCategory).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.ItemRegistrationPlateCategoryId)
                    .HasConstraintName("FK_VehicleData_ItemRegistrationPlateCategoryDIM");

                entity.HasOne(d => d.ItemRegistrationPlateColor).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.ItemRegistrationPlateColorId)
                    .HasConstraintName("FK_VehicleData_ItemRegistrationPlateColorDIM");

                entity.HasOne(d => d.ItemRegistrationPlateKind).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.ItemRegistrationPlateKindId)
                    .HasConstraintName("FK_VehicleData_ItemRegistrationPlateKindDIM");

                //entity.HasOne(d => d.ManufactureYear).WithMany(p => p.VehicleData)
                //    .HasForeignKey(d => d.ManufactureYearId)
                //    .HasConstraintName("FK_VehicleDataManufacture_YearDIM");

                entity.HasOne(d => d.PlateSource).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.PlateSourceId)
                    .HasConstraintName("FK_VehicleData_PlateSourceDIM");

                entity.HasOne(d => d.ReasonCategory).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.ReasonCategoryId)
                    .HasConstraintName("FK_VehicleData_ReportReasonDIM");

                entity.HasOne(d => d.SelectedCausedVehicleType).WithMany(p => p.VehicleDatumSelectedCausedVehicleTypes)
                    .HasForeignKey(d => d.SelectedCausedVehicleTypeId)
                    .HasConstraintName("FK_VehicleData_VehicleTypeDIM1");

                entity.HasOne(d => d.VehicleBrand).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.VehicleBrandId)
                    .HasConstraintName("FK_VehicleData_VehicleBrandDIM");

                entity.HasOne(d => d.VehicleCategory).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.VehicleCategoryId)
                    .HasConstraintName("FK_VehicleData_VehicleCategoryDIM");

                entity.HasOne(d => d.VehicleColor).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.VehicleColorId)
                    .HasConstraintName("FK_VehicleDataVehicleColor_ColorDIM");

                entity.HasOne(d => d.VehicleDataType).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.VehicleDataTypeId)
                    .HasConstraintName("FK_VehicleData_VehicleDataTypeDIM");

                entity.HasOne(d => d.VehicleModel).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.VehicleModelId)
                    .HasConstraintName("FK_VehicleData_VehicleModelDIM");

                entity.HasOne(d => d.VehicleStatus).WithMany(p => p.VehicleData)
                    .HasForeignKey(d => d.VehicleStatusId)
                    .HasConstraintName("FK_VehicleData_VehicleStatusDIM");

                entity.HasOne(d => d.VehicleType).WithMany(p => p.VehicleDatumVehicleTypes)
                    .HasForeignKey(d => d.VehicleTypeId)
                    .HasConstraintName("FK_VehicleData_VehicleTypeDIM");
            });

            modelBuilder.Entity<VehicleEnergySourceDim>(entity =>
            {
                entity.HasKey(e => e.VehicleEnergySourceId).HasName("PK_CarEnergySourceDim");

                entity.ToTable("VehicleEnergySourceDim");

                entity.Property(e => e.VehicleEnergySourceId).ValueGeneratedNever();
                entity.Property(e => e.DescriptionAr).HasColumnName("DescriptionAR");
                entity.Property(e => e.DescriptionEn).HasColumnName("DescriptionEN");
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<VehicleGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VehicleGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.Identification).HasMaxLength(20);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.MotorCarrierIdentification).HasMaxLength(20);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VehicleInvolvedSerial>(entity =>
            {
                entity.HasKey(e => e.VehicleSerialId).HasFillFactor(80);

                entity.ToTable("VehicleInvolvedSerial");

                entity.Property(e => e.VehicleSerialId).HasColumnName("VehicleSerialID");
            });

            modelBuilder.Entity<VehicleMatrix>(entity =>
            {
                entity.HasKey(e => e.VehicleMatrixId)
                    .HasName("PK__VehicleM__50166C9AAEAFDDF0")
                    .HasFillFactor(80);

                entity.ToTable("VehicleMatrix");

                entity.Property(e => e.VehicleMatrixId).ValueGeneratedNever();
                entity.Property(e => e.IsActive).HasDefaultValue(true);

                entity.HasOne(d => d.VehicleBrand).WithMany(p => p.VehicleMatrices)
                    .HasForeignKey(d => d.VehicleBrandId)
                    .HasConstraintName("fk_VehicleMatrix_VehicleBrandDim");

                entity.HasOne(d => d.VehicleKind).WithMany(p => p.VehicleMatrices)
                    .HasForeignKey(d => d.VehicleKindId)
                    .HasConstraintName("fk_VehicleMatrix_VehicleTypeDim");

                entity.HasOne(d => d.VehicleModel).WithMany(p => p.VehicleMatrices)
                    .HasForeignKey(d => d.VehicleModelId)
                    .HasConstraintName("fk_VehicleMatrix_VehicleModelDim");

                entity.HasOne(d => d.VehicleType).WithMany(p => p.VehicleMatrices)
                    .HasForeignKey(d => d.VehicleTypeId)
                    .HasConstraintName("fk_VehicleMatrix_VehicleCategoryDim");
            });

            modelBuilder.Entity<VehicleModelDim>(entity =>
            {
                entity.HasKey(e => e.VehicleModelId)
                    .HasName("PK__VehicleM__559276F48259743B")
                    .HasFillFactor(80);

                entity.ToTable("VehicleModelDim");

                entity.Property(e => e.VehicleModelId).ValueGeneratedNever();
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VehicleModelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VehicleModelDIM_RowStatusDIM");

                entity.HasOne(d => d.VehicleBrand).WithMany(p => p.VehicleModelDims)
                    .HasForeignKey(d => d.VehicleBrandId)
                    .HasConstraintName("FK_VehicleModelDIM_VehicleBrandDIM");
            });

            modelBuilder.Entity<VehicleModelMatrix>(entity =>
            {
                entity.ToTable("VehicleModelMatrix");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<VehicleModelPoliceVechileModelDim>(entity =>
            {
                entity.HasKey(e => new { e.VehicleModelId, e.OriginalVehicleModelId });

                entity.ToTable("VehicleModelPolice_VechileModelDim");
            });

            modelBuilder.Entity<VehicleStatusDim>(entity =>
            {
                entity.HasKey(e => e.VehicleStatusId)
                    .HasName("PK__VehicleS__D92874EF0474C3CF")
                    .HasFillFactor(80);

                entity.ToTable("VehicleStatusDim");

                entity.Property(e => e.Code).HasMaxLength(50);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VehicleStatusDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VehicleStatusDim_RowStatusDIM");
            });

            modelBuilder.Entity<VehicleTypeDim>(entity =>
            {
                entity.HasKey(e => e.VehicleTypeId)
                    .HasName("VehicleTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("VehicleTypeDIM");

                entity.Property(e => e.Category).HasMaxLength(50);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(150);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.Reference).HasMaxLength(255);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VehicleTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VehicleTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<VehicleTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VehicleTypeDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.VehicleTypeCode).HasMaxLength(20);
                entity.Property(e => e.VehicleTypeDescription).HasMaxLength(150);
            });

            modelBuilder.Entity<VehicleTypeToVehicleModelMap>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK__VehicleT__3214EC07B1724F20")
                    .HasFillFactor(80);

                entity.ToTable("VehicleTypeToVehicleModelMap");

                entity.Property(e => e.IsActive).HasDefaultValue(false);
                entity.Property(e => e.VersionDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.VehicleModel).WithMany(p => p.VehicleTypeToVehicleModelMaps)
                    .HasForeignKey(d => d.VehicleModelId)
                    .HasConstraintName("FK__VehicleTy__Vehic__43195B2D");

                entity.HasOne(d => d.VehicleType).WithMany(p => p.VehicleTypeToVehicleModelMaps)
                    .HasForeignKey(d => d.VehicleTypeId)
                    .HasConstraintName("FK__VehicleTy__Vehic__422536F4");
            });

            modelBuilder.Entity<VehicleView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VehicleView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.Identification).HasMaxLength(20);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.MotorCarrierIdentification).HasMaxLength(20);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VehicleTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VersionInfoDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasFillFactor(80);

                entity.ToTable("VersionInfoDIM");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.VersionDate).HasColumnType("datetime");
                entity.Property(e => e.VersionPath).HasMaxLength(250);
            });

            modelBuilder.Entity<Vessel>(entity =>
            {
                entity.HasKey(e => e.ItemId)
                    .HasName("PK_Vessel_1")
                    .HasFillFactor(80);

                entity.ToTable("Vessel");

                entity.Property(e => e.ItemId).ValueGeneratedNever();
                entity.Property(e => e.EngineCylinderQuantity).HasDefaultValue(0);
                entity.Property(e => e.EngineQuanity).HasDefaultValue(0);
                entity.Property(e => e.HullIdentification).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.InternationalRadioCallSign).HasMaxLength(50);
                entity.Property(e => e.LicenseNumber).HasMaxLength(50);
                entity.Property(e => e.Mmsinumber)
                    .HasMaxLength(20)
                    .HasColumnName("MMSINumber");
                entity.Property(e => e.OfficalCoastGuardNumber).HasMaxLength(50);
                entity.Property(e => e.PortOfRegistry).HasMaxLength(50);
                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);
                entity.Property(e => e.SailNumber).HasMaxLength(50);
                entity.Property(e => e.VesselCategoryId).HasDefaultValue(1);
                entity.Property(e => e.VesselHullMaterialId).HasDefaultValue(1);
                entity.Property(e => e.VesselHullShapeId).HasDefaultValue(1);
                entity.Property(e => e.VesselPropulsionTypeId).HasDefaultValue(1);
                entity.Property(e => e.VesselRegistrationNumber).HasMaxLength(50);

                entity.HasOne(d => d.GeoCountry).WithMany(p => p.Vessels)
                    .HasForeignKey(d => d.GeoCountryId)
                    .HasConstraintName("FK_Vessel_GeoCountry");

                entity.HasOne(d => d.Item).WithOne(p => p.Vessel)
                    .HasForeignKey<Vessel>(d => d.ItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Object_Vessel_FK1");

                entity.HasOne(d => d.VesselCategory).WithMany(p => p.Vessels)
                    .HasForeignKey(d => d.VesselCategoryId)
                    .HasConstraintName("VesselTypeDIM_Vessel_FK1");

                entity.HasOne(d => d.VesselHullMaterial).WithMany(p => p.Vessels)
                    .HasForeignKey(d => d.VesselHullMaterialId)
                    .HasConstraintName("FK_Vessel_VesselHullMaterialDIM");

                entity.HasOne(d => d.VesselHullShape).WithMany(p => p.Vessels)
                    .HasForeignKey(d => d.VesselHullShapeId)
                    .HasConstraintName("FK_Vessel_VesselHullShapeDIM");

                entity.HasOne(d => d.VesselPropulsionType).WithMany(p => p.Vessels)
                    .HasForeignKey(d => d.VesselPropulsionTypeId)
                    .HasConstraintName("VesselPropulsionTypeDIM_Vessel_FK1");
            });

            modelBuilder.Entity<VesselCategoryDim>(entity =>
            {
                entity.HasKey(e => e.VesselCategoryId)
                    .HasName("VesselTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("VesselCategoryDIM");

                entity.Property(e => e.CanNcic)
                    .HasMaxLength(20)
                    .HasColumnName("CAN-NCIC");
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VesselCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VesselCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<VesselCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VesselCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.VesselCategoryCode).HasMaxLength(20);
                entity.Property(e => e.VesselCategoryDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<VesselGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VesselGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.GeoCountryCode).HasMaxLength(50);
                entity.Property(e => e.HullIdentification).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.InternationalRadioCallSign).HasMaxLength(50);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicenseNumber).HasMaxLength(50);
                entity.Property(e => e.Mmsinumber)
                    .HasMaxLength(20)
                    .HasColumnName("MMSINumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OfficalCoastGuardNumber).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PortOfRegistry).HasMaxLength(50);
                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SailNumber).HasMaxLength(50);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselRegistrationNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<VesselHullMaterialDim>(entity =>
            {
                entity.HasKey(e => e.VesselHullMaterialId).HasFillFactor(80);

                entity.ToTable("VesselHullMaterialDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VesselHullMaterialDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VesselHullMaterialDIM_RowStatusDIM");
            });

            modelBuilder.Entity<VesselHullMaterialDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VesselHullMaterialDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.VesselHullMaterialCode).HasMaxLength(20);
                entity.Property(e => e.VesselHullMaterialDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<VesselHullShapeDim>(entity =>
            {
                entity.HasKey(e => e.VesselHullShapeId).HasFillFactor(80);

                entity.ToTable("VesselHullShapeDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VesselHullShapeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VesselHullShapeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<VesselHullShapeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VesselHullShapeDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.VesselHullShapeCode).HasMaxLength(20);
                entity.Property(e => e.VesselHullShapeDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<VesselPropulsionTypeDim>(entity =>
            {
                entity.HasKey(e => e.VesselPropulsionTypeId)
                    .HasName("VesselPropulsionTypeDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("VesselPropulsionTypeDIM");

                entity.Property(e => e.CanNcic)
                    .HasMaxLength(20)
                    .HasColumnName("CAN-NCIC");
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VesselPropulsionTypeDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VesselPropulsionTypeDIM_RowStatusDIM");
            });

            modelBuilder.Entity<VesselPropulsionTypeDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VesselPropulsionTypeDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.VesselPropulsionTypeCode).HasMaxLength(20);
                entity.Property(e => e.VesselPropulsionTypeDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<VesselView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VesselView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.GeoCountryCode).HasMaxLength(50);
                entity.Property(e => e.GeoCountryCountryName).HasMaxLength(50);
                entity.Property(e => e.HullIdentification).HasMaxLength(50);
                entity.Property(e => e.Imonumber)
                    .HasMaxLength(20)
                    .HasColumnName("IMONumber");
                entity.Property(e => e.InternationalRadioCallSign).HasMaxLength(50);
                entity.Property(e => e.ItemCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemConditionDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemMakeModelCode).HasMaxLength(50);
                entity.Property(e => e.ItemMakeModelMake).HasMaxLength(200);
                entity.Property(e => e.ItemMakeModelModel).HasMaxLength(200);
                entity.Property(e => e.ItemName).HasMaxLength(50);
                entity.Property(e => e.ItemPrimaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemPrimaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemSecondaryColorDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ItemUsageDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.LicenseNumber).HasMaxLength(50);
                entity.Property(e => e.Mmsinumber)
                    .HasMaxLength(20)
                    .HasColumnName("MMSINumber");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OfficalCoastGuardNumber).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PortOfRegistry).HasMaxLength(50);
                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SailNumber).HasMaxLength(50);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.SizeDescription).HasMaxLength(200);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullMaterialDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselHullShapeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselPropulsionTypeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VesselRegistrationNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<Victim>(entity =>
            {
                entity.HasKey(e => e.PersonId).HasFillFactor(80);

                entity.ToTable("Victim");

                entity.Property(e => e.PersonId).ValueGeneratedNever();
                entity.Property(e => e.VictimCategoryId).HasDefaultValue(1);
                entity.Property(e => e.VictimMeansOfAttackId).HasDefaultValue(1);

                entity.HasOne(d => d.Person).WithOne(p => p.Victim)
                    .HasForeignKey<Victim>(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Victim_Person");

                entity.HasOne(d => d.VictimCategory).WithMany(p => p.Victims)
                    .HasForeignKey(d => d.VictimCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Victim_VictimCategoryDIM");

                entity.HasOne(d => d.VictimMeansOfAttack).WithMany(p => p.Victims)
                    .HasForeignKey(d => d.VictimMeansOfAttackId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Victim_VictimMeansOfAttackDIM");
            });

            modelBuilder.Entity<VictimCategoryDim>(entity =>
            {
                entity.HasKey(e => e.VictimCategoryId)
                    .HasName("PK__VictimCa__33E30D282E30C1B6")
                    .HasFillFactor(80);

                entity.ToTable("VictimCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VictimCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VictimCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<VictimCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VictimCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.VictimCategoryCode).HasMaxLength(20);
                entity.Property(e => e.VictimCategoryDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<VictimGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VictimGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.VictimCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VictimMeansOfAttackDim>(entity =>
            {
                entity.HasKey(e => e.VictimMeansOfAttackId)
                    .HasName("PK__VictimMe__AAB7634B6D1B1551")
                    .HasFillFactor(80);

                entity.ToTable("VictimMeansOfAttackDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.VictimMeansOfAttackDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_VictimMeansOfAttackDIM_RowStatusDIM");
            });

            modelBuilder.Entity<VictimMeansOfAttackDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VictimMeansOfAttackDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.VictimMeansOfAttackCode).HasMaxLength(20);
                entity.Property(e => e.VictimMeansOfAttackDescription).HasMaxLength(200);
            });

            modelBuilder.Entity<VictimView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VictimView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.PersonStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.VictimCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimCategoryDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.VictimMeansOfAttackDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewAccidentHistoryByChassisNumber>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewAccidentHistoryByChassisNumber");

                entity.Property(e => e.ChasisNumber).HasMaxLength(3000);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.ReportStatus).HasMaxLength(100);
                entity.Property(e => e.ReportType).HasMaxLength(100);
                entity.Property(e => e.RoleInAccident).HasMaxLength(5);
            });

            modelBuilder.Entity<ViewActiveDirectoryPerson>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActiveDirectoryPersons");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.Moniker).HasMaxLength(50);
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.PersonId).ValueGeneratedOnAdd();
                entity.Property(e => e.Prefix).HasMaxLength(50);
                entity.Property(e => e.Suffix).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ViewActivityArrival1DelayReason>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityArrival1DelayReasons");
            });

            modelBuilder.Entity<ViewActivityArrival2Reason>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityArrival2Reasons");
            });

            modelBuilder.Entity<ViewActivityAssignment>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityAssignment");
            });

            modelBuilder.Entity<ViewActivityAssignmentDelayReason>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityAssignmentDelayReasons");
            });

            modelBuilder.Entity<ViewActivityAssignmentFull>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityAssignmentFull");
            });

            modelBuilder.Entity<ViewActivityAssignmentPerson>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityAssignmentPerson");
            });

            modelBuilder.Entity<ViewActivityAssignmentSimple>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityAssignmentSimple");
            });

            modelBuilder.Entity<ViewActivityCreationDelayReason>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityCreationDelayReasons");
            });

            modelBuilder.Entity<ViewActivityDispatching>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("viewActivityDispatching");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.ActivityDueDate).HasColumnType("datetime");
                entity.Property(e => e.ActivityEndDate).HasColumnType("datetime");
                entity.Property(e => e.ActivityExpirationDate).HasColumnType("datetime");
                entity.Property(e => e.ActivityId).ValueGeneratedOnAdd();
                entity.Property(e => e.ActivityName).HasMaxLength(255);
                entity.Property(e => e.ActivityStartDate).HasColumnType("datetime");
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ViewActivityEndArcDelayReason>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityEndArcDelayReasons");
            });

            modelBuilder.Entity<ViewActivityGroupGi>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityGroupGIS");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.GroupCode).HasMaxLength(50);
                entity.Property(e => e.GroupName).HasMaxLength(500);
                entity.Property(e => e.LastRetryDate).HasColumnType("datetime");
                entity.Property(e => e.SendDate).HasColumnType("datetime");
                entity.Property(e => e.ServiceResponse).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewActivityGroupGisreport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityGroupGISReport");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.GroupCode).HasMaxLength(50);
                entity.Property(e => e.GroupName).HasMaxLength(500);
                entity.Property(e => e.LastRetryDate).HasColumnType("datetime");
                entity.Property(e => e.SendDate).HasColumnType("datetime");
                entity.Property(e => e.ServiceResponse).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewActivityResponsePerEmirate>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("viewActivityResponsePerEmirate");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.ArrivalTime).HasColumnType("datetime");
                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewActivityTransactionStatusOrgDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewActivityTransactionStatusOrgDetails");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.OrgName).HasMaxLength(255);
                entity.Property(e => e.StatusName).HasMaxLength(100);
                entity.Property(e => e.Teid).HasColumnName("TEID");
                entity.Property(e => e.Temp).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewAssignedIncidentNew>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewAssignedIncidentNew");

                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentStatusCode).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewAssignedPatrolForNotification>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewAssignedPatrolForNotification");

                entity.Property(e => e.ActivityItemWf).HasColumnName("ActivityItemWF");
                entity.Property(e => e.DispatchActivityId).HasColumnName("dispatchActivityId");
                entity.Property(e => e.IncWf).HasColumnName("IncWF");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.PatrolStatus).HasColumnName("patrolStatus");
            });

            modelBuilder.Entity<ViewAttendedPatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewAttendedPatrol");

                entity.Property(e => e.Area)
                    .HasMaxLength(200)
                    .HasColumnName("area");
                entity.Property(e => e.PatrolId).HasColumnName("patrolId");
                entity.Property(e => e.PatrolNumber).HasMaxLength(50);
                entity.Property(e => e.Sector).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewAttendedPatrolLocation>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewAttendedPatrolLocation");

                entity.Property(e => e.DeviceCode).HasMaxLength(200);
                entity.Property(e => e.LocationDate).HasColumnType("datetime");
                entity.Property(e => e.PersonName).HasMaxLength(50);
                entity.Property(e => e.SectorCode).HasMaxLength(50);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
                entity.Property(e => e.TrackerCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewClosedIncidentNew>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewClosedIncidentNew");

                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.Owner).HasMaxLength(250);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.PatrolSectorName).HasMaxLength(50);
                entity.Property(e => e.PatrolStatusCode).HasMaxLength(20);
            });

            modelBuilder.Entity<ViewContorlCenterRelatedArea>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewContorlCenterRelatedArea");

                entity.Property(e => e.AreaCode).HasMaxLength(20);
                entity.Property(e => e.AreaDescription).HasMaxLength(200);
                entity.Property(e => e.ControlCenterName).HasMaxLength(250);
            });

            modelBuilder.Entity<ViewCustomerObjectionDocument>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewCustomerObjectionDocuments");

                entity.Property(e => e.DocDate).HasColumnType("datetime");
                entity.Property(e => e.DocName).HasMaxLength(500);
                entity.Property(e => e.DocumentExtension).HasMaxLength(100);
                entity.Property(e => e.PersonName).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewElectronicInspection>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewElectronicInspection");

                entity.Property(e => e.Code).HasMaxLength(500);
                entity.Property(e => e.DateFrom).HasColumnType("datetime");
                entity.Property(e => e.DateTo).HasColumnType("datetime");
                entity.Property(e => e.LogoutDate).HasColumnType("datetime");
                entity.Property(e => e.ParentBranchName).HasMaxLength(500);
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.Status).HasMaxLength(50);
                entity.Property(e => e.SubBranchName).HasMaxLength(500);
                entity.Property(e => e.SystemUserName).HasMaxLength(256);
                entity.Property(e => e.TransporterMileage).HasMaxLength(500);
                entity.Property(e => e.TransporterName).HasMaxLength(500);
                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewElectronicInspectionForReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewElectronicInspectionForReport");

                entity.Property(e => e.Code).HasMaxLength(500);
                entity.Property(e => e.DateFrom).HasColumnType("datetime");
                entity.Property(e => e.DateTo).HasColumnType("datetime");
                entity.Property(e => e.LogoutDate).HasColumnType("datetime");
                entity.Property(e => e.ParentBranchName).HasMaxLength(500);
                entity.Property(e => e.PlateColor).HasMaxLength(500);
                entity.Property(e => e.ReplacedCommunicationMachine).HasMaxLength(500);
                entity.Property(e => e.ReplacedComputer).HasMaxLength(500);
                entity.Property(e => e.ReplacedPrinter).HasMaxLength(500);
                entity.Property(e => e.ReportDate).HasColumnType("datetime");
                entity.Property(e => e.Status).HasMaxLength(50);
                entity.Property(e => e.SubBranchName).HasMaxLength(500);
                entity.Property(e => e.SystemUserName).HasMaxLength(256);
                entity.Property(e => e.TransporterCode).HasMaxLength(500);
                entity.Property(e => e.TransporterMileage).HasMaxLength(500);
                entity.Property(e => e.TransporterName).HasMaxLength(500);
                entity.Property(e => e.TransporterType).HasMaxLength(2000);
                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewElectronicInspectionReportDamage>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewElectronicInspectionReportDamages");

                entity.Property(e => e.DamagePartName).HasMaxLength(50);
                entity.Property(e => e.Fmscode).HasColumnName("FMSCode");
            });

            modelBuilder.Entity<ViewElectronicInspectionReportDocument>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewElectronicInspectionReportDocument");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.DocName).HasMaxLength(500);
                entity.Property(e => e.PersonName).HasMaxLength(101);
            });

            modelBuilder.Entity<ViewElectronicInspectionReportQuestionAnswer>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewElectronicInspectionReportQuestionAnswers");

                entity.Property(e => e.AnswerName).HasMaxLength(500);
                entity.Property(e => e.Comment).HasMaxLength(4000);
                entity.Property(e => e.Fmscode).HasColumnName("FMSCode");
                entity.Property(e => e.QuestionName).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewGetNewInicdnt>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewGetNewInicdnt");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewGetSupportOrganization>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewGetSupportOrganization");

                entity.Property(e => e.Name).HasMaxLength(250);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewIcccincidnetRequestList>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewICCCIncidnetRequestList");

                entity.Property(e => e.CallerName).HasMaxLength(100);
                entity.Property(e => e.CallerNumber).HasMaxLength(250);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IcccincidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ICCCIncidentNumber");
                entity.Property(e => e.IcccincidentRequestInfoId).HasColumnName("ICCCIncidentRequestInfoID");
                entity.Property(e => e.Icccservice).HasColumnName("ICCCService");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(200);
                entity.Property(e => e.IsAml).HasColumnName("isAml");
                entity.Property(e => e.IsDetectLocation).HasColumnName("isDetectLocation");
                entity.Property(e => e.RequestDateTime).HasColumnType("datetime");
                entity.Property(e => e.SmartDispatchPerson).HasMaxLength(50);
                entity.Property(e => e.SourceOperationRoomId).HasColumnName("SourceOperationRoomID");
            });

            modelBuilder.Entity<ViewIcccincidnetRequestListClosed>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewICCCIncidnetRequestListClosed");

                entity.Property(e => e.CallerName).HasMaxLength(100);
                entity.Property(e => e.CallerNumber).HasMaxLength(250);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IcccincidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ICCCIncidentNumber");
                entity.Property(e => e.IcccincidentRequestInfoId).HasColumnName("ICCCIncidentRequestInfoID");
                entity.Property(e => e.Icccservice).HasColumnName("ICCCService");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(200);
                entity.Property(e => e.IsAml).HasColumnName("isAml");
                entity.Property(e => e.RequestDateTime).HasColumnType("datetime");
                entity.Property(e => e.SourceOperationRoomId).HasColumnName("SourceOperationRoomID");
            });

            modelBuilder.Entity<ViewIcccincidnetRequestListForAll>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewICCCIncidnetRequestListForAll");

                entity.Property(e => e.CallerName).HasMaxLength(100);
                entity.Property(e => e.CallerNumber).HasMaxLength(250);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.IcccincidentNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ICCCIncidentNumber");
                entity.Property(e => e.IcccincidentRequestInfoId).HasColumnName("ICCCIncidentRequestInfoID");
                entity.Property(e => e.Icccservice).HasColumnName("ICCCService");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(200);
                entity.Property(e => e.IsAml).HasColumnName("isAml");
                entity.Property(e => e.RequestDateTime).HasColumnType("datetime");
                entity.Property(e => e.SourceOperationRoomId).HasColumnName("SourceOperationRoomID");
            });

            modelBuilder.Entity<ViewIncidentCall>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentCall");

                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.IncidentId).HasColumnName("incidentId");
            });

            modelBuilder.Entity<ViewIncidentCallForCompromise>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentCallForCompromise");

                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewIncidentCancelledPatrolSupport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentCancelledPatrolSupport");
            });

            modelBuilder.Entity<ViewIncidentCompromise>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentCompromise");

                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewIncidentConvertToStationReason>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentConvertToStationReasons");

                entity.Property(e => e.TransferToStationRequest).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewIncidentDetailForCompromise>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentDetailForCompromise");

                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.AdpNumber).HasMaxLength(255);
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.Isadp).HasColumnName("ISADP");
            });

            modelBuilder.Entity<ViewIncidentListObj>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentListObj");

                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentStatusCode).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewIncidentNew>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentNew");

                entity.Property(e => e.CallerName).HasMaxLength(100);
                entity.Property(e => e.FirstCallerContact).HasMaxLength(100);
                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentStatusCode).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.MapStatusIcon)
                    .HasMaxLength(28)
                    .IsUnicode(false);
                entity.Property(e => e.Owner).HasMaxLength(250);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.PatrolSectorName).HasMaxLength(200);
                entity.Property(e => e.PatrolStatusCode).HasMaxLength(20);
            });

            modelBuilder.Entity<ViewIncidentPatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentPatrol");

                entity.Property(e => e.DispatchActivityId).HasColumnName("DispatchActivityID");
                entity.Property(e => e.PatrolStatusCode).HasMaxLength(20);
                entity.Property(e => e.SectorName).HasMaxLength(50);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewIncidentPatrol1>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentPatrol1");

                entity.Property(e => e.DispatchActivityId).HasColumnName("DispatchActivityID");
                entity.Property(e => e.PatrolStatusCode).HasMaxLength(20);
                entity.Property(e => e.SectorName).HasMaxLength(200);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewIncidentRelatedPatol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentRelatedPatol");

                entity.Property(e => e.ActivityItemWf).HasColumnName("ActivityItemWF");
                entity.Property(e => e.DispatchActivityId).HasColumnName("dispatchActivityId");
                entity.Property(e => e.IncWf).HasColumnName("IncWF");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewIncidentSupport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentSupport");

                entity.Property(e => e.IncWf).HasColumnName("IncWF");
                entity.Property(e => e.IncidentId).HasColumnName("incidentId");
                entity.Property(e => e.OrganizationName).HasMaxLength(250);
                entity.Property(e => e.SpstatusId).HasColumnName("SPStatusId");
                entity.Property(e => e.Srpwf).HasColumnName("SRPWF");
                entity.Property(e => e.Srwf).HasColumnName("SRWF");
            });

            modelBuilder.Entity<ViewIncidentWorkFlow>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentWorkFlow");

                entity.Property(e => e.IncworkFlowGuid).HasColumnName("INCWorkFlowGuid");
            });

            modelBuilder.Entity<ViewIncidentWorkFlowNew>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewIncidentWorkFlowNew");

                entity.Property(e => e.IncworkFlowGuid).HasColumnName("INCWorkFlowGuid");
            });

            modelBuilder.Entity<ViewLogedInPatrol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewLogedInPatrol");

                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.PatrolId).HasColumnName("patrolId");
                entity.Property(e => e.SectorCode).HasMaxLength(50);
                entity.Property(e => e.TrafficExcert).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLookupDamagedPart>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewLookupDamagedPart");

                entity.Property(e => e.Original).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewLookupVehicleBrand>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewLookupVehicleBrand");

                entity.Property(e => e.Original).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewLookupVehicleModel>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewLookupVehicleModel");

                entity.Property(e => e.Original).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewMaxIncidentTransaction>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMaxIncidentTransaction");
            });

            modelBuilder.Entity<ViewMdtareaItemSyncHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMDTAreaItemSyncHelper");

                entity.Property(e => e.AreaItemId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ViewMdtcontactSyncHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMDTContactSyncHelper");

                entity.Property(e => e.ContactEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.ContactName).HasMaxLength(100);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OriginalIdent).HasMaxLength(50);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ViewMdtincidentRelatedPatol>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMDTIncidentRelatedPatol");

                entity.Property(e => e.ActivityItemWf).HasColumnName("ActivityItemWF");
                entity.Property(e => e.DispatchActivityId).HasColumnName("dispatchActivityId");
                entity.Property(e => e.IncWf).HasColumnName("IncWF");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewMdtmembershipSyncHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMDTMembershipSyncHelper");

                entity.Property(e => e.Comment).HasColumnType("ntext");
                entity.Property(e => e.CreateDate).HasColumnType("datetime");
                entity.Property(e => e.Email).HasMaxLength(256);
                entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");
                entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");
                entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");
                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");
                entity.Property(e => e.LoweredEmail).HasMaxLength(256);
                entity.Property(e => e.MobilePin)
                    .HasMaxLength(16)
                    .HasColumnName("MobilePIN");
                entity.Property(e => e.Password).HasMaxLength(128);
                entity.Property(e => e.PasswordAnswer).HasMaxLength(128);
                entity.Property(e => e.PasswordQuestion).HasMaxLength(256);
                entity.Property(e => e.PasswordSalt).HasMaxLength(128);
            });

            modelBuilder.Entity<ViewMdtorganizationPersonSyncHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMDTOrganizationPersonSyncHelper");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FromDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.OrganizationPersonDescription).HasMaxLength(300);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.ToDateTimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewMdtpersonAreaSyncHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMDTPersonAreaSyncHelper");

                entity.Property(e => e.PersonAreaId).HasColumnName("personAreaId");
            });

            modelBuilder.Entity<ViewMdtpersonAspnetUserSyncHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMDTPersonAspnetUserSyncHelper");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.PersonId).HasColumnName("PersonID");
                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<ViewMdtpersonContactSyncHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMDTPersonContactSyncHelper");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.PersonContactDescription).HasMaxLength(300);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ViewMdtusersInRolesSyncHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMDTUsersInRolesSyncHelper");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.UserRoles)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ViewMdtusersSyncHelper>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMDTUsersSyncHelper");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.IsFromActiveDirectory).HasColumnName("isFromActiveDirectory");
                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.LoweredUserName).HasMaxLength(256);
                entity.Property(e => e.MobileAlias).HasMaxLength(16);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<ViewMissionDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMissionDetail");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.EndDate).HasColumnType("datetime");
                entity.Property(e => e.MissionCode).HasMaxLength(20);
                entity.Property(e => e.MissionType).HasMaxLength(100);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewMissionDetailForAndroid>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMissionDetailForAndroid");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.EndDate).HasColumnType("datetime");
                entity.Property(e => e.MissionCode).HasMaxLength(20);
                entity.Property(e => e.MissionType).HasMaxLength(100);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewMissionDetailReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMissionDetailReport");

                entity.Property(e => e.Description).HasMaxLength(200);
                entity.Property(e => e.EndDate).HasColumnType("datetime");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.MissionType).HasMaxLength(100);
                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewMobileIncidentRequest>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMobileIncidentRequest");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.AreaId).HasColumnName("AreaID");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewMobileRequestList>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMobileRequestList");

                entity.Property(e => e.Area).HasMaxLength(200);
                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.CreateDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentTypeAr)
                    .HasMaxLength(100)
                    .HasColumnName("IncidentTypeAR");
                entity.Property(e => e.IncidentTypeEn)
                    .HasMaxLength(100)
                    .HasColumnName("IncidentTypeEN");
                entity.Property(e => e.IncidentTypeId).HasColumnName("IncidentTypeID");
                entity.Property(e => e.PhoneNumber).HasMaxLength(50);
                entity.Property(e => e.RecievedBy).HasMaxLength(50);
                entity.Property(e => e.StatusDescriptionAr)
                    .HasMaxLength(100)
                    .HasColumnName("StatusDescriptionAR");
                entity.Property(e => e.StatusDescriptionEn)
                    .HasMaxLength(100)
                    .HasColumnName("StatusDescriptionEN");
            });

            modelBuilder.Entity<ViewMoiintegration>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMOIIntegration");

                entity.Property(e => e.ChannelDesc).HasMaxLength(100);
                entity.Property(e => e.Idtype).HasColumnName("IDType");
                entity.Property(e => e.ModifyDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StartDate).HasColumnType("datetime");
                entity.Property(e => e.Status).HasMaxLength(100);
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);
            });

            modelBuilder.Entity<ViewMoiintegrationObjection>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewMOIIntegrationObjections");

                entity.Property(e => e.ChannelDesc).HasMaxLength(21);
                entity.Property(e => e.Idtype).HasColumnName("IDType");
                entity.Property(e => e.ModifyDate).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StartDate).HasColumnType("datetime");
                entity.Property(e => e.Status).HasMaxLength(100);
                entity.Property(e => e.TrafficCode).HasMaxLength(3000);
            });

            modelBuilder.Entity<ViewNewIncidentObj>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewNewIncidentObj");

                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentStatusCode).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewNotUploadedReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewNotUploadedReports");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.ReportDtostr)
                    .HasColumnType("text")
                    .HasColumnName("ReportDTOStr");
                entity.Property(e => e.ReportId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ReportID");
                entity.Property(e => e.ReportNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewObjection>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewObjections");

                entity.Property(e => e.CenterComment).HasMaxLength(2000);
                entity.Property(e => e.CityName).HasMaxLength(200);
                entity.Property(e => e.IncidentApproximateDateFrom).HasColumnType("datetime");
                entity.Property(e => e.IncidentApproximateDateTo).HasColumnType("datetime");
                entity.Property(e => e.LicenceNumber).HasMaxLength(2000);
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.NationalId)
                    .HasMaxLength(50)
                    .HasColumnName("NationalID");
                entity.Property(e => e.Nationality).HasMaxLength(100);
                entity.Property(e => e.NationalityTxt).HasMaxLength(250);
                entity.Property(e => e.ObjectionDate).HasColumnType("datetime");
                entity.Property(e => e.ObjectionSource).HasMaxLength(3553);
                entity.Property(e => e.OtherSourceOfRequest).HasMaxLength(250);
                entity.Property(e => e.PersonCode).HasMaxLength(100);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.ReporterDep).HasMaxLength(250);
                entity.Property(e => e.ReporterName).HasMaxLength(100);
                entity.Property(e => e.RequestTypeId).HasColumnName("requestTypeId");
                entity.Property(e => e.SourceOfRequestVehicleId).HasColumnName("SourceOfRequestVehicleID");
                entity.Property(e => e.StatusName).HasMaxLength(50);
                entity.Property(e => e.VehicleNumber).HasMaxLength(2000);
            });

            modelBuilder.Entity<ViewObjectionComment>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewObjectionComments");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.PersonName).HasMaxLength(101);
            });

            modelBuilder.Entity<ViewObjectionDocument>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewObjectionDocuments");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.PersonName).HasMaxLength(101);
            });

            modelBuilder.Entity<ViewObjectionsPayment>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewObjectionsPayment");

                entity.Property(e => e.CenterComment).HasMaxLength(2000);
                entity.Property(e => e.CityName).HasMaxLength(200);
                entity.Property(e => e.LicenceNumber).HasMaxLength(2000);
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.NationalId)
                    .HasMaxLength(50)
                    .HasColumnName("NationalID");
                entity.Property(e => e.Nationality).HasMaxLength(100);
                entity.Property(e => e.NationalityTxt).HasMaxLength(250);
                entity.Property(e => e.ObjectionDate).HasColumnType("datetime");
                entity.Property(e => e.ObjectionSource).HasMaxLength(3553);
                entity.Property(e => e.OtherSourceOfRequest).HasMaxLength(250);
                entity.Property(e => e.PaymentStatusAr).HasMaxLength(12);
                entity.Property(e => e.PaymentStatusEn)
                    .HasMaxLength(8)
                    .HasColumnName("PaymentStatusEN");
                entity.Property(e => e.PaymentStatusId).HasColumnName("PaymentStatusID");
                entity.Property(e => e.PersonCode).HasMaxLength(100);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.ReporterDep).HasMaxLength(250);
                entity.Property(e => e.ReporterName).HasMaxLength(100);
                entity.Property(e => e.RequestTypeId).HasColumnName("requestTypeId");
                entity.Property(e => e.SourceOfRequestVehicleId).HasColumnName("SourceOfRequestVehicleID");
                entity.Property(e => e.StatusName).HasMaxLength(50);
                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
                entity.Property(e => e.VehicleNumber).HasMaxLength(2000);
            });

            modelBuilder.Entity<ViewOpenIncidentNew>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewOpenIncidentNew");

                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentStatusCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPatrolsInMission>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewPatrolsInMission");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.Code).HasMaxLength(20);
            });

            modelBuilder.Entity<ViewPersonArea>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewPersonArea");

                entity.Property(e => e.ControlReoomName).HasMaxLength(250);
                entity.Property(e => e.PersonFullName).HasMaxLength(152);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<ViewPersonControlRoomAreaDetailsByCategory>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewPersonControlRoomAreaDetailsByCategory");

                entity.Property(e => e.ControlReoomName).HasMaxLength(250);
                entity.Property(e => e.PersonFullName).HasMaxLength(152);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<ViewPersonControlRoomAreaDetailsByRole>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewPersonControlRoomAreaDetailsByRoles");

                entity.Property(e => e.ControlReoomName).HasMaxLength(250);
                entity.Property(e => e.PersonFullName).HasMaxLength(152);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<ViewPersonRole>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewPersonRole");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");
                entity.Property(e => e.RoleCategory).HasMaxLength(250);
                entity.Property(e => e.RoleCategoryCode).HasMaxLength(20);
                entity.Property(e => e.RoleName).HasMaxLength(256);
            });

            modelBuilder.Entity<ViewPoliceReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewPoliceReport");

                entity.Property(e => e.Comment).HasColumnName("comment");
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.DescriptionNew).HasMaxLength(100);
                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(255)
                    .HasColumnName("organizationName");
                entity.Property(e => e.OrganizationNameNew)
                    .HasMaxLength(255)
                    .HasColumnName("organizationNameNew");
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.TransferTime).HasColumnType("datetime");
                entity.Property(e => e.TransferTimeNew).HasColumnType("datetime");
                entity.Property(e => e.TransferedByName).HasMaxLength(50);
                entity.Property(e => e.TransferedByNameNew).HasMaxLength(50);
                entity.Property(e => e.UserIdNew).HasColumnName("userIdNew");
                entity.Property(e => e.UserName).HasMaxLength(256);
                entity.Property(e => e.UsernameNew)
                    .HasMaxLength(256)
                    .HasColumnName("usernameNew");
            });

            modelBuilder.Entity<ViewRenewReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewRenewReport");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.ReportCode).HasMaxLength(50);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewRepairPermission>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewRepairPermissions");

                entity.Property(e => e.AccidentCountryArabic).HasMaxLength(100);
                entity.Property(e => e.AccidentDate).HasColumnType("datetime");
                entity.Property(e => e.ChassisNumber).HasMaxLength(100);
                entity.Property(e => e.DamagesDescription).HasMaxLength(2000);
                entity.Property(e => e.IssuanceDate).HasColumnType("datetime");
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.ObjectionDate).HasColumnType("datetime");
                entity.Property(e => e.PlateCategoryArabic).HasMaxLength(200);
                entity.Property(e => e.PlateColorArabic).HasMaxLength(200);
                entity.Property(e => e.PlateNumber).HasMaxLength(50);
                entity.Property(e => e.PlateSourceArabic).HasMaxLength(100);
                entity.Property(e => e.RepairGarageName).HasMaxLength(100);
                entity.Property(e => e.RepairPermissionType).HasMaxLength(100);
                entity.Property(e => e.Status).HasMaxLength(5);
                entity.Property(e => e.VehicleColorArabic).HasMaxLength(100);
                entity.Property(e => e.VehicleModel).HasMaxLength(100);
                entity.Property(e => e.VehicleType).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewReportRequest>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewReportRequest");

                entity.Property(e => e.CreatedByName).HasMaxLength(50);
                entity.Property(e => e.ReportModificationDate).HasColumnType("datetime");
                entity.Property(e => e.ReportModificationStatusCode).HasMaxLength(50);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.RequestCreationDate).HasColumnType("datetime");
                entity.Property(e => e.RequestModificationDate).HasColumnType("datetime");
                entity.Property(e => e.RequestModifiedByName).HasMaxLength(50);
                entity.Property(e => e.RequestNumber).HasMaxLength(50);
                entity.Property(e => e.RequestTypeCode).HasMaxLength(20);
                entity.Property(e => e.RequestTypeDescription).HasMaxLength(100);
                entity.Property(e => e.SourceOfModificationName).HasMaxLength(50);
                entity.Property(e => e.TransferDate).HasColumnType("datetime");
                entity.Property(e => e.TransferedByName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewRequestedMission>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewRequestedMission");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");
                entity.Property(e => e.ActivityReasonDescription).HasMaxLength(100);
                entity.Property(e => e.PersonName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSaaedIncidentTransaction>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewSaaedIncidentTransaction");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);
                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.ItemCode).HasMaxLength(50);
                entity.Property(e => e.StatusCode).HasMaxLength(50);
                entity.Property(e => e.StatusDescription).HasMaxLength(100);
                entity.Property(e => e.SupportDescription).HasMaxLength(255);
                entity.Property(e => e.TransactionTypeCode).HasMaxLength(10);
            });

            modelBuilder.Entity<ViewSaaedTransferedReport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewSaaedTransferedReport");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsTs).HasColumnName("IsTS");
                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(255)
                    .HasColumnName("organizationName");
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.StatusDescEn).HasColumnName("StatusDescEN");
                entity.Property(e => e.TransferStatusCode).HasMaxLength(50);
                entity.Property(e => e.TransferTime).HasColumnType("datetime");
                entity.Property(e => e.TransferedByName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSmsretry>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("viewSMSRetry");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");
                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
                entity.Property(e => e.LastRetryDate).HasColumnType("datetime");
                entity.Property(e => e.ReceiverMobileNumber).HasMaxLength(50);
                entity.Property(e => e.SenderName).HasMaxLength(50);
                entity.Property(e => e.Smstext).HasColumnName("SMSText");
            });

            modelBuilder.Entity<ViewSupervisorClosedIncident>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewSupervisorClosedIncident");

                entity.Property(e => e.ActivityStartDate).HasColumnType("datetime");
                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentStatusCode).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.RingingTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewSupervisorMapIncident>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewSupervisorMapIncidents");

                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.ServiceCallArrivedDate).HasColumnType("datetime");
                entity.Property(e => e.StatusDesc).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewSupervisorMapIncidentsForAll>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewSupervisorMapIncidentsForAll");

                entity.Property(e => e.CallerMobile).HasMaxLength(100);
                entity.Property(e => e.CallerName).HasMaxLength(50);
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.PoliceDateTime).HasColumnType("datetime");
                entity.Property(e => e.Priority).HasMaxLength(100);
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.ServiceCallArrivedDate).HasColumnType("datetime");
                entity.Property(e => e.StatusDesc).HasMaxLength(100);
                entity.Property(e => e.TrafficExpertName).HasMaxLength(101);
            });

            modelBuilder.Entity<ViewSupervisorOpenedIncident>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewSupervisorOpenedIncident");

                entity.Property(e => e.ActivityStartDate).HasColumnType("datetime");
                entity.Property(e => e.AdpDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
                entity.Property(e => e.IncidentGeneratedNumber).HasMaxLength(50);
                entity.Property(e => e.IncidentStatusCode).HasMaxLength(50);
                entity.Property(e => e.IncidentType).HasMaxLength(50);
                entity.Property(e => e.RingingTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewTicketRequest>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewTicketRequests");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.InsuranceCompany).HasMaxLength(100);
                entity.Property(e => e.InsuranceExpiry).HasColumnType("datetime");
                entity.Property(e => e.MobileNumber).HasMaxLength(50);
                entity.Property(e => e.PlateColor).HasMaxLength(200);
                entity.Property(e => e.PlateNumber).HasMaxLength(50);
                entity.Property(e => e.PlateSource).HasMaxLength(100);
                entity.Property(e => e.ReportCode).HasMaxLength(50);
                entity.Property(e => e.ReportNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewUnderProcessLog>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewUnderProcessLog");

                entity.Property(e => e.CreationTime).HasColumnType("datetime");
                entity.Property(e => e.EmployeeName).HasMaxLength(101);
            });

            modelBuilder.Entity<ViewUpdateIncidentList>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("ViewUpdateIncidentList");

                entity.Property(e => e.IncidentStatusCode).HasMaxLength(50);
                entity.Property(e => e.Isconverted).HasColumnName("ISConverted");
                entity.Property(e => e.Isdelivered).HasColumnName("ISDelivered");
                entity.Property(e => e.MapIconStatus)
                    .HasMaxLength(28)
                    .IsUnicode(false);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.PatrolSector).HasMaxLength(50);
                entity.Property(e => e.PatrolStatus).HasMaxLength(20);
            });

            modelBuilder.Entity<Violation>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Violatio__3214EC07315E774D");

                entity.ToTable("Violation");

                entity.Property(e => e.CreationDateTime).HasColumnType("datetime");
                entity.Property(e => e.IsCarryPolicePermit).HasDefaultValue(false);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsPayloadMatching).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");
                entity.Property(e => e.ViolationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Area).WithMany(p => p.Violations)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK__Violation__AreaI__5DEFAEFF");

                entity.HasOne(d => d.City).WithMany(p => p.Violations)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK__Violation__CityI__5CFB8AC6");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ViolationCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__Violation__Creat__61C03FE3");

                entity.HasOne(d => d.CurrentStep).WithMany(p => p.Violations)
                    .HasForeignKey(d => d.CurrentStepId)
                    .HasConstraintName("FK__Violation__Curre__63A88855");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ViolationModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__Violation__Modif__62B4641C");

                entity.HasOne(d => d.ViolationIncident).WithMany(p => p.Violations)
                    .HasForeignKey(d => d.ViolationIncidentId)
                    .HasConstraintName("FK__Violation__Viola__5B134254");

                entity.HasOne(d => d.ViolationTypeDim).WithMany(p => p.Violations)
                    .HasForeignKey(d => d.ViolationTypeDimId)
                    .HasConstraintName("FK__Violation__Viola__5C07668D");

                entity.HasOne(d => d.ViolationVehicleData).WithMany(p => p.Violations)
                    .HasForeignKey(d => d.ViolationVehicleDataId)
                    .HasConstraintName("FK__Violation__Viola__022D0F75");
            });

            modelBuilder.Entity<ViolationAttachement>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Violatio__3214EC077191D2CF");

                entity.ToTable("ViolationAttachement");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.IsVideo).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ViolationAttachementCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__Violation__Creat__6A5585E4");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ViolationAttachementModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__Violation__Modif__6B49AA1D");

                entity.HasOne(d => d.Violation).WithMany(p => p.ViolationAttachements)
                    .HasForeignKey(d => d.ViolationId)
                    .HasConstraintName("FK__Violation__Viola__67791939");
            });

            modelBuilder.Entity<ViolationStepDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Violatio__3214EC07C02BBB54");

                entity.ToTable("ViolationStepDim");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ViolationStepDimCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__Violation__Creat__527DFC53");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ViolationStepDimModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__Violation__Modif__5372208C");
            });

            modelBuilder.Entity<ViolationTypeDim>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Violatio__3214EC079341B4D5");

                entity.ToTable("ViolationTypeDim");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ViolationTypeDimCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__Violation__Creat__5742B170");

                entity.HasOne(d => d.ModifiedByNavigation).WithMany(p => p.ViolationTypeDimModifiedByNavigations)
                    .HasForeignKey(d => d.ModifiedBy)
                    .HasConstraintName("FK__Violation__Modif__5836D5A9");
            });

            modelBuilder.Entity<ViolationVehicleDatum>(entity =>
            {
                entity.HasKey(e => e.ViolationVehicleDataId).HasName("PK__Violatio__62BBBC7BC3659D31");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ViolationVehicleData)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__Violation__Creat__0044C703");

                entity.HasOne(d => d.PlateCategory).WithMany(p => p.ViolationVehicleData)
                    .HasForeignKey(d => d.PlateCategoryId)
                    .HasConstraintName("FK__Violation__Plate__7F50A2CA");

                entity.HasOne(d => d.PlateColor).WithMany(p => p.ViolationVehicleData)
                    .HasForeignKey(d => d.PlateColorId)
                    .HasConstraintName("FK__Violation__Plate__7E5C7E91");

                entity.HasOne(d => d.PlateKind).WithMany(p => p.ViolationVehicleData)
                    .HasForeignKey(d => d.PlateKindId)
                    .HasConstraintName("FK__Violation__Plate__7D685A58");

                entity.HasOne(d => d.PlateSource).WithMany(p => p.ViolationVehicleData)
                    .HasForeignKey(d => d.PlateSourceId)
                    .HasConstraintName("FK__Violation__Plate__7C74361F");
            });

            modelBuilder.Entity<ViolationsStep>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Violatio__3214EC072ACB0A7A");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ViolationsSteps)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK__Violation__Creat__700E5F3A");

                entity.HasOne(d => d.Violation).WithMany(p => p.ViolationsSteps)
                    .HasForeignKey(d => d.ViolationId)
                    .HasConstraintName("FK__Violation__Viola__6E2616C8");

                entity.HasOne(d => d.ViolationStepDim).WithMany(p => p.ViolationsSteps)
                    .HasForeignKey(d => d.ViolationStepDimId)
                    .HasConstraintName("FK__Violation__Viola__6F1A3B01");
            });

            modelBuilder.Entity<ViolationsStepsRole>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK__Violatio__3214EC07D722263D");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);

                entity.HasOne(d => d.Role).WithMany(p => p.ViolationsStepsRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK__Violation__RoleI__1CE105B1");

                entity.HasOne(d => d.ViolationStepDim).WithMany(p => p.ViolationsStepsRoles)
                    .HasForeignKey(d => d.ViolationStepDimId)
                    .HasConstraintName("FK__Violation__Viola__1BECE178");
            });

            modelBuilder.Entity<VwAspnetApplication>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_aspnet_Applications");

                entity.Property(e => e.ApplicationName).HasMaxLength(256);
                entity.Property(e => e.Description).HasMaxLength(256);
                entity.Property(e => e.LoweredApplicationName).HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetMembershipUser>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_aspnet_MembershipUsers");

                entity.Property(e => e.Comment).HasColumnType("ntext");
                entity.Property(e => e.CreateDate).HasColumnType("datetime");
                entity.Property(e => e.Email).HasMaxLength(256);
                entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");
                entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");
                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");
                entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");
                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
                entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");
                entity.Property(e => e.LoweredEmail).HasMaxLength(256);
                entity.Property(e => e.MobileAlias).HasMaxLength(16);
                entity.Property(e => e.MobilePin)
                    .HasMaxLength(16)
                    .HasColumnName("MobilePIN");
                entity.Property(e => e.PasswordAnswer).HasMaxLength(128);
                entity.Property(e => e.PasswordQuestion).HasMaxLength(256);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetProfile>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_aspnet_Profiles");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwAspnetRole>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_aspnet_Roles");

                entity.Property(e => e.Description).HasMaxLength(256);
                entity.Property(e => e.LoweredRoleName).HasMaxLength(256);
                entity.Property(e => e.RoleName).HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetUser>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_aspnet_Users");

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");
                entity.Property(e => e.LoweredUserName).HasMaxLength(256);
                entity.Property(e => e.MobileAlias).HasMaxLength(16);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetUsersInRole>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_aspnet_UsersInRoles");
            });

            modelBuilder.Entity<VwAspnetWebPartStatePath>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_aspnet_WebPartState_Paths");

                entity.Property(e => e.LoweredPath).HasMaxLength(256);
                entity.Property(e => e.Path).HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetWebPartStateShared>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_aspnet_WebPartState_Shared");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwAspnetWebPartStateUser>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_aspnet_WebPartState_User");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwAttendanceHistoryLog>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_AttendanceHistoryLog");

                entity.Property(e => e.AreaName).HasMaxLength(200);
                entity.Property(e => e.CheckinDate).HasColumnType("datetime");
                entity.Property(e => e.CheckoutDate).HasColumnType("datetime");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.PatrolCode).HasMaxLength(50);
                entity.Property(e => e.PatrolPlateNumber).HasMaxLength(50);
                entity.Property(e => e.SectorId).HasColumnName("sectorId");
                entity.Property(e => e.SectorName).HasMaxLength(200);
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<VwBranchesSaaed>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("VW_Branches_Saaed");

                entity.Property(e => e.Name).HasMaxLength(500);
                entity.Property(e => e.ParentBranchName).HasMaxLength(500);
            });

            modelBuilder.Entity<VwDriverAccident>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("VW_DriverAccidents");

                entity.Property(e => e.DriverName).HasMaxLength(3000);
                entity.Property(e => e.MobileNumber).HasMaxLength(20);
                entity.Property(e => e.MobileNumberCoreDigits).HasMaxLength(9);
                entity.Property(e => e.PlateNumber).HasMaxLength(3000);
                entity.Property(e => e.PlateSource).HasMaxLength(100);
                entity.Property(e => e.ReportDateTime).HasColumnType("datetime");
                entity.Property(e => e.ReportNumber).HasMaxLength(100);
                entity.Property(e => e.ReportStatus).HasMaxLength(100);
                entity.Property(e => e.ReportType).HasMaxLength(100);
                entity.Property(e => e.VehicleDataType).HasMaxLength(100);
            });

            modelBuilder.Entity<VwIncidentArcfullDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_IncidentARCFullDetails");

                entity.Property(e => e.AccId)
                    .HasMaxLength(100)
                    .HasColumnName("ACC_ID");
                entity.Property(e => e.AccLocDesc)
                    .HasMaxLength(200)
                    .HasColumnName("ACC_LOC_DESC");
                entity.Property(e => e.AreaText).HasMaxLength(200);
                entity.Property(e => e.CityText).HasMaxLength(200);
                entity.Property(e => e.DriverBirthDate).HasColumnType("datetime");
                entity.Property(e => e.DriverDrinkingStatusText).HasMaxLength(100);
                entity.Property(e => e.DriverEducationLevelText).HasMaxLength(200);
                entity.Property(e => e.DriverGenderText).HasMaxLength(100);
                entity.Property(e => e.DriverLicenceExpDate).HasColumnType("datetime");
                entity.Property(e => e.DriverLicenceNo).HasMaxLength(3000);
                entity.Property(e => e.DriverLicenceSourceText).HasMaxLength(100);
                entity.Property(e => e.DriverName).HasMaxLength(3000);
                entity.Property(e => e.DriverNationalityText).HasMaxLength(100);
                entity.Property(e => e.DriverRunningStatusText).HasMaxLength(100);
                entity.Property(e => e.DriverStatusText).HasMaxLength(100);
                entity.Property(e => e.EmariteText).HasMaxLength(200);
                entity.Property(e => e.HoldDocumentPlaceText).HasMaxLength(100);
                entity.Property(e => e.HoldDocumentsText).HasMaxLength(100);
                entity.Property(e => e.IncidentDate).HasColumnType("datetime");
                entity.Property(e => e.IncidentNo).HasMaxLength(50);
                entity.Property(e => e.IncidentStatusText).HasMaxLength(100);
                entity.Property(e => e.IncidentTypeText).HasMaxLength(100);
                entity.Property(e => e.InsuranceCompanyText).HasMaxLength(100);
                entity.Property(e => e.InsuranceExpireDate).HasColumnType("datetime");
                entity.Property(e => e.InsuranceTypeText).HasMaxLength(100);
                entity.Property(e => e.IsMain)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_MAIN");
                entity.Property(e => e.ItemDescA)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_DESC_A");
                entity.Property(e => e.MdtaccidentBasicDetailsId).HasColumnName("MDTAccidentBasicDetailsId");
                entity.Property(e => e.ObjId).HasColumnName("OBJ_ID");
                entity.Property(e => e.ObjInjLvlTxt).HasColumnName("OBJ_INJ_LVL_TXT");
                entity.Property(e => e.ObjInjTxt).HasColumnName("OBJ_INJ_TXT");
                entity.Property(e => e.ObjOther).HasColumnName("OBJ_OTHER");
                entity.Property(e => e.ObjOwnerTxt).HasColumnName("OBJ_OWNER_TXT");
                entity.Property(e => e.ObjTypeTxt).HasColumnName("OBJ_TYPE_TXT");
                entity.Property(e => e.Other)
                    .HasMaxLength(500)
                    .HasColumnName("OTHER");
                entity.Property(e => e.OwnerName).HasMaxLength(3000);
                entity.Property(e => e.PlateClassText).HasMaxLength(200);
                entity.Property(e => e.PlateColorText).HasMaxLength(200);
                entity.Property(e => e.PlateNo).HasMaxLength(3000);
                entity.Property(e => e.PlateSourceText).HasMaxLength(100);
                entity.Property(e => e.PlateTypeText).HasMaxLength(200);
                entity.Property(e => e.RoadSpeedText).HasMaxLength(100);
                entity.Property(e => e.RoadSurfaceText).HasMaxLength(100);
                entity.Property(e => e.VecId).HasColumnName("VEC_ID");
                entity.Property(e => e.VehiclaMakeText).HasMaxLength(100);
                entity.Property(e => e.VehicleCollisionPointText).HasMaxLength(100);
                entity.Property(e => e.VehicleCountryText).HasMaxLength(50);
                entity.Property(e => e.VehicleKindText).HasMaxLength(150);
                entity.Property(e => e.VehicleModelText).HasMaxLength(100);
                entity.Property(e => e.VehicleProductingYear).HasMaxLength(100);
                entity.Property(e => e.VehicleStatusText).HasMaxLength(100);
                entity.Property(e => e.VehicleTypeText).HasMaxLength(100);
                entity.Property(e => e.VehiclesLiabilityText).HasMaxLength(100);
                entity.Property(e => e.WeatherText).HasMaxLength(100);
            });

            modelBuilder.Entity<VwIncidentRelatedItem>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_IncidentRelatedItem");

                entity.Property(e => e.ActivityCategoryCode).HasMaxLength(20);
                entity.Property(e => e.ActivityItemStatus).HasMaxLength(100);
                entity.Property(e => e.ActivityItemStatusCode).HasMaxLength(20);
                entity.Property(e => e.CodeNumber).HasMaxLength(50);
                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.OrganizationCategory).HasMaxLength(100);
                entity.Property(e => e.OrganizationCategoryCode).HasMaxLength(20);
                entity.Property(e => e.OrganizationName).HasMaxLength(250);
                entity.Property(e => e.SerialIdentification).HasMaxLength(50);
            });

            modelBuilder.Entity<VwIncidentsFullDetail>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_IncidentsFullDetails");

                entity.Property(e => e.Area)
                    .HasMaxLength(200)
                    .HasColumnName("AREA");
                entity.Property(e => e.CallTakerName)
                    .HasMaxLength(50)
                    .HasColumnName("CALL TAKER NAME");
                entity.Property(e => e.City)
                    .HasMaxLength(200)
                    .HasColumnName("CITY");
                entity.Property(e => e.ClosingComment)
                    .HasMaxLength(2)
                    .HasColumnName("CLOSING COMMENT");
                entity.Property(e => e.ClosingEndDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CLOSING END DATETIME");
                entity.Property(e => e.ClosingReasons)
                    .HasMaxLength(100)
                    .HasColumnName("CLOSING REASONS");
                entity.Property(e => e.ClosingStartDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CLOSING START DATETIME");
                entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
                entity.Property(e => e.DispatcherName)
                    .HasMaxLength(50)
                    .HasColumnName("DISPATCHER NAME");
                entity.Property(e => e.Emi)
                    .HasMaxLength(200)
                    .HasColumnName("EMI");
                entity.Property(e => e.FirstArrivalDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("FIRST ARRIVAL DATETIME");
                entity.Property(e => e.FirstArrivalReasons)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FIRST ARRIVAL REASONS");
                entity.Property(e => e.HandOverDocumentsDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("HAND OVER DOCUMENTS DATETIME");
                entity.Property(e => e.IncidentAssignmentDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("INCIDENT ASSIGNMENT DATETIME");
                entity.Property(e => e.IncidentDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("INCIDENT DATETIME");
                entity.Property(e => e.IncidentMasterId)
                    .HasMaxLength(50)
                    .HasColumnName("INCIDENT MASTER ID");
                entity.Property(e => e.IncidentSourceDescription)
                    .HasMaxLength(100)
                    .HasColumnName("INCIDENT SOURCE DESCRIPTION");
                entity.Property(e => e.IncidentTypeDescription)
                    .HasMaxLength(50)
                    .HasColumnName("INCIDENT TYPE DESCRIPTION");
                entity.Property(e => e.Latitude).HasColumnName("LATITUDE");
                entity.Property(e => e.Longitude).HasColumnName("LONGITUDE");
                entity.Property(e => e.PatrolCode)
                    .HasMaxLength(50)
                    .HasColumnName("PATROL CODE");
                entity.Property(e => e.PoliceDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("POLICE DATETIME");
                entity.Property(e => e.PoliceNo)
                    .HasMaxLength(255)
                    .HasColumnName("POLICE NO");
                entity.Property(e => e.SecondArrivalEndDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SECOND ARRIVAL End DATETIME");
                entity.Property(e => e.SecondArrivalReasons)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SECOND ARRIVAL REASONS");
                entity.Property(e => e.SecondArrivalStartDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SECOND ARRIVAL START DATETIME");
                entity.Property(e => e.SeverityStatus)
                    .HasMaxLength(100)
                    .HasColumnName("SEVERITY STATUS");
                entity.Property(e => e.SketchEndDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SKETCH End DATETIME");
                entity.Property(e => e.SketchStartDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SKETCH START DATETIME");
                entity.Property(e => e.SketchingReasons)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SKETCHING REASONS");
                entity.Property(e => e.TrafficExpertName)
                    .HasMaxLength(50)
                    .HasColumnName("TRAFFIC EXPERT NAME");
                entity.Property(e => e.TrafficExpertReceiveDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("TRAFFIC EXPERT RECEIVE DATETIME");
                entity.Property(e => e.TransferToPoliceCenterDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSFER TO POLICE CENTER DATETIME");
                entity.Property(e => e.TransferToPoliceCenterReasons)
                    .HasMaxLength(100)
                    .HasColumnName("TRANSFER TO POLICE CENTER REASONS");
                entity.Property(e => e.UserFullName)
                    .HasMaxLength(100)
                    .HasColumnName("USER FULL NAME");
                entity.Property(e => e.UserId).HasColumnName("USER ID");
            });

            modelBuilder.Entity<VwIncidentsFullDetailsSupport>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_IncidentsFullDetails_Support");

                entity.Property(e => e.Ambulanceend)
                    .HasColumnType("datetime")
                    .HasColumnName("AMBULANCEEND");
                entity.Property(e => e.Ambulancerequest)
                    .HasColumnType("datetime")
                    .HasColumnName("AMBULANCEREQUEST");
                entity.Property(e => e.Ambulancestart)
                    .HasColumnType("datetime")
                    .HasColumnName("AMBULANCESTART");
                entity.Property(e => e.Area)
                    .HasMaxLength(200)
                    .HasColumnName("AREA");
                entity.Property(e => e.CallTakerName)
                    .HasMaxLength(50)
                    .HasColumnName("CALL TAKER NAME");
                entity.Property(e => e.City)
                    .HasMaxLength(200)
                    .HasColumnName("CITY");
                entity.Property(e => e.Civildefenceend)
                    .HasColumnType("datetime")
                    .HasColumnName("CIVILDEFENCEEND");
                entity.Property(e => e.Civildefencerequest)
                    .HasColumnType("datetime")
                    .HasColumnName("CIVILDEFENCEREQUEST");
                entity.Property(e => e.Civildefencestart)
                    .HasColumnType("datetime")
                    .HasColumnName("CIVILDEFENCESTART");
                entity.Property(e => e.ClosingComment)
                    .HasMaxLength(2)
                    .HasColumnName("CLOSING COMMENT");
                entity.Property(e => e.ClosingEndDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CLOSING END DATETIME");
                entity.Property(e => e.ClosingReasons)
                    .HasMaxLength(100)
                    .HasColumnName("CLOSING REASONS");
                entity.Property(e => e.ClosingStartDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CLOSING START DATETIME");
                entity.Property(e => e.Description).HasColumnName("DESCRIPTION");
                entity.Property(e => e.DispatcherName)
                    .HasMaxLength(50)
                    .HasColumnName("DISPATCHER NAME");
                entity.Property(e => e.Electricityandwaterend)
                    .HasColumnType("datetime")
                    .HasColumnName("ELECTRICITYANDWATEREND");
                entity.Property(e => e.Electricityandwaterrequest)
                    .HasColumnType("datetime")
                    .HasColumnName("ELECTRICITYANDWATERREQUEST");
                entity.Property(e => e.Electricityandwaterstart)
                    .HasColumnType("datetime")
                    .HasColumnName("ELECTRICITYANDWATERSTART");
                entity.Property(e => e.Electricitysignaleend)
                    .HasColumnType("datetime")
                    .HasColumnName("ELECTRICITYSIGNALEEND");
                entity.Property(e => e.Electricitysignalerequest)
                    .HasColumnType("datetime")
                    .HasColumnName("ELECTRICITYSIGNALEREQUEST");
                entity.Property(e => e.Electricitysignalestart)
                    .HasColumnType("datetime")
                    .HasColumnName("ELECTRICITYSIGNALESTART");
                entity.Property(e => e.Emi)
                    .HasMaxLength(200)
                    .HasColumnName("EMI");
                entity.Property(e => e.FirstArrivalDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("FIRST ARRIVAL DATETIME");
                entity.Property(e => e.FirstArrivalReasons)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FIRST ARRIVAL REASONS");
                entity.Property(e => e.HandOverDocumentsDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("HAND OVER DOCUMENTS DATETIME");
                entity.Property(e => e.IncidentAssignmentDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("INCIDENT ASSIGNMENT DATETIME");
                entity.Property(e => e.IncidentDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("INCIDENT DATETIME");
                entity.Property(e => e.IncidentMasterId)
                    .HasMaxLength(50)
                    .HasColumnName("INCIDENT MASTER ID");
                entity.Property(e => e.IncidentSourceDescription)
                    .HasMaxLength(100)
                    .HasColumnName("INCIDENT SOURCE DESCRIPTION");
                entity.Property(e => e.IncidentTypeDescription)
                    .HasMaxLength(50)
                    .HasColumnName("INCIDENT TYPE DESCRIPTION");
                entity.Property(e => e.Latitude).HasColumnName("LATITUDE");
                entity.Property(e => e.Longitude).HasColumnName("LONGITUDE");
                entity.Property(e => e.Municipalityend)
                    .HasColumnType("datetime")
                    .HasColumnName("MUNICIPALITYEND");
                entity.Property(e => e.Municipalityrequest)
                    .HasColumnType("datetime")
                    .HasColumnName("MUNICIPALITYREQUEST");
                entity.Property(e => e.Municipalitystart)
                    .HasColumnType("datetime")
                    .HasColumnName("MUNICIPALITYSTART");
                entity.Property(e => e.PatrolCode)
                    .HasMaxLength(50)
                    .HasColumnName("PATROL CODE");
                entity.Property(e => e.PoliceDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("POLICE DATETIME");
                entity.Property(e => e.PoliceNo)
                    .HasMaxLength(255)
                    .HasColumnName("POLICE NO");
                entity.Property(e => e.Policepatrolend)
                    .HasColumnType("datetime")
                    .HasColumnName("POLICEPATROLEND");
                entity.Property(e => e.Policepatrolrequest)
                    .HasColumnType("datetime")
                    .HasColumnName("POLICEPATROLREQUEST");
                entity.Property(e => e.Policepatrolstart)
                    .HasColumnType("datetime")
                    .HasColumnName("POLICEPATROLSTART");
                entity.Property(e => e.SecondArrivalEndDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SECOND ARRIVAL End DATETIME");
                entity.Property(e => e.SecondArrivalReasons)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SECOND ARRIVAL REASONS");
                entity.Property(e => e.SecondArrivalStartDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SECOND ARRIVAL START DATETIME");
                entity.Property(e => e.SeverityStatus)
                    .HasMaxLength(100)
                    .HasColumnName("SEVERITY STATUS");
                entity.Property(e => e.SketchEndDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SKETCH End DATETIME");
                entity.Property(e => e.SketchStartDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("SKETCH START DATETIME");
                entity.Property(e => e.SketchingReasons)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SKETCHING REASONS");
                entity.Property(e => e.Towingend)
                    .HasColumnType("datetime")
                    .HasColumnName("TOWINGEND");
                entity.Property(e => e.Towingrequest)
                    .HasColumnType("datetime")
                    .HasColumnName("TOWINGREQUEST");
                entity.Property(e => e.Towingstart)
                    .HasColumnType("datetime")
                    .HasColumnName("TOWINGSTART");
                entity.Property(e => e.TrafficExpertName)
                    .HasMaxLength(50)
                    .HasColumnName("TRAFFIC EXPERT NAME");
                entity.Property(e => e.TrafficExpertReceiveDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("TRAFFIC EXPERT RECEIVE DATETIME");
                entity.Property(e => e.TransferToPoliceCenterDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANSFER TO POLICE CENTER DATETIME");
                entity.Property(e => e.TransferToPoliceCenterReasons)
                    .HasMaxLength(100)
                    .HasColumnName("TRANSFER TO POLICE CENTER REASONS");
                entity.Property(e => e.UserFullName)
                    .HasMaxLength(100)
                    .HasColumnName("USER FULL NAME");
                entity.Property(e => e.UserId).HasColumnName("USER ID");
            });

            modelBuilder.Entity<VwPatrolWorkflow>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_PatrolWorkflow");

                entity.Property(e => e.ActivityId).HasMaxLength(256);
                entity.Property(e => e.ActivityInstanceId).HasMaxLength(256);
                entity.Property(e => e.ActivityName).HasMaxLength(1024);
                entity.Property(e => e.ActivityRecordType).HasMaxLength(128);
                entity.Property(e => e.ActivityType).HasMaxLength(2048);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.State).HasMaxLength(128);
                entity.Property(e => e.TimeCreated).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwTran>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("VW_Trans");

                entity.Property(e => e.BranchName).HasMaxLength(500);
                entity.Property(e => e.Category).HasMaxLength(500);
                entity.Property(e => e.ChassisNumber).HasMaxLength(500);
                entity.Property(e => e.Code).HasMaxLength(500);
                entity.Property(e => e.CurrentMileage).HasColumnName("currentMileage");
                entity.Property(e => e.FullPlateNumber).HasMaxLength(500);
                entity.Property(e => e.ParentBranchId).HasColumnName("parentBranchId");
                entity.Property(e => e.ParentBranchName).HasMaxLength(500);
                entity.Property(e => e.PlateNoColor).HasMaxLength(500);
                entity.Property(e => e.PlateNoNumbers).HasMaxLength(500);
                entity.Property(e => e.ProductionYear).HasMaxLength(500);
                entity.Property(e => e.SpeedLimit).HasColumnName("Speed_Limit");
                entity.Property(e => e.TransporterBrand).HasMaxLength(500);
                entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
                entity.Property(e => e.TransporterModel).HasMaxLength(500);
                entity.Property(e => e.TransporterStatusName)
                    .HasMaxLength(500)
                    .HasColumnName("transporterStatusName");
                entity.Property(e => e.Type).HasMaxLength(500);
            });

            modelBuilder.Entity<VwTransportersSaaed>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToTable("VW_transporters_Saaed");

                entity.Property(e => e.BranchName).HasMaxLength(500);
                entity.Property(e => e.Category).HasMaxLength(500);
                entity.Property(e => e.ChassisNumber).HasMaxLength(500);
                entity.Property(e => e.Code).HasMaxLength(500);
                entity.Property(e => e.CurrentMileage).HasColumnName("currentMileage");
                entity.Property(e => e.FullPlateNumber).HasMaxLength(500);
                entity.Property(e => e.ParentBranchId).HasColumnName("parentBranchId");
                entity.Property(e => e.ParentBranchName).HasMaxLength(500);
                entity.Property(e => e.PlateNoColor).HasMaxLength(500);
                entity.Property(e => e.PlateNoNumbers).HasMaxLength(500);
                entity.Property(e => e.ProductionYear).HasMaxLength(500);
                entity.Property(e => e.SpeedLimit).HasColumnName("Speed Limit");
                entity.Property(e => e.TransporterBrand).HasMaxLength(500);
                entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
                entity.Property(e => e.TransporterModel).HasMaxLength(500);
                entity.Property(e => e.TransporterStatusName)
                    .HasMaxLength(500)
                    .HasColumnName("transporterStatusName");
                entity.Property(e => e.Type).HasMaxLength(500);
            });

            modelBuilder.Entity<VwUserBasicInfo>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_UserBasicInfo");

                entity.Property(e => e.ContactInformation).HasMaxLength(100);
                entity.Property(e => e.FirstName).HasMaxLength(50);
                entity.Property(e => e.LastName).HasMaxLength(50);
                entity.Property(e => e.MiddleName).HasMaxLength(50);
                entity.Property(e => e.PersonId).HasColumnName("PersonID");
                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<VwUserCheckupActivityRole>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_UserCheckupActivityRole");

                entity.Property(e => e.RoleCategory).HasMaxLength(250);
            });

            modelBuilder.Entity<VwUserLoginLastActivity>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_UserLoginLastActivity");

                entity.Property(e => e.Code).HasMaxLength(20);
            });

            modelBuilder.Entity<VwUserRole>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("vw_UserRoles");

                entity.Property(e => e.RoleCategory).HasMaxLength(250);
                entity.Property(e => e.RoleCategoryCode).HasMaxLength(20);
                entity.Property(e => e.RoleName).HasMaxLength(256);
            });

            modelBuilder.Entity<Warrant>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_Warrant_1")
                    .HasFillFactor(80);

                entity.ToTable("Warrant");

                entity.Property(e => e.ActivityId).ValueGeneratedNever();
                entity.Property(e => e.WarrantAppearanceBailForfeitId).HasDefaultValue(1);
                entity.Property(e => e.WarrantCategoryId).HasDefaultValue(1);
                entity.Property(e => e.WarrantExtraditionLimitationId).HasDefaultValue(1);
                entity.Property(e => e.WarrantFurtherProcessingId).HasDefaultValue(1);
                entity.Property(e => e.WarrantLevelId).HasDefaultValue(1);
                entity.Property(e => e.WarrantProbableCauseId).HasDefaultValue(1);

                entity.HasOne(d => d.Activity).WithOne(p => p.Warrant)
                    .HasForeignKey<Warrant>(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Warrant_Activity");

                entity.HasOne(d => d.WarrantAppearanceBailForfeit).WithMany(p => p.Warrants)
                    .HasForeignKey(d => d.WarrantAppearanceBailForfeitId)
                    .HasConstraintName("FK_Warrant_WarrantAppearanceBailForfeitDIM");

                entity.HasOne(d => d.WarrantCategory).WithMany(p => p.Warrants)
                    .HasForeignKey(d => d.WarrantCategoryId)
                    .HasConstraintName("FK_Warrant_WarrantCategoryDIM");

                entity.HasOne(d => d.WarrantExtraditionLimitation).WithMany(p => p.Warrants)
                    .HasForeignKey(d => d.WarrantExtraditionLimitationId)
                    .HasConstraintName("FK_Warrant_WarrantExtraditionLimitationDIM");

                entity.HasOne(d => d.WarrantFurtherProcessing).WithMany(p => p.Warrants)
                    .HasForeignKey(d => d.WarrantFurtherProcessingId)
                    .HasConstraintName("FK_Warrant_WarrantFurtherProcessingDIM");

                entity.HasOne(d => d.WarrantLevel).WithMany(p => p.Warrants)
                    .HasForeignKey(d => d.WarrantLevelId)
                    .HasConstraintName("FK_Warrant_WarrantLevelDIM");

                entity.HasOne(d => d.WarrantProbableCause).WithMany(p => p.Warrants)
                    .HasForeignKey(d => d.WarrantProbableCauseId)
                    .HasConstraintName("FK_Warrant_WarrantProbableCauseDIM");
            });

            modelBuilder.Entity<WarrantAppearanceBail>(entity =>
            {
                entity.HasKey(e => e.WarrantAppearanceBailId)
                    .HasName("PK_WarrantApearanceBail")
                    .HasFillFactor(80);

                entity.ToTable("WarrantAppearanceBail");

                entity.Property(e => e.CreateDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.ModifiedDateTimeStamp)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.WarrantAppearanceBailDescription).HasMaxLength(300);
                entity.Property(e => e.WarrantAppearanceBailGuid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Activity).WithMany(p => p.WarrantAppearanceBails)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WarrantAppearanceBail_Activity");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.WarrantAppearanceBails)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_WarrantAppearanceBail_RowStatusDIM");

                entity.HasOne(d => d.Source).WithMany(p => p.WarrantAppearanceBails)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WarrantAppearanceBail_Source");
            });

            modelBuilder.Entity<WarrantAppearanceBailContainerGuidView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WarrantAppearanceBailContainerGuidView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantAppearanceBailDescription).HasMaxLength(300);
            });

            modelBuilder.Entity<WarrantAppearanceBailContainerView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WarrantAppearanceBailContainerView");

                entity.Property(e => e.CreateDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.ModifiedDateTimeStamp).HasColumnType("datetime");
                entity.Property(e => e.RowStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.RowStatusDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.SourceName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
                entity.Property(e => e.WarrantAppearanceBailDescription).HasMaxLength(300);
                entity.Property(e => e.WarrantAppearanceBailId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<WarrantAppearanceBailForfeitDim>(entity =>
            {
                entity.HasKey(e => e.WarrantAppearanceBailForfeitId)
                    .HasName("WarrantAppearanceBailForfeitDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("WarrantAppearanceBailForfeitDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.WarrantAppearanceBailForfeitDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_WarrantAppearanceBailForfeitDIM_RowStatusDIM");
            });

            modelBuilder.Entity<WarrantAppearanceBailForfeitDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WarrantAppearanceBailForfeitDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.WarrantAppearanceBailForfeitCode).HasMaxLength(20);
                entity.Property(e => e.WarrantAppearanceBailForfeitDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<WarrantCategoryDim>(entity =>
            {
                entity.HasKey(e => e.WarrantCategoryId)
                    .HasName("PK__WarrantC__7C670DCBD0F2F802")
                    .HasFillFactor(80);

                entity.ToTable("WarrantCategoryDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.WarrantCategoryDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_WarrantCategoryDIM_RowStatusDIM");
            });

            modelBuilder.Entity<WarrantCategoryDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WarrantCategoryDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.WarrantCategoryCode).HasMaxLength(20);
                entity.Property(e => e.WarrantCategoryDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<WarrantExtraditionLimitationDim>(entity =>
            {
                entity.HasKey(e => e.WarrantExtraditionLimitationId)
                    .HasName("WarrantExtraditionLimitationDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("WarrantExtraditionLimitationDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(255);
                entity.Property(e => e.Ncic)
                    .HasMaxLength(20)
                    .HasColumnName("NCIC");
                entity.Property(e => e.Type).HasMaxLength(20);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.WarrantExtraditionLimitationDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_WarrantExtraditionLimitationDIM_RowStatusDIM");
            });

            modelBuilder.Entity<WarrantExtraditionLimitationDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WarrantExtraditionLimitationDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.WarrantExtraditionLimitationCode).HasMaxLength(20);
                entity.Property(e => e.WarrantExtraditionLimitationDescription).HasMaxLength(255);
            });

            modelBuilder.Entity<WarrantFurtherProcessingDim>(entity =>
            {
                entity.HasKey(e => e.WarrantFurtherProcessingId)
                    .HasName("WarrantFurtherProcessingDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("WarrantFurtherProcessingDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.WarrantFurtherProcessingDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_WarrantFurtherProcessingDIM_RowStatusDIM");
            });

            modelBuilder.Entity<WarrantFurtherProcessingDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WarrantFurtherProcessingDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.WarrantFurtherProcessingCode).HasMaxLength(20);
                entity.Property(e => e.WarrantFurtherProcessingDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<WarrantLevelDim>(entity =>
            {
                entity.HasKey(e => e.WarrantLevelId)
                    .HasName("WarrantLevelDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("WarrantLevelDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.WarrantLevelDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_WarrantLevelDIM_RowStatusDIM");
            });

            modelBuilder.Entity<WarrantLevelDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WarrantLevelDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.WarrantLevelCode).HasMaxLength(20);
                entity.Property(e => e.WarrantLevelDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<WarrantProbableCauseDim>(entity =>
            {
                entity.HasKey(e => e.WarrantProbableCauseId).HasFillFactor(80);

                entity.ToTable("WarrantProbableCauseDIM");

                entity.Property(e => e.Code).HasMaxLength(20);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.WarrantProbableCauseDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_WarrantProbableCauseDIM_RowStatusDIM");
            });

            modelBuilder.Entity<WarrantProbableCauseDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WarrantProbableCauseDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.WarrantProbableCauseCode).HasMaxLength(20);
                entity.Property(e => e.WarrantProbableCauseDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<WeatherDim>(entity =>
            {
                entity.HasKey(e => e.WeatherId)
                    .HasName("PK__WeatherD__0BF97BF533A769A5")
                    .HasFillFactor(80);

                entity.ToTable("WeatherDIM");

                entity.HasIndex(e => e.IsDefaultForReportConstruction, "UNQ_WeatherDIM_IsDefaultForReportConstruction")
                    .IsUnique()
                    .HasFilter("([IsDefaultForReportConstruction]=(1))");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.WeatherDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_WeatherDIM_RowStatusDIM");
            });

            modelBuilder.Entity<WebApiRequestsLog>(entity =>
            {
                entity.ToTable("WebApi_RequestsLog");

                entity.Property(e => e.ActionName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.DetailedMessage).IsUnicode(false);
                entity.Property(e => e.HttpStatusCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("IPAddress");
                entity.Property(e => e.MachineName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
                entity.Property(e => e.RequestId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("RequestID");
                entity.Property(e => e.RequestParameters).HasMaxLength(4000);
                entity.Property(e => e.RequestPath)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
                entity.Property(e => e.UserAgent)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WeightMeasureUnitDim>(entity =>
            {
                entity.HasKey(e => e.WeightMeasureUnitId)
                    .HasName("WeightMeasureUnitDIM_PK")
                    .HasFillFactor(80);

                entity.ToTable("WeightMeasureUnitDIM");

                entity.Property(e => e.Code).HasMaxLength(10);
                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RowStatus).WithMany(p => p.WeightMeasureUnitDims)
                    .HasForeignKey(d => d.RowStatusId)
                    .HasConstraintName("FK_WeightMeasureUnitDIM_RowStatusDIM");
            });

            modelBuilder.Entity<WeightMeasureUnitDimcodeView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WeightMeasureUnitDIMCodeView");

                entity.Property(e => e.RowStatusCode).HasMaxLength(50);
                entity.Property(e => e.WeightMeasureUnitCode).HasMaxLength(10);
                entity.Property(e => e.WeightMeasureUnitDescription).HasMaxLength(100);
            });

            modelBuilder.Entity<WfdelayTimeSpanView>(entity =>
            {
                entity
                    .HasNoKey()
                    .ToView("WFDelayTimeSpanView");

                entity.Property(e => e.Step)
                    .HasMaxLength(35)
                    .IsUnicode(false);
                entity.Property(e => e.Wf)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("WF");
            });

            modelBuilder.Entity<Wittness>(entity =>
            {
                entity.HasKey(e => e.WittnessId)
                    .HasName("PK__Wittness__53ABC22F7337C07C")
                    .HasFillFactor(80);

                entity.ToTable("Wittness");

                entity.Property(e => e.CreatedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.MobileNumber).HasMaxLength(100);
                entity.Property(e => e.ModifiedDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.TrafficCode).HasMaxLength(100);
                entity.Property(e => e.WittnessName).HasMaxLength(3000);
                entity.Property(e => e.WittnessTestimony).HasMaxLength(3000);

                entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Wittnesses)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Wittness_Person");

                entity.HasOne(d => d.Nationality).WithMany(p => p.Wittnesses)
                    .HasForeignKey(d => d.NationalityId)
                    .HasConstraintName("FK_Wittness_Nationality");
            });

            modelBuilder.Entity<WorkerProcessLog>(entity =>
            {
                entity.ToTable("WorkerProcessLog");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ClassName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.MethodName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<WorkflowInstanceEventsTable>(entity =>
            {
                entity.HasKey(e => e.Id).HasName("PK_WorkflowInstanceEventsTable_Id");

                entity.ToTable("WorkflowInstanceEventsTable", "Microsoft.Samples.Tracking");

                entity.Property(e => e.Reason).HasMaxLength(2048);
                entity.Property(e => e.State).HasMaxLength(128);
                entity.Property(e => e.TimeCreated).HasColumnType("datetime");
                entity.Property(e => e.WorkflowActivityDefinition).HasMaxLength(256);
            });

            modelBuilder.Entity<YearDim>(entity =>
            {
                entity.HasKey(e => e.YearId)
                    .HasName("PK__YearDim__C33A18CDBB240015")
                    .HasFillFactor(80);

                entity.ToTable("YearDim");

                entity.Property(e => e.Description).HasMaxLength(100);
                entity.Property(e => e.IsDeleted).HasDefaultValue(false);
                entity.Property(e => e.TimeStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();
                entity.Property(e => e.VersionDateTime)
                    .HasDefaultValueSql("(getdate())")
                    .HasColumnType("datetime");

                //    entity.HasOne(d => d.RowStatus).WithMany(p => p.YearDims)
                //        .HasForeignKey(d => d.RowStatusId)
                //        .HasConstraintName("FK_YearDim_RowStatusDIM");
            });


        }

    }
}
